
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084c0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008698  08008698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d8  080086d8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086e0  080086e0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e0  080086e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086e4  080086e4  000186e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080086e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000098  08008780  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08008780  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a39  00000000  00000000  0002010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000343f  00000000  00000000  00039b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  0003cf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001083  00000000  00000000  0003e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002924b  00000000  00000000  0003f553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a60c  00000000  00000000  0006879e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112bde  00000000  00000000  00082daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b6c  00000000  00000000  00195988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0019b4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000098 	.word	0x20000098
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008680 	.word	0x08008680

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000009c 	.word	0x2000009c
 8000214:	08008680 	.word	0x08008680

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2iz>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d215      	bcs.n	800082a <__aeabi_d2iz+0x36>
 80007fe:	d511      	bpl.n	8000824 <__aeabi_d2iz+0x30>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d912      	bls.n	8000830 <__aeabi_d2iz+0x3c>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800081a:	fa23 f002 	lsr.w	r0, r3, r2
 800081e:	bf18      	it	ne
 8000820:	4240      	negne	r0, r0
 8000822:	4770      	bx	lr
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	4770      	bx	lr
 800082a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800082e:	d105      	bne.n	800083c <__aeabi_d2iz+0x48>
 8000830:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000834:	bf08      	it	eq
 8000836:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800083a:	4770      	bx	lr
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b970 	b.w	8000b3c <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9e08      	ldr	r6, [sp, #32]
 800087a:	460d      	mov	r5, r1
 800087c:	4604      	mov	r4, r0
 800087e:	460f      	mov	r7, r1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d14a      	bne.n	800091a <__udivmoddi4+0xa6>
 8000884:	428a      	cmp	r2, r1
 8000886:	4694      	mov	ip, r2
 8000888:	d965      	bls.n	8000956 <__udivmoddi4+0xe2>
 800088a:	fab2 f382 	clz	r3, r2
 800088e:	b143      	cbz	r3, 80008a2 <__udivmoddi4+0x2e>
 8000890:	fa02 fc03 	lsl.w	ip, r2, r3
 8000894:	f1c3 0220 	rsb	r2, r3, #32
 8000898:	409f      	lsls	r7, r3
 800089a:	fa20 f202 	lsr.w	r2, r0, r2
 800089e:	4317      	orrs	r7, r2
 80008a0:	409c      	lsls	r4, r3
 80008a2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008a6:	fa1f f58c 	uxth.w	r5, ip
 80008aa:	fbb7 f1fe 	udiv	r1, r7, lr
 80008ae:	0c22      	lsrs	r2, r4, #16
 80008b0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008b4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008b8:	fb01 f005 	mul.w	r0, r1, r5
 80008bc:	4290      	cmp	r0, r2
 80008be:	d90a      	bls.n	80008d6 <__udivmoddi4+0x62>
 80008c0:	eb1c 0202 	adds.w	r2, ip, r2
 80008c4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008c8:	f080 811c 	bcs.w	8000b04 <__udivmoddi4+0x290>
 80008cc:	4290      	cmp	r0, r2
 80008ce:	f240 8119 	bls.w	8000b04 <__udivmoddi4+0x290>
 80008d2:	3902      	subs	r1, #2
 80008d4:	4462      	add	r2, ip
 80008d6:	1a12      	subs	r2, r2, r0
 80008d8:	b2a4      	uxth	r4, r4
 80008da:	fbb2 f0fe 	udiv	r0, r2, lr
 80008de:	fb0e 2210 	mls	r2, lr, r0, r2
 80008e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008e6:	fb00 f505 	mul.w	r5, r0, r5
 80008ea:	42a5      	cmp	r5, r4
 80008ec:	d90a      	bls.n	8000904 <__udivmoddi4+0x90>
 80008ee:	eb1c 0404 	adds.w	r4, ip, r4
 80008f2:	f100 32ff 	add.w	r2, r0, #4294967295
 80008f6:	f080 8107 	bcs.w	8000b08 <__udivmoddi4+0x294>
 80008fa:	42a5      	cmp	r5, r4
 80008fc:	f240 8104 	bls.w	8000b08 <__udivmoddi4+0x294>
 8000900:	4464      	add	r4, ip
 8000902:	3802      	subs	r0, #2
 8000904:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000908:	1b64      	subs	r4, r4, r5
 800090a:	2100      	movs	r1, #0
 800090c:	b11e      	cbz	r6, 8000916 <__udivmoddi4+0xa2>
 800090e:	40dc      	lsrs	r4, r3
 8000910:	2300      	movs	r3, #0
 8000912:	e9c6 4300 	strd	r4, r3, [r6]
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	428b      	cmp	r3, r1
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0xbc>
 800091e:	2e00      	cmp	r6, #0
 8000920:	f000 80ed 	beq.w	8000afe <__udivmoddi4+0x28a>
 8000924:	2100      	movs	r1, #0
 8000926:	e9c6 0500 	strd	r0, r5, [r6]
 800092a:	4608      	mov	r0, r1
 800092c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000930:	fab3 f183 	clz	r1, r3
 8000934:	2900      	cmp	r1, #0
 8000936:	d149      	bne.n	80009cc <__udivmoddi4+0x158>
 8000938:	42ab      	cmp	r3, r5
 800093a:	d302      	bcc.n	8000942 <__udivmoddi4+0xce>
 800093c:	4282      	cmp	r2, r0
 800093e:	f200 80f8 	bhi.w	8000b32 <__udivmoddi4+0x2be>
 8000942:	1a84      	subs	r4, r0, r2
 8000944:	eb65 0203 	sbc.w	r2, r5, r3
 8000948:	2001      	movs	r0, #1
 800094a:	4617      	mov	r7, r2
 800094c:	2e00      	cmp	r6, #0
 800094e:	d0e2      	beq.n	8000916 <__udivmoddi4+0xa2>
 8000950:	e9c6 4700 	strd	r4, r7, [r6]
 8000954:	e7df      	b.n	8000916 <__udivmoddi4+0xa2>
 8000956:	b902      	cbnz	r2, 800095a <__udivmoddi4+0xe6>
 8000958:	deff      	udf	#255	; 0xff
 800095a:	fab2 f382 	clz	r3, r2
 800095e:	2b00      	cmp	r3, #0
 8000960:	f040 8090 	bne.w	8000a84 <__udivmoddi4+0x210>
 8000964:	1a8a      	subs	r2, r1, r2
 8000966:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800096a:	fa1f fe8c 	uxth.w	lr, ip
 800096e:	2101      	movs	r1, #1
 8000970:	fbb2 f5f7 	udiv	r5, r2, r7
 8000974:	fb07 2015 	mls	r0, r7, r5, r2
 8000978:	0c22      	lsrs	r2, r4, #16
 800097a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800097e:	fb0e f005 	mul.w	r0, lr, r5
 8000982:	4290      	cmp	r0, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x124>
 8000986:	eb1c 0202 	adds.w	r2, ip, r2
 800098a:	f105 38ff 	add.w	r8, r5, #4294967295
 800098e:	d202      	bcs.n	8000996 <__udivmoddi4+0x122>
 8000990:	4290      	cmp	r0, r2
 8000992:	f200 80cb 	bhi.w	8000b2c <__udivmoddi4+0x2b8>
 8000996:	4645      	mov	r5, r8
 8000998:	1a12      	subs	r2, r2, r0
 800099a:	b2a4      	uxth	r4, r4
 800099c:	fbb2 f0f7 	udiv	r0, r2, r7
 80009a0:	fb07 2210 	mls	r2, r7, r0, r2
 80009a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009a8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x14e>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009b8:	d202      	bcs.n	80009c0 <__udivmoddi4+0x14c>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	f200 80bb 	bhi.w	8000b36 <__udivmoddi4+0x2c2>
 80009c0:	4610      	mov	r0, r2
 80009c2:	eba4 040e 	sub.w	r4, r4, lr
 80009c6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ca:	e79f      	b.n	800090c <__udivmoddi4+0x98>
 80009cc:	f1c1 0720 	rsb	r7, r1, #32
 80009d0:	408b      	lsls	r3, r1
 80009d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009da:	fa05 f401 	lsl.w	r4, r5, r1
 80009de:	fa20 f307 	lsr.w	r3, r0, r7
 80009e2:	40fd      	lsrs	r5, r7
 80009e4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e8:	4323      	orrs	r3, r4
 80009ea:	fbb5 f8f9 	udiv	r8, r5, r9
 80009ee:	fa1f fe8c 	uxth.w	lr, ip
 80009f2:	fb09 5518 	mls	r5, r9, r8, r5
 80009f6:	0c1c      	lsrs	r4, r3, #16
 80009f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009fc:	fb08 f50e 	mul.w	r5, r8, lr
 8000a00:	42a5      	cmp	r5, r4
 8000a02:	fa02 f201 	lsl.w	r2, r2, r1
 8000a06:	fa00 f001 	lsl.w	r0, r0, r1
 8000a0a:	d90b      	bls.n	8000a24 <__udivmoddi4+0x1b0>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a14:	f080 8088 	bcs.w	8000b28 <__udivmoddi4+0x2b4>
 8000a18:	42a5      	cmp	r5, r4
 8000a1a:	f240 8085 	bls.w	8000b28 <__udivmoddi4+0x2b4>
 8000a1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a22:	4464      	add	r4, ip
 8000a24:	1b64      	subs	r4, r4, r5
 8000a26:	b29d      	uxth	r5, r3
 8000a28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a38:	45a6      	cmp	lr, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x1da>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a44:	d26c      	bcs.n	8000b20 <__udivmoddi4+0x2ac>
 8000a46:	45a6      	cmp	lr, r4
 8000a48:	d96a      	bls.n	8000b20 <__udivmoddi4+0x2ac>
 8000a4a:	3b02      	subs	r3, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a52:	fba3 9502 	umull	r9, r5, r3, r2
 8000a56:	eba4 040e 	sub.w	r4, r4, lr
 8000a5a:	42ac      	cmp	r4, r5
 8000a5c:	46c8      	mov	r8, r9
 8000a5e:	46ae      	mov	lr, r5
 8000a60:	d356      	bcc.n	8000b10 <__udivmoddi4+0x29c>
 8000a62:	d053      	beq.n	8000b0c <__udivmoddi4+0x298>
 8000a64:	b156      	cbz	r6, 8000a7c <__udivmoddi4+0x208>
 8000a66:	ebb0 0208 	subs.w	r2, r0, r8
 8000a6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a72:	40ca      	lsrs	r2, r1
 8000a74:	40cc      	lsrs	r4, r1
 8000a76:	4317      	orrs	r7, r2
 8000a78:	e9c6 7400 	strd	r7, r4, [r6]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a84:	f1c3 0120 	rsb	r1, r3, #32
 8000a88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a90:	fa25 f101 	lsr.w	r1, r5, r1
 8000a94:	409d      	lsls	r5, r3
 8000a96:	432a      	orrs	r2, r5
 8000a98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9c:	fa1f fe8c 	uxth.w	lr, ip
 8000aa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000aa8:	0c11      	lsrs	r1, r2, #16
 8000aaa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aae:	fb00 f50e 	mul.w	r5, r0, lr
 8000ab2:	428d      	cmp	r5, r1
 8000ab4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x258>
 8000aba:	eb1c 0101 	adds.w	r1, ip, r1
 8000abe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ac2:	d22f      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000ac4:	428d      	cmp	r5, r1
 8000ac6:	d92d      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000ac8:	3802      	subs	r0, #2
 8000aca:	4461      	add	r1, ip
 8000acc:	1b49      	subs	r1, r1, r5
 8000ace:	b292      	uxth	r2, r2
 8000ad0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ad4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ad8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000adc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ae0:	4291      	cmp	r1, r2
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x282>
 8000ae4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aec:	d216      	bcs.n	8000b1c <__udivmoddi4+0x2a8>
 8000aee:	4291      	cmp	r1, r2
 8000af0:	d914      	bls.n	8000b1c <__udivmoddi4+0x2a8>
 8000af2:	3d02      	subs	r5, #2
 8000af4:	4462      	add	r2, ip
 8000af6:	1a52      	subs	r2, r2, r1
 8000af8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000afc:	e738      	b.n	8000970 <__udivmoddi4+0xfc>
 8000afe:	4631      	mov	r1, r6
 8000b00:	4630      	mov	r0, r6
 8000b02:	e708      	b.n	8000916 <__udivmoddi4+0xa2>
 8000b04:	4639      	mov	r1, r7
 8000b06:	e6e6      	b.n	80008d6 <__udivmoddi4+0x62>
 8000b08:	4610      	mov	r0, r2
 8000b0a:	e6fb      	b.n	8000904 <__udivmoddi4+0x90>
 8000b0c:	4548      	cmp	r0, r9
 8000b0e:	d2a9      	bcs.n	8000a64 <__udivmoddi4+0x1f0>
 8000b10:	ebb9 0802 	subs.w	r8, r9, r2
 8000b14:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	e7a3      	b.n	8000a64 <__udivmoddi4+0x1f0>
 8000b1c:	4645      	mov	r5, r8
 8000b1e:	e7ea      	b.n	8000af6 <__udivmoddi4+0x282>
 8000b20:	462b      	mov	r3, r5
 8000b22:	e794      	b.n	8000a4e <__udivmoddi4+0x1da>
 8000b24:	4640      	mov	r0, r8
 8000b26:	e7d1      	b.n	8000acc <__udivmoddi4+0x258>
 8000b28:	46d0      	mov	r8, sl
 8000b2a:	e77b      	b.n	8000a24 <__udivmoddi4+0x1b0>
 8000b2c:	3d02      	subs	r5, #2
 8000b2e:	4462      	add	r2, ip
 8000b30:	e732      	b.n	8000998 <__udivmoddi4+0x124>
 8000b32:	4608      	mov	r0, r1
 8000b34:	e70a      	b.n	800094c <__udivmoddi4+0xd8>
 8000b36:	4464      	add	r4, ip
 8000b38:	3802      	subs	r0, #2
 8000b3a:	e742      	b.n	80009c2 <__udivmoddi4+0x14e>

08000b3c <__aeabi_idiv0>:
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2220      	movs	r2, #32
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f007 fd65 	bl	8008628 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b5e:	4b32      	ldr	r3, [pc, #200]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000b60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b66:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000b68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b74:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b80:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b86:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000b88:	2204      	movs	r2, #4
 8000b8a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b8c:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b9e:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc8:	4817      	ldr	r0, [pc, #92]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000bca:	f001 fa85 	bl	80020d8 <HAL_ADC_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000bd4:	f000 fb8e 	bl	80012f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4811      	ldr	r0, [pc, #68]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000be4:	f002 f8a0 	bl	8002d28 <HAL_ADCEx_MultiModeConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000bee:	f000 fb81 	bl	80012f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_ADC1_Init+0xec>)
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf6:	2306      	movs	r3, #6
 8000bf8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bfe:	237f      	movs	r3, #127	; 0x7f
 8000c00:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c02:	2304      	movs	r3, #4
 8000c04:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000c10:	f001 fc24 	bl	800245c <HAL_ADC_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c1a:	f000 fb6b 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	3730      	adds	r7, #48	; 0x30
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000b4 	.word	0x200000b4
 8000c2c:	21800100 	.word	0x21800100

08000c30 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2220      	movs	r2, #32
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f007 fcf3 	bl	8008628 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c42:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c44:	4a2b      	ldr	r2, [pc, #172]	; (8000cf4 <MX_ADC2_Init+0xc4>)
 8000c46:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c4a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c4e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c56:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000c5c:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c62:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c74:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000caa:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000cac:	f001 fa14 	bl	80020d8 <HAL_ADC_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000cb6:	f000 fb1d 	bl	80012f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_ADC2_Init+0xc8>)
 8000cbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cbe:	2306      	movs	r3, #6
 8000cc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cc6:	237f      	movs	r3, #127	; 0x7f
 8000cc8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_ADC2_Init+0xc0>)
 8000cd8:	f001 fbc0 	bl	800245c <HAL_ADC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000ce2:	f000 fb07 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3720      	adds	r7, #32
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000120 	.word	0x20000120
 8000cf4:	50000100 	.word	0x50000100
 8000cf8:	19200040 	.word	0x19200040

08000cfc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0a4      	sub	sp, #144	; 0x90
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d18:	2254      	movs	r2, #84	; 0x54
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f007 fc83 	bl	8008628 <memset>
  if(adcHandle->Instance==ADC1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d2a:	d174      	bne.n	8000e16 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d32:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d36:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 fa73 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d48:	f000 fad4 	bl	80012f4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d4c:	4b63      	ldr	r3, [pc, #396]	; (8000edc <HAL_ADC_MspInit+0x1e0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	3301      	adds	r3, #1
 8000d52:	4a62      	ldr	r2, [pc, #392]	; (8000edc <HAL_ADC_MspInit+0x1e0>)
 8000d54:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d56:	4b61      	ldr	r3, [pc, #388]	; (8000edc <HAL_ADC_MspInit+0x1e0>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d10b      	bne.n	8000d76 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d5e:	4b60      	ldr	r3, [pc, #384]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a5f      	ldr	r2, [pc, #380]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000d64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b5d      	ldr	r3, [pc, #372]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	4b5a      	ldr	r3, [pc, #360]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a59      	ldr	r2, [pc, #356]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b57      	ldr	r3, [pc, #348]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	623b      	str	r3, [r7, #32]
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b54      	ldr	r3, [pc, #336]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a53      	ldr	r2, [pc, #332]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b51      	ldr	r3, [pc, #324]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b4e      	ldr	r3, [pc, #312]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a4d      	ldr	r2, [pc, #308]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b4b      	ldr	r3, [pc, #300]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4843      	ldr	r0, [pc, #268]	; (8000ee4 <HAL_ADC_MspInit+0x1e8>)
 8000dd6:	f002 fa4f 	bl	8003278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dde:	2303      	movs	r3, #3
 8000de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dee:	4619      	mov	r1, r3
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df4:	f002 fa40 	bl	8003278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4836      	ldr	r0, [pc, #216]	; (8000ee8 <HAL_ADC_MspInit+0x1ec>)
 8000e10:	f002 fa32 	bl	8003278 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000e14:	e05e      	b.n	8000ed4 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a34      	ldr	r2, [pc, #208]	; (8000eec <HAL_ADC_MspInit+0x1f0>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d159      	bne.n	8000ed4 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 f9f9 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000e3c:	f000 fa5a 	bl	80012f4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <HAL_ADC_MspInit+0x1e0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a25      	ldr	r2, [pc, #148]	; (8000edc <HAL_ADC_MspInit+0x1e0>)
 8000e48:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e4a:	4b24      	ldr	r3, [pc, #144]	; (8000edc <HAL_ADC_MspInit+0x1e0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d10b      	bne.n	8000e6a <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000e58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a16      	ldr	r2, [pc, #88]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_ADC_MspInit+0x1e4>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000e9a:	230b      	movs	r3, #11
 8000e9c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <HAL_ADC_MspInit+0x1e8>)
 8000eb2:	f002 f9e1 	bl	8003278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f002 f9d2 	bl	8003278 <HAL_GPIO_Init>
}
 8000ed4:	bf00      	nop
 8000ed6:	3790      	adds	r7, #144	; 0x90
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000018c 	.word	0x2000018c
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	48000800 	.word	0x48000800
 8000ee8:	48000400 	.word	0x48000400
 8000eec:	50000100 	.word	0x50000100

08000ef0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a3e      	ldr	r2, [pc, #248]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b3c      	ldr	r3, [pc, #240]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a38      	ldr	r2, [pc, #224]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f24:	f043 0320 	orr.w	r3, r3, #32
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b36      	ldr	r3, [pc, #216]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0320 	and.w	r3, r3, #32
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b33      	ldr	r3, [pc, #204]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a32      	ldr	r2, [pc, #200]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a2c      	ldr	r2, [pc, #176]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a26      	ldr	r2, [pc, #152]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2120      	movs	r1, #32
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f002 faf9 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	481e      	ldr	r0, [pc, #120]	; (8001008 <MX_GPIO_Init+0x118>)
 8000f90:	f002 faf4 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4818      	ldr	r0, [pc, #96]	; (800100c <MX_GPIO_Init+0x11c>)
 8000fac:	f002 f964 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fca:	f002 f955 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <MX_GPIO_Init+0x118>)
 8000fe6:	f002 f947 	bl	8003278 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	2028      	movs	r0, #40	; 0x28
 8000ff0:	f002 f85a 	bl	80030a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ff4:	2028      	movs	r0, #40	; 0x28
 8000ff6:	f002 f871 	bl	80030dc <HAL_NVIC_EnableIRQ>

}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	; 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
 8001008:	48000c00 	.word	0x48000c00
 800100c:	48000800 	.word	0x48000800

08001010 <start_PWM>:



int PWM_state = 0;
int start_PWM()
{//Start and init the PWM to speed = 0;
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

	int speed_stopped = __HAL_TIM_GET_AUTORELOAD(&htim1)/2;
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <start_PWM+0x64>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	085b      	lsrs	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
	TIM1->CCR1 = speed_stopped;
 8001020:	4a15      	ldr	r2, [pc, #84]	; (8001078 <start_PWM+0x68>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = speed_stopped;
 8001026:	4a14      	ldr	r2, [pc, #80]	; (8001078 <start_PWM+0x68>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6393      	str	r3, [r2, #56]	; 0x38

	if(HAL_OK == HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1))
 800102c:	2100      	movs	r1, #0
 800102e:	4811      	ldr	r0, [pc, #68]	; (8001074 <start_PWM+0x64>)
 8001030:	f003 fc7a 	bl	8004928 <HAL_TIM_PWM_Start>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d116      	bne.n	8001068 <start_PWM+0x58>
	{
		if(HAL_OK == HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2))
 800103a:	2104      	movs	r1, #4
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <start_PWM+0x64>)
 800103e:	f003 fc73 	bl	8004928 <HAL_TIM_PWM_Start>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10f      	bne.n	8001068 <start_PWM+0x58>
		{
			if(HAL_OK == HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1))
 8001048:	2100      	movs	r1, #0
 800104a:	480a      	ldr	r0, [pc, #40]	; (8001074 <start_PWM+0x64>)
 800104c:	f004 ffa2 	bl	8005f94 <HAL_TIMEx_PWMN_Start>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d108      	bne.n	8001068 <start_PWM+0x58>
			{
				if(HAL_OK == HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2))
 8001056:	2104      	movs	r1, #4
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <start_PWM+0x64>)
 800105a:	f004 ff9b 	bl	8005f94 <HAL_TIMEx_PWMN_Start>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <start_PWM+0x58>
				{
					return SUCCESS;
 8001064:	2300      	movs	r3, #0
 8001066:	e000      	b.n	800106a <start_PWM+0x5a>
				}
			}
		}
	}
	return ERROR;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200001dc 	.word	0x200001dc
 8001078:	40012c00 	.word	0x40012c00

0800107c <stop_PWM>:
int stop_PWM()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
		return SUCCESS;
	}else{
		return ERROR;
	}
	*/
	if(HAL_OK == HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1))
 8001080:	2100      	movs	r1, #0
 8001082:	4810      	ldr	r0, [pc, #64]	; (80010c4 <stop_PWM+0x48>)
 8001084:	f003 fd62 	bl	8004b4c <HAL_TIM_PWM_Stop>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d116      	bne.n	80010bc <stop_PWM+0x40>
	{
		if(HAL_OK == HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2))
 800108e:	2104      	movs	r1, #4
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <stop_PWM+0x48>)
 8001092:	f003 fd5b 	bl	8004b4c <HAL_TIM_PWM_Stop>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10f      	bne.n	80010bc <stop_PWM+0x40>
		{
			if(HAL_OK == HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1))
 800109c:	2100      	movs	r1, #0
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <stop_PWM+0x48>)
 80010a0:	f005 f83a 	bl	8006118 <HAL_TIMEx_PWMN_Stop>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d108      	bne.n	80010bc <stop_PWM+0x40>
			{
				if(HAL_OK == HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2))
 80010aa:	2104      	movs	r1, #4
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <stop_PWM+0x48>)
 80010ae:	f005 f833 	bl	8006118 <HAL_TIMEx_PWMN_Stop>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <stop_PWM+0x40>
				{
					return SUCCESS;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e000      	b.n	80010be <stop_PWM+0x42>
				}
			}
		}
	}
	return ERROR;
 80010bc:	2301      	movs	r3, #1
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001dc 	.word	0x200001dc

080010c8 <set_PWM>:

int set_PWM(int speed)
{
 80010c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010cc:	b088      	sub	sp, #32
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
	if((speed>100) || (speed<-100))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b64      	cmp	r3, #100	; 0x64
 80010d6:	dc03      	bgt.n	80010e0 <set_PWM+0x18>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80010de:	da01      	bge.n	80010e4 <set_PWM+0x1c>
	{
		return ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e061      	b.n	80011a8 <set_PWM+0xe0>
	}else{
		const int ccr_size = __HAL_TIM_GET_AUTORELOAD(&htim1);
 80010e4:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <set_PWM+0xec>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	617b      	str	r3, [r7, #20]
		int ccr_size_div_2 = ccr_size/2;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	0fda      	lsrs	r2, r3, #31
 80010f0:	4413      	add	r3, r2
 80010f2:	105b      	asrs	r3, r3, #1
 80010f4:	613b      	str	r3, [r7, #16]
		int ccr_U_value,ccr_V_value;
		float f_speed = (float)speed/100;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001100:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80011b8 <set_PWM+0xf0>
 8001104:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001108:	edc7 7a03 	vstr	s15, [r7, #12]
		if(speed >0)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	dd19      	ble.n	8001146 <set_PWM+0x7e>
		{//sens de marche horaire
			ccr_U_value = ccr_size_div_2+(f_speed*ccr_size_div_2);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001126:	edd7 7a03 	vldr	s15, [r7, #12]
 800112a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001136:	ee17 3a90 	vmov	r3, s15
 800113a:	61fb      	str	r3, [r7, #28]
			ccr_V_value = ccr_size-ccr_U_value;
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	e029      	b.n	800119a <set_PWM+0xd2>
		}
		else
		{//sens de marche anti_horraire
			ccr_V_value = ccr_size_div_2+(fabs(f_speed)*ccr_size_div_2);
 8001146:	6938      	ldr	r0, [r7, #16]
 8001148:	f7ff faea 	bl	8000720 <__aeabi_i2d>
 800114c:	4604      	mov	r4, r0
 800114e:	460d      	mov	r5, r1
 8001150:	edd7 7a03 	vldr	s15, [r7, #12]
 8001154:	eef0 7ae7 	vabs.f32	s15, s15
 8001158:	ee17 0a90 	vmov	r0, s15
 800115c:	f7ff faf2 	bl	8000744 <__aeabi_f2d>
 8001160:	4680      	mov	r8, r0
 8001162:	4689      	mov	r9, r1
 8001164:	6938      	ldr	r0, [r7, #16]
 8001166:	f7ff fadb 	bl	8000720 <__aeabi_i2d>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4640      	mov	r0, r8
 8001170:	4649      	mov	r1, r9
 8001172:	f7ff f859 	bl	8000228 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4620      	mov	r0, r4
 800117c:	4629      	mov	r1, r5
 800117e:	f7ff f983 	bl	8000488 <__adddf3>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fb33 	bl	80007f4 <__aeabi_d2iz>
 800118e:	4603      	mov	r3, r0
 8001190:	61bb      	str	r3, [r7, #24]
			ccr_U_value = ccr_size-ccr_V_value;
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	61fb      	str	r3, [r7, #28]
		}
		TIM1->CCR1 = ccr_U_value;
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <set_PWM+0xf4>)
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = ccr_V_value;
 80011a0:	4a06      	ldr	r2, [pc, #24]	; (80011bc <set_PWM+0xf4>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	6393      	str	r3, [r2, #56]	; 0x38
		return SUCCESS;
 80011a6:	2300      	movs	r3, #0
	}
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011b2:	bf00      	nop
 80011b4:	200001dc 	.word	0x200001dc
 80011b8:	42c80000 	.word	0x42c80000
 80011bc:	40012c00 	.word	0x40012c00

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c4:	f000 fd55 	bl	8001c72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 f839 	bl	800123e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f7ff fe90 	bl	8000ef0 <MX_GPIO_Init>
  MX_ADC2_Init();
 80011d0:	f7ff fd2e 	bl	8000c30 <MX_ADC2_Init>
  MX_ADC1_Init();
 80011d4:	f7ff fcb4 	bl	8000b40 <MX_ADC1_Init>
  MX_TIM1_Init();
 80011d8:	f000 f986 	bl	80014e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011dc:	f000 fa54 	bl	8001688 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80011e0:	f000 fb88 	bl	80018f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80011e4:	f000 fbd2 	bl	800198c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 80011e8:	f000 fcc4 	bl	8001b74 <Shell_Init>
	//initialiaze PWM
	start_PWM();
 80011ec:	f7ff ff10 	bl	8001010 <start_PWM>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Shell_Loop();
		set_PWM(-100);
 80011f0:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80011f4:	f7ff ff68 	bl	80010c8 <set_PWM>
		HAL_Delay(1000);
 80011f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011fc:	f000 fd70 	bl	8001ce0 <HAL_Delay>
		set_PWM(-50);
 8001200:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001204:	f7ff ff60 	bl	80010c8 <set_PWM>
		HAL_Delay(1000);
 8001208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120c:	f000 fd68 	bl	8001ce0 <HAL_Delay>
		set_PWM(80);
 8001210:	2050      	movs	r0, #80	; 0x50
 8001212:	f7ff ff59 	bl	80010c8 <set_PWM>
		HAL_Delay(1000);
 8001216:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121a:	f000 fd61 	bl	8001ce0 <HAL_Delay>
		set_PWM(90);
 800121e:	205a      	movs	r0, #90	; 0x5a
 8001220:	f7ff ff52 	bl	80010c8 <set_PWM>
		HAL_Delay(1000);
 8001224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001228:	f000 fd5a 	bl	8001ce0 <HAL_Delay>
		stop_PWM();
 800122c:	f7ff ff26 	bl	800107c <stop_PWM>
		HAL_Delay(2000);
 8001230:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001234:	f000 fd54 	bl	8001ce0 <HAL_Delay>
		start_PWM();
 8001238:	f7ff feea 	bl	8001010 <start_PWM>
		set_PWM(-100);
 800123c:	e7d8      	b.n	80011f0 <main+0x30>

0800123e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b094      	sub	sp, #80	; 0x50
 8001242:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	2238      	movs	r2, #56	; 0x38
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f007 f9eb 	bl	8008628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001260:	2000      	movs	r0, #0
 8001262:	f002 f9c7 	bl	80035f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800126a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001270:	2302      	movs	r3, #2
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001274:	2303      	movs	r3, #3
 8001276:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001278:	2306      	movs	r3, #6
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800127c:	2355      	movs	r3, #85	; 0x55
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001280:	2302      	movs	r3, #2
 8001282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001284:	2302      	movs	r3, #2
 8001286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001288:	2302      	movs	r3, #2
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	4618      	mov	r0, r3
 8001292:	f002 fa63 	bl	800375c <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800129c:	f000 f82a 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a0:	230f      	movs	r3, #15
 80012a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a4:	2303      	movs	r3, #3
 80012a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2104      	movs	r1, #4
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 fd67 	bl	8003d8c <HAL_RCC_ClockConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80012c4:	f000 f816 	bl	80012f4 <Error_Handler>
  }
}
 80012c8:	bf00      	nop
 80012ca:	3750      	adds	r7, #80	; 0x50
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012e2:	f000 fcdf 	bl	8001ca4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40001000 	.word	0x40001000

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>
	...

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_MspInit+0x44>)
 8001308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130a:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_MspInit+0x44>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6613      	str	r3, [r2, #96]	; 0x60
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_MspInit+0x44>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_MspInit+0x44>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_MspInit+0x44>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	6593      	str	r3, [r2, #88]	; 0x58
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_MspInit+0x44>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001336:	f002 fa01 	bl	800373c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001358:	4b2c      	ldr	r3, [pc, #176]	; (800140c <HAL_InitTick+0xc4>)
 800135a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135c:	4a2b      	ldr	r2, [pc, #172]	; (800140c <HAL_InitTick+0xc4>)
 800135e:	f043 0310 	orr.w	r3, r3, #16
 8001362:	6593      	str	r3, [r2, #88]	; 0x58
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_InitTick+0xc4>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001370:	f107 020c 	add.w	r2, r7, #12
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f002 fedc 	bl	8004138 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001380:	f002 feae 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8001384:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <HAL_InitTick+0xc8>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	0c9b      	lsrs	r3, r3, #18
 8001390:	3b01      	subs	r3, #1
 8001392:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_InitTick+0xcc>)
 8001396:	4a20      	ldr	r2, [pc, #128]	; (8001418 <HAL_InitTick+0xd0>)
 8001398:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <HAL_InitTick+0xcc>)
 800139c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013a2:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <HAL_InitTick+0xcc>)
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_InitTick+0xcc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_InitTick+0xcc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80013b4:	4817      	ldr	r0, [pc, #92]	; (8001414 <HAL_InitTick+0xcc>)
 80013b6:	f003 f985 	bl	80046c4 <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80013c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d11b      	bne.n	8001400 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013c8:	4812      	ldr	r0, [pc, #72]	; (8001414 <HAL_InitTick+0xcc>)
 80013ca:	f003 f9d3 	bl	8004774 <HAL_TIM_Base_Start_IT>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80013d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d111      	bne.n	8001400 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013dc:	2036      	movs	r0, #54	; 0x36
 80013de:	f001 fe7d 	bl	80030dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	d808      	bhi.n	80013fa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013e8:	2200      	movs	r2, #0
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	2036      	movs	r0, #54	; 0x36
 80013ee:	f001 fe5b 	bl	80030a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_InitTick+0xd4>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e002      	b.n	8001400 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001404:	4618      	mov	r0, r3
 8001406:	3730      	adds	r7, #48	; 0x30
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021000 	.word	0x40021000
 8001410:	431bde83 	.word	0x431bde83
 8001414:	20000190 	.word	0x20000190
 8001418:	40001000 	.word	0x40001000
 800141c:	20000090 	.word	0x20000090

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <USART2_IRQHandler+0x10>)
 800147e:	f005 f999 	bl	80067b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000274 	.word	0x20000274

0800148c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <USART3_IRQHandler+0x10>)
 8001492:	f005 f98f 	bl	80067b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000304 	.word	0x20000304

080014a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80014a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014a8:	f002 f880 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <TIM6_DAC_IRQHandler+0x10>)
 80014b6:	f003 fbe5 	bl	8004c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000190 	.word	0x20000190

080014c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <SystemInit+0x20>)
 80014ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <SystemInit+0x20>)
 80014d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b09c      	sub	sp, #112	; 0x70
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001508:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2234      	movs	r2, #52	; 0x34
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f007 f880 	bl	8008628 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001528:	4b55      	ldr	r3, [pc, #340]	; (8001680 <MX_TIM1_Init+0x198>)
 800152a:	4a56      	ldr	r2, [pc, #344]	; (8001684 <MX_TIM1_Init+0x19c>)
 800152c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 800152e:	4b54      	ldr	r3, [pc, #336]	; (8001680 <MX_TIM1_Init+0x198>)
 8001530:	2207      	movs	r2, #7
 8001532:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001534:	4b52      	ldr	r3, [pc, #328]	; (8001680 <MX_TIM1_Init+0x198>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800153a:	4b51      	ldr	r3, [pc, #324]	; (8001680 <MX_TIM1_Init+0x198>)
 800153c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001540:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001542:	4b4f      	ldr	r3, [pc, #316]	; (8001680 <MX_TIM1_Init+0x198>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001548:	4b4d      	ldr	r3, [pc, #308]	; (8001680 <MX_TIM1_Init+0x198>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800154e:	4b4c      	ldr	r3, [pc, #304]	; (8001680 <MX_TIM1_Init+0x198>)
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001554:	484a      	ldr	r0, [pc, #296]	; (8001680 <MX_TIM1_Init+0x198>)
 8001556:	f003 f8b5 	bl	80046c4 <HAL_TIM_Base_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001560:	f7ff fec8 	bl	80012f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001568:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800156a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800156e:	4619      	mov	r1, r3
 8001570:	4843      	ldr	r0, [pc, #268]	; (8001680 <MX_TIM1_Init+0x198>)
 8001572:	f003 fe1b 	bl	80051ac <HAL_TIM_ConfigClockSource>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800157c:	f7ff feba 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001580:	483f      	ldr	r0, [pc, #252]	; (8001680 <MX_TIM1_Init+0x198>)
 8001582:	f003 f96f 	bl	8004864 <HAL_TIM_PWM_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800158c:	f7ff feb2 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800159c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015a0:	4619      	mov	r1, r3
 80015a2:	4837      	ldr	r0, [pc, #220]	; (8001680 <MX_TIM1_Init+0x198>)
 80015a4:	f004 fe16 	bl	80061d4 <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80015ae:	f7ff fea1 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b2:	2360      	movs	r3, #96	; 0x60
 80015b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 800;
 80015b6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80015ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015c4:	2304      	movs	r3, #4
 80015c6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4829      	ldr	r0, [pc, #164]	; (8001680 <MX_TIM1_Init+0x198>)
 80015da:	f003 fcd3 	bl	8004f84 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80015e4:	f7ff fe86 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 80015e8:	23c8      	movs	r3, #200	; 0xc8
 80015ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015f0:	2204      	movs	r2, #4
 80015f2:	4619      	mov	r1, r3
 80015f4:	4822      	ldr	r0, [pc, #136]	; (8001680 <MX_TIM1_Init+0x198>)
 80015f6:	f003 fcc5 	bl	8004f84 <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8001600:	f7ff fe78 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800160c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001610:	2208      	movs	r2, #8
 8001612:	4619      	mov	r1, r3
 8001614:	481a      	ldr	r0, [pc, #104]	; (8001680 <MX_TIM1_Init+0x198>)
 8001616:	f003 fcb5 	bl	8004f84 <HAL_TIM_PWM_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001620:	f7ff fe68 	bl	80012f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 15;
 8001630:	230f      	movs	r3, #15
 8001632:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800164a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4807      	ldr	r0, [pc, #28]	; (8001680 <MX_TIM1_Init+0x198>)
 8001662:	f004 fe4d 	bl	8006300 <HAL_TIMEx_ConfigBreakDeadTime>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 800166c:	f7ff fe42 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001670:	4803      	ldr	r0, [pc, #12]	; (8001680 <MX_TIM1_Init+0x198>)
 8001672:	f000 f8d7 	bl	8001824 <HAL_TIM_MspPostInit>

}
 8001676:	bf00      	nop
 8001678:	3770      	adds	r7, #112	; 0x70
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200001dc 	.word	0x200001dc
 8001684:	40012c00 	.word	0x40012c00

08001688 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <MX_TIM3_Init+0x90>)
 80016a8:	4a1c      	ldr	r2, [pc, #112]	; (800171c <MX_TIM3_Init+0x94>)
 80016aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_TIM3_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <MX_TIM3_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <MX_TIM3_Init+0x90>)
 80016ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_TIM3_Init+0x90>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_TIM3_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016cc:	2300      	movs	r3, #0
 80016ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	480d      	ldr	r0, [pc, #52]	; (8001718 <MX_TIM3_Init+0x90>)
 80016e4:	f004 fba7 	bl	8005e36 <HAL_TIMEx_HallSensor_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80016ee:	f7ff fe01 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80016f2:	2350      	movs	r3, #80	; 0x50
 80016f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_TIM3_Init+0x90>)
 8001700:	f004 fd68 	bl	80061d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800170a:	f7ff fdf3 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000228 	.word	0x20000228
 800171c:	40000400 	.word	0x40000400

08001720 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_TIM_Base_MspInit+0x38>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10b      	bne.n	800174a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_TIM_Base_MspInit+0x3c>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <HAL_TIM_Base_MspInit+0x3c>)
 8001738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800173c:	6613      	str	r3, [r2, #96]	; 0x60
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <HAL_TIM_Base_MspInit+0x3c>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40012c00 	.word	0x40012c00
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a26      	ldr	r2, [pc, #152]	; (8001818 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d145      	bne.n	800180e <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	4a25      	ldr	r2, [pc, #148]	; (800181c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6593      	str	r3, [r2, #88]	; 0x58
 800178e:	4b23      	ldr	r3, [pc, #140]	; (800181c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	4a1f      	ldr	r2, [pc, #124]	; (800181c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a19      	ldr	r2, [pc, #100]	; (800181c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80017ca:	2350      	movs	r3, #80	; 0x50
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017da:	2302      	movs	r3, #2
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e8:	f001 fd46 	bl	8003278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017fe:	2302      	movs	r3, #2
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800180a:	f001 fd35 	bl	8003278 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40000400 	.word	0x40000400
 800181c:	40021000 	.word	0x40021000
 8001820:	48000800 	.word	0x48000800

08001824 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a29      	ldr	r2, [pc, #164]	; (80018e8 <HAL_TIM_MspPostInit+0xc4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d14b      	bne.n	80018de <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_TIM_MspPostInit+0xc8>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a28      	ldr	r2, [pc, #160]	; (80018ec <HAL_TIM_MspPostInit+0xc8>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <HAL_TIM_MspPostInit+0xc8>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <HAL_TIM_MspPostInit+0xc8>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a22      	ldr	r2, [pc, #136]	; (80018ec <HAL_TIM_MspPostInit+0xc8>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_TIM_MspPostInit+0xc8>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001876:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001888:	2306      	movs	r3, #6
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	4817      	ldr	r0, [pc, #92]	; (80018f0 <HAL_TIM_MspPostInit+0xcc>)
 8001894:	f001 fcf0 	bl	8003278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80018aa:	2304      	movs	r3, #4
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	480e      	ldr	r0, [pc, #56]	; (80018f0 <HAL_TIM_MspPostInit+0xcc>)
 80018b6:	f001 fcdf 	bl	8003278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80018ba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80018cc:	2306      	movs	r3, #6
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018da:	f001 fccd 	bl	8003278 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3728      	adds	r7, #40	; 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40012c00 	.word	0x40012c00
 80018ec:	40021000 	.word	0x40021000
 80018f0:	48000400 	.word	0x48000400

080018f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <MX_USART2_UART_Init+0x90>)
 80018fa:	4a23      	ldr	r2, [pc, #140]	; (8001988 <MX_USART2_UART_Init+0x94>)
 80018fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018fe:	4b21      	ldr	r3, [pc, #132]	; (8001984 <MX_USART2_UART_Init+0x90>)
 8001900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <MX_USART2_UART_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <MX_USART2_UART_Init+0x90>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <MX_USART2_UART_Init+0x90>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <MX_USART2_UART_Init+0x90>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <MX_USART2_UART_Init+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <MX_USART2_UART_Init+0x90>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <MX_USART2_UART_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <MX_USART2_UART_Init+0x90>)
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <MX_USART2_UART_Init+0x90>)
 8001938:	2200      	movs	r2, #0
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800193c:	4811      	ldr	r0, [pc, #68]	; (8001984 <MX_USART2_UART_Init+0x90>)
 800193e:	f004 fdfc 	bl	800653a <HAL_UART_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001948:	f7ff fcd4 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194c:	2100      	movs	r1, #0
 800194e:	480d      	ldr	r0, [pc, #52]	; (8001984 <MX_USART2_UART_Init+0x90>)
 8001950:	f006 fd9f 	bl	8008492 <HAL_UARTEx_SetTxFifoThreshold>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800195a:	f7ff fccb 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800195e:	2100      	movs	r1, #0
 8001960:	4808      	ldr	r0, [pc, #32]	; (8001984 <MX_USART2_UART_Init+0x90>)
 8001962:	f006 fdd4 	bl	800850e <HAL_UARTEx_SetRxFifoThreshold>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800196c:	f7ff fcc2 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_USART2_UART_Init+0x90>)
 8001972:	f006 fd55 	bl	8008420 <HAL_UARTEx_DisableFifoMode>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800197c:	f7ff fcba 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000274 	.word	0x20000274
 8001988:	40004400 	.word	0x40004400

0800198c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 8001992:	4a23      	ldr	r2, [pc, #140]	; (8001a20 <MX_USART3_UART_Init+0x94>)
 8001994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 8001998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800199c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019d4:	4811      	ldr	r0, [pc, #68]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 80019d6:	f004 fdb0 	bl	800653a <HAL_UART_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019e0:	f7ff fc88 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e4:	2100      	movs	r1, #0
 80019e6:	480d      	ldr	r0, [pc, #52]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 80019e8:	f006 fd53 	bl	8008492 <HAL_UARTEx_SetTxFifoThreshold>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019f2:	f7ff fc7f 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f6:	2100      	movs	r1, #0
 80019f8:	4808      	ldr	r0, [pc, #32]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 80019fa:	f006 fd88 	bl	800850e <HAL_UARTEx_SetRxFifoThreshold>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a04:	f7ff fc76 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <MX_USART3_UART_Init+0x90>)
 8001a0a:	f006 fd09 	bl	8008420 <HAL_UARTEx_DisableFifoMode>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a14:	f7ff fc6e 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000304 	.word	0x20000304
 8001a20:	40004800 	.word	0x40004800

08001a24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0a0      	sub	sp, #128	; 0x80
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a3c:	f107 0318 	add.w	r3, r7, #24
 8001a40:	2254      	movs	r2, #84	; 0x54
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f006 fdef 	bl	8008628 <memset>
  if(uartHandle->Instance==USART2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a45      	ldr	r2, [pc, #276]	; (8001b64 <HAL_UART_MspInit+0x140>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d13f      	bne.n	8001ad4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a5c:	f107 0318 	add.w	r3, r7, #24
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 fbe1 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a6c:	f7ff fc42 	bl	80012f4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a70:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <HAL_UART_MspInit+0x144>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	4a3c      	ldr	r2, [pc, #240]	; (8001b68 <HAL_UART_MspInit+0x144>)
 8001a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7c:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_UART_MspInit+0x144>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_UART_MspInit+0x144>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8c:	4a36      	ldr	r2, [pc, #216]	; (8001b68 <HAL_UART_MspInit+0x144>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <HAL_UART_MspInit+0x144>)
 8001a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aa0:	230c      	movs	r3, #12
 8001aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ab0:	2307      	movs	r3, #7
 8001ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001abe:	f001 fbdb 	bl	8003278 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2026      	movs	r0, #38	; 0x26
 8001ac8:	f001 faee 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001acc:	2026      	movs	r0, #38	; 0x26
 8001ace:	f001 fb05 	bl	80030dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ad2:	e043      	b.n	8001b5c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <HAL_UART_MspInit+0x148>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d13e      	bne.n	8001b5c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae6:	f107 0318 	add.w	r3, r7, #24
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fb9c 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001af6:	f7ff fbfd 	bl	80012f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <HAL_UART_MspInit+0x144>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <HAL_UART_MspInit+0x144>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b04:	6593      	str	r3, [r2, #88]	; 0x58
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_UART_MspInit+0x144>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_UART_MspInit+0x144>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <HAL_UART_MspInit+0x144>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_UART_MspInit+0x144>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b3c:	2307      	movs	r3, #7
 8001b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b44:	4619      	mov	r1, r3
 8001b46:	480a      	ldr	r0, [pc, #40]	; (8001b70 <HAL_UART_MspInit+0x14c>)
 8001b48:	f001 fb96 	bl	8003278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2027      	movs	r0, #39	; 0x27
 8001b52:	f001 faa9 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b56:	2027      	movs	r0, #39	; 0x27
 8001b58:	f001 fac0 	bl	80030dc <HAL_NVIC_EnableIRQ>
}
 8001b5c:	bf00      	nop
 8001b5e:	3780      	adds	r7, #128	; 0x80
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40004400 	.word	0x40004400
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40004800 	.word	0x40004800
 8001b70:	48000800 	.word	0x48000800

08001b74 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8001b78:	2224      	movs	r2, #36	; 0x24
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4816      	ldr	r0, [pc, #88]	; (8001bd8 <Shell_Init+0x64>)
 8001b7e:	f006 fd53 	bl	8008628 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	2100      	movs	r1, #0
 8001b86:	4815      	ldr	r0, [pc, #84]	; (8001bdc <Shell_Init+0x68>)
 8001b88:	f006 fd4e 	bl	8008628 <memset>
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <Shell_Init+0x6c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8001b92:	2240      	movs	r2, #64	; 0x40
 8001b94:	2100      	movs	r1, #0
 8001b96:	4813      	ldr	r0, [pc, #76]	; (8001be4 <Shell_Init+0x70>)
 8001b98:	f006 fd46 	bl	8008628 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4910      	ldr	r1, [pc, #64]	; (8001be0 <Shell_Init+0x6c>)
 8001ba0:	4811      	ldr	r0, [pc, #68]	; (8001be8 <Shell_Init+0x74>)
 8001ba2:	f004 fdb1 	bl	8006708 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001ba6:	4811      	ldr	r0, [pc, #68]	; (8001bec <Shell_Init+0x78>)
 8001ba8:	f7fe fb36 	bl	8000218 <strlen>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	490d      	ldr	r1, [pc, #52]	; (8001bec <Shell_Init+0x78>)
 8001bb6:	480c      	ldr	r0, [pc, #48]	; (8001be8 <Shell_Init+0x74>)
 8001bb8:	f004 fd0f 	bl	80065da <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001bbc:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <Shell_Init+0x7c>)
 8001bbe:	f7fe fb2b 	bl	8000218 <strlen>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	4909      	ldr	r1, [pc, #36]	; (8001bf0 <Shell_Init+0x7c>)
 8001bcc:	4806      	ldr	r0, [pc, #24]	; (8001be8 <Shell_Init+0x74>)
 8001bce:	f004 fd04 	bl	80065da <HAL_UART_Transmit>
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000041c 	.word	0x2000041c
 8001bdc:	200003dc 	.word	0x200003dc
 8001be0:	20000398 	.word	0x20000398
 8001be4:	2000039c 	.word	0x2000039c
 8001be8:	20000274 	.word	0x20000274
 8001bec:	20000028 	.word	0x20000028
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_UART_RxCpltCallback>:
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
		newCmdReady = 0;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_UART_RxCpltCallback+0x20>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001c02:	2201      	movs	r2, #1
 8001c04:	4904      	ldr	r1, [pc, #16]	; (8001c18 <HAL_UART_RxCpltCallback+0x24>)
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <HAL_UART_RxCpltCallback+0x28>)
 8001c08:	f004 fd7e 	bl	8006708 <HAL_UART_Receive_IT>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000394 	.word	0x20000394
 8001c18:	20000398 	.word	0x20000398
 8001c1c:	20000274 	.word	0x20000274

08001c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c26:	490e      	ldr	r1, [pc, #56]	; (8001c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c28:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <LoopForever+0xe>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c2c:	e002      	b.n	8001c34 <LoopCopyDataInit>

08001c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c32:	3304      	adds	r3, #4

08001c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c38:	d3f9      	bcc.n	8001c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c3c:	4c0b      	ldr	r4, [pc, #44]	; (8001c6c <LoopForever+0x16>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c40:	e001      	b.n	8001c46 <LoopFillZerobss>

08001c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c44:	3204      	adds	r2, #4

08001c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c48:	d3fb      	bcc.n	8001c42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c4a:	f7ff fc3b 	bl	80014c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f006 fcf3 	bl	8008638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c52:	f7ff fab5 	bl	80011c0 <main>

08001c56 <LoopForever>:

LoopForever:
    b LoopForever
 8001c56:	e7fe      	b.n	8001c56 <LoopForever>
  ldr   r0, =_estack
 8001c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001c64:	080086e8 	.word	0x080086e8
  ldr r2, =_sbss
 8001c68:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001c6c:	20000444 	.word	0x20000444

08001c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC1_2_IRQHandler>

08001c72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f001 fa08 	bl	8003092 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c82:	200f      	movs	r0, #15
 8001c84:	f7ff fb60 	bl	8001348 <HAL_InitTick>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	e001      	b.n	8001c98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c94:	f7ff fb34 	bl	8001300 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c98:	79fb      	ldrb	r3, [r7, #7]

}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001cb4:	6013      	str	r3, [r2, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	20000440 	.word	0x20000440
 8001cc4:	20000094 	.word	0x20000094

08001cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_GetTick+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000440 	.word	0x20000440

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff ffee 	bl	8001cc8 <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d004      	beq.n	8001d04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_Delay+0x40>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d04:	bf00      	nop
 8001d06:	f7ff ffdf 	bl	8001cc8 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d8f7      	bhi.n	8001d06 <HAL_Delay+0x26>
  {
  }
}
 8001d16:	bf00      	nop
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000094 	.word	0x20000094

08001d24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3360      	adds	r3, #96	; 0x60
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <LL_ADC_SetOffset+0x44>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	03fff000 	.word	0x03fff000

08001dd4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3360      	adds	r3, #96	; 0x60
 8001de2:	461a      	mov	r2, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3360      	adds	r3, #96	; 0x60
 8001e10:	461a      	mov	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e2a:	bf00      	nop
 8001e2c:	371c      	adds	r7, #28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b087      	sub	sp, #28
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3360      	adds	r3, #96	; 0x60
 8001e46:	461a      	mov	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e60:	bf00      	nop
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3360      	adds	r3, #96	; 0x60
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	431a      	orrs	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	615a      	str	r2, [r3, #20]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3330      	adds	r3, #48	; 0x30
 8001ed8:	461a      	mov	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	4413      	add	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	211f      	movs	r1, #31
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	401a      	ands	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	0e9b      	lsrs	r3, r3, #26
 8001f00:	f003 011f 	and.w	r1, r3, #31
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f14:	bf00      	nop
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3314      	adds	r3, #20
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	0e5b      	lsrs	r3, r3, #25
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	4413      	add	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	0d1b      	lsrs	r3, r3, #20
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2107      	movs	r1, #7
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	401a      	ands	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0d1b      	lsrs	r3, r3, #20
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d10a      	bne.n	8001fa2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001fa0:	e00a      	b.n	8001fb8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	407f0000 	.word	0x407f0000

08001fc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6093      	str	r3, [r2, #8]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002000:	d101      	bne.n	8002006 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002028:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002050:	d101      	bne.n	8002056 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <LL_ADC_IsEnabled+0x18>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <LL_ADC_IsEnabled+0x1a>
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b04      	cmp	r3, #4
 800209c:	d101      	bne.n	80020a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d101      	bne.n	80020c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e1af      	b.n	8002452 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d109      	bne.n	8002114 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7fe fdfb 	bl	8000cfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff67 	bl	8001fec <LL_ADC_IsDeepPowerDownEnabled>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff4d 	bl	8001fc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff82 	bl	800203c <LL_ADC_IsInternalRegulatorEnabled>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d115      	bne.n	800216a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff66 	bl	8002014 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002148:	4b9f      	ldr	r3, [pc, #636]	; (80023c8 <HAL_ADC_Init+0x2f0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	4a9f      	ldr	r2, [pc, #636]	; (80023cc <HAL_ADC_Init+0x2f4>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	099b      	lsrs	r3, r3, #6
 8002156:	3301      	adds	r3, #1
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800215c:	e002      	b.n	8002164 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	3b01      	subs	r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f9      	bne.n	800215e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff64 	bl	800203c <LL_ADC_IsInternalRegulatorEnabled>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10d      	bne.n	8002196 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217e:	f043 0210 	orr.w	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	f043 0201 	orr.w	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff75 	bl	800208a <LL_ADC_REG_IsConversionOngoing>
 80021a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 8148 	bne.w	8002440 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 8144 	bne.w	8002440 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021c0:	f043 0202 	orr.w	r2, r3, #2
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff49 	bl	8002064 <LL_ADC_IsEnabled>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d141      	bne.n	800225c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021e0:	d004      	beq.n	80021ec <HAL_ADC_Init+0x114>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a7a      	ldr	r2, [pc, #488]	; (80023d0 <HAL_ADC_Init+0x2f8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d10f      	bne.n	800220c <HAL_ADC_Init+0x134>
 80021ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021f0:	f7ff ff38 	bl	8002064 <LL_ADC_IsEnabled>
 80021f4:	4604      	mov	r4, r0
 80021f6:	4876      	ldr	r0, [pc, #472]	; (80023d0 <HAL_ADC_Init+0x2f8>)
 80021f8:	f7ff ff34 	bl	8002064 <LL_ADC_IsEnabled>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4323      	orrs	r3, r4
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e012      	b.n	8002232 <HAL_ADC_Init+0x15a>
 800220c:	4871      	ldr	r0, [pc, #452]	; (80023d4 <HAL_ADC_Init+0x2fc>)
 800220e:	f7ff ff29 	bl	8002064 <LL_ADC_IsEnabled>
 8002212:	4604      	mov	r4, r0
 8002214:	4870      	ldr	r0, [pc, #448]	; (80023d8 <HAL_ADC_Init+0x300>)
 8002216:	f7ff ff25 	bl	8002064 <LL_ADC_IsEnabled>
 800221a:	4603      	mov	r3, r0
 800221c:	431c      	orrs	r4, r3
 800221e:	486f      	ldr	r0, [pc, #444]	; (80023dc <HAL_ADC_Init+0x304>)
 8002220:	f7ff ff20 	bl	8002064 <LL_ADC_IsEnabled>
 8002224:	4603      	mov	r3, r0
 8002226:	4323      	orrs	r3, r4
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d012      	beq.n	800225c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800223e:	d004      	beq.n	800224a <HAL_ADC_Init+0x172>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a62      	ldr	r2, [pc, #392]	; (80023d0 <HAL_ADC_Init+0x2f8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_ADC_Init+0x176>
 800224a:	4a65      	ldr	r2, [pc, #404]	; (80023e0 <HAL_ADC_Init+0x308>)
 800224c:	e000      	b.n	8002250 <HAL_ADC_Init+0x178>
 800224e:	4a65      	ldr	r2, [pc, #404]	; (80023e4 <HAL_ADC_Init+0x30c>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4619      	mov	r1, r3
 8002256:	4610      	mov	r0, r2
 8002258:	f7ff fd64 	bl	8001d24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7f5b      	ldrb	r3, [r3, #29]
 8002260:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002266:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800226c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002272:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800227a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002286:	2b01      	cmp	r3, #1
 8002288:	d106      	bne.n	8002298 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	3b01      	subs	r3, #1
 8002290:	045b      	lsls	r3, r3, #17
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_ADC_Init+0x310>)
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	69b9      	ldr	r1, [r7, #24]
 80022c4:	430b      	orrs	r3, r1
 80022c6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fed1 	bl	800208a <LL_ADC_REG_IsConversionOngoing>
 80022e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fede 	bl	80020b0 <LL_ADC_INJ_IsConversionOngoing>
 80022f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d17f      	bne.n	80023fc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d17c      	bne.n	80023fc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002306:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800230e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800231e:	f023 0302 	bic.w	r3, r3, #2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	69b9      	ldr	r1, [r7, #24]
 8002328:	430b      	orrs	r3, r1
 800232a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d017      	beq.n	8002364 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002342:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800234c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002350:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6911      	ldr	r1, [r2, #16]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	430b      	orrs	r3, r1
 800235e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002362:	e013      	b.n	800238c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002372:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002388:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002392:	2b01      	cmp	r3, #1
 8002394:	d12a      	bne.n	80023ec <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023a0:	f023 0304 	bic.w	r3, r3, #4
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023ac:	4311      	orrs	r1, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023b2:	4311      	orrs	r1, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023b8:	430a      	orrs	r2, r1
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0201 	orr.w	r2, r2, #1
 80023c4:	611a      	str	r2, [r3, #16]
 80023c6:	e019      	b.n	80023fc <HAL_ADC_Init+0x324>
 80023c8:	20000000 	.word	0x20000000
 80023cc:	053e2d63 	.word	0x053e2d63
 80023d0:	50000100 	.word	0x50000100
 80023d4:	50000400 	.word	0x50000400
 80023d8:	50000500 	.word	0x50000500
 80023dc:	50000600 	.word	0x50000600
 80023e0:	50000300 	.word	0x50000300
 80023e4:	50000700 	.word	0x50000700
 80023e8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d10c      	bne.n	800241e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f023 010f 	bic.w	r1, r3, #15
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	1e5a      	subs	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
 800241c:	e007      	b.n	800242e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 020f 	bic.w	r2, r2, #15
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	65da      	str	r2, [r3, #92]	; 0x5c
 800243e:	e007      	b.n	8002450 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	f043 0210 	orr.w	r2, r3, #16
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002450:	7ffb      	ldrb	r3, [r7, #31]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}
 800245a:	bf00      	nop

0800245c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b0b6      	sub	sp, #216	; 0xd8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002476:	2b01      	cmp	r3, #1
 8002478:	d102      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x24>
 800247a:	2302      	movs	r3, #2
 800247c:	f000 bc13 	b.w	8002ca6 <HAL_ADC_ConfigChannel+0x84a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fdfc 	bl	800208a <LL_ADC_REG_IsConversionOngoing>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 83f3 	bne.w	8002c80 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f7ff fd0e 	bl	8001ec8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fdea 	bl	800208a <LL_ADC_REG_IsConversionOngoing>
 80024b6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fdf6 	bl	80020b0 <LL_ADC_INJ_IsConversionOngoing>
 80024c4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f040 81d9 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 81d4 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024e4:	d10f      	bne.n	8002506 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2200      	movs	r2, #0
 80024f0:	4619      	mov	r1, r3
 80024f2:	f7ff fd15 	bl	8001f20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fccf 	bl	8001ea2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002504:	e00e      	b.n	8002524 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	461a      	mov	r2, r3
 8002514:	f7ff fd04 	bl	8001f20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fcbf 	bl	8001ea2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	08db      	lsrs	r3, r3, #3
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b04      	cmp	r3, #4
 8002544:	d022      	beq.n	800258c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6919      	ldr	r1, [r3, #16]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002556:	f7ff fc19 	bl	8001d8c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6919      	ldr	r1, [r3, #16]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	461a      	mov	r2, r3
 8002568:	f7ff fc65 	bl	8001e36 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6919      	ldr	r1, [r3, #16]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	7f1b      	ldrb	r3, [r3, #28]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d102      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x126>
 800257c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002580:	e000      	b.n	8002584 <HAL_ADC_ConfigChannel+0x128>
 8002582:	2300      	movs	r3, #0
 8002584:	461a      	mov	r2, r3
 8002586:	f7ff fc71 	bl	8001e6c <LL_ADC_SetOffsetSaturation>
 800258a:	e17b      	b.n	8002884 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fc1e 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x15c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fc13 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	0e9b      	lsrs	r3, r3, #26
 80025b2:	f003 021f 	and.w	r2, r3, #31
 80025b6:	e01e      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x19a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fc08 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80025e6:	2320      	movs	r3, #32
 80025e8:	e004      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80025ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d105      	bne.n	800260e <HAL_ADC_ConfigChannel+0x1b2>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	e018      	b.n	8002640 <HAL_ADC_ConfigChannel+0x1e4>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002626:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800262a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002632:	2320      	movs	r3, #32
 8002634:	e004      	b.n	8002640 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002636:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002640:	429a      	cmp	r2, r3
 8002642:	d106      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fbd7 	bl	8001e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2101      	movs	r1, #1
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fbbb 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <HAL_ADC_ConfigChannel+0x222>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fbb0 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	0e9b      	lsrs	r3, r3, #26
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	e01e      	b.n	80026bc <HAL_ADC_ConfigChannel+0x260>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2101      	movs	r1, #1
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fba5 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 800268a:	4603      	mov	r3, r0
 800268c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800269c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80026a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80026ac:	2320      	movs	r3, #32
 80026ae:	e004      	b.n	80026ba <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80026b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d105      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x278>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	e018      	b.n	8002706 <HAL_ADC_ConfigChannel+0x2aa>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80026f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e004      	b.n	8002706 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80026fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002706:	429a      	cmp	r2, r3
 8002708:	d106      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2200      	movs	r2, #0
 8002710:	2101      	movs	r1, #1
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fb74 	bl	8001e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2102      	movs	r1, #2
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fb58 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 8002724:	4603      	mov	r3, r0
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10a      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x2e8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2102      	movs	r1, #2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fb4d 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	0e9b      	lsrs	r3, r3, #26
 800273e:	f003 021f 	and.w	r2, r3, #31
 8002742:	e01e      	b.n	8002782 <HAL_ADC_ConfigChannel+0x326>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2102      	movs	r1, #2
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fb42 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002762:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800276a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002772:	2320      	movs	r3, #32
 8002774:	e004      	b.n	8002780 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002776:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	2b00      	cmp	r3, #0
 800278c:	d105      	bne.n	800279a <HAL_ADC_ConfigChannel+0x33e>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	e016      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x36c>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80027ba:	2320      	movs	r3, #32
 80027bc:	e004      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80027be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d106      	bne.n	80027da <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2200      	movs	r2, #0
 80027d2:	2102      	movs	r1, #2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fb13 	bl	8001e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2103      	movs	r1, #3
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff faf7 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x3aa>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2103      	movs	r1, #3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff faec 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	0e9b      	lsrs	r3, r3, #26
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	e017      	b.n	8002836 <HAL_ADC_ConfigChannel+0x3da>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2103      	movs	r1, #3
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fae1 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800281e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002820:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002828:	2320      	movs	r3, #32
 800282a:	e003      	b.n	8002834 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800282c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <HAL_ADC_ConfigChannel+0x3f2>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	0e9b      	lsrs	r3, r3, #26
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	e011      	b.n	8002872 <HAL_ADC_ConfigChannel+0x416>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800285c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800285e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002866:	2320      	movs	r3, #32
 8002868:	e003      	b.n	8002872 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800286a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002872:	429a      	cmp	r2, r3
 8002874:	d106      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	2103      	movs	r1, #3
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fabe 	bl	8001e00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fbeb 	bl	8002064 <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 813d 	bne.w	8002b10 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f7ff fb68 	bl	8001f78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4aa2      	ldr	r2, [pc, #648]	; (8002b38 <HAL_ADC_ConfigChannel+0x6dc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	f040 812e 	bne.w	8002b10 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x480>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0e9b      	lsrs	r3, r3, #26
 80028ca:	3301      	adds	r3, #1
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	2b09      	cmp	r3, #9
 80028d2:	bf94      	ite	ls
 80028d4:	2301      	movls	r3, #1
 80028d6:	2300      	movhi	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e019      	b.n	8002910 <HAL_ADC_ConfigChannel+0x4b4>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ec:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80028f4:	2320      	movs	r3, #32
 80028f6:	e003      	b.n	8002900 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80028f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	3301      	adds	r3, #1
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	2b09      	cmp	r3, #9
 8002908:	bf94      	ite	ls
 800290a:	2301      	movls	r3, #1
 800290c:	2300      	movhi	r3, #0
 800290e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002910:	2b00      	cmp	r3, #0
 8002912:	d079      	beq.n	8002a08 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	2b00      	cmp	r3, #0
 800291e:	d107      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x4d4>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0e9b      	lsrs	r3, r3, #26
 8002926:	3301      	adds	r3, #1
 8002928:	069b      	lsls	r3, r3, #26
 800292a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800292e:	e015      	b.n	800295c <HAL_ADC_ConfigChannel+0x500>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800293e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002940:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002948:	2320      	movs	r3, #32
 800294a:	e003      	b.n	8002954 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800294c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	3301      	adds	r3, #1
 8002956:	069b      	lsls	r3, r3, #26
 8002958:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <HAL_ADC_ConfigChannel+0x520>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	3301      	adds	r3, #1
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	e017      	b.n	80029ac <HAL_ADC_ConfigChannel+0x550>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800298a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800298c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800298e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002994:	2320      	movs	r3, #32
 8002996:	e003      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	3301      	adds	r3, #1
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	2101      	movs	r1, #1
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	ea42 0103 	orr.w	r1, r2, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x576>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0e9b      	lsrs	r3, r3, #26
 80029c2:	3301      	adds	r3, #1
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	051b      	lsls	r3, r3, #20
 80029d0:	e018      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x5a8>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80029ea:	2320      	movs	r3, #32
 80029ec:	e003      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80029ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a04:	430b      	orrs	r3, r1
 8002a06:	e07e      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x5c8>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	069b      	lsls	r3, r3, #26
 8002a1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a22:	e015      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x5f4>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	e003      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	069b      	lsls	r3, r3, #26
 8002a4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d109      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x614>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0e9b      	lsrs	r3, r3, #26
 8002a62:	3301      	adds	r3, #1
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	e017      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x644>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	61fb      	str	r3, [r7, #28]
  return result;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e003      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	ea42 0103 	orr.w	r1, r2, r3
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10d      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x670>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3b1e      	subs	r3, #30
 8002ac4:	051b      	lsls	r3, r3, #20
 8002ac6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aca:	e01b      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x6a8>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	613b      	str	r3, [r7, #16]
  return result;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	e003      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	f003 021f 	and.w	r2, r3, #31
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	3b1e      	subs	r3, #30
 8002afe:	051b      	lsls	r3, r3, #20
 8002b00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b04:	430b      	orrs	r3, r1
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	6892      	ldr	r2, [r2, #8]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7ff fa08 	bl	8001f20 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_ADC_ConfigChannel+0x6e0>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80be 	beq.w	8002c9a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b26:	d004      	beq.n	8002b32 <HAL_ADC_ConfigChannel+0x6d6>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_ADC_ConfigChannel+0x6e4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d10a      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x6ec>
 8002b32:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <HAL_ADC_ConfigChannel+0x6e8>)
 8002b34:	e009      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x6ee>
 8002b36:	bf00      	nop
 8002b38:	407f0000 	.word	0x407f0000
 8002b3c:	80080000 	.word	0x80080000
 8002b40:	50000100 	.word	0x50000100
 8002b44:	50000300 	.word	0x50000300
 8002b48:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <HAL_ADC_ConfigChannel+0x854>)
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff f910 	bl	8001d70 <LL_ADC_GetCommonPathInternalCh>
 8002b50:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a56      	ldr	r2, [pc, #344]	; (8002cb4 <HAL_ADC_ConfigChannel+0x858>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d004      	beq.n	8002b68 <HAL_ADC_ConfigChannel+0x70c>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a55      	ldr	r2, [pc, #340]	; (8002cb8 <HAL_ADC_ConfigChannel+0x85c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d13a      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d134      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b7c:	d005      	beq.n	8002b8a <HAL_ADC_ConfigChannel+0x72e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a4e      	ldr	r2, [pc, #312]	; (8002cbc <HAL_ADC_ConfigChannel+0x860>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	f040 8085 	bne.w	8002c94 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b92:	d004      	beq.n	8002b9e <HAL_ADC_ConfigChannel+0x742>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a49      	ldr	r2, [pc, #292]	; (8002cc0 <HAL_ADC_ConfigChannel+0x864>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x746>
 8002b9e:	4a49      	ldr	r2, [pc, #292]	; (8002cc4 <HAL_ADC_ConfigChannel+0x868>)
 8002ba0:	e000      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x748>
 8002ba2:	4a43      	ldr	r2, [pc, #268]	; (8002cb0 <HAL_ADC_ConfigChannel+0x854>)
 8002ba4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f7ff f8cb 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bb4:	4b44      	ldr	r3, [pc, #272]	; (8002cc8 <HAL_ADC_ConfigChannel+0x86c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	099b      	lsrs	r3, r3, #6
 8002bba:	4a44      	ldr	r2, [pc, #272]	; (8002ccc <HAL_ADC_ConfigChannel+0x870>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	099b      	lsrs	r3, r3, #6
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bce:	e002      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f9      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bdc:	e05a      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a3b      	ldr	r2, [pc, #236]	; (8002cd0 <HAL_ADC_ConfigChannel+0x874>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d125      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x7d8>
 8002be8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d11f      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a31      	ldr	r2, [pc, #196]	; (8002cc0 <HAL_ADC_ConfigChannel+0x864>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d104      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x7ac>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a34      	ldr	r2, [pc, #208]	; (8002cd4 <HAL_ADC_ConfigChannel+0x878>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d047      	beq.n	8002c98 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c10:	d004      	beq.n	8002c1c <HAL_ADC_ConfigChannel+0x7c0>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <HAL_ADC_ConfigChannel+0x864>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x7c4>
 8002c1c:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <HAL_ADC_ConfigChannel+0x868>)
 8002c1e:	e000      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x7c6>
 8002c20:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <HAL_ADC_ConfigChannel+0x854>)
 8002c22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	f7ff f88c 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c32:	e031      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <HAL_ADC_ConfigChannel+0x87c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d12d      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d127      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <HAL_ADC_ConfigChannel+0x864>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d022      	beq.n	8002c9a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c5c:	d004      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0x80c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <HAL_ADC_ConfigChannel+0x864>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d101      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x810>
 8002c68:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <HAL_ADC_ConfigChannel+0x868>)
 8002c6a:	e000      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x812>
 8002c6c:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <HAL_ADC_ConfigChannel+0x854>)
 8002c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f7ff f866 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
 8002c7e:	e00c      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002c92:	e002      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c94:	bf00      	nop
 8002c96:	e000      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ca2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	37d8      	adds	r7, #216	; 0xd8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	50000700 	.word	0x50000700
 8002cb4:	c3210000 	.word	0xc3210000
 8002cb8:	90c00010 	.word	0x90c00010
 8002cbc:	50000600 	.word	0x50000600
 8002cc0:	50000100 	.word	0x50000100
 8002cc4:	50000300 	.word	0x50000300
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	053e2d63 	.word	0x053e2d63
 8002cd0:	c7520000 	.word	0xc7520000
 8002cd4:	50000500 	.word	0x50000500
 8002cd8:	cb840000 	.word	0xcb840000

08002cdc <LL_ADC_IsEnabled>:
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <LL_ADC_IsEnabled+0x18>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <LL_ADC_IsEnabled+0x1a>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d101      	bne.n	8002d1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b0a1      	sub	sp, #132	; 0x84
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e0e7      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002d52:	2300      	movs	r3, #0
 8002d54:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d5e:	d102      	bne.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d60:	4b6f      	ldr	r3, [pc, #444]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	e009      	b.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a6e      	ldr	r2, [pc, #440]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d102      	bne.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002d70:	4b6d      	ldr	r3, [pc, #436]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	e001      	b.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0be      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ffb1 	bl	8002d02 <LL_ADC_REG_IsConversionOngoing>
 8002da0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ffab 	bl	8002d02 <LL_ADC_REG_IsConversionOngoing>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 80a0 	bne.w	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 809c 	bne.w	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc4:	d004      	beq.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a55      	ldr	r2, [pc, #340]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002dd0:	4b56      	ldr	r3, [pc, #344]	; (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002dd2:	e000      	b.n	8002dd6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002dd4:	4b56      	ldr	r3, [pc, #344]	; (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002dd6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d04b      	beq.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002df2:	035b      	lsls	r3, r3, #13
 8002df4:	430b      	orrs	r3, r1
 8002df6:	431a      	orrs	r2, r3
 8002df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dfa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e04:	d004      	beq.n	8002e10 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a45      	ldr	r2, [pc, #276]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d10f      	bne.n	8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002e10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e14:	f7ff ff62 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e18:	4604      	mov	r4, r0
 8002e1a:	4841      	ldr	r0, [pc, #260]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e1c:	f7ff ff5e 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e20:	4603      	mov	r3, r0
 8002e22:	4323      	orrs	r3, r4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e012      	b.n	8002e56 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002e30:	483c      	ldr	r0, [pc, #240]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e32:	f7ff ff53 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e36:	4604      	mov	r4, r0
 8002e38:	483b      	ldr	r0, [pc, #236]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e3a:	f7ff ff4f 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	431c      	orrs	r4, r3
 8002e42:	483c      	ldr	r0, [pc, #240]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e44:	f7ff ff4a 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4323      	orrs	r3, r4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d056      	beq.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e62:	f023 030f 	bic.w	r3, r3, #15
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	6811      	ldr	r1, [r2, #0]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	6892      	ldr	r2, [r2, #8]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	431a      	orrs	r2, r3
 8002e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e74:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e76:	e047      	b.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e82:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e8c:	d004      	beq.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a23      	ldr	r2, [pc, #140]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d10f      	bne.n	8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002e98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e9c:	f7ff ff1e 	bl	8002cdc <LL_ADC_IsEnabled>
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	481f      	ldr	r0, [pc, #124]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ea4:	f7ff ff1a 	bl	8002cdc <LL_ADC_IsEnabled>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4323      	orrs	r3, r4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e012      	b.n	8002ede <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002eb8:	481a      	ldr	r0, [pc, #104]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002eba:	f7ff ff0f 	bl	8002cdc <LL_ADC_IsEnabled>
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4819      	ldr	r0, [pc, #100]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ec2:	f7ff ff0b 	bl	8002cdc <LL_ADC_IsEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	431c      	orrs	r4, r3
 8002eca:	481a      	ldr	r0, [pc, #104]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002ecc:	f7ff ff06 	bl	8002cdc <LL_ADC_IsEnabled>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4323      	orrs	r3, r4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d012      	beq.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002eea:	f023 030f 	bic.w	r3, r3, #15
 8002eee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ef0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef2:	e009      	b.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f06:	e000      	b.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3784      	adds	r7, #132	; 0x84
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd90      	pop	{r4, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	50000100 	.word	0x50000100
 8002f24:	50000400 	.word	0x50000400
 8002f28:	50000500 	.word	0x50000500
 8002f2c:	50000300 	.word	0x50000300
 8002f30:	50000700 	.word	0x50000700
 8002f34:	50000600 	.word	0x50000600

08002f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f54:	4013      	ands	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f6a:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	60d3      	str	r3, [r2, #12]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <__NVIC_GetPriorityGrouping+0x18>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	f003 0307 	and.w	r3, r3, #7
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	db0b      	blt.n	8002fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <__NVIC_EnableIRQ+0x38>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000e100 	.word	0xe000e100

08002fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6039      	str	r1, [r7, #0]
 8002fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	db0a      	blt.n	8003002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	490c      	ldr	r1, [pc, #48]	; (8003024 <__NVIC_SetPriority+0x4c>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	0112      	lsls	r2, r2, #4
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003000:	e00a      	b.n	8003018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4908      	ldr	r1, [pc, #32]	; (8003028 <__NVIC_SetPriority+0x50>)
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	3b04      	subs	r3, #4
 8003010:	0112      	lsls	r2, r2, #4
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	440b      	add	r3, r1
 8003016:	761a      	strb	r2, [r3, #24]
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000e100 	.word	0xe000e100
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f1c3 0307 	rsb	r3, r3, #7
 8003046:	2b04      	cmp	r3, #4
 8003048:	bf28      	it	cs
 800304a:	2304      	movcs	r3, #4
 800304c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3304      	adds	r3, #4
 8003052:	2b06      	cmp	r3, #6
 8003054:	d902      	bls.n	800305c <NVIC_EncodePriority+0x30>
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3b03      	subs	r3, #3
 800305a:	e000      	b.n	800305e <NVIC_EncodePriority+0x32>
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003060:	f04f 32ff 	mov.w	r2, #4294967295
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	401a      	ands	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003074:	f04f 31ff 	mov.w	r1, #4294967295
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	43d9      	mvns	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	4313      	orrs	r3, r2
         );
}
 8003086:	4618      	mov	r0, r3
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff ff4c 	bl	8002f38 <__NVIC_SetPriorityGrouping>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030b6:	f7ff ff63 	bl	8002f80 <__NVIC_GetPriorityGrouping>
 80030ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	6978      	ldr	r0, [r7, #20]
 80030c2:	f7ff ffb3 	bl	800302c <NVIC_EncodePriority>
 80030c6:	4602      	mov	r2, r0
 80030c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff ff82 	bl	8002fd8 <__NVIC_SetPriority>
}
 80030d4:	bf00      	nop
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ff56 	bl	8002f9c <__NVIC_EnableIRQ>
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d005      	beq.n	800311c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2204      	movs	r2, #4
 8003114:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
 800311a:	e037      	b.n	800318c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 020e 	bic.w	r2, r2, #14
 800312a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800313a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	f003 021f 	and.w	r2, r3, #31
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	2101      	movs	r1, #1
 800315a:	fa01 f202 	lsl.w	r2, r1, r2
 800315e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003168:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00c      	beq.n	800318c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003180:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800318a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d00d      	beq.n	80031de <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2204      	movs	r2, #4
 80031c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e047      	b.n	800326e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 020e 	bic.w	r2, r2, #14
 80031ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0201 	bic.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800320c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	f003 021f 	and.w	r2, r3, #31
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	2101      	movs	r1, #1
 800321c:	fa01 f202 	lsl.w	r2, r1, r2
 8003220:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800322a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00c      	beq.n	800324e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003242:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800324c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	4798      	blx	r3
    }
  }
  return status;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003286:	e15a      	b.n	800353e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	2101      	movs	r1, #1
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	4013      	ands	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 814c 	beq.w	8003538 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d005      	beq.n	80032b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d130      	bne.n	800331a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2203      	movs	r2, #3
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ee:	2201      	movs	r2, #1
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	f003 0201 	and.w	r2, r3, #1
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b03      	cmp	r3, #3
 8003324:	d017      	beq.n	8003356 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	2203      	movs	r2, #3
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4013      	ands	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d123      	bne.n	80033aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	08da      	lsrs	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3208      	adds	r2, #8
 800336a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	220f      	movs	r2, #15
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	691a      	ldr	r2, [r3, #16]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	08da      	lsrs	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3208      	adds	r2, #8
 80033a4:	6939      	ldr	r1, [r7, #16]
 80033a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	2203      	movs	r2, #3
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0203 	and.w	r2, r3, #3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80a6 	beq.w	8003538 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ec:	4b5b      	ldr	r3, [pc, #364]	; (800355c <HAL_GPIO_Init+0x2e4>)
 80033ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f0:	4a5a      	ldr	r2, [pc, #360]	; (800355c <HAL_GPIO_Init+0x2e4>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6613      	str	r3, [r2, #96]	; 0x60
 80033f8:	4b58      	ldr	r3, [pc, #352]	; (800355c <HAL_GPIO_Init+0x2e4>)
 80033fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003404:	4a56      	ldr	r2, [pc, #344]	; (8003560 <HAL_GPIO_Init+0x2e8>)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	3302      	adds	r3, #2
 800340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003410:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	220f      	movs	r2, #15
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800342e:	d01f      	beq.n	8003470 <HAL_GPIO_Init+0x1f8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a4c      	ldr	r2, [pc, #304]	; (8003564 <HAL_GPIO_Init+0x2ec>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d019      	beq.n	800346c <HAL_GPIO_Init+0x1f4>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a4b      	ldr	r2, [pc, #300]	; (8003568 <HAL_GPIO_Init+0x2f0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d013      	beq.n	8003468 <HAL_GPIO_Init+0x1f0>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a4a      	ldr	r2, [pc, #296]	; (800356c <HAL_GPIO_Init+0x2f4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00d      	beq.n	8003464 <HAL_GPIO_Init+0x1ec>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a49      	ldr	r2, [pc, #292]	; (8003570 <HAL_GPIO_Init+0x2f8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d007      	beq.n	8003460 <HAL_GPIO_Init+0x1e8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a48      	ldr	r2, [pc, #288]	; (8003574 <HAL_GPIO_Init+0x2fc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d101      	bne.n	800345c <HAL_GPIO_Init+0x1e4>
 8003458:	2305      	movs	r3, #5
 800345a:	e00a      	b.n	8003472 <HAL_GPIO_Init+0x1fa>
 800345c:	2306      	movs	r3, #6
 800345e:	e008      	b.n	8003472 <HAL_GPIO_Init+0x1fa>
 8003460:	2304      	movs	r3, #4
 8003462:	e006      	b.n	8003472 <HAL_GPIO_Init+0x1fa>
 8003464:	2303      	movs	r3, #3
 8003466:	e004      	b.n	8003472 <HAL_GPIO_Init+0x1fa>
 8003468:	2302      	movs	r3, #2
 800346a:	e002      	b.n	8003472 <HAL_GPIO_Init+0x1fa>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_GPIO_Init+0x1fa>
 8003470:	2300      	movs	r3, #0
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	f002 0203 	and.w	r2, r2, #3
 8003478:	0092      	lsls	r2, r2, #2
 800347a:	4093      	lsls	r3, r2
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003482:	4937      	ldr	r1, [pc, #220]	; (8003560 <HAL_GPIO_Init+0x2e8>)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3302      	adds	r3, #2
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003490:	4b39      	ldr	r3, [pc, #228]	; (8003578 <HAL_GPIO_Init+0x300>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	43db      	mvns	r3, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034b4:	4a30      	ldr	r2, [pc, #192]	; (8003578 <HAL_GPIO_Init+0x300>)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034ba:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <HAL_GPIO_Init+0x300>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034de:	4a26      	ldr	r2, [pc, #152]	; (8003578 <HAL_GPIO_Init+0x300>)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80034e4:	4b24      	ldr	r3, [pc, #144]	; (8003578 <HAL_GPIO_Init+0x300>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003508:	4a1b      	ldr	r2, [pc, #108]	; (8003578 <HAL_GPIO_Init+0x300>)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800350e:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_GPIO_Init+0x300>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	43db      	mvns	r3, r3
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003532:	4a11      	ldr	r2, [pc, #68]	; (8003578 <HAL_GPIO_Init+0x300>)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3301      	adds	r3, #1
 800353c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	f47f ae9d 	bne.w	8003288 <HAL_GPIO_Init+0x10>
  }
}
 800354e:	bf00      	nop
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40021000 	.word	0x40021000
 8003560:	40010000 	.word	0x40010000
 8003564:	48000400 	.word	0x48000400
 8003568:	48000800 	.word	0x48000800
 800356c:	48000c00 	.word	0x48000c00
 8003570:	48001000 	.word	0x48001000
 8003574:	48001400 	.word	0x48001400
 8003578:	40010400 	.word	0x40010400

0800357c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	807b      	strh	r3, [r7, #2]
 8003588:	4613      	mov	r3, r2
 800358a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800358c:	787b      	ldrb	r3, [r7, #1]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003598:	e002      	b.n	80035a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800359a:	887a      	ldrh	r2, [r7, #2]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035c2:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f806 	bl	80035dc <HAL_GPIO_EXTI_Callback>
  }
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40010400 	.word	0x40010400

080035dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d141      	bne.n	8003686 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003602:	4b4b      	ldr	r3, [pc, #300]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800360a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360e:	d131      	bne.n	8003674 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003610:	4b47      	ldr	r3, [pc, #284]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003616:	4a46      	ldr	r2, [pc, #280]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800361c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003620:	4b43      	ldr	r3, [pc, #268]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003628:	4a41      	ldr	r2, [pc, #260]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800362e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003630:	4b40      	ldr	r3, [pc, #256]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2232      	movs	r2, #50	; 0x32
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	4a3f      	ldr	r2, [pc, #252]	; (8003738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	0c9b      	lsrs	r3, r3, #18
 8003642:	3301      	adds	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003646:	e002      	b.n	800364e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3b01      	subs	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800364e:	4b38      	ldr	r3, [pc, #224]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365a:	d102      	bne.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f2      	bne.n	8003648 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003662:	4b33      	ldr	r3, [pc, #204]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366e:	d158      	bne.n	8003722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e057      	b.n	8003724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003674:	4b2e      	ldr	r3, [pc, #184]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367a:	4a2d      	ldr	r2, [pc, #180]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003684:	e04d      	b.n	8003722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368c:	d141      	bne.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800368e:	4b28      	ldr	r3, [pc, #160]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d131      	bne.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a2:	4a23      	ldr	r2, [pc, #140]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036ac:	4b20      	ldr	r3, [pc, #128]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036b4:	4a1e      	ldr	r2, [pc, #120]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036bc:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2232      	movs	r2, #50	; 0x32
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	0c9b      	lsrs	r3, r3, #18
 80036ce:	3301      	adds	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d2:	e002      	b.n	80036da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e6:	d102      	bne.n	80036ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f2      	bne.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fa:	d112      	bne.n	8003722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e011      	b.n	8003724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003710:	e007      	b.n	8003722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003712:	4b07      	ldr	r3, [pc, #28]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800371a:	4a05      	ldr	r2, [pc, #20]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003720:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	40007000 	.word	0x40007000
 8003734:	20000000 	.word	0x20000000
 8003738:	431bde83 	.word	0x431bde83

0800373c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a04      	ldr	r2, [pc, #16]	; (8003758 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800374a:	6093      	str	r3, [r2, #8]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40007000 	.word	0x40007000

0800375c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e306      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d075      	beq.n	8003866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377a:	4b97      	ldr	r3, [pc, #604]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003784:	4b94      	ldr	r3, [pc, #592]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b0c      	cmp	r3, #12
 8003792:	d102      	bne.n	800379a <HAL_RCC_OscConfig+0x3e>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d002      	beq.n	80037a0 <HAL_RCC_OscConfig+0x44>
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b08      	cmp	r3, #8
 800379e:	d10b      	bne.n	80037b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	4b8d      	ldr	r3, [pc, #564]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d05b      	beq.n	8003864 <HAL_RCC_OscConfig+0x108>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d157      	bne.n	8003864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e2e1      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c0:	d106      	bne.n	80037d0 <HAL_RCC_OscConfig+0x74>
 80037c2:	4b85      	ldr	r3, [pc, #532]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a84      	ldr	r2, [pc, #528]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e01d      	b.n	800380c <HAL_RCC_OscConfig+0xb0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x98>
 80037da:	4b7f      	ldr	r3, [pc, #508]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7e      	ldr	r2, [pc, #504]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b7c      	ldr	r3, [pc, #496]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a7b      	ldr	r2, [pc, #492]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e00b      	b.n	800380c <HAL_RCC_OscConfig+0xb0>
 80037f4:	4b78      	ldr	r3, [pc, #480]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a77      	ldr	r2, [pc, #476]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	4b75      	ldr	r3, [pc, #468]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a74      	ldr	r2, [pc, #464]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d013      	beq.n	800383c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fe fa58 	bl	8001cc8 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800381c:	f7fe fa54 	bl	8001cc8 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e2a6      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800382e:	4b6a      	ldr	r3, [pc, #424]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0xc0>
 800383a:	e014      	b.n	8003866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe fa44 	bl	8001cc8 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003844:	f7fe fa40 	bl	8001cc8 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	; 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e292      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003856:	4b60      	ldr	r3, [pc, #384]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0xe8>
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d075      	beq.n	800395e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003872:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800387c:	4b56      	ldr	r3, [pc, #344]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b0c      	cmp	r3, #12
 800388a:	d102      	bne.n	8003892 <HAL_RCC_OscConfig+0x136>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d002      	beq.n	8003898 <HAL_RCC_OscConfig+0x13c>
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d11f      	bne.n	80038d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003898:	4b4f      	ldr	r3, [pc, #316]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_OscConfig+0x154>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e265      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b0:	4b49      	ldr	r3, [pc, #292]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	061b      	lsls	r3, r3, #24
 80038be:	4946      	ldr	r1, [pc, #280]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038c4:	4b45      	ldr	r3, [pc, #276]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd fd3d 	bl	8001348 <HAL_InitTick>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d043      	beq.n	800395c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e251      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d023      	beq.n	8003928 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e0:	4b3d      	ldr	r3, [pc, #244]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a3c      	ldr	r2, [pc, #240]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80038e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fe f9ec 	bl	8001cc8 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fe f9e8 	bl	8001cc8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e23a      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003906:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003912:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	061b      	lsls	r3, r3, #24
 8003920:	492d      	ldr	r1, [pc, #180]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003922:	4313      	orrs	r3, r2
 8003924:	604b      	str	r3, [r1, #4]
 8003926:	e01a      	b.n	800395e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003928:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2a      	ldr	r2, [pc, #168]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800392e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fe f9c8 	bl	8001cc8 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393c:	f7fe f9c4 	bl	8001cc8 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e216      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800394e:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x1e0>
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800395c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d041      	beq.n	80039ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d01c      	beq.n	80039ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003972:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003978:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003982:	f7fe f9a1 	bl	8001cc8 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398a:	f7fe f99d 	bl	8001cc8 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1ef      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800399e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0ef      	beq.n	800398a <HAL_RCC_OscConfig+0x22e>
 80039aa:	e020      	b.n	80039ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80039ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b2:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fe f984 	bl	8001cc8 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039c2:	e00d      	b.n	80039e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c4:	f7fe f980 	bl	8001cc8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d906      	bls.n	80039e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e1d2      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	20000090 	.word	0x20000090
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e0:	4b8c      	ldr	r3, [pc, #560]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 80039e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1ea      	bne.n	80039c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80a6 	beq.w	8003b48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a00:	4b84      	ldr	r3, [pc, #528]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2b4>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x2b6>
 8003a10:	2300      	movs	r3, #0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a16:	4b7f      	ldr	r3, [pc, #508]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	4a7e      	ldr	r2, [pc, #504]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a20:	6593      	str	r3, [r2, #88]	; 0x58
 8003a22:	4b7c      	ldr	r3, [pc, #496]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a32:	4b79      	ldr	r3, [pc, #484]	; (8003c18 <HAL_RCC_OscConfig+0x4bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d118      	bne.n	8003a70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a3e:	4b76      	ldr	r3, [pc, #472]	; (8003c18 <HAL_RCC_OscConfig+0x4bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a75      	ldr	r2, [pc, #468]	; (8003c18 <HAL_RCC_OscConfig+0x4bc>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4a:	f7fe f93d 	bl	8001cc8 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a52:	f7fe f939 	bl	8001cc8 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e18b      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a64:	4b6c      	ldr	r3, [pc, #432]	; (8003c18 <HAL_RCC_OscConfig+0x4bc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d108      	bne.n	8003a8a <HAL_RCC_OscConfig+0x32e>
 8003a78:	4b66      	ldr	r3, [pc, #408]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	4a65      	ldr	r2, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a88:	e024      	b.n	8003ad4 <HAL_RCC_OscConfig+0x378>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d110      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x358>
 8003a92:	4b60      	ldr	r3, [pc, #384]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a98:	4a5e      	ldr	r2, [pc, #376]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a9a:	f043 0304 	orr.w	r3, r3, #4
 8003a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa2:	4b5c      	ldr	r3, [pc, #368]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa8:	4a5a      	ldr	r2, [pc, #360]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab2:	e00f      	b.n	8003ad4 <HAL_RCC_OscConfig+0x378>
 8003ab4:	4b57      	ldr	r3, [pc, #348]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	4a56      	ldr	r2, [pc, #344]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac4:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003acc:	f023 0304 	bic.w	r3, r3, #4
 8003ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d016      	beq.n	8003b0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003adc:	f7fe f8f4 	bl	8001cc8 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f7fe f8f0 	bl	8001cc8 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e140      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afa:	4b46      	ldr	r3, [pc, #280]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ed      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x388>
 8003b08:	e015      	b.n	8003b36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0a:	f7fe f8dd 	bl	8001cc8 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b10:	e00a      	b.n	8003b28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7fe f8d9 	bl	8001cc8 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e129      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b28:	4b3a      	ldr	r3, [pc, #232]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1ed      	bne.n	8003b12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b36:	7ffb      	ldrb	r3, [r7, #31]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d105      	bne.n	8003b48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3c:	4b35      	ldr	r3, [pc, #212]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b40:	4a34      	ldr	r2, [pc, #208]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d03c      	beq.n	8003bce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01c      	beq.n	8003b96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b5c:	4b2d      	ldr	r3, [pc, #180]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b62:	4a2c      	ldr	r2, [pc, #176]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fe f8ac 	bl	8001cc8 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b74:	f7fe f8a8 	bl	8001cc8 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e0fa      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b86:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0ef      	beq.n	8003b74 <HAL_RCC_OscConfig+0x418>
 8003b94:	e01b      	b.n	8003bce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b96:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b9c:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fe f88f 	bl	8001cc8 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bae:	f7fe f88b 	bl	8001cc8 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e0dd      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1ef      	bne.n	8003bae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80d1 	beq.w	8003d7a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	f000 808b 	beq.w	8003cfc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d15e      	bne.n	8003cac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a08      	ldr	r2, [pc, #32]	; (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfa:	f7fe f865 	bl	8001cc8 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c00:	e00c      	b.n	8003c1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c02:	f7fe f861 	bl	8001cc8 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d905      	bls.n	8003c1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e0b3      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1c:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ec      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c28:	4b56      	ldr	r3, [pc, #344]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	4b56      	ldr	r3, [pc, #344]	; (8003d88 <HAL_RCC_OscConfig+0x62c>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6a11      	ldr	r1, [r2, #32]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c38:	3a01      	subs	r2, #1
 8003c3a:	0112      	lsls	r2, r2, #4
 8003c3c:	4311      	orrs	r1, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c42:	0212      	lsls	r2, r2, #8
 8003c44:	4311      	orrs	r1, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c4a:	0852      	lsrs	r2, r2, #1
 8003c4c:	3a01      	subs	r2, #1
 8003c4e:	0552      	lsls	r2, r2, #21
 8003c50:	4311      	orrs	r1, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c56:	0852      	lsrs	r2, r2, #1
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	0652      	lsls	r2, r2, #25
 8003c5c:	4311      	orrs	r1, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c62:	06d2      	lsls	r2, r2, #27
 8003c64:	430a      	orrs	r2, r1
 8003c66:	4947      	ldr	r1, [pc, #284]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c6c:	4b45      	ldr	r3, [pc, #276]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a44      	ldr	r2, [pc, #272]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c78:	4b42      	ldr	r3, [pc, #264]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a41      	ldr	r2, [pc, #260]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fe f820 	bl	8001cc8 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fe f81c 	bl	8001cc8 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e06e      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9e:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x530>
 8003caa:	e066      	b.n	8003d7a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cac:	4b35      	ldr	r3, [pc, #212]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a34      	ldr	r2, [pc, #208]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003cb8:	4b32      	ldr	r3, [pc, #200]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4a31      	ldr	r2, [pc, #196]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cc4:	4b2f      	ldr	r3, [pc, #188]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a2e      	ldr	r2, [pc, #184]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003cca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fd fff8 	bl	8001cc8 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fd fff4 	bl	8001cc8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e046      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cee:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x580>
 8003cfa:	e03e      	b.n	8003d7a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e039      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d08:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <HAL_RCC_OscConfig+0x628>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f003 0203 	and.w	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d12c      	bne.n	8003d76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	3b01      	subs	r3, #1
 8003d28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d123      	bne.n	8003d76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d11b      	bne.n	8003d76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d113      	bne.n	8003d76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d001      	beq.n	8003d7a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021000 	.word	0x40021000
 8003d88:	019f800c 	.word	0x019f800c

08003d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e11e      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da4:	4b91      	ldr	r3, [pc, #580]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d910      	bls.n	8003dd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b8e      	ldr	r3, [pc, #568]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 020f 	bic.w	r2, r3, #15
 8003dba:	498c      	ldr	r1, [pc, #560]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc2:	4b8a      	ldr	r3, [pc, #552]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e106      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d073      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d129      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de8:	4b81      	ldr	r3, [pc, #516]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0f4      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003df8:	f000 f9d0 	bl	800419c <RCC_GetSysClockFreqFromPLLSource>
 8003dfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4a7c      	ldr	r2, [pc, #496]	; (8003ff4 <HAL_RCC_ClockConfig+0x268>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d93f      	bls.n	8003e86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e06:	4b7a      	ldr	r3, [pc, #488]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d033      	beq.n	8003e86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d12f      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e26:	4b72      	ldr	r3, [pc, #456]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e2e:	4a70      	ldr	r2, [pc, #448]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	e024      	b.n	8003e86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d107      	bne.n	8003e54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e44:	4b6a      	ldr	r3, [pc, #424]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0c6      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e54:	4b66      	ldr	r3, [pc, #408]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0be      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e64:	f000 f8ce 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4a61      	ldr	r2, [pc, #388]	; (8003ff4 <HAL_RCC_ClockConfig+0x268>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d909      	bls.n	8003e86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e72:	4b5f      	ldr	r3, [pc, #380]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e7a:	4a5d      	ldr	r2, [pc, #372]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e86:	4b5a      	ldr	r3, [pc, #360]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f023 0203 	bic.w	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4957      	ldr	r1, [pc, #348]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e98:	f7fd ff16 	bl	8001cc8 <HAL_GetTick>
 8003e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea0:	f7fd ff12 	bl	8001cc8 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e095      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb6:	4b4e      	ldr	r3, [pc, #312]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 020c 	and.w	r2, r3, #12
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d1eb      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d023      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee0:	4b43      	ldr	r3, [pc, #268]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a42      	ldr	r2, [pc, #264]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003ee6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003eea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ef8:	4b3d      	ldr	r3, [pc, #244]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f00:	4a3b      	ldr	r2, [pc, #236]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003f02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f08:	4b39      	ldr	r3, [pc, #228]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4936      	ldr	r1, [pc, #216]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d105      	bne.n	8003f2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f22:	4b33      	ldr	r3, [pc, #204]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4a32      	ldr	r2, [pc, #200]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003f28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f2e:	4b2f      	ldr	r3, [pc, #188]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d21d      	bcs.n	8003f78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3c:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f023 020f 	bic.w	r2, r3, #15
 8003f44:	4929      	ldr	r1, [pc, #164]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f4c:	f7fd febc 	bl	8001cc8 <HAL_GetTick>
 8003f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f54:	f7fd feb8 	bl	8001cc8 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e03b      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d1ed      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4917      	ldr	r1, [pc, #92]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	490f      	ldr	r1, [pc, #60]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fb6:	f000 f825 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <HAL_RCC_ClockConfig+0x264>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	490c      	ldr	r1, [pc, #48]	; (8003ff8 <HAL_RCC_ClockConfig+0x26c>)
 8003fc8:	5ccb      	ldrb	r3, [r1, r3]
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd2:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <HAL_RCC_ClockConfig+0x270>)
 8003fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <HAL_RCC_ClockConfig+0x274>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fd f9b4 	bl	8001348 <HAL_InitTick>
 8003fe0:	4603      	mov	r3, r0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40022000 	.word	0x40022000
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	04c4b400 	.word	0x04c4b400
 8003ff8:	08008698 	.word	0x08008698
 8003ffc:	20000000 	.word	0x20000000
 8004000:	20000090 	.word	0x20000090

08004004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800400a:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b04      	cmp	r3, #4
 8004014:	d102      	bne.n	800401c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004016:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	e047      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800401c:	4b27      	ldr	r3, [pc, #156]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 030c 	and.w	r3, r3, #12
 8004024:	2b08      	cmp	r3, #8
 8004026:	d102      	bne.n	800402e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004028:	4b26      	ldr	r3, [pc, #152]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	e03e      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800402e:	4b23      	ldr	r3, [pc, #140]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d136      	bne.n	80040a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004044:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	3301      	adds	r3, #1
 8004050:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d10c      	bne.n	8004072 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004058:	4a1a      	ldr	r2, [pc, #104]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	4a16      	ldr	r2, [pc, #88]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004062:	68d2      	ldr	r2, [r2, #12]
 8004064:	0a12      	lsrs	r2, r2, #8
 8004066:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	617b      	str	r3, [r7, #20]
      break;
 8004070:	e00c      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004072:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	fbb2 f3f3 	udiv	r3, r2, r3
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800407c:	68d2      	ldr	r2, [r2, #12]
 800407e:	0a12      	lsrs	r2, r2, #8
 8004080:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]
      break;
 800408a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	0e5b      	lsrs	r3, r3, #25
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	3301      	adds	r3, #1
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	e001      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040ac:	693b      	ldr	r3, [r7, #16]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000
 80040c0:	00f42400 	.word	0x00f42400
 80040c4:	016e3600 	.word	0x016e3600

080040c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040cc:	4b03      	ldr	r3, [pc, #12]	; (80040dc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20000000 	.word	0x20000000

080040e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040e4:	f7ff fff0 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4904      	ldr	r1, [pc, #16]	; (8004108 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40021000 	.word	0x40021000
 8004108:	080086a8 	.word	0x080086a8

0800410c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004110:	f7ff ffda 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 8004114:	4602      	mov	r2, r0
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	0adb      	lsrs	r3, r3, #11
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	4904      	ldr	r1, [pc, #16]	; (8004134 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004122:	5ccb      	ldrb	r3, [r1, r3]
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000
 8004134:	080086a8 	.word	0x080086a8

08004138 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	220f      	movs	r2, #15
 8004146:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004148:	4b12      	ldr	r3, [pc, #72]	; (8004194 <HAL_RCC_GetClockConfig+0x5c>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0203 	and.w	r2, r3, #3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <HAL_RCC_GetClockConfig+0x5c>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <HAL_RCC_GetClockConfig+0x5c>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_RCC_GetClockConfig+0x5c>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	08db      	lsrs	r3, r3, #3
 8004172:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800417a:	4b07      	ldr	r3, [pc, #28]	; (8004198 <HAL_RCC_GetClockConfig+0x60>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 020f 	and.w	r2, r3, #15
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	601a      	str	r2, [r3, #0]
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	40022000 	.word	0x40022000

0800419c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041a2:	4b1e      	ldr	r3, [pc, #120]	; (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	3301      	adds	r3, #1
 80041b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d10c      	bne.n	80041da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041c0:	4a17      	ldr	r2, [pc, #92]	; (8004220 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	4a14      	ldr	r2, [pc, #80]	; (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ca:	68d2      	ldr	r2, [r2, #12]
 80041cc:	0a12      	lsrs	r2, r2, #8
 80041ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	617b      	str	r3, [r7, #20]
    break;
 80041d8:	e00c      	b.n	80041f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041da:	4a12      	ldr	r2, [pc, #72]	; (8004224 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e2:	4a0e      	ldr	r2, [pc, #56]	; (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041e4:	68d2      	ldr	r2, [r2, #12]
 80041e6:	0a12      	lsrs	r2, r2, #8
 80041e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
    break;
 80041f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	0e5b      	lsrs	r3, r3, #25
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800420e:	687b      	ldr	r3, [r7, #4]
}
 8004210:	4618      	mov	r0, r3
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	40021000 	.word	0x40021000
 8004220:	016e3600 	.word	0x016e3600
 8004224:	00f42400 	.word	0x00f42400

08004228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004230:	2300      	movs	r3, #0
 8004232:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004234:	2300      	movs	r3, #0
 8004236:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8098 	beq.w	8004376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004246:	2300      	movs	r3, #0
 8004248:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800424a:	4b43      	ldr	r3, [pc, #268]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10d      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	4b40      	ldr	r3, [pc, #256]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	4a3f      	ldr	r2, [pc, #252]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004260:	6593      	str	r3, [r2, #88]	; 0x58
 8004262:	4b3d      	ldr	r3, [pc, #244]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426e:	2301      	movs	r3, #1
 8004270:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004272:	4b3a      	ldr	r3, [pc, #232]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a39      	ldr	r2, [pc, #228]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800427e:	f7fd fd23 	bl	8001cc8 <HAL_GetTick>
 8004282:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004284:	e009      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004286:	f7fd fd1f 	bl	8001cc8 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d902      	bls.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	74fb      	strb	r3, [r7, #19]
        break;
 8004298:	e005      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800429a:	4b30      	ldr	r3, [pc, #192]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ef      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d159      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042ac:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01e      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d019      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042c8:	4b23      	ldr	r3, [pc, #140]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042d4:	4b20      	ldr	r3, [pc, #128]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	4a1f      	ldr	r2, [pc, #124]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042e4:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ea:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042f4:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d016      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7fd fcdf 	bl	8001cc8 <HAL_GetTick>
 800430a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430c:	e00b      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fd fcdb 	bl	8001cc8 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d902      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	74fb      	strb	r3, [r7, #19]
            break;
 8004324:	e006      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ec      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10b      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004348:	4903      	ldr	r1, [pc, #12]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004350:	e008      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	74bb      	strb	r3, [r7, #18]
 8004356:	e005      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004358:	40021000 	.word	0x40021000
 800435c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004364:	7c7b      	ldrb	r3, [r7, #17]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d105      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436a:	4ba7      	ldr	r3, [pc, #668]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436e:	4aa6      	ldr	r2, [pc, #664]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004374:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004382:	4ba1      	ldr	r3, [pc, #644]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f023 0203 	bic.w	r2, r3, #3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	499d      	ldr	r1, [pc, #628]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a4:	4b98      	ldr	r3, [pc, #608]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f023 020c 	bic.w	r2, r3, #12
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	4995      	ldr	r1, [pc, #596]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c6:	4b90      	ldr	r3, [pc, #576]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	498c      	ldr	r1, [pc, #560]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043e8:	4b87      	ldr	r3, [pc, #540]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	4984      	ldr	r1, [pc, #528]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800440a:	4b7f      	ldr	r3, [pc, #508]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	497b      	ldr	r1, [pc, #492]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800442c:	4b76      	ldr	r3, [pc, #472]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	4973      	ldr	r1, [pc, #460]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800444e:	4b6e      	ldr	r3, [pc, #440]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	496a      	ldr	r1, [pc, #424]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004470:	4b65      	ldr	r3, [pc, #404]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	4962      	ldr	r1, [pc, #392]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004492:	4b5d      	ldr	r3, [pc, #372]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004498:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	4959      	ldr	r1, [pc, #356]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044b4:	4b54      	ldr	r3, [pc, #336]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ba:	f023 0203 	bic.w	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	4951      	ldr	r1, [pc, #324]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044d6:	4b4c      	ldr	r3, [pc, #304]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	4948      	ldr	r1, [pc, #288]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d015      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044f8:	4b43      	ldr	r3, [pc, #268]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	4940      	ldr	r1, [pc, #256]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004516:	d105      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004518:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4a3a      	ldr	r2, [pc, #232]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004522:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800452c:	2b00      	cmp	r3, #0
 800452e:	d015      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004530:	4b35      	ldr	r3, [pc, #212]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453e:	4932      	ldr	r1, [pc, #200]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800454e:	d105      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004550:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a2c      	ldr	r2, [pc, #176]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d015      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004568:	4b27      	ldr	r3, [pc, #156]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	4924      	ldr	r1, [pc, #144]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004586:	d105      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004588:	4b1f      	ldr	r3, [pc, #124]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004592:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d015      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	4916      	ldr	r1, [pc, #88]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045be:	d105      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c0:	4b11      	ldr	r3, [pc, #68]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4a10      	ldr	r2, [pc, #64]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d019      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	4908      	ldr	r1, [pc, #32]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f6:	d109      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f8:	4b03      	ldr	r3, [pc, #12]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4a02      	ldr	r2, [pc, #8]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004602:	60d3      	str	r3, [r2, #12]
 8004604:	e002      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d015      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004618:	4b29      	ldr	r3, [pc, #164]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4926      	ldr	r1, [pc, #152]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004636:	d105      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004638:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4a20      	ldr	r2, [pc, #128]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004642:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d015      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465e:	4918      	ldr	r1, [pc, #96]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466e:	d105      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004670:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d015      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800468a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800468e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004696:	490a      	ldr	r1, [pc, #40]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046a6:	d105      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a04      	ldr	r2, [pc, #16]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80046b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000

080046c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e049      	b.n	800476a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fd f818 	bl	8001720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f000 fe90 	bl	8005428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	d001      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e054      	b.n	8004836 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a26      	ldr	r2, [pc, #152]	; (8004844 <HAL_TIM_Base_Start_IT+0xd0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d022      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b6:	d01d      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a22      	ldr	r2, [pc, #136]	; (8004848 <HAL_TIM_Base_Start_IT+0xd4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d018      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a21      	ldr	r2, [pc, #132]	; (800484c <HAL_TIM_Base_Start_IT+0xd8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d013      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <HAL_TIM_Base_Start_IT+0xdc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00e      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1e      	ldr	r2, [pc, #120]	; (8004854 <HAL_TIM_Base_Start_IT+0xe0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d009      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <HAL_TIM_Base_Start_IT+0xe4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d004      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1b      	ldr	r2, [pc, #108]	; (800485c <HAL_TIM_Base_Start_IT+0xe8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d115      	bne.n	8004820 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	4b19      	ldr	r3, [pc, #100]	; (8004860 <HAL_TIM_Base_Start_IT+0xec>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b06      	cmp	r3, #6
 8004804:	d015      	beq.n	8004832 <HAL_TIM_Base_Start_IT+0xbe>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480c:	d011      	beq.n	8004832 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0201 	orr.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481e:	e008      	b.n	8004832 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e000      	b.n	8004834 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004832:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40000400 	.word	0x40000400
 800484c:	40000800 	.word	0x40000800
 8004850:	40000c00 	.word	0x40000c00
 8004854:	40013400 	.word	0x40013400
 8004858:	40014000 	.word	0x40014000
 800485c:	40015000 	.word	0x40015000
 8004860:	00010007 	.word	0x00010007

08004864 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e049      	b.n	800490a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f841 	bl	8004912 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f000 fdc0 	bl	8005428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d109      	bne.n	800494c <HAL_TIM_PWM_Start+0x24>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	bf14      	ite	ne
 8004944:	2301      	movne	r3, #1
 8004946:	2300      	moveq	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	e03c      	b.n	80049c6 <HAL_TIM_PWM_Start+0x9e>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b04      	cmp	r3, #4
 8004950:	d109      	bne.n	8004966 <HAL_TIM_PWM_Start+0x3e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	bf14      	ite	ne
 800495e:	2301      	movne	r3, #1
 8004960:	2300      	moveq	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	e02f      	b.n	80049c6 <HAL_TIM_PWM_Start+0x9e>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b08      	cmp	r3, #8
 800496a:	d109      	bne.n	8004980 <HAL_TIM_PWM_Start+0x58>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b01      	cmp	r3, #1
 8004976:	bf14      	ite	ne
 8004978:	2301      	movne	r3, #1
 800497a:	2300      	moveq	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	e022      	b.n	80049c6 <HAL_TIM_PWM_Start+0x9e>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b0c      	cmp	r3, #12
 8004984:	d109      	bne.n	800499a <HAL_TIM_PWM_Start+0x72>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b01      	cmp	r3, #1
 8004990:	bf14      	ite	ne
 8004992:	2301      	movne	r3, #1
 8004994:	2300      	moveq	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	e015      	b.n	80049c6 <HAL_TIM_PWM_Start+0x9e>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b10      	cmp	r3, #16
 800499e:	d109      	bne.n	80049b4 <HAL_TIM_PWM_Start+0x8c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e008      	b.n	80049c6 <HAL_TIM_PWM_Start+0x9e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	bf14      	ite	ne
 80049c0:	2301      	movne	r3, #1
 80049c2:	2300      	moveq	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0a6      	b.n	8004b1c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d104      	bne.n	80049de <HAL_TIM_PWM_Start+0xb6>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049dc:	e023      	b.n	8004a26 <HAL_TIM_PWM_Start+0xfe>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_PWM_Start+0xc6>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ec:	e01b      	b.n	8004a26 <HAL_TIM_PWM_Start+0xfe>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_PWM_Start+0xd6>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fc:	e013      	b.n	8004a26 <HAL_TIM_PWM_Start+0xfe>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Start+0xe6>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a0c:	e00b      	b.n	8004a26 <HAL_TIM_PWM_Start+0xfe>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d104      	bne.n	8004a1e <HAL_TIM_PWM_Start+0xf6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a1c:	e003      	b.n	8004a26 <HAL_TIM_PWM_Start+0xfe>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 f9dc 	bl	8005dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a3a      	ldr	r2, [pc, #232]	; (8004b24 <HAL_TIM_PWM_Start+0x1fc>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d018      	beq.n	8004a70 <HAL_TIM_PWM_Start+0x148>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a39      	ldr	r2, [pc, #228]	; (8004b28 <HAL_TIM_PWM_Start+0x200>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <HAL_TIM_PWM_Start+0x148>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a37      	ldr	r2, [pc, #220]	; (8004b2c <HAL_TIM_PWM_Start+0x204>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00e      	beq.n	8004a70 <HAL_TIM_PWM_Start+0x148>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a36      	ldr	r2, [pc, #216]	; (8004b30 <HAL_TIM_PWM_Start+0x208>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_TIM_PWM_Start+0x148>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a34      	ldr	r2, [pc, #208]	; (8004b34 <HAL_TIM_PWM_Start+0x20c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_TIM_PWM_Start+0x148>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a33      	ldr	r2, [pc, #204]	; (8004b38 <HAL_TIM_PWM_Start+0x210>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d101      	bne.n	8004a74 <HAL_TIM_PWM_Start+0x14c>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <HAL_TIM_PWM_Start+0x14e>
 8004a74:	2300      	movs	r3, #0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a25      	ldr	r2, [pc, #148]	; (8004b24 <HAL_TIM_PWM_Start+0x1fc>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d022      	beq.n	8004ada <HAL_TIM_PWM_Start+0x1b2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9c:	d01d      	beq.n	8004ada <HAL_TIM_PWM_Start+0x1b2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a26      	ldr	r2, [pc, #152]	; (8004b3c <HAL_TIM_PWM_Start+0x214>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d018      	beq.n	8004ada <HAL_TIM_PWM_Start+0x1b2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a24      	ldr	r2, [pc, #144]	; (8004b40 <HAL_TIM_PWM_Start+0x218>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <HAL_TIM_PWM_Start+0x1b2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a23      	ldr	r2, [pc, #140]	; (8004b44 <HAL_TIM_PWM_Start+0x21c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00e      	beq.n	8004ada <HAL_TIM_PWM_Start+0x1b2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <HAL_TIM_PWM_Start+0x200>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_TIM_PWM_Start+0x1b2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a18      	ldr	r2, [pc, #96]	; (8004b2c <HAL_TIM_PWM_Start+0x204>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <HAL_TIM_PWM_Start+0x1b2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <HAL_TIM_PWM_Start+0x210>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d115      	bne.n	8004b06 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <HAL_TIM_PWM_Start+0x220>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b06      	cmp	r3, #6
 8004aea:	d015      	beq.n	8004b18 <HAL_TIM_PWM_Start+0x1f0>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af2:	d011      	beq.n	8004b18 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	e008      	b.n	8004b18 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e000      	b.n	8004b1a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	40013400 	.word	0x40013400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40014400 	.word	0x40014400
 8004b34:	40014800 	.word	0x40014800
 8004b38:	40015000 	.word	0x40015000
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	00010007 	.word	0x00010007

08004b4c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 f944 	bl	8005dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a40      	ldr	r2, [pc, #256]	; (8004c6c <HAL_TIM_PWM_Stop+0x120>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d018      	beq.n	8004ba0 <HAL_TIM_PWM_Stop+0x54>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a3f      	ldr	r2, [pc, #252]	; (8004c70 <HAL_TIM_PWM_Stop+0x124>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <HAL_TIM_PWM_Stop+0x54>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a3d      	ldr	r2, [pc, #244]	; (8004c74 <HAL_TIM_PWM_Stop+0x128>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00e      	beq.n	8004ba0 <HAL_TIM_PWM_Stop+0x54>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a3c      	ldr	r2, [pc, #240]	; (8004c78 <HAL_TIM_PWM_Stop+0x12c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d009      	beq.n	8004ba0 <HAL_TIM_PWM_Stop+0x54>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a3a      	ldr	r2, [pc, #232]	; (8004c7c <HAL_TIM_PWM_Stop+0x130>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <HAL_TIM_PWM_Stop+0x54>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a39      	ldr	r2, [pc, #228]	; (8004c80 <HAL_TIM_PWM_Stop+0x134>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <HAL_TIM_PWM_Stop+0x58>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_TIM_PWM_Stop+0x5a>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d017      	beq.n	8004bda <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10f      	bne.n	8004bda <HAL_TIM_PWM_Stop+0x8e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6a1a      	ldr	r2, [r3, #32]
 8004bc0:	f244 4344 	movw	r3, #17476	; 0x4444
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d107      	bne.n	8004bda <HAL_TIM_PWM_Stop+0x8e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10f      	bne.n	8004c0a <HAL_TIM_PWM_Stop+0xbe>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6a1a      	ldr	r2, [r3, #32]
 8004bf0:	f244 4344 	movw	r3, #17476	; 0x4444
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d107      	bne.n	8004c0a <HAL_TIM_PWM_Stop+0xbe>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_PWM_Stop+0xce>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c18:	e023      	b.n	8004c62 <HAL_TIM_PWM_Stop+0x116>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_PWM_Stop+0xde>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c28:	e01b      	b.n	8004c62 <HAL_TIM_PWM_Stop+0x116>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d104      	bne.n	8004c3a <HAL_TIM_PWM_Stop+0xee>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c38:	e013      	b.n	8004c62 <HAL_TIM_PWM_Stop+0x116>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b0c      	cmp	r3, #12
 8004c3e:	d104      	bne.n	8004c4a <HAL_TIM_PWM_Stop+0xfe>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c48:	e00b      	b.n	8004c62 <HAL_TIM_PWM_Stop+0x116>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d104      	bne.n	8004c5a <HAL_TIM_PWM_Stop+0x10e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c58:	e003      	b.n	8004c62 <HAL_TIM_PWM_Stop+0x116>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40012c00 	.word	0x40012c00
 8004c70:	40013400 	.word	0x40013400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40014400 	.word	0x40014400
 8004c7c:	40014800 	.word	0x40014800
 8004c80:	40015000 	.word	0x40015000

08004c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d122      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d11b      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0202 	mvn.w	r2, #2
 8004cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fb90 	bl	80053ec <HAL_TIM_IC_CaptureCallback>
 8004ccc:	e005      	b.n	8004cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fb82 	bl	80053d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fb93 	bl	8005400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d122      	bne.n	8004d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d11b      	bne.n	8004d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0204 	mvn.w	r2, #4
 8004d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fb66 	bl	80053ec <HAL_TIM_IC_CaptureCallback>
 8004d20:	e005      	b.n	8004d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fb58 	bl	80053d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fb69 	bl	8005400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d122      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d11b      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0208 	mvn.w	r2, #8
 8004d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fb3c 	bl	80053ec <HAL_TIM_IC_CaptureCallback>
 8004d74:	e005      	b.n	8004d82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fb2e 	bl	80053d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fb3f 	bl	8005400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d122      	bne.n	8004ddc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d11b      	bne.n	8004ddc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0210 	mvn.w	r2, #16
 8004dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2208      	movs	r2, #8
 8004db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fb12 	bl	80053ec <HAL_TIM_IC_CaptureCallback>
 8004dc8:	e005      	b.n	8004dd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fb04 	bl	80053d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fb15 	bl	8005400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d10e      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d107      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0201 	mvn.w	r2, #1
 8004e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc fa64 	bl	80012d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	d10e      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e20:	2b80      	cmp	r3, #128	; 0x80
 8004e22:	d107      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f001 fb22 	bl	8006478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e42:	d10e      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4e:	2b80      	cmp	r3, #128	; 0x80
 8004e50:	d107      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f001 fb15 	bl	800648c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d10e      	bne.n	8004e8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d107      	bne.n	8004e8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fac3 	bl	8005414 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d10e      	bne.n	8004eba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	d107      	bne.n	8004eba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f06f 0220 	mvn.w	r2, #32
 8004eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f001 fad5 	bl	8006464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec8:	d10f      	bne.n	8004eea <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed8:	d107      	bne.n	8004eea <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 fadb 	bl	80064a0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ef8:	d10f      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f08:	d107      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f001 facd 	bl	80064b4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f28:	d10f      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f38:	d107      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f001 fabf 	bl	80064c8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f58:	d10f      	bne.n	8004f7a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f68:	d107      	bne.n	8004f7a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f001 fab1 	bl	80064dc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e0ff      	b.n	80051a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b14      	cmp	r3, #20
 8004fae:	f200 80f0 	bhi.w	8005192 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fb2:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb8:	0800500d 	.word	0x0800500d
 8004fbc:	08005193 	.word	0x08005193
 8004fc0:	08005193 	.word	0x08005193
 8004fc4:	08005193 	.word	0x08005193
 8004fc8:	0800504d 	.word	0x0800504d
 8004fcc:	08005193 	.word	0x08005193
 8004fd0:	08005193 	.word	0x08005193
 8004fd4:	08005193 	.word	0x08005193
 8004fd8:	0800508f 	.word	0x0800508f
 8004fdc:	08005193 	.word	0x08005193
 8004fe0:	08005193 	.word	0x08005193
 8004fe4:	08005193 	.word	0x08005193
 8004fe8:	080050cf 	.word	0x080050cf
 8004fec:	08005193 	.word	0x08005193
 8004ff0:	08005193 	.word	0x08005193
 8004ff4:	08005193 	.word	0x08005193
 8004ff8:	08005111 	.word	0x08005111
 8004ffc:	08005193 	.word	0x08005193
 8005000:	08005193 	.word	0x08005193
 8005004:	08005193 	.word	0x08005193
 8005008:	08005151 	.word	0x08005151
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fab0 	bl	8005578 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0208 	orr.w	r2, r2, #8
 8005026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699a      	ldr	r2, [r3, #24]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0204 	bic.w	r2, r2, #4
 8005036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6999      	ldr	r1, [r3, #24]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	619a      	str	r2, [r3, #24]
      break;
 800504a:	e0a5      	b.n	8005198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fb2a 	bl	80056ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6999      	ldr	r1, [r3, #24]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	021a      	lsls	r2, r3, #8
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	619a      	str	r2, [r3, #24]
      break;
 800508c:	e084      	b.n	8005198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fb9d 	bl	80057d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0208 	orr.w	r2, r2, #8
 80050a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69da      	ldr	r2, [r3, #28]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0204 	bic.w	r2, r2, #4
 80050b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69d9      	ldr	r1, [r3, #28]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	61da      	str	r2, [r3, #28]
      break;
 80050cc:	e064      	b.n	8005198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fc0f 	bl	80058f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69d9      	ldr	r1, [r3, #28]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	021a      	lsls	r2, r3, #8
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	61da      	str	r2, [r3, #28]
      break;
 800510e:	e043      	b.n	8005198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fc82 	bl	8005a20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0208 	orr.w	r2, r2, #8
 800512a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0204 	bic.w	r2, r2, #4
 800513a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800514e:	e023      	b.n	8005198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fccc 	bl	8005af4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800516a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	021a      	lsls	r2, r3, #8
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005190:	e002      	b.n	8005198 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	75fb      	strb	r3, [r7, #23]
      break;
 8005196:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop

080051ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_TIM_ConfigClockSource+0x1c>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e0f6      	b.n	80053b6 <HAL_TIM_ConfigClockSource+0x20a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80051e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a6f      	ldr	r2, [pc, #444]	; (80053c0 <HAL_TIM_ConfigClockSource+0x214>)
 8005202:	4293      	cmp	r3, r2
 8005204:	f000 80c1 	beq.w	800538a <HAL_TIM_ConfigClockSource+0x1de>
 8005208:	4a6d      	ldr	r2, [pc, #436]	; (80053c0 <HAL_TIM_ConfigClockSource+0x214>)
 800520a:	4293      	cmp	r3, r2
 800520c:	f200 80c6 	bhi.w	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 8005210:	4a6c      	ldr	r2, [pc, #432]	; (80053c4 <HAL_TIM_ConfigClockSource+0x218>)
 8005212:	4293      	cmp	r3, r2
 8005214:	f000 80b9 	beq.w	800538a <HAL_TIM_ConfigClockSource+0x1de>
 8005218:	4a6a      	ldr	r2, [pc, #424]	; (80053c4 <HAL_TIM_ConfigClockSource+0x218>)
 800521a:	4293      	cmp	r3, r2
 800521c:	f200 80be 	bhi.w	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 8005220:	4a69      	ldr	r2, [pc, #420]	; (80053c8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	f000 80b1 	beq.w	800538a <HAL_TIM_ConfigClockSource+0x1de>
 8005228:	4a67      	ldr	r2, [pc, #412]	; (80053c8 <HAL_TIM_ConfigClockSource+0x21c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	f200 80b6 	bhi.w	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 8005230:	4a66      	ldr	r2, [pc, #408]	; (80053cc <HAL_TIM_ConfigClockSource+0x220>)
 8005232:	4293      	cmp	r3, r2
 8005234:	f000 80a9 	beq.w	800538a <HAL_TIM_ConfigClockSource+0x1de>
 8005238:	4a64      	ldr	r2, [pc, #400]	; (80053cc <HAL_TIM_ConfigClockSource+0x220>)
 800523a:	4293      	cmp	r3, r2
 800523c:	f200 80ae 	bhi.w	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 8005240:	4a63      	ldr	r2, [pc, #396]	; (80053d0 <HAL_TIM_ConfigClockSource+0x224>)
 8005242:	4293      	cmp	r3, r2
 8005244:	f000 80a1 	beq.w	800538a <HAL_TIM_ConfigClockSource+0x1de>
 8005248:	4a61      	ldr	r2, [pc, #388]	; (80053d0 <HAL_TIM_ConfigClockSource+0x224>)
 800524a:	4293      	cmp	r3, r2
 800524c:	f200 80a6 	bhi.w	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 8005250:	4a60      	ldr	r2, [pc, #384]	; (80053d4 <HAL_TIM_ConfigClockSource+0x228>)
 8005252:	4293      	cmp	r3, r2
 8005254:	f000 8099 	beq.w	800538a <HAL_TIM_ConfigClockSource+0x1de>
 8005258:	4a5e      	ldr	r2, [pc, #376]	; (80053d4 <HAL_TIM_ConfigClockSource+0x228>)
 800525a:	4293      	cmp	r3, r2
 800525c:	f200 809e 	bhi.w	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 8005260:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005264:	f000 8091 	beq.w	800538a <HAL_TIM_ConfigClockSource+0x1de>
 8005268:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800526c:	f200 8096 	bhi.w	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 8005270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005274:	f000 8089 	beq.w	800538a <HAL_TIM_ConfigClockSource+0x1de>
 8005278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800527c:	f200 808e 	bhi.w	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 8005280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005284:	d03e      	beq.n	8005304 <HAL_TIM_ConfigClockSource+0x158>
 8005286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800528a:	f200 8087 	bhi.w	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 800528e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005292:	f000 8086 	beq.w	80053a2 <HAL_TIM_ConfigClockSource+0x1f6>
 8005296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529a:	d87f      	bhi.n	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 800529c:	2b70      	cmp	r3, #112	; 0x70
 800529e:	d01a      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x12a>
 80052a0:	2b70      	cmp	r3, #112	; 0x70
 80052a2:	d87b      	bhi.n	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 80052a4:	2b60      	cmp	r3, #96	; 0x60
 80052a6:	d050      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x19e>
 80052a8:	2b60      	cmp	r3, #96	; 0x60
 80052aa:	d877      	bhi.n	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 80052ac:	2b50      	cmp	r3, #80	; 0x50
 80052ae:	d03c      	beq.n	800532a <HAL_TIM_ConfigClockSource+0x17e>
 80052b0:	2b50      	cmp	r3, #80	; 0x50
 80052b2:	d873      	bhi.n	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	d058      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x1be>
 80052b8:	2b40      	cmp	r3, #64	; 0x40
 80052ba:	d86f      	bhi.n	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 80052bc:	2b30      	cmp	r3, #48	; 0x30
 80052be:	d064      	beq.n	800538a <HAL_TIM_ConfigClockSource+0x1de>
 80052c0:	2b30      	cmp	r3, #48	; 0x30
 80052c2:	d86b      	bhi.n	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d060      	beq.n	800538a <HAL_TIM_ConfigClockSource+0x1de>
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d867      	bhi.n	800539c <HAL_TIM_ConfigClockSource+0x1f0>
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d05c      	beq.n	800538a <HAL_TIM_ConfigClockSource+0x1de>
 80052d0:	2b10      	cmp	r3, #16
 80052d2:	d05a      	beq.n	800538a <HAL_TIM_ConfigClockSource+0x1de>
 80052d4:	e062      	b.n	800539c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6899      	ldr	r1, [r3, #8]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f000 fd61 	bl	8005dac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	609a      	str	r2, [r3, #8]
      break;
 8005302:	e04f      	b.n	80053a4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	6899      	ldr	r1, [r3, #8]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f000 fd4a 	bl	8005dac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005326:	609a      	str	r2, [r3, #8]
      break;
 8005328:	e03c      	b.n	80053a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6859      	ldr	r1, [r3, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	461a      	mov	r2, r3
 8005338:	f000 fcbc 	bl	8005cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2150      	movs	r1, #80	; 0x50
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fd15 	bl	8005d72 <TIM_ITRx_SetConfig>
      break;
 8005348:	e02c      	b.n	80053a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	6859      	ldr	r1, [r3, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	461a      	mov	r2, r3
 8005358:	f000 fcdb 	bl	8005d12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2160      	movs	r1, #96	; 0x60
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fd05 	bl	8005d72 <TIM_ITRx_SetConfig>
      break;
 8005368:	e01c      	b.n	80053a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6859      	ldr	r1, [r3, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	461a      	mov	r2, r3
 8005378:	f000 fc9c 	bl	8005cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2140      	movs	r1, #64	; 0x40
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fcf5 	bl	8005d72 <TIM_ITRx_SetConfig>
      break;
 8005388:	e00c      	b.n	80053a4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4619      	mov	r1, r3
 8005394:	4610      	mov	r0, r2
 8005396:	f000 fcec 	bl	8005d72 <TIM_ITRx_SetConfig>
      break;
 800539a:	e003      	b.n	80053a4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	73fb      	strb	r3, [r7, #15]
      break;
 80053a0:	e000      	b.n	80053a4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80053a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	00100070 	.word	0x00100070
 80053c4:	00100060 	.word	0x00100060
 80053c8:	00100050 	.word	0x00100050
 80053cc:	00100040 	.word	0x00100040
 80053d0:	00100030 	.word	0x00100030
 80053d4:	00100020 	.word	0x00100020

080053d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a46      	ldr	r2, [pc, #280]	; (8005554 <TIM_Base_SetConfig+0x12c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d017      	beq.n	8005470 <TIM_Base_SetConfig+0x48>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005446:	d013      	beq.n	8005470 <TIM_Base_SetConfig+0x48>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a43      	ldr	r2, [pc, #268]	; (8005558 <TIM_Base_SetConfig+0x130>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00f      	beq.n	8005470 <TIM_Base_SetConfig+0x48>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a42      	ldr	r2, [pc, #264]	; (800555c <TIM_Base_SetConfig+0x134>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00b      	beq.n	8005470 <TIM_Base_SetConfig+0x48>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a41      	ldr	r2, [pc, #260]	; (8005560 <TIM_Base_SetConfig+0x138>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d007      	beq.n	8005470 <TIM_Base_SetConfig+0x48>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a40      	ldr	r2, [pc, #256]	; (8005564 <TIM_Base_SetConfig+0x13c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_Base_SetConfig+0x48>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a3f      	ldr	r2, [pc, #252]	; (8005568 <TIM_Base_SetConfig+0x140>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d108      	bne.n	8005482 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a33      	ldr	r2, [pc, #204]	; (8005554 <TIM_Base_SetConfig+0x12c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d023      	beq.n	80054d2 <TIM_Base_SetConfig+0xaa>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005490:	d01f      	beq.n	80054d2 <TIM_Base_SetConfig+0xaa>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a30      	ldr	r2, [pc, #192]	; (8005558 <TIM_Base_SetConfig+0x130>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d01b      	beq.n	80054d2 <TIM_Base_SetConfig+0xaa>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2f      	ldr	r2, [pc, #188]	; (800555c <TIM_Base_SetConfig+0x134>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d017      	beq.n	80054d2 <TIM_Base_SetConfig+0xaa>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a2e      	ldr	r2, [pc, #184]	; (8005560 <TIM_Base_SetConfig+0x138>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d013      	beq.n	80054d2 <TIM_Base_SetConfig+0xaa>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a2d      	ldr	r2, [pc, #180]	; (8005564 <TIM_Base_SetConfig+0x13c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00f      	beq.n	80054d2 <TIM_Base_SetConfig+0xaa>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a2d      	ldr	r2, [pc, #180]	; (800556c <TIM_Base_SetConfig+0x144>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00b      	beq.n	80054d2 <TIM_Base_SetConfig+0xaa>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a2c      	ldr	r2, [pc, #176]	; (8005570 <TIM_Base_SetConfig+0x148>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d007      	beq.n	80054d2 <TIM_Base_SetConfig+0xaa>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a2b      	ldr	r2, [pc, #172]	; (8005574 <TIM_Base_SetConfig+0x14c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d003      	beq.n	80054d2 <TIM_Base_SetConfig+0xaa>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a26      	ldr	r2, [pc, #152]	; (8005568 <TIM_Base_SetConfig+0x140>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d108      	bne.n	80054e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a12      	ldr	r2, [pc, #72]	; (8005554 <TIM_Base_SetConfig+0x12c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d013      	beq.n	8005538 <TIM_Base_SetConfig+0x110>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a14      	ldr	r2, [pc, #80]	; (8005564 <TIM_Base_SetConfig+0x13c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00f      	beq.n	8005538 <TIM_Base_SetConfig+0x110>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a14      	ldr	r2, [pc, #80]	; (800556c <TIM_Base_SetConfig+0x144>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00b      	beq.n	8005538 <TIM_Base_SetConfig+0x110>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a13      	ldr	r2, [pc, #76]	; (8005570 <TIM_Base_SetConfig+0x148>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d007      	beq.n	8005538 <TIM_Base_SetConfig+0x110>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a12      	ldr	r2, [pc, #72]	; (8005574 <TIM_Base_SetConfig+0x14c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d003      	beq.n	8005538 <TIM_Base_SetConfig+0x110>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a0d      	ldr	r2, [pc, #52]	; (8005568 <TIM_Base_SetConfig+0x140>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d103      	bne.n	8005540 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	615a      	str	r2, [r3, #20]
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40013400 	.word	0x40013400
 8005568:	40015000 	.word	0x40015000
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800

08005578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f023 0302 	bic.w	r3, r3, #2
 80055c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a30      	ldr	r2, [pc, #192]	; (8005694 <TIM_OC1_SetConfig+0x11c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d013      	beq.n	8005600 <TIM_OC1_SetConfig+0x88>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a2f      	ldr	r2, [pc, #188]	; (8005698 <TIM_OC1_SetConfig+0x120>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00f      	beq.n	8005600 <TIM_OC1_SetConfig+0x88>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a2e      	ldr	r2, [pc, #184]	; (800569c <TIM_OC1_SetConfig+0x124>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00b      	beq.n	8005600 <TIM_OC1_SetConfig+0x88>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a2d      	ldr	r2, [pc, #180]	; (80056a0 <TIM_OC1_SetConfig+0x128>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d007      	beq.n	8005600 <TIM_OC1_SetConfig+0x88>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a2c      	ldr	r2, [pc, #176]	; (80056a4 <TIM_OC1_SetConfig+0x12c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_OC1_SetConfig+0x88>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a2b      	ldr	r2, [pc, #172]	; (80056a8 <TIM_OC1_SetConfig+0x130>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10c      	bne.n	800561a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0308 	bic.w	r3, r3, #8
 8005606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f023 0304 	bic.w	r3, r3, #4
 8005618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <TIM_OC1_SetConfig+0x11c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <TIM_OC1_SetConfig+0xd2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a1c      	ldr	r2, [pc, #112]	; (8005698 <TIM_OC1_SetConfig+0x120>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00f      	beq.n	800564a <TIM_OC1_SetConfig+0xd2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a1b      	ldr	r2, [pc, #108]	; (800569c <TIM_OC1_SetConfig+0x124>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00b      	beq.n	800564a <TIM_OC1_SetConfig+0xd2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a1a      	ldr	r2, [pc, #104]	; (80056a0 <TIM_OC1_SetConfig+0x128>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d007      	beq.n	800564a <TIM_OC1_SetConfig+0xd2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a19      	ldr	r2, [pc, #100]	; (80056a4 <TIM_OC1_SetConfig+0x12c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d003      	beq.n	800564a <TIM_OC1_SetConfig+0xd2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <TIM_OC1_SetConfig+0x130>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d111      	bne.n	800566e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	621a      	str	r2, [r3, #32]
}
 8005688:	bf00      	nop
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40013400 	.word	0x40013400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40014400 	.word	0x40014400
 80056a4:	40014800 	.word	0x40014800
 80056a8:	40015000 	.word	0x40015000

080056ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f023 0210 	bic.w	r2, r3, #16
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f023 0320 	bic.w	r3, r3, #32
 80056fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a2c      	ldr	r2, [pc, #176]	; (80057bc <TIM_OC2_SetConfig+0x110>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_OC2_SetConfig+0x74>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a2b      	ldr	r2, [pc, #172]	; (80057c0 <TIM_OC2_SetConfig+0x114>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_OC2_SetConfig+0x74>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a2a      	ldr	r2, [pc, #168]	; (80057c4 <TIM_OC2_SetConfig+0x118>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d10d      	bne.n	800573c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a1f      	ldr	r2, [pc, #124]	; (80057bc <TIM_OC2_SetConfig+0x110>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d013      	beq.n	800576c <TIM_OC2_SetConfig+0xc0>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a1e      	ldr	r2, [pc, #120]	; (80057c0 <TIM_OC2_SetConfig+0x114>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00f      	beq.n	800576c <TIM_OC2_SetConfig+0xc0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a1e      	ldr	r2, [pc, #120]	; (80057c8 <TIM_OC2_SetConfig+0x11c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00b      	beq.n	800576c <TIM_OC2_SetConfig+0xc0>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <TIM_OC2_SetConfig+0x120>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d007      	beq.n	800576c <TIM_OC2_SetConfig+0xc0>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a1c      	ldr	r2, [pc, #112]	; (80057d0 <TIM_OC2_SetConfig+0x124>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_OC2_SetConfig+0xc0>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a17      	ldr	r2, [pc, #92]	; (80057c4 <TIM_OC2_SetConfig+0x118>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d113      	bne.n	8005794 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005772:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800577a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	621a      	str	r2, [r3, #32]
}
 80057ae:	bf00      	nop
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40013400 	.word	0x40013400
 80057c4:	40015000 	.word	0x40015000
 80057c8:	40014000 	.word	0x40014000
 80057cc:	40014400 	.word	0x40014400
 80057d0:	40014800 	.word	0x40014800

080057d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0303 	bic.w	r3, r3, #3
 800580e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a2b      	ldr	r2, [pc, #172]	; (80058e0 <TIM_OC3_SetConfig+0x10c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <TIM_OC3_SetConfig+0x72>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <TIM_OC3_SetConfig+0x110>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d003      	beq.n	8005846 <TIM_OC3_SetConfig+0x72>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a29      	ldr	r2, [pc, #164]	; (80058e8 <TIM_OC3_SetConfig+0x114>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d10d      	bne.n	8005862 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800584c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a1e      	ldr	r2, [pc, #120]	; (80058e0 <TIM_OC3_SetConfig+0x10c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <TIM_OC3_SetConfig+0xbe>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a1d      	ldr	r2, [pc, #116]	; (80058e4 <TIM_OC3_SetConfig+0x110>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00f      	beq.n	8005892 <TIM_OC3_SetConfig+0xbe>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a1d      	ldr	r2, [pc, #116]	; (80058ec <TIM_OC3_SetConfig+0x118>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00b      	beq.n	8005892 <TIM_OC3_SetConfig+0xbe>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1c      	ldr	r2, [pc, #112]	; (80058f0 <TIM_OC3_SetConfig+0x11c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d007      	beq.n	8005892 <TIM_OC3_SetConfig+0xbe>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1b      	ldr	r2, [pc, #108]	; (80058f4 <TIM_OC3_SetConfig+0x120>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d003      	beq.n	8005892 <TIM_OC3_SetConfig+0xbe>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a16      	ldr	r2, [pc, #88]	; (80058e8 <TIM_OC3_SetConfig+0x114>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d113      	bne.n	80058ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	621a      	str	r2, [r3, #32]
}
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40013400 	.word	0x40013400
 80058e8:	40015000 	.word	0x40015000
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40014400 	.word	0x40014400
 80058f4:	40014800 	.word	0x40014800

080058f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	031b      	lsls	r3, r3, #12
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a2c      	ldr	r2, [pc, #176]	; (8005a08 <TIM_OC4_SetConfig+0x110>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_OC4_SetConfig+0x74>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a2b      	ldr	r2, [pc, #172]	; (8005a0c <TIM_OC4_SetConfig+0x114>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_OC4_SetConfig+0x74>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a2a      	ldr	r2, [pc, #168]	; (8005a10 <TIM_OC4_SetConfig+0x118>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10d      	bne.n	8005988 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	031b      	lsls	r3, r3, #12
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005986:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a1f      	ldr	r2, [pc, #124]	; (8005a08 <TIM_OC4_SetConfig+0x110>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d013      	beq.n	80059b8 <TIM_OC4_SetConfig+0xc0>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a1e      	ldr	r2, [pc, #120]	; (8005a0c <TIM_OC4_SetConfig+0x114>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00f      	beq.n	80059b8 <TIM_OC4_SetConfig+0xc0>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a1e      	ldr	r2, [pc, #120]	; (8005a14 <TIM_OC4_SetConfig+0x11c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00b      	beq.n	80059b8 <TIM_OC4_SetConfig+0xc0>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a1d      	ldr	r2, [pc, #116]	; (8005a18 <TIM_OC4_SetConfig+0x120>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_OC4_SetConfig+0xc0>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <TIM_OC4_SetConfig+0x124>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_OC4_SetConfig+0xc0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a17      	ldr	r2, [pc, #92]	; (8005a10 <TIM_OC4_SetConfig+0x118>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d113      	bne.n	80059e0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	019b      	lsls	r3, r3, #6
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	019b      	lsls	r3, r3, #6
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	40013400 	.word	0x40013400
 8005a10:	40015000 	.word	0x40015000
 8005a14:	40014000 	.word	0x40014000
 8005a18:	40014400 	.word	0x40014400
 8005a1c:	40014800 	.word	0x40014800

08005a20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	041b      	lsls	r3, r3, #16
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a19      	ldr	r2, [pc, #100]	; (8005adc <TIM_OC5_SetConfig+0xbc>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <TIM_OC5_SetConfig+0x82>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a18      	ldr	r2, [pc, #96]	; (8005ae0 <TIM_OC5_SetConfig+0xc0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00f      	beq.n	8005aa2 <TIM_OC5_SetConfig+0x82>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a17      	ldr	r2, [pc, #92]	; (8005ae4 <TIM_OC5_SetConfig+0xc4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <TIM_OC5_SetConfig+0x82>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a16      	ldr	r2, [pc, #88]	; (8005ae8 <TIM_OC5_SetConfig+0xc8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_OC5_SetConfig+0x82>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a15      	ldr	r2, [pc, #84]	; (8005aec <TIM_OC5_SetConfig+0xcc>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_OC5_SetConfig+0x82>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a14      	ldr	r2, [pc, #80]	; (8005af0 <TIM_OC5_SetConfig+0xd0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d109      	bne.n	8005ab6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	621a      	str	r2, [r3, #32]
}
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40013400 	.word	0x40013400
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800
 8005af0:	40015000 	.word	0x40015000

08005af4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	051b      	lsls	r3, r3, #20
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a1a      	ldr	r2, [pc, #104]	; (8005bb4 <TIM_OC6_SetConfig+0xc0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d013      	beq.n	8005b78 <TIM_OC6_SetConfig+0x84>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a19      	ldr	r2, [pc, #100]	; (8005bb8 <TIM_OC6_SetConfig+0xc4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00f      	beq.n	8005b78 <TIM_OC6_SetConfig+0x84>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <TIM_OC6_SetConfig+0xc8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00b      	beq.n	8005b78 <TIM_OC6_SetConfig+0x84>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <TIM_OC6_SetConfig+0xcc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d007      	beq.n	8005b78 <TIM_OC6_SetConfig+0x84>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a16      	ldr	r2, [pc, #88]	; (8005bc4 <TIM_OC6_SetConfig+0xd0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC6_SetConfig+0x84>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <TIM_OC6_SetConfig+0xd4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d109      	bne.n	8005b8c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	029b      	lsls	r3, r3, #10
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40013400 	.word	0x40013400
 8005bbc:	40014000 	.word	0x40014000
 8005bc0:	40014400 	.word	0x40014400
 8005bc4:	40014800 	.word	0x40014800
 8005bc8:	40015000 	.word	0x40015000

08005bcc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f023 0201 	bic.w	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a28      	ldr	r2, [pc, #160]	; (8005c98 <TIM_TI1_SetConfig+0xcc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01b      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d017      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4a25      	ldr	r2, [pc, #148]	; (8005c9c <TIM_TI1_SetConfig+0xd0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4a24      	ldr	r2, [pc, #144]	; (8005ca0 <TIM_TI1_SetConfig+0xd4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00f      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4a23      	ldr	r2, [pc, #140]	; (8005ca4 <TIM_TI1_SetConfig+0xd8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00b      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a22      	ldr	r2, [pc, #136]	; (8005ca8 <TIM_TI1_SetConfig+0xdc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d007      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4a21      	ldr	r2, [pc, #132]	; (8005cac <TIM_TI1_SetConfig+0xe0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a20      	ldr	r2, [pc, #128]	; (8005cb0 <TIM_TI1_SetConfig+0xe4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d101      	bne.n	8005c36 <TIM_TI1_SetConfig+0x6a>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <TIM_TI1_SetConfig+0x6c>
 8005c36:	2300      	movs	r3, #0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f023 0303 	bic.w	r3, r3, #3
 8005c42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	e003      	b.n	8005c56 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f043 0301 	orr.w	r3, r3, #1
 8005c54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f023 030a 	bic.w	r3, r3, #10
 8005c70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f003 030a 	and.w	r3, r3, #10
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40012c00 	.word	0x40012c00
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40000800 	.word	0x40000800
 8005ca4:	40000c00 	.word	0x40000c00
 8005ca8:	40013400 	.word	0x40013400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	40015000 	.word	0x40015000

08005cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	f023 0201 	bic.w	r2, r3, #1
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f023 030a 	bic.w	r3, r3, #10
 8005cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	621a      	str	r2, [r3, #32]
}
 8005d06:	bf00      	nop
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b087      	sub	sp, #28
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f023 0210 	bic.w	r2, r3, #16
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	031b      	lsls	r3, r3, #12
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f043 0307 	orr.w	r3, r3, #7
 8005d98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	609a      	str	r2, [r3, #8]
}
 8005da0:	bf00      	nop
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	021a      	lsls	r2, r3, #8
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	609a      	str	r2, [r3, #8]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	2201      	movs	r2, #1
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1a      	ldr	r2, [r3, #32]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	401a      	ands	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a1a      	ldr	r2, [r3, #32]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	fa01 f303 	lsl.w	r3, r1, r3
 8005e24:	431a      	orrs	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	621a      	str	r2, [r3, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b08a      	sub	sp, #40	; 0x28
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e0a0      	b.n	8005f8c <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fb fc7e 	bl	8001760 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f7ff fad6 	bl	8005428 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2203      	movs	r2, #3
 8005e8a:	f7ff fe9f 	bl	8005bcc <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 020c 	bic.w	r2, r2, #12
 8005e9c:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6999      	ldr	r1, [r3, #24]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ebe:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ee2:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6812      	ldr	r2, [r2, #0]
 8005eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef2:	f023 0307 	bic.w	r3, r3, #7
 8005ef6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0204 	orr.w	r2, r2, #4
 8005f06:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005f10:	2370      	movs	r3, #112	; 0x70
 8005f12:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005f14:	2300      	movs	r3, #0
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f107 020c 	add.w	r2, r7, #12
 8005f2e:	4611      	mov	r1, r2
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fbbb 	bl	80056ac <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f48:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8005f58:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3728      	adds	r7, #40	; 0x28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <HAL_TIMEx_PWMN_Start+0x24>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	bf14      	ite	ne
 8005fb0:	2301      	movne	r3, #1
 8005fb2:	2300      	moveq	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	e022      	b.n	8005ffe <HAL_TIMEx_PWMN_Start+0x6a>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d109      	bne.n	8005fd2 <HAL_TIMEx_PWMN_Start+0x3e>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	bf14      	ite	ne
 8005fca:	2301      	movne	r3, #1
 8005fcc:	2300      	moveq	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	e015      	b.n	8005ffe <HAL_TIMEx_PWMN_Start+0x6a>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d109      	bne.n	8005fec <HAL_TIMEx_PWMN_Start+0x58>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	bf14      	ite	ne
 8005fe4:	2301      	movne	r3, #1
 8005fe6:	2300      	moveq	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	e008      	b.n	8005ffe <HAL_TIMEx_PWMN_Start+0x6a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	bf14      	ite	ne
 8005ff8:	2301      	movne	r3, #1
 8005ffa:	2300      	moveq	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e073      	b.n	80060ee <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <HAL_TIMEx_PWMN_Start+0x82>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006014:	e013      	b.n	800603e <HAL_TIMEx_PWMN_Start+0xaa>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b04      	cmp	r3, #4
 800601a:	d104      	bne.n	8006026 <HAL_TIMEx_PWMN_Start+0x92>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006024:	e00b      	b.n	800603e <HAL_TIMEx_PWMN_Start+0xaa>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b08      	cmp	r3, #8
 800602a:	d104      	bne.n	8006036 <HAL_TIMEx_PWMN_Start+0xa2>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006034:	e003      	b.n	800603e <HAL_TIMEx_PWMN_Start+0xaa>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2204      	movs	r2, #4
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fa52 	bl	80064f0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800605a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a25      	ldr	r2, [pc, #148]	; (80060f8 <HAL_TIMEx_PWMN_Start+0x164>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d022      	beq.n	80060ac <HAL_TIMEx_PWMN_Start+0x118>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606e:	d01d      	beq.n	80060ac <HAL_TIMEx_PWMN_Start+0x118>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a21      	ldr	r2, [pc, #132]	; (80060fc <HAL_TIMEx_PWMN_Start+0x168>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d018      	beq.n	80060ac <HAL_TIMEx_PWMN_Start+0x118>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a20      	ldr	r2, [pc, #128]	; (8006100 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <HAL_TIMEx_PWMN_Start+0x118>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1e      	ldr	r2, [pc, #120]	; (8006104 <HAL_TIMEx_PWMN_Start+0x170>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_TIMEx_PWMN_Start+0x118>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1d      	ldr	r2, [pc, #116]	; (8006108 <HAL_TIMEx_PWMN_Start+0x174>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_TIMEx_PWMN_Start+0x118>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1b      	ldr	r2, [pc, #108]	; (800610c <HAL_TIMEx_PWMN_Start+0x178>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_TIMEx_PWMN_Start+0x118>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1a      	ldr	r2, [pc, #104]	; (8006110 <HAL_TIMEx_PWMN_Start+0x17c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d115      	bne.n	80060d8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	4b18      	ldr	r3, [pc, #96]	; (8006114 <HAL_TIMEx_PWMN_Start+0x180>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b06      	cmp	r3, #6
 80060bc:	d015      	beq.n	80060ea <HAL_TIMEx_PWMN_Start+0x156>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c4:	d011      	beq.n	80060ea <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d6:	e008      	b.n	80060ea <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	e000      	b.n	80060ec <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40012c00 	.word	0x40012c00
 80060fc:	40000400 	.word	0x40000400
 8006100:	40000800 	.word	0x40000800
 8006104:	40000c00 	.word	0x40000c00
 8006108:	40013400 	.word	0x40013400
 800610c:	40014000 	.word	0x40014000
 8006110:	40015000 	.word	0x40015000
 8006114:	00010007 	.word	0x00010007

08006118 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2200      	movs	r2, #0
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 f9e0 	bl	80064f0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6a1a      	ldr	r2, [r3, #32]
 8006136:	f241 1311 	movw	r3, #4369	; 0x1111
 800613a:	4013      	ands	r3, r2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10f      	bne.n	8006160 <HAL_TIMEx_PWMN_Stop+0x48>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6a1a      	ldr	r2, [r3, #32]
 8006146:	f244 4344 	movw	r3, #17476	; 0x4444
 800614a:	4013      	ands	r3, r2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d107      	bne.n	8006160 <HAL_TIMEx_PWMN_Stop+0x48>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800615e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6a1a      	ldr	r2, [r3, #32]
 8006166:	f241 1311 	movw	r3, #4369	; 0x1111
 800616a:	4013      	ands	r3, r2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10f      	bne.n	8006190 <HAL_TIMEx_PWMN_Stop+0x78>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6a1a      	ldr	r2, [r3, #32]
 8006176:	f244 4344 	movw	r3, #17476	; 0x4444
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d107      	bne.n	8006190 <HAL_TIMEx_PWMN_Stop+0x78>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d104      	bne.n	80061a0 <HAL_TIMEx_PWMN_Stop+0x88>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800619e:	e013      	b.n	80061c8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d104      	bne.n	80061b0 <HAL_TIMEx_PWMN_Stop+0x98>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ae:	e00b      	b.n	80061c8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d104      	bne.n	80061c0 <HAL_TIMEx_PWMN_Stop+0xa8>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061be:	e003      	b.n	80061c8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e074      	b.n	80062d6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a34      	ldr	r2, [pc, #208]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d009      	beq.n	800622a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a33      	ldr	r2, [pc, #204]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d004      	beq.n	800622a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a31      	ldr	r2, [pc, #196]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d108      	bne.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006230:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a21      	ldr	r2, [pc, #132]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d022      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626c:	d01d      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1f      	ldr	r2, [pc, #124]	; (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d018      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d013      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1c      	ldr	r2, [pc, #112]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00e      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a15      	ldr	r2, [pc, #84]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d009      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a18      	ldr	r2, [pc, #96]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d004      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a11      	ldr	r2, [pc, #68]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d10c      	bne.n	80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40013400 	.word	0x40013400
 80062ec:	40015000 	.word	0x40015000
 80062f0:	40000400 	.word	0x40000400
 80062f4:	40000800 	.word	0x40000800
 80062f8:	40000c00 	.word	0x40000c00
 80062fc:	40014000 	.word	0x40014000

08006300 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006318:	2302      	movs	r3, #2
 800631a:	e096      	b.n	800644a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	041b      	lsls	r3, r3, #16
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a2f      	ldr	r2, [pc, #188]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d009      	beq.n	80063b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a2d      	ldr	r2, [pc, #180]	; (800645c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d004      	beq.n	80063b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a2c      	ldr	r2, [pc, #176]	; (8006460 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d106      	bne.n	80063c2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a24      	ldr	r2, [pc, #144]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d009      	beq.n	80063e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a22      	ldr	r2, [pc, #136]	; (800645c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d004      	beq.n	80063e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a21      	ldr	r2, [pc, #132]	; (8006460 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d12b      	bne.n	8006438 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	051b      	lsls	r3, r3, #20
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a11      	ldr	r2, [pc, #68]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d009      	beq.n	800642a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a10      	ldr	r2, [pc, #64]	; (800645c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a0e      	ldr	r2, [pc, #56]	; (8006460 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d106      	bne.n	8006438 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40013400 	.word	0x40013400
 8006460:	40015000 	.word	0x40015000

08006464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2204      	movs	r2, #4
 8006504:	fa02 f303 	lsl.w	r3, r2, r3
 8006508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a1a      	ldr	r2, [r3, #32]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	43db      	mvns	r3, r3
 8006512:	401a      	ands	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a1a      	ldr	r2, [r3, #32]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f003 031f 	and.w	r3, r3, #31
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	fa01 f303 	lsl.w	r3, r1, r3
 8006528:	431a      	orrs	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	621a      	str	r2, [r3, #32]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e042      	b.n	80065d2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fb fa60 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2224      	movs	r2, #36	; 0x24
 8006568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0201 	bic.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fc51 	bl	8006e24 <UART_SetConfig>
 8006582:	4603      	mov	r3, r0
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e022      	b.n	80065d2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 ff41 	bl	800741c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f042 0201 	orr.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 ffc8 	bl	8007560 <UART_CheckIdleState>
 80065d0:	4603      	mov	r3, r0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b08a      	sub	sp, #40	; 0x28
 80065de:	af02      	add	r7, sp, #8
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	603b      	str	r3, [r7, #0]
 80065e6:	4613      	mov	r3, r2
 80065e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	f040 8083 	bne.w	80066fc <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <HAL_UART_Transmit+0x28>
 80065fc:	88fb      	ldrh	r3, [r7, #6]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e07b      	b.n	80066fe <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_UART_Transmit+0x3a>
 8006610:	2302      	movs	r3, #2
 8006612:	e074      	b.n	80066fe <HAL_UART_Transmit+0x124>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2221      	movs	r2, #33	; 0x21
 8006628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800662c:	f7fb fb4c 	bl	8001cc8 <HAL_GetTick>
 8006630:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	88fa      	ldrh	r2, [r7, #6]
 8006636:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664a:	d108      	bne.n	800665e <HAL_UART_Transmit+0x84>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d104      	bne.n	800665e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006654:	2300      	movs	r3, #0
 8006656:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	61bb      	str	r3, [r7, #24]
 800665c:	e003      	b.n	8006666 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006662:	2300      	movs	r3, #0
 8006664:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800666e:	e02c      	b.n	80066ca <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2200      	movs	r2, #0
 8006678:	2180      	movs	r1, #128	; 0x80
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 ffbb 	bl	80075f6 <UART_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e039      	b.n	80066fe <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10b      	bne.n	80066a8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800669e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	3302      	adds	r3, #2
 80066a4:	61bb      	str	r3, [r7, #24]
 80066a6:	e007      	b.n	80066b8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	781a      	ldrb	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	3301      	adds	r3, #1
 80066b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1cc      	bne.n	8006670 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2200      	movs	r2, #0
 80066de:	2140      	movs	r1, #64	; 0x40
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 ff88 	bl	80075f6 <UART_WaitOnFlagUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e006      	b.n	80066fe <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	e000      	b.n	80066fe <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80066fc:	2302      	movs	r3, #2
  }
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3720      	adds	r7, #32
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08a      	sub	sp, #40	; 0x28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	4613      	mov	r3, r2
 8006714:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671c:	2b20      	cmp	r3, #32
 800671e:	d142      	bne.n	80067a6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <HAL_UART_Receive_IT+0x24>
 8006726:	88fb      	ldrh	r3, [r7, #6]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e03b      	b.n	80067a8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <HAL_UART_Receive_IT+0x36>
 800673a:	2302      	movs	r3, #2
 800673c:	e034      	b.n	80067a8 <HAL_UART_Receive_IT+0xa0>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a17      	ldr	r2, [pc, #92]	; (80067b0 <HAL_UART_Receive_IT+0xa8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d01f      	beq.n	8006796 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d018      	beq.n	8006796 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	613b      	str	r3, [r7, #16]
   return(result);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	623b      	str	r3, [r7, #32]
 8006784:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	69f9      	ldr	r1, [r7, #28]
 8006788:	6a3a      	ldr	r2, [r7, #32]
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e6      	bne.n	8006764 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006796:	88fb      	ldrh	r3, [r7, #6]
 8006798:	461a      	mov	r2, r3
 800679a:	68b9      	ldr	r1, [r7, #8]
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 fff3 	bl	8007788 <UART_Start_Receive_IT>
 80067a2:	4603      	mov	r3, r0
 80067a4:	e000      	b.n	80067a8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80067a6:	2302      	movs	r3, #2
  }
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3728      	adds	r7, #40	; 0x28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40008000 	.word	0x40008000

080067b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b0ba      	sub	sp, #232	; 0xe8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80067de:	f640 030f 	movw	r3, #2063	; 0x80f
 80067e2:	4013      	ands	r3, r2
 80067e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80067e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d11b      	bne.n	8006828 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f4:	f003 0320 	and.w	r3, r3, #32
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d015      	beq.n	8006828 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b00      	cmp	r3, #0
 8006806:	d105      	bne.n	8006814 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800680c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d009      	beq.n	8006828 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 82d6 	beq.w	8006dca <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	4798      	blx	r3
      }
      return;
 8006826:	e2d0      	b.n	8006dca <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006828:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 811f 	beq.w	8006a70 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006832:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006836:	4b8b      	ldr	r3, [pc, #556]	; (8006a64 <HAL_UART_IRQHandler+0x2b0>)
 8006838:	4013      	ands	r3, r2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800683e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006842:	4b89      	ldr	r3, [pc, #548]	; (8006a68 <HAL_UART_IRQHandler+0x2b4>)
 8006844:	4013      	ands	r3, r2
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 8112 	beq.w	8006a70 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800684c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d011      	beq.n	800687c <HAL_UART_IRQHandler+0xc8>
 8006858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800685c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00b      	beq.n	800687c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2201      	movs	r2, #1
 800686a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006872:	f043 0201 	orr.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800687c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d011      	beq.n	80068ac <HAL_UART_IRQHandler+0xf8>
 8006888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00b      	beq.n	80068ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2202      	movs	r2, #2
 800689a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a2:	f043 0204 	orr.w	r2, r3, #4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d011      	beq.n	80068dc <HAL_UART_IRQHandler+0x128>
 80068b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00b      	beq.n	80068dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2204      	movs	r2, #4
 80068ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068d2:	f043 0202 	orr.w	r2, r3, #2
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d017      	beq.n	8006918 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d105      	bne.n	8006900 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80068f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80068f8:	4b5a      	ldr	r3, [pc, #360]	; (8006a64 <HAL_UART_IRQHandler+0x2b0>)
 80068fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00b      	beq.n	8006918 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2208      	movs	r2, #8
 8006906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800690e:	f043 0208 	orr.w	r2, r3, #8
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006920:	2b00      	cmp	r3, #0
 8006922:	d012      	beq.n	800694a <HAL_UART_IRQHandler+0x196>
 8006924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00c      	beq.n	800694a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006938:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006940:	f043 0220 	orr.w	r2, r3, #32
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 823c 	beq.w	8006dce <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b00      	cmp	r3, #0
 8006960:	d013      	beq.n	800698a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d105      	bne.n	800697a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800696e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d007      	beq.n	800698a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006990:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699e:	2b40      	cmp	r3, #64	; 0x40
 80069a0:	d005      	beq.n	80069ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d04f      	beq.n	8006a4e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 f814 	bl	80079dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069be:	2b40      	cmp	r3, #64	; 0x40
 80069c0:	d141      	bne.n	8006a46 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3308      	adds	r3, #8
 80069c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3308      	adds	r3, #8
 80069ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1d9      	bne.n	80069c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d013      	beq.n	8006a3e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a1a:	4a14      	ldr	r2, [pc, #80]	; (8006a6c <HAL_UART_IRQHandler+0x2b8>)
 8006a1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fc fbc1 	bl	80031aa <HAL_DMA_Abort_IT>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d017      	beq.n	8006a5e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3c:	e00f      	b.n	8006a5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9da 	bl	8006df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a44:	e00b      	b.n	8006a5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f9d6 	bl	8006df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4c:	e007      	b.n	8006a5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f9d2 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006a5c:	e1b7      	b.n	8006dce <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5e:	bf00      	nop
    return;
 8006a60:	e1b5      	b.n	8006dce <HAL_UART_IRQHandler+0x61a>
 8006a62:	bf00      	nop
 8006a64:	10000001 	.word	0x10000001
 8006a68:	04000120 	.word	0x04000120
 8006a6c:	08007aa9 	.word	0x08007aa9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	f040 814a 	bne.w	8006d0e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8143 	beq.w	8006d0e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8c:	f003 0310 	and.w	r3, r3, #16
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 813c 	beq.w	8006d0e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2210      	movs	r2, #16
 8006a9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	f040 80b5 	bne.w	8006c18 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006aba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8187 	beq.w	8006dd2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	f080 817f 	bcs.w	8006dd2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ada:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f040 8086 	bne.w	8006bfc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1da      	bne.n	8006af0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e1      	bne.n	8006b3a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ba0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e3      	bne.n	8006b76 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bcc:	f023 0310 	bic.w	r3, r3, #16
 8006bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bde:	65bb      	str	r3, [r7, #88]	; 0x58
 8006be0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006be4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e4      	bne.n	8006bbc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fc fa7e 	bl	80030f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f8fb 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c16:	e0dc      	b.n	8006dd2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 80ce 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006c3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80c9 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c66:	647b      	str	r3, [r7, #68]	; 0x44
 8006c68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e4      	bne.n	8006c44 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3308      	adds	r3, #8
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ca2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e1      	bne.n	8006c7a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0310 	bic.w	r3, r3, #16
 8006cde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cec:	61fb      	str	r3, [r7, #28]
 8006cee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	69b9      	ldr	r1, [r7, #24]
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e4      	bne.n	8006cca <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f880 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d0c:	e063      	b.n	8006dd6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00e      	beq.n	8006d38 <HAL_UART_IRQHandler+0x584>
 8006d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d008      	beq.n	8006d38 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 fb57 	bl	80083e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d36:	e051      	b.n	8006ddc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d014      	beq.n	8006d6e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d105      	bne.n	8006d5c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d03a      	beq.n	8006dda <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4798      	blx	r3
    }
    return;
 8006d6c:	e035      	b.n	8006dda <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d009      	beq.n	8006d8e <HAL_UART_IRQHandler+0x5da>
 8006d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fea4 	bl	8007ad4 <UART_EndTransmit_IT>
    return;
 8006d8c:	e026      	b.n	8006ddc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d009      	beq.n	8006dae <HAL_UART_IRQHandler+0x5fa>
 8006d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 fb30 	bl	800840c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dac:	e016      	b.n	8006ddc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d010      	beq.n	8006ddc <HAL_UART_IRQHandler+0x628>
 8006dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	da0c      	bge.n	8006ddc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 fb18 	bl	80083f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dc8:	e008      	b.n	8006ddc <HAL_UART_IRQHandler+0x628>
      return;
 8006dca:	bf00      	nop
 8006dcc:	e006      	b.n	8006ddc <HAL_UART_IRQHandler+0x628>
    return;
 8006dce:	bf00      	nop
 8006dd0:	e004      	b.n	8006ddc <HAL_UART_IRQHandler+0x628>
      return;
 8006dd2:	bf00      	nop
 8006dd4:	e002      	b.n	8006ddc <HAL_UART_IRQHandler+0x628>
      return;
 8006dd6:	bf00      	nop
 8006dd8:	e000      	b.n	8006ddc <HAL_UART_IRQHandler+0x628>
    return;
 8006dda:	bf00      	nop
  }
}
 8006ddc:	37e8      	adds	r7, #232	; 0xe8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop

08006de4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e28:	b08c      	sub	sp, #48	; 0x30
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	431a      	orrs	r2, r3
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4baa      	ldr	r3, [pc, #680]	; (80070fc <UART_SetConfig+0x2d8>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	6812      	ldr	r2, [r2, #0]
 8006e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a9f      	ldr	r2, [pc, #636]	; (8007100 <UART_SetConfig+0x2dc>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006e9a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	6812      	ldr	r2, [r2, #0]
 8006ea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	f023 010f 	bic.w	r1, r3, #15
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a90      	ldr	r2, [pc, #576]	; (8007104 <UART_SetConfig+0x2e0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d125      	bne.n	8006f14 <UART_SetConfig+0xf0>
 8006ec8:	4b8f      	ldr	r3, [pc, #572]	; (8007108 <UART_SetConfig+0x2e4>)
 8006eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ece:	f003 0303 	and.w	r3, r3, #3
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d81a      	bhi.n	8006f0c <UART_SetConfig+0xe8>
 8006ed6:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <UART_SetConfig+0xb8>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006eed 	.word	0x08006eed
 8006ee0:	08006efd 	.word	0x08006efd
 8006ee4:	08006ef5 	.word	0x08006ef5
 8006ee8:	08006f05 	.word	0x08006f05
 8006eec:	2301      	movs	r3, #1
 8006eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ef2:	e116      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006efa:	e112      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006efc:	2304      	movs	r3, #4
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f02:	e10e      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006f04:	2308      	movs	r3, #8
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f0a:	e10a      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f12:	e106      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a7c      	ldr	r2, [pc, #496]	; (800710c <UART_SetConfig+0x2e8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d138      	bne.n	8006f90 <UART_SetConfig+0x16c>
 8006f1e:	4b7a      	ldr	r3, [pc, #488]	; (8007108 <UART_SetConfig+0x2e4>)
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f24:	f003 030c 	and.w	r3, r3, #12
 8006f28:	2b0c      	cmp	r3, #12
 8006f2a:	d82d      	bhi.n	8006f88 <UART_SetConfig+0x164>
 8006f2c:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <UART_SetConfig+0x110>)
 8006f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f32:	bf00      	nop
 8006f34:	08006f69 	.word	0x08006f69
 8006f38:	08006f89 	.word	0x08006f89
 8006f3c:	08006f89 	.word	0x08006f89
 8006f40:	08006f89 	.word	0x08006f89
 8006f44:	08006f79 	.word	0x08006f79
 8006f48:	08006f89 	.word	0x08006f89
 8006f4c:	08006f89 	.word	0x08006f89
 8006f50:	08006f89 	.word	0x08006f89
 8006f54:	08006f71 	.word	0x08006f71
 8006f58:	08006f89 	.word	0x08006f89
 8006f5c:	08006f89 	.word	0x08006f89
 8006f60:	08006f89 	.word	0x08006f89
 8006f64:	08006f81 	.word	0x08006f81
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f6e:	e0d8      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006f70:	2302      	movs	r3, #2
 8006f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f76:	e0d4      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006f78:	2304      	movs	r3, #4
 8006f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f7e:	e0d0      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006f80:	2308      	movs	r3, #8
 8006f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f86:	e0cc      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006f88:	2310      	movs	r3, #16
 8006f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f8e:	e0c8      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a5e      	ldr	r2, [pc, #376]	; (8007110 <UART_SetConfig+0x2ec>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d125      	bne.n	8006fe6 <UART_SetConfig+0x1c2>
 8006f9a:	4b5b      	ldr	r3, [pc, #364]	; (8007108 <UART_SetConfig+0x2e4>)
 8006f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fa4:	2b30      	cmp	r3, #48	; 0x30
 8006fa6:	d016      	beq.n	8006fd6 <UART_SetConfig+0x1b2>
 8006fa8:	2b30      	cmp	r3, #48	; 0x30
 8006faa:	d818      	bhi.n	8006fde <UART_SetConfig+0x1ba>
 8006fac:	2b20      	cmp	r3, #32
 8006fae:	d00a      	beq.n	8006fc6 <UART_SetConfig+0x1a2>
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d814      	bhi.n	8006fde <UART_SetConfig+0x1ba>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <UART_SetConfig+0x19a>
 8006fb8:	2b10      	cmp	r3, #16
 8006fba:	d008      	beq.n	8006fce <UART_SetConfig+0x1aa>
 8006fbc:	e00f      	b.n	8006fde <UART_SetConfig+0x1ba>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fc4:	e0ad      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fcc:	e0a9      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006fce:	2304      	movs	r3, #4
 8006fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fd4:	e0a5      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006fd6:	2308      	movs	r3, #8
 8006fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fdc:	e0a1      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006fde:	2310      	movs	r3, #16
 8006fe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fe4:	e09d      	b.n	8007122 <UART_SetConfig+0x2fe>
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a4a      	ldr	r2, [pc, #296]	; (8007114 <UART_SetConfig+0x2f0>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d125      	bne.n	800703c <UART_SetConfig+0x218>
 8006ff0:	4b45      	ldr	r3, [pc, #276]	; (8007108 <UART_SetConfig+0x2e4>)
 8006ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8006ffc:	d016      	beq.n	800702c <UART_SetConfig+0x208>
 8006ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8007000:	d818      	bhi.n	8007034 <UART_SetConfig+0x210>
 8007002:	2b80      	cmp	r3, #128	; 0x80
 8007004:	d00a      	beq.n	800701c <UART_SetConfig+0x1f8>
 8007006:	2b80      	cmp	r3, #128	; 0x80
 8007008:	d814      	bhi.n	8007034 <UART_SetConfig+0x210>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <UART_SetConfig+0x1f0>
 800700e:	2b40      	cmp	r3, #64	; 0x40
 8007010:	d008      	beq.n	8007024 <UART_SetConfig+0x200>
 8007012:	e00f      	b.n	8007034 <UART_SetConfig+0x210>
 8007014:	2300      	movs	r3, #0
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800701a:	e082      	b.n	8007122 <UART_SetConfig+0x2fe>
 800701c:	2302      	movs	r3, #2
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007022:	e07e      	b.n	8007122 <UART_SetConfig+0x2fe>
 8007024:	2304      	movs	r3, #4
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800702a:	e07a      	b.n	8007122 <UART_SetConfig+0x2fe>
 800702c:	2308      	movs	r3, #8
 800702e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007032:	e076      	b.n	8007122 <UART_SetConfig+0x2fe>
 8007034:	2310      	movs	r3, #16
 8007036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800703a:	e072      	b.n	8007122 <UART_SetConfig+0x2fe>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a35      	ldr	r2, [pc, #212]	; (8007118 <UART_SetConfig+0x2f4>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d12a      	bne.n	800709c <UART_SetConfig+0x278>
 8007046:	4b30      	ldr	r3, [pc, #192]	; (8007108 <UART_SetConfig+0x2e4>)
 8007048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007054:	d01a      	beq.n	800708c <UART_SetConfig+0x268>
 8007056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800705a:	d81b      	bhi.n	8007094 <UART_SetConfig+0x270>
 800705c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007060:	d00c      	beq.n	800707c <UART_SetConfig+0x258>
 8007062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007066:	d815      	bhi.n	8007094 <UART_SetConfig+0x270>
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <UART_SetConfig+0x250>
 800706c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007070:	d008      	beq.n	8007084 <UART_SetConfig+0x260>
 8007072:	e00f      	b.n	8007094 <UART_SetConfig+0x270>
 8007074:	2300      	movs	r3, #0
 8007076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800707a:	e052      	b.n	8007122 <UART_SetConfig+0x2fe>
 800707c:	2302      	movs	r3, #2
 800707e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007082:	e04e      	b.n	8007122 <UART_SetConfig+0x2fe>
 8007084:	2304      	movs	r3, #4
 8007086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800708a:	e04a      	b.n	8007122 <UART_SetConfig+0x2fe>
 800708c:	2308      	movs	r3, #8
 800708e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007092:	e046      	b.n	8007122 <UART_SetConfig+0x2fe>
 8007094:	2310      	movs	r3, #16
 8007096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800709a:	e042      	b.n	8007122 <UART_SetConfig+0x2fe>
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a17      	ldr	r2, [pc, #92]	; (8007100 <UART_SetConfig+0x2dc>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d13a      	bne.n	800711c <UART_SetConfig+0x2f8>
 80070a6:	4b18      	ldr	r3, [pc, #96]	; (8007108 <UART_SetConfig+0x2e4>)
 80070a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070b4:	d01a      	beq.n	80070ec <UART_SetConfig+0x2c8>
 80070b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070ba:	d81b      	bhi.n	80070f4 <UART_SetConfig+0x2d0>
 80070bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070c0:	d00c      	beq.n	80070dc <UART_SetConfig+0x2b8>
 80070c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070c6:	d815      	bhi.n	80070f4 <UART_SetConfig+0x2d0>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <UART_SetConfig+0x2b0>
 80070cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d0:	d008      	beq.n	80070e4 <UART_SetConfig+0x2c0>
 80070d2:	e00f      	b.n	80070f4 <UART_SetConfig+0x2d0>
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070da:	e022      	b.n	8007122 <UART_SetConfig+0x2fe>
 80070dc:	2302      	movs	r3, #2
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e2:	e01e      	b.n	8007122 <UART_SetConfig+0x2fe>
 80070e4:	2304      	movs	r3, #4
 80070e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ea:	e01a      	b.n	8007122 <UART_SetConfig+0x2fe>
 80070ec:	2308      	movs	r3, #8
 80070ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f2:	e016      	b.n	8007122 <UART_SetConfig+0x2fe>
 80070f4:	2310      	movs	r3, #16
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fa:	e012      	b.n	8007122 <UART_SetConfig+0x2fe>
 80070fc:	cfff69f3 	.word	0xcfff69f3
 8007100:	40008000 	.word	0x40008000
 8007104:	40013800 	.word	0x40013800
 8007108:	40021000 	.word	0x40021000
 800710c:	40004400 	.word	0x40004400
 8007110:	40004800 	.word	0x40004800
 8007114:	40004c00 	.word	0x40004c00
 8007118:	40005000 	.word	0x40005000
 800711c:	2310      	movs	r3, #16
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4aae      	ldr	r2, [pc, #696]	; (80073e0 <UART_SetConfig+0x5bc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	f040 8097 	bne.w	800725c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800712e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007132:	2b08      	cmp	r3, #8
 8007134:	d823      	bhi.n	800717e <UART_SetConfig+0x35a>
 8007136:	a201      	add	r2, pc, #4	; (adr r2, 800713c <UART_SetConfig+0x318>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	08007161 	.word	0x08007161
 8007140:	0800717f 	.word	0x0800717f
 8007144:	08007169 	.word	0x08007169
 8007148:	0800717f 	.word	0x0800717f
 800714c:	0800716f 	.word	0x0800716f
 8007150:	0800717f 	.word	0x0800717f
 8007154:	0800717f 	.word	0x0800717f
 8007158:	0800717f 	.word	0x0800717f
 800715c:	08007177 	.word	0x08007177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007160:	f7fc ffbe 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8007164:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007166:	e010      	b.n	800718a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007168:	4b9e      	ldr	r3, [pc, #632]	; (80073e4 <UART_SetConfig+0x5c0>)
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800716c:	e00d      	b.n	800718a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800716e:	f7fc ff49 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8007172:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007174:	e009      	b.n	800718a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800717a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800717c:	e005      	b.n	800718a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007188:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 8130 	beq.w	80073f2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	4a94      	ldr	r2, [pc, #592]	; (80073e8 <UART_SetConfig+0x5c4>)
 8007198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800719c:	461a      	mov	r2, r3
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80071a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	4613      	mov	r3, r2
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	4413      	add	r3, r2
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d305      	bcc.n	80071c2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d903      	bls.n	80071ca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80071c8:	e113      	b.n	80073f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	2200      	movs	r2, #0
 80071ce:	60bb      	str	r3, [r7, #8]
 80071d0:	60fa      	str	r2, [r7, #12]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	4a84      	ldr	r2, [pc, #528]	; (80073e8 <UART_SetConfig+0x5c4>)
 80071d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	2200      	movs	r2, #0
 80071e0:	603b      	str	r3, [r7, #0]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071ec:	f7f9 fb2a 	bl	8000844 <__aeabi_uldivmod>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4610      	mov	r0, r2
 80071f6:	4619      	mov	r1, r3
 80071f8:	f04f 0200 	mov.w	r2, #0
 80071fc:	f04f 0300 	mov.w	r3, #0
 8007200:	020b      	lsls	r3, r1, #8
 8007202:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007206:	0202      	lsls	r2, r0, #8
 8007208:	6979      	ldr	r1, [r7, #20]
 800720a:	6849      	ldr	r1, [r1, #4]
 800720c:	0849      	lsrs	r1, r1, #1
 800720e:	2000      	movs	r0, #0
 8007210:	460c      	mov	r4, r1
 8007212:	4605      	mov	r5, r0
 8007214:	eb12 0804 	adds.w	r8, r2, r4
 8007218:	eb43 0905 	adc.w	r9, r3, r5
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	469a      	mov	sl, r3
 8007224:	4693      	mov	fp, r2
 8007226:	4652      	mov	r2, sl
 8007228:	465b      	mov	r3, fp
 800722a:	4640      	mov	r0, r8
 800722c:	4649      	mov	r1, r9
 800722e:	f7f9 fb09 	bl	8000844 <__aeabi_uldivmod>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4613      	mov	r3, r2
 8007238:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007240:	d308      	bcc.n	8007254 <UART_SetConfig+0x430>
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007248:	d204      	bcs.n	8007254 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6a3a      	ldr	r2, [r7, #32]
 8007250:	60da      	str	r2, [r3, #12]
 8007252:	e0ce      	b.n	80073f2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800725a:	e0ca      	b.n	80073f2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007264:	d166      	bne.n	8007334 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007266:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800726a:	2b08      	cmp	r3, #8
 800726c:	d827      	bhi.n	80072be <UART_SetConfig+0x49a>
 800726e:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <UART_SetConfig+0x450>)
 8007270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007274:	08007299 	.word	0x08007299
 8007278:	080072a1 	.word	0x080072a1
 800727c:	080072a9 	.word	0x080072a9
 8007280:	080072bf 	.word	0x080072bf
 8007284:	080072af 	.word	0x080072af
 8007288:	080072bf 	.word	0x080072bf
 800728c:	080072bf 	.word	0x080072bf
 8007290:	080072bf 	.word	0x080072bf
 8007294:	080072b7 	.word	0x080072b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007298:	f7fc ff22 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 800729c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800729e:	e014      	b.n	80072ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a0:	f7fc ff34 	bl	800410c <HAL_RCC_GetPCLK2Freq>
 80072a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072a6:	e010      	b.n	80072ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a8:	4b4e      	ldr	r3, [pc, #312]	; (80073e4 <UART_SetConfig+0x5c0>)
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072ac:	e00d      	b.n	80072ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ae:	f7fc fea9 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 80072b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072b4:	e009      	b.n	80072ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072bc:	e005      	b.n	80072ca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80072c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8090 	beq.w	80073f2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	4a44      	ldr	r2, [pc, #272]	; (80073e8 <UART_SetConfig+0x5c4>)
 80072d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072dc:	461a      	mov	r2, r3
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80072e4:	005a      	lsls	r2, r3, #1
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	441a      	add	r2, r3
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	2b0f      	cmp	r3, #15
 80072fc:	d916      	bls.n	800732c <UART_SetConfig+0x508>
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007304:	d212      	bcs.n	800732c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	b29b      	uxth	r3, r3
 800730a:	f023 030f 	bic.w	r3, r3, #15
 800730e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	085b      	lsrs	r3, r3, #1
 8007314:	b29b      	uxth	r3, r3
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	b29a      	uxth	r2, r3
 800731c:	8bfb      	ldrh	r3, [r7, #30]
 800731e:	4313      	orrs	r3, r2
 8007320:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	8bfa      	ldrh	r2, [r7, #30]
 8007328:	60da      	str	r2, [r3, #12]
 800732a:	e062      	b.n	80073f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007332:	e05e      	b.n	80073f2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007334:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007338:	2b08      	cmp	r3, #8
 800733a:	d828      	bhi.n	800738e <UART_SetConfig+0x56a>
 800733c:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <UART_SetConfig+0x520>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	08007369 	.word	0x08007369
 8007348:	08007371 	.word	0x08007371
 800734c:	08007379 	.word	0x08007379
 8007350:	0800738f 	.word	0x0800738f
 8007354:	0800737f 	.word	0x0800737f
 8007358:	0800738f 	.word	0x0800738f
 800735c:	0800738f 	.word	0x0800738f
 8007360:	0800738f 	.word	0x0800738f
 8007364:	08007387 	.word	0x08007387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007368:	f7fc feba 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 800736c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800736e:	e014      	b.n	800739a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007370:	f7fc fecc 	bl	800410c <HAL_RCC_GetPCLK2Freq>
 8007374:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007376:	e010      	b.n	800739a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007378:	4b1a      	ldr	r3, [pc, #104]	; (80073e4 <UART_SetConfig+0x5c0>)
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800737c:	e00d      	b.n	800739a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800737e:	f7fc fe41 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8007382:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007384:	e009      	b.n	800739a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800738c:	e005      	b.n	800739a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007398:	bf00      	nop
    }

    if (pclk != 0U)
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	2b00      	cmp	r3, #0
 800739e:	d028      	beq.n	80073f2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	4a10      	ldr	r2, [pc, #64]	; (80073e8 <UART_SetConfig+0x5c4>)
 80073a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073aa:	461a      	mov	r2, r3
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	085b      	lsrs	r3, r3, #1
 80073b8:	441a      	add	r2, r3
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	2b0f      	cmp	r3, #15
 80073c8:	d910      	bls.n	80073ec <UART_SetConfig+0x5c8>
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d0:	d20c      	bcs.n	80073ec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60da      	str	r2, [r3, #12]
 80073dc:	e009      	b.n	80073f2 <UART_SetConfig+0x5ce>
 80073de:	bf00      	nop
 80073e0:	40008000 	.word	0x40008000
 80073e4:	00f42400 	.word	0x00f42400
 80073e8:	080086b0 	.word	0x080086b0
      }
      else
      {
        ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2200      	movs	r2, #0
 8007406:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	2200      	movs	r2, #0
 800740c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800740e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007412:	4618      	mov	r0, r3
 8007414:	3730      	adds	r7, #48	; 0x30
 8007416:	46bd      	mov	sp, r7
 8007418:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800741c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00a      	beq.n	800748a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748e:	f003 0308 	and.w	r3, r3, #8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	f003 0310 	and.w	r3, r3, #16
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d01a      	beq.n	8007532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800751a:	d10a      	bne.n	8007532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	605a      	str	r2, [r3, #4]
  }
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af02      	add	r7, sp, #8
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007570:	f7fa fbaa 	bl	8001cc8 <HAL_GetTick>
 8007574:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b08      	cmp	r3, #8
 8007582:	d10e      	bne.n	80075a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f82f 	bl	80075f6 <UART_WaitOnFlagUntilTimeout>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e025      	b.n	80075ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	d10e      	bne.n	80075ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f819 	bl	80075f6 <UART_WaitOnFlagUntilTimeout>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e00f      	b.n	80075ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b09c      	sub	sp, #112	; 0x70
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	60b9      	str	r1, [r7, #8]
 8007600:	603b      	str	r3, [r7, #0]
 8007602:	4613      	mov	r3, r2
 8007604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007606:	e0a9      	b.n	800775c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760e:	f000 80a5 	beq.w	800775c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007612:	f7fa fb59 	bl	8001cc8 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800761e:	429a      	cmp	r2, r3
 8007620:	d302      	bcc.n	8007628 <UART_WaitOnFlagUntilTimeout+0x32>
 8007622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007624:	2b00      	cmp	r3, #0
 8007626:	d140      	bne.n	80076aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007630:	e853 3f00 	ldrex	r3, [r3]
 8007634:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007638:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800763c:	667b      	str	r3, [r7, #100]	; 0x64
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007646:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007648:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800764c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e6      	bne.n	8007628 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3308      	adds	r3, #8
 8007660:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	f023 0301 	bic.w	r3, r3, #1
 8007670:	663b      	str	r3, [r7, #96]	; 0x60
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3308      	adds	r3, #8
 8007678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800767a:	64ba      	str	r2, [r7, #72]	; 0x48
 800767c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e5      	bne.n	800765a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2220      	movs	r2, #32
 800769a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e069      	b.n	800777e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0304 	and.w	r3, r3, #4
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d051      	beq.n	800775c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c6:	d149      	bne.n	800775c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
 80076f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e6      	bne.n	80076d2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3308      	adds	r3, #8
 800770a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	613b      	str	r3, [r7, #16]
   return(result);
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f023 0301 	bic.w	r3, r3, #1
 800771a:	66bb      	str	r3, [r7, #104]	; 0x68
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3308      	adds	r3, #8
 8007722:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007724:	623a      	str	r2, [r7, #32]
 8007726:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	69f9      	ldr	r1, [r7, #28]
 800772a:	6a3a      	ldr	r2, [r7, #32]
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	61bb      	str	r3, [r7, #24]
   return(result);
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e5      	bne.n	8007704 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2220      	movs	r2, #32
 8007744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2220      	movs	r2, #32
 800774c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e010      	b.n	800777e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	69da      	ldr	r2, [r3, #28]
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	4013      	ands	r3, r2
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	429a      	cmp	r2, r3
 800776a:	bf0c      	ite	eq
 800776c:	2301      	moveq	r3, #1
 800776e:	2300      	movne	r3, #0
 8007770:	b2db      	uxtb	r3, r3
 8007772:	461a      	mov	r2, r3
 8007774:	79fb      	ldrb	r3, [r7, #7]
 8007776:	429a      	cmp	r2, r3
 8007778:	f43f af46 	beq.w	8007608 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3770      	adds	r7, #112	; 0x70
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
	...

08007788 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007788:	b480      	push	{r7}
 800778a:	b0a3      	sub	sp, #140	; 0x8c
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	4613      	mov	r3, r2
 8007794:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	88fa      	ldrh	r2, [r7, #6]
 80077a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ba:	d10e      	bne.n	80077da <UART_Start_Receive_IT+0x52>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d105      	bne.n	80077d0 <UART_Start_Receive_IT+0x48>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80077ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077ce:	e02d      	b.n	800782c <UART_Start_Receive_IT+0xa4>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	22ff      	movs	r2, #255	; 0xff
 80077d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077d8:	e028      	b.n	800782c <UART_Start_Receive_IT+0xa4>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10d      	bne.n	80077fe <UART_Start_Receive_IT+0x76>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d104      	bne.n	80077f4 <UART_Start_Receive_IT+0x6c>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	22ff      	movs	r2, #255	; 0xff
 80077ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077f2:	e01b      	b.n	800782c <UART_Start_Receive_IT+0xa4>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	227f      	movs	r2, #127	; 0x7f
 80077f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077fc:	e016      	b.n	800782c <UART_Start_Receive_IT+0xa4>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007806:	d10d      	bne.n	8007824 <UART_Start_Receive_IT+0x9c>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <UART_Start_Receive_IT+0x92>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	227f      	movs	r2, #127	; 0x7f
 8007814:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007818:	e008      	b.n	800782c <UART_Start_Receive_IT+0xa4>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	223f      	movs	r2, #63	; 0x3f
 800781e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007822:	e003      	b.n	800782c <UART_Start_Receive_IT+0xa4>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2222      	movs	r2, #34	; 0x22
 8007838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3308      	adds	r3, #8
 8007842:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800784c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800784e:	f043 0301 	orr.w	r3, r3, #1
 8007852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3308      	adds	r3, #8
 800785c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007860:	673a      	str	r2, [r7, #112]	; 0x70
 8007862:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007866:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800786e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e3      	bne.n	800783c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800787c:	d153      	bne.n	8007926 <UART_Start_Receive_IT+0x19e>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007884:	88fa      	ldrh	r2, [r7, #6]
 8007886:	429a      	cmp	r2, r3
 8007888:	d34d      	bcc.n	8007926 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007892:	d107      	bne.n	80078a4 <UART_Start_Receive_IT+0x11c>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d103      	bne.n	80078a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4a4b      	ldr	r2, [pc, #300]	; (80079cc <UART_Start_Receive_IT+0x244>)
 80078a0:	671a      	str	r2, [r3, #112]	; 0x70
 80078a2:	e002      	b.n	80078aa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4a4a      	ldr	r2, [pc, #296]	; (80079d0 <UART_Start_Receive_IT+0x248>)
 80078a8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d01a      	beq.n	80078f0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078de:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e4      	bne.n	80078ba <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3308      	adds	r3, #8
 80078f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078fa:	e853 3f00 	ldrex	r3, [r3]
 80078fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007906:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3308      	adds	r3, #8
 800790e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007910:	64ba      	str	r2, [r7, #72]	; 0x48
 8007912:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007918:	e841 2300 	strex	r3, r2, [r1]
 800791c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800791e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e5      	bne.n	80078f0 <UART_Start_Receive_IT+0x168>
 8007924:	e04a      	b.n	80079bc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800792e:	d107      	bne.n	8007940 <UART_Start_Receive_IT+0x1b8>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4a26      	ldr	r2, [pc, #152]	; (80079d4 <UART_Start_Receive_IT+0x24c>)
 800793c:	671a      	str	r2, [r3, #112]	; 0x70
 800793e:	e002      	b.n	8007946 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4a25      	ldr	r2, [pc, #148]	; (80079d8 <UART_Start_Receive_IT+0x250>)
 8007944:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d019      	beq.n	800798a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800796a:	677b      	str	r3, [r7, #116]	; 0x74
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	461a      	mov	r2, r3
 8007972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
 8007976:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800797a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e6      	bne.n	8007956 <UART_Start_Receive_IT+0x1ce>
 8007988:	e018      	b.n	80079bc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	613b      	str	r3, [r7, #16]
   return(result);
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f043 0320 	orr.w	r3, r3, #32
 800799e:	67bb      	str	r3, [r7, #120]	; 0x78
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	461a      	mov	r2, r3
 80079a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079a8:	623b      	str	r3, [r7, #32]
 80079aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	69f9      	ldr	r1, [r7, #28]
 80079ae:	6a3a      	ldr	r2, [r7, #32]
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e6      	bne.n	800798a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	378c      	adds	r7, #140	; 0x8c
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	080080e5 	.word	0x080080e5
 80079d0:	08007ded 	.word	0x08007ded
 80079d4:	08007c8b 	.word	0x08007c8b
 80079d8:	08007b2b 	.word	0x08007b2b

080079dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079dc:	b480      	push	{r7}
 80079de:	b095      	sub	sp, #84	; 0x54
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a02:	643b      	str	r3, [r7, #64]	; 0x40
 8007a04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e6      	bne.n	80079e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a2c:	f023 0301 	bic.w	r3, r3, #1
 8007a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3308      	adds	r3, #8
 8007a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e3      	bne.n	8007a16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d118      	bne.n	8007a88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	e853 3f00 	ldrex	r3, [r3]
 8007a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f023 0310 	bic.w	r3, r3, #16
 8007a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	6979      	ldr	r1, [r7, #20]
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	613b      	str	r3, [r7, #16]
   return(result);
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e6      	bne.n	8007a56 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007a9c:	bf00      	nop
 8007a9e:	3754      	adds	r7, #84	; 0x54
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f7ff f996 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007acc:	bf00      	nop
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007af0:	61fb      	str	r3, [r7, #28]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	61bb      	str	r3, [r7, #24]
 8007afc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	6979      	ldr	r1, [r7, #20]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	613b      	str	r3, [r7, #16]
   return(result);
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e6      	bne.n	8007adc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff f961 	bl	8006de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b22:	bf00      	nop
 8007b24:	3720      	adds	r7, #32
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b096      	sub	sp, #88	; 0x58
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b38:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b42:	2b22      	cmp	r3, #34	; 0x22
 8007b44:	f040 8095 	bne.w	8007c72 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b52:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007b56:	b2d9      	uxtb	r1, r3
 8007b58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b62:	400a      	ands	r2, r1
 8007b64:	b2d2      	uxtb	r2, r2
 8007b66:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d178      	bne.n	8007c82 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ba4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bae:	647b      	str	r3, [r7, #68]	; 0x44
 8007bb0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e6      	bne.n	8007b90 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	f023 0301 	bic.w	r3, r3, #1
 8007bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3308      	adds	r3, #8
 8007be0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007be2:	633a      	str	r2, [r7, #48]	; 0x30
 8007be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e5      	bne.n	8007bc2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d12e      	bne.n	8007c6a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 0310 	bic.w	r3, r3, #16
 8007c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c30:	61fb      	str	r3, [r7, #28]
 8007c32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	69b9      	ldr	r1, [r7, #24]
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e6      	bne.n	8007c12 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	2b10      	cmp	r3, #16
 8007c50:	d103      	bne.n	8007c5a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2210      	movs	r2, #16
 8007c58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff f8d2 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c68:	e00b      	b.n	8007c82 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7f9 ffc2 	bl	8001bf4 <HAL_UART_RxCpltCallback>
}
 8007c70:	e007      	b.n	8007c82 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	699a      	ldr	r2, [r3, #24]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f042 0208 	orr.w	r2, r2, #8
 8007c80:	619a      	str	r2, [r3, #24]
}
 8007c82:	bf00      	nop
 8007c84:	3758      	adds	r7, #88	; 0x58
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b096      	sub	sp, #88	; 0x58
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c98:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca2:	2b22      	cmp	r3, #34	; 0x22
 8007ca4:	f040 8095 	bne.w	8007dd2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007cb8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007cbc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cc6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ccc:	1c9a      	adds	r2, r3, #2
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d178      	bne.n	8007de2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf8:	e853 3f00 	ldrex	r3, [r3]
 8007cfc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8007d10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e6      	bne.n	8007cf0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3308      	adds	r3, #8
 8007d28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	f023 0301 	bic.w	r3, r3, #1
 8007d38:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3308      	adds	r3, #8
 8007d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e5      	bne.n	8007d22 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d12e      	bne.n	8007dca <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f023 0310 	bic.w	r3, r3, #16
 8007d86:	647b      	str	r3, [r7, #68]	; 0x44
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d90:	61bb      	str	r3, [r7, #24]
 8007d92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6979      	ldr	r1, [r7, #20]
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e6      	bne.n	8007d72 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	f003 0310 	and.w	r3, r3, #16
 8007dae:	2b10      	cmp	r3, #16
 8007db0:	d103      	bne.n	8007dba <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2210      	movs	r2, #16
 8007db8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7ff f822 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dc8:	e00b      	b.n	8007de2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7f9 ff12 	bl	8001bf4 <HAL_UART_RxCpltCallback>
}
 8007dd0:	e007      	b.n	8007de2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	699a      	ldr	r2, [r3, #24]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f042 0208 	orr.w	r2, r2, #8
 8007de0:	619a      	str	r2, [r3, #24]
}
 8007de2:	bf00      	nop
 8007de4:	3758      	adds	r7, #88	; 0x58
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b0a6      	sub	sp, #152	; 0x98
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007dfa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69db      	ldr	r3, [r3, #28]
 8007e04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e22:	2b22      	cmp	r3, #34	; 0x22
 8007e24:	f040 814f 	bne.w	80080c6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e2e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e32:	e0f6      	b.n	8008022 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e3e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007e42:	b2d9      	uxtb	r1, r3
 8007e44:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e4e:	400a      	ands	r2, r1
 8007e50:	b2d2      	uxtb	r2, r2
 8007e52:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	3b01      	subs	r3, #1
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e7e:	f003 0307 	and.w	r3, r3, #7
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d053      	beq.n	8007f2e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d011      	beq.n	8007eb6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00b      	beq.n	8007eb6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eac:	f043 0201 	orr.w	r2, r3, #1
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d011      	beq.n	8007ee6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007ec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00b      	beq.n	8007ee6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007edc:	f043 0204 	orr.w	r2, r3, #4
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d011      	beq.n	8007f16 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007ef2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00b      	beq.n	8007f16 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2204      	movs	r2, #4
 8007f04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f0c:	f043 0202 	orr.w	r2, r3, #2
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d006      	beq.n	8007f2e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7fe ff69 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d173      	bne.n	8008022 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007f48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f5e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007f62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e4      	bne.n	8007f3a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3308      	adds	r3, #8
 8007f76:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f86:	f023 0301 	bic.w	r3, r3, #1
 8007f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3308      	adds	r3, #8
 8007f92:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007f94:	657a      	str	r2, [r7, #84]	; 0x54
 8007f96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f9c:	e841 2300 	strex	r3, r2, [r1]
 8007fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e3      	bne.n	8007f70 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d12e      	bne.n	800801c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	f023 0310 	bic.w	r3, r3, #16
 8007fd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8007fe4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e6      	bne.n	8007fc4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69db      	ldr	r3, [r3, #28]
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	2b10      	cmp	r3, #16
 8008002:	d103      	bne.n	800800c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2210      	movs	r2, #16
 800800a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7fe fef9 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
 800801a:	e002      	b.n	8008022 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7f9 fde9 	bl	8001bf4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008022:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008026:	2b00      	cmp	r3, #0
 8008028:	d006      	beq.n	8008038 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800802a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b00      	cmp	r3, #0
 8008034:	f47f aefe 	bne.w	8007e34 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800803e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008042:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008046:	2b00      	cmp	r3, #0
 8008048:	d045      	beq.n	80080d6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008050:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008054:	429a      	cmp	r2, r3
 8008056:	d23e      	bcs.n	80080d6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3308      	adds	r3, #8
 800805e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	61fb      	str	r3, [r7, #28]
   return(result);
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800806e:	673b      	str	r3, [r7, #112]	; 0x70
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3308      	adds	r3, #8
 8008076:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008078:	62fa      	str	r2, [r7, #44]	; 0x2c
 800807a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800807e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e5      	bne.n	8008058 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a14      	ldr	r2, [pc, #80]	; (80080e0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008090:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	e853 3f00 	ldrex	r3, [r3]
 800809e:	60bb      	str	r3, [r7, #8]
   return(result);
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f043 0320 	orr.w	r3, r3, #32
 80080a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	461a      	mov	r2, r3
 80080ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b0:	61bb      	str	r3, [r7, #24]
 80080b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b4:	6979      	ldr	r1, [r7, #20]
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	e841 2300 	strex	r3, r2, [r1]
 80080bc:	613b      	str	r3, [r7, #16]
   return(result);
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e6      	bne.n	8008092 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080c4:	e007      	b.n	80080d6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	699a      	ldr	r2, [r3, #24]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f042 0208 	orr.w	r2, r2, #8
 80080d4:	619a      	str	r2, [r3, #24]
}
 80080d6:	bf00      	nop
 80080d8:	3798      	adds	r7, #152	; 0x98
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	08007b2b 	.word	0x08007b2b

080080e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b0a8      	sub	sp, #160	; 0xa0
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080f2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811a:	2b22      	cmp	r3, #34	; 0x22
 800811c:	f040 8153 	bne.w	80083c6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008126:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800812a:	e0fa      	b.n	8008322 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800813e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008142:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008146:	4013      	ands	r3, r2
 8008148:	b29a      	uxth	r2, r3
 800814a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800814e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008154:	1c9a      	adds	r2, r3, #2
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008160:	b29b      	uxth	r3, r3
 8008162:	3b01      	subs	r3, #1
 8008164:	b29a      	uxth	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008176:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	2b00      	cmp	r3, #0
 8008180:	d053      	beq.n	800822a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008182:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	2b00      	cmp	r3, #0
 800818c:	d011      	beq.n	80081b2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800818e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00b      	beq.n	80081b2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2201      	movs	r2, #1
 80081a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081a8:	f043 0201 	orr.w	r2, r3, #1
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d011      	beq.n	80081e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80081be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00b      	beq.n	80081e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2202      	movs	r2, #2
 80081d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081d8:	f043 0204 	orr.w	r2, r3, #4
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081e6:	f003 0304 	and.w	r3, r3, #4
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d011      	beq.n	8008212 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80081ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00b      	beq.n	8008212 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2204      	movs	r2, #4
 8008200:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008208:	f043 0202 	orr.w	r2, r3, #2
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008218:	2b00      	cmp	r3, #0
 800821a:	d006      	beq.n	800822a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7fe fdeb 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008230:	b29b      	uxth	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d175      	bne.n	8008322 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800823e:	e853 3f00 	ldrex	r3, [r3]
 8008242:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008246:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800824a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008258:	66fb      	str	r3, [r7, #108]	; 0x6c
 800825a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800825e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008260:	e841 2300 	strex	r3, r2, [r1]
 8008264:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1e4      	bne.n	8008236 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3308      	adds	r3, #8
 8008272:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008276:	e853 3f00 	ldrex	r3, [r3]
 800827a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800827c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800827e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008282:	f023 0301 	bic.w	r3, r3, #1
 8008286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3308      	adds	r3, #8
 8008290:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008294:	65ba      	str	r2, [r7, #88]	; 0x58
 8008296:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800829a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e1      	bne.n	800826c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2220      	movs	r2, #32
 80082ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d12e      	bne.n	800831c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082cc:	e853 3f00 	ldrex	r3, [r3]
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d4:	f023 0310 	bic.w	r3, r3, #16
 80082d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082e2:	647b      	str	r3, [r7, #68]	; 0x44
 80082e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e6      	bne.n	80082c4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b10      	cmp	r3, #16
 8008302:	d103      	bne.n	800830c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2210      	movs	r2, #16
 800830a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7fe fd79 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
 800831a:	e002      	b.n	8008322 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7f9 fc69 	bl	8001bf4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008322:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008326:	2b00      	cmp	r3, #0
 8008328:	d006      	beq.n	8008338 <UART_RxISR_16BIT_FIFOEN+0x254>
 800832a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800832e:	f003 0320 	and.w	r3, r3, #32
 8008332:	2b00      	cmp	r3, #0
 8008334:	f47f aefa 	bne.w	800812c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800833e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008342:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008346:	2b00      	cmp	r3, #0
 8008348:	d045      	beq.n	80083d6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008350:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008354:	429a      	cmp	r2, r3
 8008356:	d23e      	bcs.n	80083d6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3308      	adds	r3, #8
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	e853 3f00 	ldrex	r3, [r3]
 8008366:	623b      	str	r3, [r7, #32]
   return(result);
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800836e:	677b      	str	r3, [r7, #116]	; 0x74
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008378:	633a      	str	r2, [r7, #48]	; 0x30
 800837a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800837e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008380:	e841 2300 	strex	r3, r2, [r1]
 8008384:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1e5      	bne.n	8008358 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a14      	ldr	r2, [pc, #80]	; (80083e0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008390:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	e853 3f00 	ldrex	r3, [r3]
 800839e:	60fb      	str	r3, [r7, #12]
   return(result);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f043 0320 	orr.w	r3, r3, #32
 80083a6:	673b      	str	r3, [r7, #112]	; 0x70
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	461a      	mov	r2, r3
 80083ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083b0:	61fb      	str	r3, [r7, #28]
 80083b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b4:	69b9      	ldr	r1, [r7, #24]
 80083b6:	69fa      	ldr	r2, [r7, #28]
 80083b8:	e841 2300 	strex	r3, r2, [r1]
 80083bc:	617b      	str	r3, [r7, #20]
   return(result);
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1e6      	bne.n	8008392 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083c4:	e007      	b.n	80083d6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	699a      	ldr	r2, [r3, #24]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f042 0208 	orr.w	r2, r2, #8
 80083d4:	619a      	str	r2, [r3, #24]
}
 80083d6:	bf00      	nop
 80083d8:	37a0      	adds	r7, #160	; 0xa0
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	08007c8b 	.word	0x08007c8b

080083e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800842e:	2b01      	cmp	r3, #1
 8008430:	d101      	bne.n	8008436 <HAL_UARTEx_DisableFifoMode+0x16>
 8008432:	2302      	movs	r3, #2
 8008434:	e027      	b.n	8008486 <HAL_UARTEx_DisableFifoMode+0x66>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2224      	movs	r2, #36	; 0x24
 8008442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 0201 	bic.w	r2, r2, #1
 800845c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008464:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2220      	movs	r2, #32
 8008478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d101      	bne.n	80084aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084a6:	2302      	movs	r3, #2
 80084a8:	e02d      	b.n	8008506 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2224      	movs	r2, #36	; 0x24
 80084b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f022 0201 	bic.w	r2, r2, #1
 80084d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f850 	bl	800858c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008522:	2302      	movs	r3, #2
 8008524:	e02d      	b.n	8008582 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2224      	movs	r2, #36	; 0x24
 8008532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0201 	bic.w	r2, r2, #1
 800854c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f812 	bl	800858c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2220      	movs	r2, #32
 8008574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008598:	2b00      	cmp	r3, #0
 800859a:	d108      	bne.n	80085ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085ac:	e031      	b.n	8008612 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085ae:	2308      	movs	r3, #8
 80085b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085b2:	2308      	movs	r3, #8
 80085b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	0e5b      	lsrs	r3, r3, #25
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	f003 0307 	and.w	r3, r3, #7
 80085c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	0f5b      	lsrs	r3, r3, #29
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	7b3a      	ldrb	r2, [r7, #12]
 80085da:	4911      	ldr	r1, [pc, #68]	; (8008620 <UARTEx_SetNbDataToProcess+0x94>)
 80085dc:	5c8a      	ldrb	r2, [r1, r2]
 80085de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085e2:	7b3a      	ldrb	r2, [r7, #12]
 80085e4:	490f      	ldr	r1, [pc, #60]	; (8008624 <UARTEx_SetNbDataToProcess+0x98>)
 80085e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	7b7a      	ldrb	r2, [r7, #13]
 80085f8:	4909      	ldr	r1, [pc, #36]	; (8008620 <UARTEx_SetNbDataToProcess+0x94>)
 80085fa:	5c8a      	ldrb	r2, [r1, r2]
 80085fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008600:	7b7a      	ldrb	r2, [r7, #13]
 8008602:	4908      	ldr	r1, [pc, #32]	; (8008624 <UARTEx_SetNbDataToProcess+0x98>)
 8008604:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008606:	fb93 f3f2 	sdiv	r3, r3, r2
 800860a:	b29a      	uxth	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008612:	bf00      	nop
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	080086c8 	.word	0x080086c8
 8008624:	080086d0 	.word	0x080086d0

08008628 <memset>:
 8008628:	4402      	add	r2, r0
 800862a:	4603      	mov	r3, r0
 800862c:	4293      	cmp	r3, r2
 800862e:	d100      	bne.n	8008632 <memset+0xa>
 8008630:	4770      	bx	lr
 8008632:	f803 1b01 	strb.w	r1, [r3], #1
 8008636:	e7f9      	b.n	800862c <memset+0x4>

08008638 <__libc_init_array>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	4d0d      	ldr	r5, [pc, #52]	; (8008670 <__libc_init_array+0x38>)
 800863c:	4c0d      	ldr	r4, [pc, #52]	; (8008674 <__libc_init_array+0x3c>)
 800863e:	1b64      	subs	r4, r4, r5
 8008640:	10a4      	asrs	r4, r4, #2
 8008642:	2600      	movs	r6, #0
 8008644:	42a6      	cmp	r6, r4
 8008646:	d109      	bne.n	800865c <__libc_init_array+0x24>
 8008648:	4d0b      	ldr	r5, [pc, #44]	; (8008678 <__libc_init_array+0x40>)
 800864a:	4c0c      	ldr	r4, [pc, #48]	; (800867c <__libc_init_array+0x44>)
 800864c:	f000 f818 	bl	8008680 <_init>
 8008650:	1b64      	subs	r4, r4, r5
 8008652:	10a4      	asrs	r4, r4, #2
 8008654:	2600      	movs	r6, #0
 8008656:	42a6      	cmp	r6, r4
 8008658:	d105      	bne.n	8008666 <__libc_init_array+0x2e>
 800865a:	bd70      	pop	{r4, r5, r6, pc}
 800865c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008660:	4798      	blx	r3
 8008662:	3601      	adds	r6, #1
 8008664:	e7ee      	b.n	8008644 <__libc_init_array+0xc>
 8008666:	f855 3b04 	ldr.w	r3, [r5], #4
 800866a:	4798      	blx	r3
 800866c:	3601      	adds	r6, #1
 800866e:	e7f2      	b.n	8008656 <__libc_init_array+0x1e>
 8008670:	080086e0 	.word	0x080086e0
 8008674:	080086e0 	.word	0x080086e0
 8008678:	080086e0 	.word	0x080086e0
 800867c:	080086e4 	.word	0x080086e4

08008680 <_init>:
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008682:	bf00      	nop
 8008684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008686:	bc08      	pop	{r3}
 8008688:	469e      	mov	lr, r3
 800868a:	4770      	bx	lr

0800868c <_fini>:
 800868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868e:	bf00      	nop
 8008690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008692:	bc08      	pop	{r3}
 8008694:	469e      	mov	lr, r3
 8008696:	4770      	bx	lr
