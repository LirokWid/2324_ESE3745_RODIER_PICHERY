
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af18  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800b0f8  0800b0f8  0001b0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3e0  0800b3e0  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3e0  0800b3e0  0001b3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3e8  0800b3e8  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3e8  0800b3e8  0001b3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3ec  0800b3ec  0001b3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800b3f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  2000026c  0800b65c  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  0800b65c  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001baf0  00000000  00000000  000202df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038ba  00000000  00000000  0003bdcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  0003f690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000114c  00000000  00000000  00040cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a632  00000000  00000000  00041e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd55  00000000  00000000  0006c476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114e6b  00000000  00000000  000881cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b68  00000000  00000000  0019d038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001a3ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000026c 	.word	0x2000026c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b0e0 	.word	0x0800b0e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000270 	.word	0x20000270
 800021c:	0800b0e0 	.word	0x0800b0e0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_dmul>:
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002fe:	bf1d      	ittte	ne
 8000300:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000304:	ea94 0f0c 	teqne	r4, ip
 8000308:	ea95 0f0c 	teqne	r5, ip
 800030c:	f000 f8de 	bleq	80004cc <__aeabi_dmul+0x1dc>
 8000310:	442c      	add	r4, r5
 8000312:	ea81 0603 	eor.w	r6, r1, r3
 8000316:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800031a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800031e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000322:	bf18      	it	ne
 8000324:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000328:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800032c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000330:	d038      	beq.n	80003a4 <__aeabi_dmul+0xb4>
 8000332:	fba0 ce02 	umull	ip, lr, r0, r2
 8000336:	f04f 0500 	mov.w	r5, #0
 800033a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800033e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000342:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000346:	f04f 0600 	mov.w	r6, #0
 800034a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800034e:	f09c 0f00 	teq	ip, #0
 8000352:	bf18      	it	ne
 8000354:	f04e 0e01 	orrne.w	lr, lr, #1
 8000358:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800035c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000360:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000364:	d204      	bcs.n	8000370 <__aeabi_dmul+0x80>
 8000366:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800036a:	416d      	adcs	r5, r5
 800036c:	eb46 0606 	adc.w	r6, r6, r6
 8000370:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000374:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000378:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800037c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000380:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000384:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000388:	bf88      	it	hi
 800038a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800038e:	d81e      	bhi.n	80003ce <__aeabi_dmul+0xde>
 8000390:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80003a8:	ea46 0101 	orr.w	r1, r6, r1
 80003ac:	ea40 0002 	orr.w	r0, r0, r2
 80003b0:	ea81 0103 	eor.w	r1, r1, r3
 80003b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003b8:	bfc2      	ittt	gt
 80003ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003c2:	bd70      	popgt	{r4, r5, r6, pc}
 80003c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003c8:	f04f 0e00 	mov.w	lr, #0
 80003cc:	3c01      	subs	r4, #1
 80003ce:	f300 80ab 	bgt.w	8000528 <__aeabi_dmul+0x238>
 80003d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003d6:	bfde      	ittt	le
 80003d8:	2000      	movle	r0, #0
 80003da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd70      	pople	{r4, r5, r6, pc}
 80003e0:	f1c4 0400 	rsb	r4, r4, #0
 80003e4:	3c20      	subs	r4, #32
 80003e6:	da35      	bge.n	8000454 <__aeabi_dmul+0x164>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc1b      	bgt.n	8000424 <__aeabi_dmul+0x134>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0520 	rsb	r5, r4, #32
 80003f4:	fa00 f305 	lsl.w	r3, r0, r5
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000400:	ea40 0002 	orr.w	r0, r0, r2
 8000404:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000408:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800040c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000410:	fa21 f604 	lsr.w	r6, r1, r4
 8000414:	eb42 0106 	adc.w	r1, r2, r6
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 040c 	rsb	r4, r4, #12
 8000428:	f1c4 0520 	rsb	r5, r4, #32
 800042c:	fa00 f304 	lsl.w	r3, r0, r4
 8000430:	fa20 f005 	lsr.w	r0, r0, r5
 8000434:	fa01 f204 	lsl.w	r2, r1, r4
 8000438:	ea40 0002 	orr.w	r0, r0, r2
 800043c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000440:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000444:	f141 0100 	adc.w	r1, r1, #0
 8000448:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800044c:	bf08      	it	eq
 800044e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000452:	bd70      	pop	{r4, r5, r6, pc}
 8000454:	f1c4 0520 	rsb	r5, r4, #32
 8000458:	fa00 f205 	lsl.w	r2, r0, r5
 800045c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000460:	fa20 f304 	lsr.w	r3, r0, r4
 8000464:	fa01 f205 	lsl.w	r2, r1, r5
 8000468:	ea43 0302 	orr.w	r3, r3, r2
 800046c:	fa21 f004 	lsr.w	r0, r1, r4
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000474:	fa21 f204 	lsr.w	r2, r1, r4
 8000478:	ea20 0002 	bic.w	r0, r0, r2
 800047c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000480:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000484:	bf08      	it	eq
 8000486:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	f094 0f00 	teq	r4, #0
 8000490:	d10f      	bne.n	80004b2 <__aeabi_dmul+0x1c2>
 8000492:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000496:	0040      	lsls	r0, r0, #1
 8000498:	eb41 0101 	adc.w	r1, r1, r1
 800049c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3c01      	subeq	r4, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1a6>
 80004a6:	ea41 0106 	orr.w	r1, r1, r6
 80004aa:	f095 0f00 	teq	r5, #0
 80004ae:	bf18      	it	ne
 80004b0:	4770      	bxne	lr
 80004b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80004b6:	0052      	lsls	r2, r2, #1
 80004b8:	eb43 0303 	adc.w	r3, r3, r3
 80004bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004c0:	bf08      	it	eq
 80004c2:	3d01      	subeq	r5, #1
 80004c4:	d0f7      	beq.n	80004b6 <__aeabi_dmul+0x1c6>
 80004c6:	ea43 0306 	orr.w	r3, r3, r6
 80004ca:	4770      	bx	lr
 80004cc:	ea94 0f0c 	teq	r4, ip
 80004d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004d4:	bf18      	it	ne
 80004d6:	ea95 0f0c 	teqne	r5, ip
 80004da:	d00c      	beq.n	80004f6 <__aeabi_dmul+0x206>
 80004dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004e0:	bf18      	it	ne
 80004e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e6:	d1d1      	bne.n	800048c <__aeabi_dmul+0x19c>
 80004e8:	ea81 0103 	eor.w	r1, r1, r3
 80004ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	bd70      	pop	{r4, r5, r6, pc}
 80004f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004fa:	bf06      	itte	eq
 80004fc:	4610      	moveq	r0, r2
 80004fe:	4619      	moveq	r1, r3
 8000500:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000504:	d019      	beq.n	800053a <__aeabi_dmul+0x24a>
 8000506:	ea94 0f0c 	teq	r4, ip
 800050a:	d102      	bne.n	8000512 <__aeabi_dmul+0x222>
 800050c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000510:	d113      	bne.n	800053a <__aeabi_dmul+0x24a>
 8000512:	ea95 0f0c 	teq	r5, ip
 8000516:	d105      	bne.n	8000524 <__aeabi_dmul+0x234>
 8000518:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800051c:	bf1c      	itt	ne
 800051e:	4610      	movne	r0, r2
 8000520:	4619      	movne	r1, r3
 8000522:	d10a      	bne.n	800053a <__aeabi_dmul+0x24a>
 8000524:	ea81 0103 	eor.w	r1, r1, r3
 8000528:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800052c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd70      	pop	{r4, r5, r6, pc}
 800053a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800053e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000542:	bd70      	pop	{r4, r5, r6, pc}

08000544 <__aeabi_drsub>:
 8000544:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e002      	b.n	8000550 <__adddf3>
 800054a:	bf00      	nop

0800054c <__aeabi_dsub>:
 800054c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000550 <__adddf3>:
 8000550:	b530      	push	{r4, r5, lr}
 8000552:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000556:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800055a:	ea94 0f05 	teq	r4, r5
 800055e:	bf08      	it	eq
 8000560:	ea90 0f02 	teqeq	r0, r2
 8000564:	bf1f      	itttt	ne
 8000566:	ea54 0c00 	orrsne.w	ip, r4, r0
 800056a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800056e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000572:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000576:	f000 80e2 	beq.w	800073e <__adddf3+0x1ee>
 800057a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800057e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000582:	bfb8      	it	lt
 8000584:	426d      	neglt	r5, r5
 8000586:	dd0c      	ble.n	80005a2 <__adddf3+0x52>
 8000588:	442c      	add	r4, r5
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	ea82 0000 	eor.w	r0, r2, r0
 8000596:	ea83 0101 	eor.w	r1, r3, r1
 800059a:	ea80 0202 	eor.w	r2, r0, r2
 800059e:	ea81 0303 	eor.w	r3, r1, r3
 80005a2:	2d36      	cmp	r5, #54	; 0x36
 80005a4:	bf88      	it	hi
 80005a6:	bd30      	pophi	{r4, r5, pc}
 80005a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005b8:	d002      	beq.n	80005c0 <__adddf3+0x70>
 80005ba:	4240      	negs	r0, r0
 80005bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005cc:	d002      	beq.n	80005d4 <__adddf3+0x84>
 80005ce:	4252      	negs	r2, r2
 80005d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005d4:	ea94 0f05 	teq	r4, r5
 80005d8:	f000 80a7 	beq.w	800072a <__adddf3+0x1da>
 80005dc:	f1a4 0401 	sub.w	r4, r4, #1
 80005e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005e4:	db0d      	blt.n	8000602 <__adddf3+0xb2>
 80005e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ea:	fa22 f205 	lsr.w	r2, r2, r5
 80005ee:	1880      	adds	r0, r0, r2
 80005f0:	f141 0100 	adc.w	r1, r1, #0
 80005f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005f8:	1880      	adds	r0, r0, r2
 80005fa:	fa43 f305 	asr.w	r3, r3, r5
 80005fe:	4159      	adcs	r1, r3
 8000600:	e00e      	b.n	8000620 <__adddf3+0xd0>
 8000602:	f1a5 0520 	sub.w	r5, r5, #32
 8000606:	f10e 0e20 	add.w	lr, lr, #32
 800060a:	2a01      	cmp	r2, #1
 800060c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000610:	bf28      	it	cs
 8000612:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000616:	fa43 f305 	asr.w	r3, r3, r5
 800061a:	18c0      	adds	r0, r0, r3
 800061c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000624:	d507      	bpl.n	8000636 <__adddf3+0xe6>
 8000626:	f04f 0e00 	mov.w	lr, #0
 800062a:	f1dc 0c00 	rsbs	ip, ip, #0
 800062e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000632:	eb6e 0101 	sbc.w	r1, lr, r1
 8000636:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800063a:	d31b      	bcc.n	8000674 <__adddf3+0x124>
 800063c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000640:	d30c      	bcc.n	800065c <__adddf3+0x10c>
 8000642:	0849      	lsrs	r1, r1, #1
 8000644:	ea5f 0030 	movs.w	r0, r0, rrx
 8000648:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800064c:	f104 0401 	add.w	r4, r4, #1
 8000650:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000654:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000658:	f080 809a 	bcs.w	8000790 <__adddf3+0x240>
 800065c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	ea41 0105 	orr.w	r1, r1, r5
 8000672:	bd30      	pop	{r4, r5, pc}
 8000674:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000678:	4140      	adcs	r0, r0
 800067a:	eb41 0101 	adc.w	r1, r1, r1
 800067e:	3c01      	subs	r4, #1
 8000680:	bf28      	it	cs
 8000682:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000686:	d2e9      	bcs.n	800065c <__adddf3+0x10c>
 8000688:	f091 0f00 	teq	r1, #0
 800068c:	bf04      	itt	eq
 800068e:	4601      	moveq	r1, r0
 8000690:	2000      	moveq	r0, #0
 8000692:	fab1 f381 	clz	r3, r1
 8000696:	bf08      	it	eq
 8000698:	3320      	addeq	r3, #32
 800069a:	f1a3 030b 	sub.w	r3, r3, #11
 800069e:	f1b3 0220 	subs.w	r2, r3, #32
 80006a2:	da0c      	bge.n	80006be <__adddf3+0x16e>
 80006a4:	320c      	adds	r2, #12
 80006a6:	dd08      	ble.n	80006ba <__adddf3+0x16a>
 80006a8:	f102 0c14 	add.w	ip, r2, #20
 80006ac:	f1c2 020c 	rsb	r2, r2, #12
 80006b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006b4:	fa21 f102 	lsr.w	r1, r1, r2
 80006b8:	e00c      	b.n	80006d4 <__adddf3+0x184>
 80006ba:	f102 0214 	add.w	r2, r2, #20
 80006be:	bfd8      	it	le
 80006c0:	f1c2 0c20 	rsble	ip, r2, #32
 80006c4:	fa01 f102 	lsl.w	r1, r1, r2
 80006c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006cc:	bfdc      	itt	le
 80006ce:	ea41 010c 	orrle.w	r1, r1, ip
 80006d2:	4090      	lslle	r0, r2
 80006d4:	1ae4      	subs	r4, r4, r3
 80006d6:	bfa2      	ittt	ge
 80006d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006dc:	4329      	orrge	r1, r5
 80006de:	bd30      	popge	{r4, r5, pc}
 80006e0:	ea6f 0404 	mvn.w	r4, r4
 80006e4:	3c1f      	subs	r4, #31
 80006e6:	da1c      	bge.n	8000722 <__adddf3+0x1d2>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc0e      	bgt.n	800070a <__adddf3+0x1ba>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0220 	rsb	r2, r4, #32
 80006f4:	fa20 f004 	lsr.w	r0, r0, r4
 80006f8:	fa01 f302 	lsl.w	r3, r1, r2
 80006fc:	ea40 0003 	orr.w	r0, r0, r3
 8000700:	fa21 f304 	lsr.w	r3, r1, r4
 8000704:	ea45 0103 	orr.w	r1, r5, r3
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f1c4 040c 	rsb	r4, r4, #12
 800070e:	f1c4 0220 	rsb	r2, r4, #32
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 f304 	lsl.w	r3, r1, r4
 800071a:	ea40 0003 	orr.w	r0, r0, r3
 800071e:	4629      	mov	r1, r5
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	fa21 f004 	lsr.w	r0, r1, r4
 8000726:	4629      	mov	r1, r5
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	f094 0f00 	teq	r4, #0
 800072e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000732:	bf06      	itte	eq
 8000734:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000738:	3401      	addeq	r4, #1
 800073a:	3d01      	subne	r5, #1
 800073c:	e74e      	b.n	80005dc <__adddf3+0x8c>
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf18      	it	ne
 8000744:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000748:	d029      	beq.n	800079e <__adddf3+0x24e>
 800074a:	ea94 0f05 	teq	r4, r5
 800074e:	bf08      	it	eq
 8000750:	ea90 0f02 	teqeq	r0, r2
 8000754:	d005      	beq.n	8000762 <__adddf3+0x212>
 8000756:	ea54 0c00 	orrs.w	ip, r4, r0
 800075a:	bf04      	itt	eq
 800075c:	4619      	moveq	r1, r3
 800075e:	4610      	moveq	r0, r2
 8000760:	bd30      	pop	{r4, r5, pc}
 8000762:	ea91 0f03 	teq	r1, r3
 8000766:	bf1e      	ittt	ne
 8000768:	2100      	movne	r1, #0
 800076a:	2000      	movne	r0, #0
 800076c:	bd30      	popne	{r4, r5, pc}
 800076e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000772:	d105      	bne.n	8000780 <__adddf3+0x230>
 8000774:	0040      	lsls	r0, r0, #1
 8000776:	4149      	adcs	r1, r1
 8000778:	bf28      	it	cs
 800077a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800077e:	bd30      	pop	{r4, r5, pc}
 8000780:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000784:	bf3c      	itt	cc
 8000786:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800078a:	bd30      	popcc	{r4, r5, pc}
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000790:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007a2:	bf1a      	itte	ne
 80007a4:	4619      	movne	r1, r3
 80007a6:	4610      	movne	r0, r2
 80007a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007ac:	bf1c      	itt	ne
 80007ae:	460b      	movne	r3, r1
 80007b0:	4602      	movne	r2, r0
 80007b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007b6:	bf06      	itte	eq
 80007b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007bc:	ea91 0f03 	teqeq	r1, r3
 80007c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007c4:	bd30      	pop	{r4, r5, pc}
 80007c6:	bf00      	nop

080007c8 <__aeabi_ui2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007dc:	f04f 0500 	mov.w	r5, #0
 80007e0:	f04f 0100 	mov.w	r1, #0
 80007e4:	e750      	b.n	8000688 <__adddf3+0x138>
 80007e6:	bf00      	nop

080007e8 <__aeabi_i2d>:
 80007e8:	f090 0f00 	teq	r0, #0
 80007ec:	bf04      	itt	eq
 80007ee:	2100      	moveq	r1, #0
 80007f0:	4770      	bxeq	lr
 80007f2:	b530      	push	{r4, r5, lr}
 80007f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000800:	bf48      	it	mi
 8000802:	4240      	negmi	r0, r0
 8000804:	f04f 0100 	mov.w	r1, #0
 8000808:	e73e      	b.n	8000688 <__adddf3+0x138>
 800080a:	bf00      	nop

0800080c <__aeabi_f2d>:
 800080c:	0042      	lsls	r2, r0, #1
 800080e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000812:	ea4f 0131 	mov.w	r1, r1, rrx
 8000816:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800081a:	bf1f      	itttt	ne
 800081c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000820:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000824:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000828:	4770      	bxne	lr
 800082a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800082e:	bf08      	it	eq
 8000830:	4770      	bxeq	lr
 8000832:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000836:	bf04      	itt	eq
 8000838:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800083c:	4770      	bxeq	lr
 800083e:	b530      	push	{r4, r5, lr}
 8000840:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000844:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000848:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800084c:	e71c      	b.n	8000688 <__adddf3+0x138>
 800084e:	bf00      	nop

08000850 <__aeabi_ul2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f04f 0500 	mov.w	r5, #0
 800085e:	e00a      	b.n	8000876 <__aeabi_l2d+0x16>

08000860 <__aeabi_l2d>:
 8000860:	ea50 0201 	orrs.w	r2, r0, r1
 8000864:	bf08      	it	eq
 8000866:	4770      	bxeq	lr
 8000868:	b530      	push	{r4, r5, lr}
 800086a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800086e:	d502      	bpl.n	8000876 <__aeabi_l2d+0x16>
 8000870:	4240      	negs	r0, r0
 8000872:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000876:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800087a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800087e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000882:	f43f aed8 	beq.w	8000636 <__adddf3+0xe6>
 8000886:	f04f 0203 	mov.w	r2, #3
 800088a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800088e:	bf18      	it	ne
 8000890:	3203      	addne	r2, #3
 8000892:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000896:	bf18      	it	ne
 8000898:	3203      	addne	r2, #3
 800089a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800089e:	f1c2 0320 	rsb	r3, r2, #32
 80008a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80008a6:	fa20 f002 	lsr.w	r0, r0, r2
 80008aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80008ae:	ea40 000e 	orr.w	r0, r0, lr
 80008b2:	fa21 f102 	lsr.w	r1, r1, r2
 80008b6:	4414      	add	r4, r2
 80008b8:	e6bd      	b.n	8000636 <__adddf3+0xe6>
 80008ba:	bf00      	nop

080008bc <__aeabi_d2iz>:
 80008bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008c4:	d215      	bcs.n	80008f2 <__aeabi_d2iz+0x36>
 80008c6:	d511      	bpl.n	80008ec <__aeabi_d2iz+0x30>
 80008c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008d0:	d912      	bls.n	80008f8 <__aeabi_d2iz+0x3c>
 80008d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008e2:	fa23 f002 	lsr.w	r0, r3, r2
 80008e6:	bf18      	it	ne
 80008e8:	4240      	negne	r0, r0
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008f6:	d105      	bne.n	8000904 <__aeabi_d2iz+0x48>
 80008f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008fc:	bf08      	it	eq
 80008fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000902:	4770      	bx	lr
 8000904:	f04f 0000 	mov.w	r0, #0
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295
 800091c:	f04f 30ff 	movne.w	r0, #4294967295
 8000920:	f000 b970 	b.w	8000c04 <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9e08      	ldr	r6, [sp, #32]
 8000942:	460d      	mov	r5, r1
 8000944:	4604      	mov	r4, r0
 8000946:	460f      	mov	r7, r1
 8000948:	2b00      	cmp	r3, #0
 800094a:	d14a      	bne.n	80009e2 <__udivmoddi4+0xa6>
 800094c:	428a      	cmp	r2, r1
 800094e:	4694      	mov	ip, r2
 8000950:	d965      	bls.n	8000a1e <__udivmoddi4+0xe2>
 8000952:	fab2 f382 	clz	r3, r2
 8000956:	b143      	cbz	r3, 800096a <__udivmoddi4+0x2e>
 8000958:	fa02 fc03 	lsl.w	ip, r2, r3
 800095c:	f1c3 0220 	rsb	r2, r3, #32
 8000960:	409f      	lsls	r7, r3
 8000962:	fa20 f202 	lsr.w	r2, r0, r2
 8000966:	4317      	orrs	r7, r2
 8000968:	409c      	lsls	r4, r3
 800096a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800096e:	fa1f f58c 	uxth.w	r5, ip
 8000972:	fbb7 f1fe 	udiv	r1, r7, lr
 8000976:	0c22      	lsrs	r2, r4, #16
 8000978:	fb0e 7711 	mls	r7, lr, r1, r7
 800097c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000980:	fb01 f005 	mul.w	r0, r1, r5
 8000984:	4290      	cmp	r0, r2
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x62>
 8000988:	eb1c 0202 	adds.w	r2, ip, r2
 800098c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000990:	f080 811c 	bcs.w	8000bcc <__udivmoddi4+0x290>
 8000994:	4290      	cmp	r0, r2
 8000996:	f240 8119 	bls.w	8000bcc <__udivmoddi4+0x290>
 800099a:	3902      	subs	r1, #2
 800099c:	4462      	add	r2, ip
 800099e:	1a12      	subs	r2, r2, r0
 80009a0:	b2a4      	uxth	r4, r4
 80009a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009ae:	fb00 f505 	mul.w	r5, r0, r5
 80009b2:	42a5      	cmp	r5, r4
 80009b4:	d90a      	bls.n	80009cc <__udivmoddi4+0x90>
 80009b6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80009be:	f080 8107 	bcs.w	8000bd0 <__udivmoddi4+0x294>
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	f240 8104 	bls.w	8000bd0 <__udivmoddi4+0x294>
 80009c8:	4464      	add	r4, ip
 80009ca:	3802      	subs	r0, #2
 80009cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009d0:	1b64      	subs	r4, r4, r5
 80009d2:	2100      	movs	r1, #0
 80009d4:	b11e      	cbz	r6, 80009de <__udivmoddi4+0xa2>
 80009d6:	40dc      	lsrs	r4, r3
 80009d8:	2300      	movs	r3, #0
 80009da:	e9c6 4300 	strd	r4, r3, [r6]
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0xbc>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	f000 80ed 	beq.w	8000bc6 <__udivmoddi4+0x28a>
 80009ec:	2100      	movs	r1, #0
 80009ee:	e9c6 0500 	strd	r0, r5, [r6]
 80009f2:	4608      	mov	r0, r1
 80009f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f8:	fab3 f183 	clz	r1, r3
 80009fc:	2900      	cmp	r1, #0
 80009fe:	d149      	bne.n	8000a94 <__udivmoddi4+0x158>
 8000a00:	42ab      	cmp	r3, r5
 8000a02:	d302      	bcc.n	8000a0a <__udivmoddi4+0xce>
 8000a04:	4282      	cmp	r2, r0
 8000a06:	f200 80f8 	bhi.w	8000bfa <__udivmoddi4+0x2be>
 8000a0a:	1a84      	subs	r4, r0, r2
 8000a0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a10:	2001      	movs	r0, #1
 8000a12:	4617      	mov	r7, r2
 8000a14:	2e00      	cmp	r6, #0
 8000a16:	d0e2      	beq.n	80009de <__udivmoddi4+0xa2>
 8000a18:	e9c6 4700 	strd	r4, r7, [r6]
 8000a1c:	e7df      	b.n	80009de <__udivmoddi4+0xa2>
 8000a1e:	b902      	cbnz	r2, 8000a22 <__udivmoddi4+0xe6>
 8000a20:	deff      	udf	#255	; 0xff
 8000a22:	fab2 f382 	clz	r3, r2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f040 8090 	bne.w	8000b4c <__udivmoddi4+0x210>
 8000a2c:	1a8a      	subs	r2, r1, r2
 8000a2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a32:	fa1f fe8c 	uxth.w	lr, ip
 8000a36:	2101      	movs	r1, #1
 8000a38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a40:	0c22      	lsrs	r2, r4, #16
 8000a42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a46:	fb0e f005 	mul.w	r0, lr, r5
 8000a4a:	4290      	cmp	r0, r2
 8000a4c:	d908      	bls.n	8000a60 <__udivmoddi4+0x124>
 8000a4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a56:	d202      	bcs.n	8000a5e <__udivmoddi4+0x122>
 8000a58:	4290      	cmp	r0, r2
 8000a5a:	f200 80cb 	bhi.w	8000bf4 <__udivmoddi4+0x2b8>
 8000a5e:	4645      	mov	r5, r8
 8000a60:	1a12      	subs	r2, r2, r0
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a68:	fb07 2210 	mls	r2, r7, r0, r2
 8000a6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a70:	fb0e fe00 	mul.w	lr, lr, r0
 8000a74:	45a6      	cmp	lr, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x14e>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a80:	d202      	bcs.n	8000a88 <__udivmoddi4+0x14c>
 8000a82:	45a6      	cmp	lr, r4
 8000a84:	f200 80bb 	bhi.w	8000bfe <__udivmoddi4+0x2c2>
 8000a88:	4610      	mov	r0, r2
 8000a8a:	eba4 040e 	sub.w	r4, r4, lr
 8000a8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a92:	e79f      	b.n	80009d4 <__udivmoddi4+0x98>
 8000a94:	f1c1 0720 	rsb	r7, r1, #32
 8000a98:	408b      	lsls	r3, r1
 8000a9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aa2:	fa05 f401 	lsl.w	r4, r5, r1
 8000aa6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aaa:	40fd      	lsrs	r5, r7
 8000aac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ab6:	fa1f fe8c 	uxth.w	lr, ip
 8000aba:	fb09 5518 	mls	r5, r9, r8, r5
 8000abe:	0c1c      	lsrs	r4, r3, #16
 8000ac0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ac4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ac8:	42a5      	cmp	r5, r4
 8000aca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ace:	fa00 f001 	lsl.w	r0, r0, r1
 8000ad2:	d90b      	bls.n	8000aec <__udivmoddi4+0x1b0>
 8000ad4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000adc:	f080 8088 	bcs.w	8000bf0 <__udivmoddi4+0x2b4>
 8000ae0:	42a5      	cmp	r5, r4
 8000ae2:	f240 8085 	bls.w	8000bf0 <__udivmoddi4+0x2b4>
 8000ae6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aea:	4464      	add	r4, ip
 8000aec:	1b64      	subs	r4, r4, r5
 8000aee:	b29d      	uxth	r5, r3
 8000af0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000af4:	fb09 4413 	mls	r4, r9, r3, r4
 8000af8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000afc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d908      	bls.n	8000b16 <__udivmoddi4+0x1da>
 8000b04:	eb1c 0404 	adds.w	r4, ip, r4
 8000b08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b0c:	d26c      	bcs.n	8000be8 <__udivmoddi4+0x2ac>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	d96a      	bls.n	8000be8 <__udivmoddi4+0x2ac>
 8000b12:	3b02      	subs	r3, #2
 8000b14:	4464      	add	r4, ip
 8000b16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b1e:	eba4 040e 	sub.w	r4, r4, lr
 8000b22:	42ac      	cmp	r4, r5
 8000b24:	46c8      	mov	r8, r9
 8000b26:	46ae      	mov	lr, r5
 8000b28:	d356      	bcc.n	8000bd8 <__udivmoddi4+0x29c>
 8000b2a:	d053      	beq.n	8000bd4 <__udivmoddi4+0x298>
 8000b2c:	b156      	cbz	r6, 8000b44 <__udivmoddi4+0x208>
 8000b2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b32:	eb64 040e 	sbc.w	r4, r4, lr
 8000b36:	fa04 f707 	lsl.w	r7, r4, r7
 8000b3a:	40ca      	lsrs	r2, r1
 8000b3c:	40cc      	lsrs	r4, r1
 8000b3e:	4317      	orrs	r7, r2
 8000b40:	e9c6 7400 	strd	r7, r4, [r6]
 8000b44:	4618      	mov	r0, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4c:	f1c3 0120 	rsb	r1, r3, #32
 8000b50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b54:	fa20 f201 	lsr.w	r2, r0, r1
 8000b58:	fa25 f101 	lsr.w	r1, r5, r1
 8000b5c:	409d      	lsls	r5, r3
 8000b5e:	432a      	orrs	r2, r5
 8000b60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b64:	fa1f fe8c 	uxth.w	lr, ip
 8000b68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b70:	0c11      	lsrs	r1, r2, #16
 8000b72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b76:	fb00 f50e 	mul.w	r5, r0, lr
 8000b7a:	428d      	cmp	r5, r1
 8000b7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x258>
 8000b82:	eb1c 0101 	adds.w	r1, ip, r1
 8000b86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b8a:	d22f      	bcs.n	8000bec <__udivmoddi4+0x2b0>
 8000b8c:	428d      	cmp	r5, r1
 8000b8e:	d92d      	bls.n	8000bec <__udivmoddi4+0x2b0>
 8000b90:	3802      	subs	r0, #2
 8000b92:	4461      	add	r1, ip
 8000b94:	1b49      	subs	r1, r1, r5
 8000b96:	b292      	uxth	r2, r2
 8000b98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ba0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ba4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ba8:	4291      	cmp	r1, r2
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x282>
 8000bac:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb4:	d216      	bcs.n	8000be4 <__udivmoddi4+0x2a8>
 8000bb6:	4291      	cmp	r1, r2
 8000bb8:	d914      	bls.n	8000be4 <__udivmoddi4+0x2a8>
 8000bba:	3d02      	subs	r5, #2
 8000bbc:	4462      	add	r2, ip
 8000bbe:	1a52      	subs	r2, r2, r1
 8000bc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bc4:	e738      	b.n	8000a38 <__udivmoddi4+0xfc>
 8000bc6:	4631      	mov	r1, r6
 8000bc8:	4630      	mov	r0, r6
 8000bca:	e708      	b.n	80009de <__udivmoddi4+0xa2>
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e6e6      	b.n	800099e <__udivmoddi4+0x62>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	e6fb      	b.n	80009cc <__udivmoddi4+0x90>
 8000bd4:	4548      	cmp	r0, r9
 8000bd6:	d2a9      	bcs.n	8000b2c <__udivmoddi4+0x1f0>
 8000bd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000be0:	3b01      	subs	r3, #1
 8000be2:	e7a3      	b.n	8000b2c <__udivmoddi4+0x1f0>
 8000be4:	4645      	mov	r5, r8
 8000be6:	e7ea      	b.n	8000bbe <__udivmoddi4+0x282>
 8000be8:	462b      	mov	r3, r5
 8000bea:	e794      	b.n	8000b16 <__udivmoddi4+0x1da>
 8000bec:	4640      	mov	r0, r8
 8000bee:	e7d1      	b.n	8000b94 <__udivmoddi4+0x258>
 8000bf0:	46d0      	mov	r8, sl
 8000bf2:	e77b      	b.n	8000aec <__udivmoddi4+0x1b0>
 8000bf4:	3d02      	subs	r5, #2
 8000bf6:	4462      	add	r2, ip
 8000bf8:	e732      	b.n	8000a60 <__udivmoddi4+0x124>
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	e70a      	b.n	8000a14 <__udivmoddi4+0xd8>
 8000bfe:	4464      	add	r4, ip
 8000c00:	3802      	subs	r0, #2
 8000c02:	e742      	b.n	8000a8a <__udivmoddi4+0x14e>

08000c04 <__aeabi_idiv0>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f009 f9a6 	bl	8009f72 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c26:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c2e:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000c42:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4e:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c50:	2204      	movs	r2, #4
 8000c52:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c54:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c5a:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000c60:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c66:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c70:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c7c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c86:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c94:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000c96:	f001 fe19 	bl	80028cc <HAL_ADC_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000ca0:	f000 fc94 	bl	80015cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000cb0:	f003 f8a4 	bl	8003dfc <HAL_ADCEx_MultiModeConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000cba:	f000 fc87 	bl	80015cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_ADC1_Init+0xf0>)
 8000cc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc2:	2306      	movs	r3, #6
 8000cc4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cca:	237f      	movs	r3, #127	; 0x7f
 8000ccc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000cdc:	f002 fb00 	bl	80032e0 <HAL_ADC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ce6:	f000 fc71 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3730      	adds	r7, #48	; 0x30
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000288 	.word	0x20000288
 8000cf8:	08600004 	.word	0x08600004

08000cfc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d02:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <MX_ADC2_Init+0x78>)
 8000d04:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d0c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d28:	2204      	movs	r2, #4
 8000d2a:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_ADC2_Init+0x74>)
 8000d5e:	f001 fdb5 	bl	80028cc <HAL_ADC_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000d68:	f000 fc30 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200002f4 	.word	0x200002f4
 8000d74:	50000100 	.word	0x50000100

08000d78 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0a4      	sub	sp, #144	; 0x90
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d94:	2254      	movs	r2, #84	; 0x54
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f009 f8ea 	bl	8009f72 <memset>
  if(adcHandle->Instance==ADC1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000da6:	f040 80a8 	bne.w	8000efa <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000db0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000db4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f004 fd10 	bl	80057e0 <HAL_RCCEx_PeriphCLKConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000dc6:	f000 fc01 	bl	80015cc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000dca:	4b97      	ldr	r3, [pc, #604]	; (8001028 <HAL_ADC_MspInit+0x2b0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a95      	ldr	r2, [pc, #596]	; (8001028 <HAL_ADC_MspInit+0x2b0>)
 8000dd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dd4:	4b94      	ldr	r3, [pc, #592]	; (8001028 <HAL_ADC_MspInit+0x2b0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d10b      	bne.n	8000df4 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ddc:	4b93      	ldr	r3, [pc, #588]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de0:	4a92      	ldr	r2, [pc, #584]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000de2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000de6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de8:	4b90      	ldr	r3, [pc, #576]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	4b8d      	ldr	r3, [pc, #564]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df8:	4a8c      	ldr	r2, [pc, #560]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e00:	4b8a      	ldr	r3, [pc, #552]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	623b      	str	r3, [r7, #32]
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b87      	ldr	r3, [pc, #540]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	4a86      	ldr	r2, [pc, #536]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e18:	4b84      	ldr	r3, [pc, #528]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b81      	ldr	r3, [pc, #516]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e28:	4a80      	ldr	r2, [pc, #512]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e30:	4b7e      	ldr	r3, [pc, #504]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e50:	4619      	mov	r1, r3
 8000e52:	4877      	ldr	r0, [pc, #476]	; (8001030 <HAL_ADC_MspInit+0x2b8>)
 8000e54:	f003 fcec 	bl	8004830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f003 fcdd 	bl	8004830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e76:	2303      	movs	r3, #3
 8000e78:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4869      	ldr	r0, [pc, #420]	; (8001034 <HAL_ADC_MspInit+0x2bc>)
 8000e8e:	f003 fccf 	bl	8004830 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e92:	4b69      	ldr	r3, [pc, #420]	; (8001038 <HAL_ADC_MspInit+0x2c0>)
 8000e94:	4a69      	ldr	r2, [pc, #420]	; (800103c <HAL_ADC_MspInit+0x2c4>)
 8000e96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e98:	4b67      	ldr	r3, [pc, #412]	; (8001038 <HAL_ADC_MspInit+0x2c0>)
 8000e9a:	2205      	movs	r2, #5
 8000e9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e9e:	4b66      	ldr	r3, [pc, #408]	; (8001038 <HAL_ADC_MspInit+0x2c0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea4:	4b64      	ldr	r3, [pc, #400]	; (8001038 <HAL_ADC_MspInit+0x2c0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eaa:	4b63      	ldr	r3, [pc, #396]	; (8001038 <HAL_ADC_MspInit+0x2c0>)
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eb0:	4b61      	ldr	r3, [pc, #388]	; (8001038 <HAL_ADC_MspInit+0x2c0>)
 8000eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb8:	4b5f      	ldr	r3, [pc, #380]	; (8001038 <HAL_ADC_MspInit+0x2c0>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ebe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ec0:	4b5d      	ldr	r3, [pc, #372]	; (8001038 <HAL_ADC_MspInit+0x2c0>)
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ec6:	4b5c      	ldr	r3, [pc, #368]	; (8001038 <HAL_ADC_MspInit+0x2c0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ecc:	485a      	ldr	r0, [pc, #360]	; (8001038 <HAL_ADC_MspInit+0x2c0>)
 8000ece:	f003 f97d 	bl	80041cc <HAL_DMA_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8000ed8:	f000 fb78 	bl	80015cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a56      	ldr	r2, [pc, #344]	; (8001038 <HAL_ADC_MspInit+0x2c0>)
 8000ee0:	655a      	str	r2, [r3, #84]	; 0x54
 8000ee2:	4a55      	ldr	r2, [pc, #340]	; (8001038 <HAL_ADC_MspInit+0x2c0>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	2012      	movs	r0, #18
 8000eee:	f003 f945 	bl	800417c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ef2:	2012      	movs	r0, #18
 8000ef4:	f003 f95c 	bl	80041b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000ef8:	e092      	b.n	8001020 <HAL_ADC_MspInit+0x2a8>
  else if(adcHandle->Instance==ADC2)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a50      	ldr	r2, [pc, #320]	; (8001040 <HAL_ADC_MspInit+0x2c8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	f040 808d 	bne.w	8001020 <HAL_ADC_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f0c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f10:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 fc62 	bl	80057e0 <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 8000f22:	f000 fb53 	bl	80015cc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f26:	4b40      	ldr	r3, [pc, #256]	; (8001028 <HAL_ADC_MspInit+0x2b0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	4a3e      	ldr	r2, [pc, #248]	; (8001028 <HAL_ADC_MspInit+0x2b0>)
 8000f2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f30:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <HAL_ADC_MspInit+0x2b0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d10b      	bne.n	8000f50 <HAL_ADC_MspInit+0x1d8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f38:	4b3c      	ldr	r3, [pc, #240]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3c:	4a3b      	ldr	r2, [pc, #236]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000f3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f44:	4b39      	ldr	r3, [pc, #228]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f50:	4b36      	ldr	r3, [pc, #216]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	4a35      	ldr	r2, [pc, #212]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5c:	4b33      	ldr	r3, [pc, #204]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b30      	ldr	r3, [pc, #192]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6c:	4a2f      	ldr	r2, [pc, #188]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <HAL_ADC_MspInit+0x2b4>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000f80:	230b      	movs	r3, #11
 8000f82:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f84:	2303      	movs	r3, #3
 8000f86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f90:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f94:	4619      	mov	r1, r3
 8000f96:	4826      	ldr	r0, [pc, #152]	; (8001030 <HAL_ADC_MspInit+0x2b8>)
 8000f98:	f003 fc4a 	bl	8004830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb6:	f003 fc3b 	bl	8004830 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000fba:	4b22      	ldr	r3, [pc, #136]	; (8001044 <HAL_ADC_MspInit+0x2cc>)
 8000fbc:	4a22      	ldr	r2, [pc, #136]	; (8001048 <HAL_ADC_MspInit+0x2d0>)
 8000fbe:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000fc0:	4b20      	ldr	r3, [pc, #128]	; (8001044 <HAL_ADC_MspInit+0x2cc>)
 8000fc2:	2224      	movs	r2, #36	; 0x24
 8000fc4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <HAL_ADC_MspInit+0x2cc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_ADC_MspInit+0x2cc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <HAL_ADC_MspInit+0x2cc>)
 8000fd4:	2280      	movs	r2, #128	; 0x80
 8000fd6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <HAL_ADC_MspInit+0x2cc>)
 8000fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fde:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_ADC_MspInit+0x2cc>)
 8000fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_ADC_MspInit+0x2cc>)
 8000fea:	2220      	movs	r2, #32
 8000fec:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_ADC_MspInit+0x2cc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <HAL_ADC_MspInit+0x2cc>)
 8000ff6:	f003 f8e9 	bl	80041cc <HAL_DMA_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_ADC_MspInit+0x28c>
      Error_Handler();
 8001000:	f000 fae4 	bl	80015cc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <HAL_ADC_MspInit+0x2cc>)
 8001008:	655a      	str	r2, [r3, #84]	; 0x54
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_ADC_MspInit+0x2cc>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	2012      	movs	r0, #18
 8001016:	f003 f8b1 	bl	800417c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800101a:	2012      	movs	r0, #18
 800101c:	f003 f8c8 	bl	80041b0 <HAL_NVIC_EnableIRQ>
}
 8001020:	bf00      	nop
 8001022:	3790      	adds	r7, #144	; 0x90
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000420 	.word	0x20000420
 800102c:	40021000 	.word	0x40021000
 8001030:	48000800 	.word	0x48000800
 8001034:	48000400 	.word	0x48000400
 8001038:	20000360 	.word	0x20000360
 800103c:	40020008 	.word	0x40020008
 8001040:	50000100 	.word	0x50000100
 8001044:	200003c0 	.word	0x200003c0
 8001048:	4002001c 	.word	0x4002001c

0800104c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_DMA_Init+0x60>)
 8001054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001056:	4a15      	ldr	r2, [pc, #84]	; (80010ac <MX_DMA_Init+0x60>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	6493      	str	r3, [r2, #72]	; 0x48
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_DMA_Init+0x60>)
 8001060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_DMA_Init+0x60>)
 800106c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <MX_DMA_Init+0x60>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6493      	str	r3, [r2, #72]	; 0x48
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <MX_DMA_Init+0x60>)
 8001078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	200b      	movs	r0, #11
 8001088:	f003 f878 	bl	800417c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800108c:	200b      	movs	r0, #11
 800108e:	f003 f88f 	bl	80041b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	200c      	movs	r0, #12
 8001098:	f003 f870 	bl	800417c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800109c:	200c      	movs	r0, #12
 800109e:	f003 f887 	bl	80041b0 <HAL_NVIC_EnableIRQ>

}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000

080010b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <MX_GPIO_Init+0x114>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a3e      	ldr	r2, [pc, #248]	; (80011c4 <MX_GPIO_Init+0x114>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <MX_GPIO_Init+0x114>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010de:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <MX_GPIO_Init+0x114>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a38      	ldr	r2, [pc, #224]	; (80011c4 <MX_GPIO_Init+0x114>)
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <MX_GPIO_Init+0x114>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0320 	and.w	r3, r3, #32
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <MX_GPIO_Init+0x114>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <MX_GPIO_Init+0x114>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <MX_GPIO_Init+0x114>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <MX_GPIO_Init+0x114>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <MX_GPIO_Init+0x114>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <MX_GPIO_Init+0x114>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <MX_GPIO_Init+0x114>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <MX_GPIO_Init+0x114>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <MX_GPIO_Init+0x114>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2120      	movs	r1, #32
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f003 fcf5 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2104      	movs	r1, #4
 800114e:	481e      	ldr	r0, [pc, #120]	; (80011c8 <MX_GPIO_Init+0x118>)
 8001150:	f003 fcf0 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4818      	ldr	r0, [pc, #96]	; (80011cc <MX_GPIO_Init+0x11c>)
 800116c:	f003 fb60 	bl	8004830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001170:	2320      	movs	r3, #32
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f003 fb51 	bl	8004830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800118e:	2304      	movs	r3, #4
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4808      	ldr	r0, [pc, #32]	; (80011c8 <MX_GPIO_Init+0x118>)
 80011a6:	f003 fb43 	bl	8004830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2028      	movs	r0, #40	; 0x28
 80011b0:	f002 ffe4 	bl	800417c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011b4:	2028      	movs	r0, #40	; 0x28
 80011b6:	f002 fffb 	bl	80041b0 <HAL_NVIC_EnableIRQ>

}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000c00 	.word	0x48000c00
 80011cc:	48000800 	.word	0x48000800

080011d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80011d6:	f001 f8fe 	bl	80023d6 <HAL_Init>

    /* USER CODE BEGIN Init */
    uint32_t lastTick = HAL_GetTick(); // Initialize current tick time
 80011da:	f001 f927 	bl	800242c <HAL_GetTick>
 80011de:	6078      	str	r0, [r7, #4]

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80011e0:	f000 f830 	bl	8001244 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80011e4:	f7ff ff64 	bl	80010b0 <MX_GPIO_Init>
    MX_DMA_Init();
 80011e8:	f7ff ff30 	bl	800104c <MX_DMA_Init>
    MX_ADC2_Init();
 80011ec:	f7ff fd86 	bl	8000cfc <MX_ADC2_Init>
    MX_ADC1_Init();
 80011f0:	f7ff fd0a 	bl	8000c08 <MX_ADC1_Init>
    MX_TIM1_Init();
 80011f4:	f000 fbcc 	bl	8001990 <MX_TIM1_Init>
    MX_TIM3_Init();
 80011f8:	f000 fc9a 	bl	8001b30 <MX_TIM3_Init>
    MX_USART2_UART_Init();
 80011fc:	f000 fdce 	bl	8001d9c <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 8001200:	f000 fe18 	bl	8001e34 <MX_USART3_UART_Init>
    /* USER CODE BEGIN 2 */
    Shell_Init();
 8001204:	f000 ff0a 	bl	800201c <Shell_Init>

    // Start the ADC conversion in DMA mode
    HAL_ADC_Start_DMA(&hadc1, adc_buffer, 1);
 8001208:	2201      	movs	r2, #1
 800120a:	490b      	ldr	r1, [pc, #44]	; (8001238 <main+0x68>)
 800120c:	480b      	ldr	r0, [pc, #44]	; (800123c <main+0x6c>)
 800120e:	f001 fd1f 	bl	8002c50 <HAL_ADC_Start_DMA>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        // Use STM32 tick time to enter the function every N ms
        if ((HAL_GetTick() - lastTick) >= MOTOR_SPEED_UPDATE_RATE)
 8001212:	f001 f90b 	bl	800242c <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b31      	cmp	r3, #49	; 0x31
 800121e:	d907      	bls.n	8001230 <main+0x60>
        {
            motor_speed_control_loop();
 8001220:	f000 f88e 	bl	8001340 <motor_speed_control_loop>
            lastTick = HAL_GetTick();
 8001224:	f001 f902 	bl	800242c <HAL_GetTick>
 8001228:	6078      	str	r0, [r7, #4]
            measure_loop(&motor);
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <main+0x70>)
 800122c:	f000 f854 	bl	80012d8 <measure_loop>
        }
        Shell_Loop();
 8001230:	f000 ff34 	bl	800209c <Shell_Loop>
        if ((HAL_GetTick() - lastTick) >= MOTOR_SPEED_UPDATE_RATE)
 8001234:	e7ed      	b.n	8001212 <main+0x42>
 8001236:	bf00      	nop
 8001238:	2000042c 	.word	0x2000042c
 800123c:	20000288 	.word	0x20000288
 8001240:	20000434 	.word	0x20000434

08001244 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	; 0x50
 8001248:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	2238      	movs	r2, #56	; 0x38
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f008 fe8d 	bl	8009f72 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001266:	2000      	movs	r0, #0
 8001268:	f003 fca0 	bl	8004bac <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001274:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001276:	2302      	movs	r3, #2
 8001278:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127a:	2303      	movs	r3, #3
 800127c:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800127e:	2306      	movs	r3, #6
 8001280:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 85;
 8001282:	2355      	movs	r3, #85	; 0x55
 8001284:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001286:	2302      	movs	r3, #2
 8001288:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800128a:	2302      	movs	r3, #2
 800128c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800128e:	2302      	movs	r3, #2
 8001290:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4618      	mov	r0, r3
 8001298:	f003 fd3c 	bl	8004d14 <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x62>
    {
        Error_Handler();
 80012a2:	f000 f993 	bl	80015cc <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	607b      	str	r3, [r7, #4]
        | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	2303      	movs	r3, #3
 80012ac:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2104      	movs	r1, #4
 80012be:	4618      	mov	r0, r3
 80012c0:	f004 f840 	bl	8005344 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x8a>
    {
        Error_Handler();
 80012ca:	f000 f97f 	bl	80015cc <Error_Handler>
    }
}
 80012ce:	bf00      	nop
 80012d0:	3750      	adds	r7, #80	; 0x50
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <measure_loop>:

/* USER CODE BEGIN 4 */
void measure_loop(motor_params_t *motor)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
    /**
     * 1. Measure motor current
     */
    if (adc_conv_complete)
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <measure_loop+0x58>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d01d      	beq.n	8001324 <measure_loop+0x4c>
    {
        // Gain courant global 1/20
        // Offset de tension 0.487
        // Convert ADC value to current in mA
        float adc_volt = (float)adc_buffer[0] / 4096;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <measure_loop+0x5c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f4:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001338 <measure_loop+0x60>
 80012f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fc:	edc7 7a03 	vstr	s15, [r7, #12]
        float offset = 0.487;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <measure_loop+0x64>)
 8001302:	60bb      	str	r3, [r7, #8]

        motor->current = (adc_volt - offset) * 20;
 8001304:	ed97 7a03 	vldr	s14, [r7, #12]
 8001308:	edd7 7a02 	vldr	s15, [r7, #8]
 800130c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001310:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	edc3 7a00 	vstr	s15, [r3]
        adc_conv_complete = 0;
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <measure_loop+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
    }
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	20000430 	.word	0x20000430
 8001334:	2000042c 	.word	0x2000042c
 8001338:	45800000 	.word	0x45800000
 800133c:	3ef95810 	.word	0x3ef95810

08001340 <motor_speed_control_loop>:

void motor_speed_control_loop()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
    if (motor_current_speed != motor_set_speed)
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <motor_speed_control_loop+0x40>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <motor_speed_control_loop+0x44>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d015      	beq.n	800137c <motor_speed_control_loop+0x3c>
    {
        if (motor_current_speed < motor_set_speed)
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <motor_speed_control_loop+0x40>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <motor_speed_control_loop+0x44>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	da05      	bge.n	8001368 <motor_speed_control_loop+0x28>
        {
            motor_current_speed++;
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <motor_speed_control_loop+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a07      	ldr	r2, [pc, #28]	; (8001380 <motor_speed_control_loop+0x40>)
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e004      	b.n	8001372 <motor_speed_control_loop+0x32>
        }
        else
        {
            motor_current_speed--;
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <motor_speed_control_loop+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <motor_speed_control_loop+0x40>)
 8001370:	6013      	str	r3, [r2, #0]
        }
        set_PWM(motor_current_speed);
 8001372:	4b03      	ldr	r3, [pc, #12]	; (8001380 <motor_speed_control_loop+0x40>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f878 	bl	800146c <set_PWM>
    }
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000428 	.word	0x20000428
 8001384:	20000424 	.word	0x20000424

08001388 <start_PWM>:

int start_PWM()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
    int speed_stopped = __HAL_TIM_GET_AUTORELOAD(&htim1) / 2;
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <start_PWM+0x7c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	607b      	str	r3, [r7, #4]
    motor_set_speed = 0;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <start_PWM+0x80>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
    motor_current_speed = 0;
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <start_PWM+0x84>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
    TIM1->CCR1 = speed_stopped;
 80013a4:	4a1a      	ldr	r2, [pc, #104]	; (8001410 <start_PWM+0x88>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6353      	str	r3, [r2, #52]	; 0x34
    TIM1->CCR2 = speed_stopped;
 80013aa:	4a19      	ldr	r2, [pc, #100]	; (8001410 <start_PWM+0x88>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6393      	str	r3, [r2, #56]	; 0x38

    if (HAL_OK != HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1))
 80013b0:	2100      	movs	r1, #0
 80013b2:	4814      	ldr	r0, [pc, #80]	; (8001404 <start_PWM+0x7c>)
 80013b4:	f004 fd94 	bl	8005ee0 <HAL_TIM_PWM_Start>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <start_PWM+0x3a>
    {
        return ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e01b      	b.n	80013fa <start_PWM+0x72>
    }

    if (HAL_OK != HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2))
 80013c2:	2104      	movs	r1, #4
 80013c4:	480f      	ldr	r0, [pc, #60]	; (8001404 <start_PWM+0x7c>)
 80013c6:	f004 fd8b 	bl	8005ee0 <HAL_TIM_PWM_Start>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <start_PWM+0x4c>
    {
        return ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e012      	b.n	80013fa <start_PWM+0x72>
    }

    if (HAL_OK != HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1))
 80013d4:	2100      	movs	r1, #0
 80013d6:	480b      	ldr	r0, [pc, #44]	; (8001404 <start_PWM+0x7c>)
 80013d8:	f006 f8b8 	bl	800754c <HAL_TIMEx_PWMN_Start>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <start_PWM+0x5e>
    {
        return ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e009      	b.n	80013fa <start_PWM+0x72>
    }

    if (HAL_OK != HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2))
 80013e6:	2104      	movs	r1, #4
 80013e8:	4806      	ldr	r0, [pc, #24]	; (8001404 <start_PWM+0x7c>)
 80013ea:	f006 f8af 	bl	800754c <HAL_TIMEx_PWMN_Start>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <start_PWM+0x70>
    {
        return ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <start_PWM+0x72>
    }

    return SUCCESS;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000048c 	.word	0x2000048c
 8001408:	20000424 	.word	0x20000424
 800140c:	20000428 	.word	0x20000428
 8001410:	40012c00 	.word	0x40012c00

08001414 <stop_PWM>:

int stop_PWM()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
    if (HAL_OK != HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1))
 8001418:	2100      	movs	r1, #0
 800141a:	4813      	ldr	r0, [pc, #76]	; (8001468 <stop_PWM+0x54>)
 800141c:	f004 fe72 	bl	8006104 <HAL_TIM_PWM_Stop>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <stop_PWM+0x16>
    {
        return ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e01b      	b.n	8001462 <stop_PWM+0x4e>
    }

    if (HAL_OK != HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2))
 800142a:	2104      	movs	r1, #4
 800142c:	480e      	ldr	r0, [pc, #56]	; (8001468 <stop_PWM+0x54>)
 800142e:	f004 fe69 	bl	8006104 <HAL_TIM_PWM_Stop>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <stop_PWM+0x28>
    {
        return ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e012      	b.n	8001462 <stop_PWM+0x4e>
    }

    if (HAL_OK != HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1))
 800143c:	2100      	movs	r1, #0
 800143e:	480a      	ldr	r0, [pc, #40]	; (8001468 <stop_PWM+0x54>)
 8001440:	f006 f946 	bl	80076d0 <HAL_TIMEx_PWMN_Stop>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <stop_PWM+0x3a>
    {
        return ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e009      	b.n	8001462 <stop_PWM+0x4e>
    }

    if (HAL_OK != HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2))
 800144e:	2104      	movs	r1, #4
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <stop_PWM+0x54>)
 8001452:	f006 f93d 	bl	80076d0 <HAL_TIMEx_PWMN_Stop>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <stop_PWM+0x4c>
    {
        return ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <stop_PWM+0x4e>
    }

    return SUCCESS;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000048c 	.word	0x2000048c

0800146c <set_PWM>:

int set_PWM(int new_speed)
{
 800146c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001470:	b088      	sub	sp, #32
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
    if ((new_speed > 100) || (new_speed < -100))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b64      	cmp	r3, #100	; 0x64
 800147a:	dc03      	bgt.n	8001484 <set_PWM+0x18>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001482:	da01      	bge.n	8001488 <set_PWM+0x1c>
    {
        return ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e061      	b.n	800154c <set_PWM+0xe0>
    }
    else
    {
        const int ccr_size = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <set_PWM+0xec>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	617b      	str	r3, [r7, #20]
        int ccr_size_div_2 = ccr_size / 2;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	0fda      	lsrs	r2, r3, #31
 8001494:	4413      	add	r3, r2
 8001496:	105b      	asrs	r3, r3, #1
 8001498:	613b      	str	r3, [r7, #16]
        int ccr_U_value, ccr_V_value;
        float f_speed = (float)new_speed / 100;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014a4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800155c <set_PWM+0xf0>
 80014a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ac:	edc7 7a03 	vstr	s15, [r7, #12]
        if (new_speed > 0)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	dd19      	ble.n	80014ea <set_PWM+0x7e>
        {
            ccr_U_value = ccr_size_div_2 + (f_speed * ccr_size_div_2);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014da:	ee17 3a90 	vmov	r3, s15
 80014de:	61fb      	str	r3, [r7, #28]
            ccr_V_value = ccr_size - ccr_U_value;
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	e029      	b.n	800153e <set_PWM+0xd2>
        }
        else
        {
            ccr_V_value = ccr_size_div_2 + (fabs(f_speed) * ccr_size_div_2);
 80014ea:	6938      	ldr	r0, [r7, #16]
 80014ec:	f7ff f97c 	bl	80007e8 <__aeabi_i2d>
 80014f0:	4604      	mov	r4, r0
 80014f2:	460d      	mov	r5, r1
 80014f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f8:	eef0 7ae7 	vabs.f32	s15, s15
 80014fc:	ee17 0a90 	vmov	r0, s15
 8001500:	f7ff f984 	bl	800080c <__aeabi_f2d>
 8001504:	4680      	mov	r8, r0
 8001506:	4689      	mov	r9, r1
 8001508:	6938      	ldr	r0, [r7, #16]
 800150a:	f7ff f96d 	bl	80007e8 <__aeabi_i2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4640      	mov	r0, r8
 8001514:	4649      	mov	r1, r9
 8001516:	f7fe feeb 	bl	80002f0 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7ff f815 	bl	8000550 <__adddf3>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff f9c5 	bl	80008bc <__aeabi_d2iz>
 8001532:	4603      	mov	r3, r0
 8001534:	61bb      	str	r3, [r7, #24]
            ccr_U_value = ccr_size - ccr_V_value;
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	61fb      	str	r3, [r7, #28]
        }
        TIM1->CCR1 = ccr_U_value;
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <set_PWM+0xf4>)
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	6353      	str	r3, [r2, #52]	; 0x34
        TIM1->CCR2 = ccr_V_value;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <set_PWM+0xf4>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	6393      	str	r3, [r2, #56]	; 0x38
        return SUCCESS;
 800154a:	2300      	movs	r3, #0
    }
}
 800154c:	4618      	mov	r0, r3
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001556:	bf00      	nop
 8001558:	2000048c 	.word	0x2000048c
 800155c:	42c80000 	.word	0x42c80000
 8001560:	40012c00 	.word	0x40012c00

08001564 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    adc_conv_complete = 1;
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_ADC_ConvCpltCallback+0x1c>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000430 	.word	0x20000430

08001584 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, "ERROR  Call\r\n", 13, 100);
 800158c:	2364      	movs	r3, #100	; 0x64
 800158e:	220d      	movs	r2, #13
 8001590:	4903      	ldr	r1, [pc, #12]	; (80015a0 <HAL_ADC_ErrorCallback+0x1c>)
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <HAL_ADC_ErrorCallback+0x20>)
 8001594:	f006 fafd 	bl	8007b92 <HAL_UART_Transmit>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	0800b0f8 	.word	0x0800b0f8
 80015a4:	20000524 	.word	0x20000524

080015a8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as an application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM6)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d101      	bne.n	80015be <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 80015ba:	f000 ff25 	bl	8002408 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40001000 	.word	0x40001000

080015cc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80015d4:	e7fe      	b.n	80015d4 <Error_Handler+0x8>
	...

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_MspInit+0x44>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e2:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_MspInit+0x44>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6613      	str	r3, [r2, #96]	; 0x60
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_MspInit+0x44>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_MspInit+0x44>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	4a08      	ldr	r2, [pc, #32]	; (800161c <HAL_MspInit+0x44>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	6593      	str	r3, [r2, #88]	; 0x58
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_MspInit+0x44>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800160e:	f003 fb71 	bl	8004cf4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000

08001620 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001630:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <HAL_InitTick+0xc4>)
 8001632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001634:	4a2b      	ldr	r2, [pc, #172]	; (80016e4 <HAL_InitTick+0xc4>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6593      	str	r3, [r2, #88]	; 0x58
 800163c:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <HAL_InitTick+0xc4>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001648:	f107 020c 	add.w	r2, r7, #12
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f004 f84c 	bl	80056f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001658:	f004 f81e 	bl	8005698 <HAL_RCC_GetPCLK1Freq>
 800165c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	4a21      	ldr	r2, [pc, #132]	; (80016e8 <HAL_InitTick+0xc8>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0c9b      	lsrs	r3, r3, #18
 8001668:	3b01      	subs	r3, #1
 800166a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <HAL_InitTick+0xcc>)
 800166e:	4a20      	ldr	r2, [pc, #128]	; (80016f0 <HAL_InitTick+0xd0>)
 8001670:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <HAL_InitTick+0xcc>)
 8001674:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001678:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800167a:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <HAL_InitTick+0xcc>)
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_InitTick+0xcc>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_InitTick+0xcc>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800168c:	4817      	ldr	r0, [pc, #92]	; (80016ec <HAL_InitTick+0xcc>)
 800168e:	f004 faf5 	bl	8005c7c <HAL_TIM_Base_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001698:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800169c:	2b00      	cmp	r3, #0
 800169e:	d11b      	bne.n	80016d8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016a0:	4812      	ldr	r0, [pc, #72]	; (80016ec <HAL_InitTick+0xcc>)
 80016a2:	f004 fb43 	bl	8005d2c <HAL_TIM_Base_Start_IT>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80016ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d111      	bne.n	80016d8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016b4:	2036      	movs	r0, #54	; 0x36
 80016b6:	f002 fd7b 	bl	80041b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d808      	bhi.n	80016d2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016c0:	2200      	movs	r2, #0
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	2036      	movs	r0, #54	; 0x36
 80016c6:	f002 fd59 	bl	800417c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_InitTick+0xd4>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e002      	b.n	80016d8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3730      	adds	r7, #48	; 0x30
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	431bde83 	.word	0x431bde83
 80016ec:	2000043c 	.word	0x2000043c
 80016f0:	40001000 	.word	0x40001000
 80016f4:	20000208 	.word	0x20000208

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <NMI_Handler+0x4>

080016fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <MemManage_Handler+0x4>

0800170a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <UsageFault_Handler+0x4>

08001716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <DMA1_Channel1_IRQHandler+0x10>)
 8001756:	f002 ff1c 	bl	8004592 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000360 	.word	0x20000360

08001764 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <DMA1_Channel2_IRQHandler+0x10>)
 800176a:	f002 ff12 	bl	8004592 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200003c0 	.word	0x200003c0

08001778 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800177c:	4803      	ldr	r0, [pc, #12]	; (800178c <ADC1_2_IRQHandler+0x14>)
 800177e:	f001 fb3b 	bl	8002df8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001782:	4803      	ldr	r0, [pc, #12]	; (8001790 <ADC1_2_IRQHandler+0x18>)
 8001784:	f001 fb38 	bl	8002df8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000288 	.word	0x20000288
 8001790:	200002f4 	.word	0x200002f4

08001794 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <USART2_IRQHandler+0x10>)
 800179a:	f006 fae7 	bl	8007d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000524 	.word	0x20000524

080017a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <USART3_IRQHandler+0x10>)
 80017ae:	f006 fadd 	bl	8007d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200005b4 	.word	0x200005b4

080017bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80017c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017c4:	f003 f9ce 	bl	8004b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <TIM6_DAC_IRQHandler+0x10>)
 80017d2:	f004 fd33 	bl	800623c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000043c 	.word	0x2000043c

080017e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return 1;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_kill>:

int _kill(int pid, int sig)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017fa:	f008 fc65 	bl	800a0c8 <__errno>
 80017fe:	4603      	mov	r3, r0
 8001800:	2216      	movs	r2, #22
 8001802:	601a      	str	r2, [r3, #0]
  return -1;
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_exit>:

void _exit (int status)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ffe7 	bl	80017f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001822:	e7fe      	b.n	8001822 <_exit+0x12>

08001824 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e00a      	b.n	800184c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001836:	f3af 8000 	nop.w
 800183a:	4601      	mov	r1, r0
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	60ba      	str	r2, [r7, #8]
 8001842:	b2ca      	uxtb	r2, r1
 8001844:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf0      	blt.n	8001836 <_read+0x12>
  }

  return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e009      	b.n	8001884 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	60ba      	str	r2, [r7, #8]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	dbf1      	blt.n	8001870 <_write+0x12>
  }
  return len;
 800188c:	687b      	ldr	r3, [r7, #4]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_close>:

int _close(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018be:	605a      	str	r2, [r3, #4]
  return 0;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_isatty>:

int _isatty(int file)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <_sbrk+0x5c>)
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <_sbrk+0x60>)
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <_sbrk+0x64>)
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <_sbrk+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	d207      	bcs.n	8001940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001930:	f008 fbca 	bl	800a0c8 <__errno>
 8001934:	4603      	mov	r3, r0
 8001936:	220c      	movs	r2, #12
 8001938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	e009      	b.n	8001954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <_sbrk+0x64>)
 8001950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20020000 	.word	0x20020000
 8001960:	00000400 	.word	0x00000400
 8001964:	20000488 	.word	0x20000488
 8001968:	20000850 	.word	0x20000850

0800196c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <SystemInit+0x20>)
 8001972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <SystemInit+0x20>)
 8001978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800197c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b09c      	sub	sp, #112	; 0x70
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001996:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	615a      	str	r2, [r3, #20]
 80019c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2234      	movs	r2, #52	; 0x34
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f008 fad1 	bl	8009f72 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019d0:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <MX_TIM1_Init+0x198>)
 80019d2:	4a56      	ldr	r2, [pc, #344]	; (8001b2c <MX_TIM1_Init+0x19c>)
 80019d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80019d6:	4b54      	ldr	r3, [pc, #336]	; (8001b28 <MX_TIM1_Init+0x198>)
 80019d8:	2207      	movs	r2, #7
 80019da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019dc:	4b52      	ldr	r3, [pc, #328]	; (8001b28 <MX_TIM1_Init+0x198>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80019e2:	4b51      	ldr	r3, [pc, #324]	; (8001b28 <MX_TIM1_Init+0x198>)
 80019e4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80019e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ea:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <MX_TIM1_Init+0x198>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019f0:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <MX_TIM1_Init+0x198>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019f6:	4b4c      	ldr	r3, [pc, #304]	; (8001b28 <MX_TIM1_Init+0x198>)
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019fc:	484a      	ldr	r0, [pc, #296]	; (8001b28 <MX_TIM1_Init+0x198>)
 80019fe:	f004 f93d 	bl	8005c7c <HAL_TIM_Base_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a08:	f7ff fde0 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a10:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a16:	4619      	mov	r1, r3
 8001a18:	4843      	ldr	r0, [pc, #268]	; (8001b28 <MX_TIM1_Init+0x198>)
 8001a1a:	f004 fea3 	bl	8006764 <HAL_TIM_ConfigClockSource>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a24:	f7ff fdd2 	bl	80015cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a28:	483f      	ldr	r0, [pc, #252]	; (8001b28 <MX_TIM1_Init+0x198>)
 8001a2a:	f004 f9f7 	bl	8005e1c <HAL_TIM_PWM_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a34:	f7ff fdca 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a38:	2320      	movs	r3, #32
 8001a3a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4837      	ldr	r0, [pc, #220]	; (8001b28 <MX_TIM1_Init+0x198>)
 8001a4c:	f005 fe9e 	bl	800778c <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a56:	f7ff fdb9 	bl	80015cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5a:	2360      	movs	r3, #96	; 0x60
 8001a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 800;
 8001a5e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a64:	2300      	movs	r3, #0
 8001a66:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4829      	ldr	r0, [pc, #164]	; (8001b28 <MX_TIM1_Init+0x198>)
 8001a82:	f004 fd5b 	bl	800653c <HAL_TIM_PWM_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001a8c:	f7ff fd9e 	bl	80015cc <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 8001a90:	23c8      	movs	r3, #200	; 0xc8
 8001a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a98:	2204      	movs	r2, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4822      	ldr	r0, [pc, #136]	; (8001b28 <MX_TIM1_Init+0x198>)
 8001a9e:	f004 fd4d 	bl	800653c <HAL_TIM_PWM_ConfigChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8001aa8:	f7ff fd90 	bl	80015cc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ab4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ab8:	2208      	movs	r2, #8
 8001aba:	4619      	mov	r1, r3
 8001abc:	481a      	ldr	r0, [pc, #104]	; (8001b28 <MX_TIM1_Init+0x198>)
 8001abe:	f004 fd3d 	bl	800653c <HAL_TIM_PWM_ConfigChannel>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001ac8:	f7ff fd80 	bl	80015cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 15;
 8001ad8:	230f      	movs	r3, #15
 8001ada:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001afc:	2300      	movs	r3, #0
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4807      	ldr	r0, [pc, #28]	; (8001b28 <MX_TIM1_Init+0x198>)
 8001b0a:	f005 fed5 	bl	80078b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001b14:	f7ff fd5a 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <MX_TIM1_Init+0x198>)
 8001b1a:	f000 f8d7 	bl	8001ccc <HAL_TIM_MspPostInit>

}
 8001b1e:	bf00      	nop
 8001b20:	3770      	adds	r7, #112	; 0x70
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000048c 	.word	0x2000048c
 8001b2c:	40012c00 	.word	0x40012c00

08001b30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <MX_TIM3_Init+0x90>)
 8001b50:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <MX_TIM3_Init+0x94>)
 8001b52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_TIM3_Init+0x90>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <MX_TIM3_Init+0x90>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <MX_TIM3_Init+0x90>)
 8001b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_TIM3_Init+0x90>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_TIM3_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480d      	ldr	r0, [pc, #52]	; (8001bc0 <MX_TIM3_Init+0x90>)
 8001b8c:	f005 fc2f 	bl	80073ee <HAL_TIMEx_HallSensor_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001b96:	f7ff fd19 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001b9a:	2350      	movs	r3, #80	; 0x50
 8001b9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <MX_TIM3_Init+0x90>)
 8001ba8:	f005 fdf0 	bl	800778c <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001bb2:	f7ff fd0b 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200004d8 	.word	0x200004d8
 8001bc4:	40000400 	.word	0x40000400

08001bc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_TIM_Base_MspInit+0x38>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_TIM_Base_MspInit+0x3c>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_TIM_Base_MspInit+0x3c>)
 8001be0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001be4:	6613      	str	r3, [r2, #96]	; 0x60
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_TIM_Base_MspInit+0x3c>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40012c00 	.word	0x40012c00
 8001c04:	40021000 	.word	0x40021000

08001c08 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d145      	bne.n	8001cb6 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6593      	str	r3, [r2, #88]	; 0x58
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001c72:	2350      	movs	r3, #80	; 0x50
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c82:	2302      	movs	r3, #2
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f002 fdce 	bl	8004830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001cb2:	f002 fdbd 	bl	8004830 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	48000800 	.word	0x48000800

08001ccc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a29      	ldr	r2, [pc, #164]	; (8001d90 <HAL_TIM_MspPostInit+0xc4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d14b      	bne.n	8001d86 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <HAL_TIM_MspPostInit+0xc8>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	4a28      	ldr	r2, [pc, #160]	; (8001d94 <HAL_TIM_MspPostInit+0xc8>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_TIM_MspPostInit+0xc8>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_TIM_MspPostInit+0xc8>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_TIM_MspPostInit+0xc8>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_TIM_MspPostInit+0xc8>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d1e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d30:	2306      	movs	r3, #6
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4817      	ldr	r0, [pc, #92]	; (8001d98 <HAL_TIM_MspPostInit+0xcc>)
 8001d3c:	f002 fd78 	bl	8004830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001d52:	2304      	movs	r3, #4
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480e      	ldr	r0, [pc, #56]	; (8001d98 <HAL_TIM_MspPostInit+0xcc>)
 8001d5e:	f002 fd67 	bl	8004830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d62:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d74:	2306      	movs	r3, #6
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d82:	f002 fd55 	bl	8004830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	; 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40012c00 	.word	0x40012c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000400 	.word	0x48000400

08001d9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001da2:	4a23      	ldr	r2, [pc, #140]	; (8001e30 <MX_USART2_UART_Init+0x94>)
 8001da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001da6:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dae:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dcc:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001de4:	4811      	ldr	r0, [pc, #68]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001de6:	f005 fe84 	bl	8007af2 <HAL_UART_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001df0:	f7ff fbec 	bl	80015cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001df4:	2100      	movs	r1, #0
 8001df6:	480d      	ldr	r0, [pc, #52]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001df8:	f007 fe27 	bl	8009a4a <HAL_UARTEx_SetTxFifoThreshold>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e02:	f7ff fbe3 	bl	80015cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e06:	2100      	movs	r1, #0
 8001e08:	4808      	ldr	r0, [pc, #32]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001e0a:	f007 fe5c 	bl	8009ac6 <HAL_UARTEx_SetRxFifoThreshold>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e14:	f7ff fbda 	bl	80015cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e18:	4804      	ldr	r0, [pc, #16]	; (8001e2c <MX_USART2_UART_Init+0x90>)
 8001e1a:	f007 fddd 	bl	80099d8 <HAL_UARTEx_DisableFifoMode>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e24:	f7ff fbd2 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000524 	.word	0x20000524
 8001e30:	40004400 	.word	0x40004400

08001e34 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001e3a:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <MX_USART3_UART_Init+0x94>)
 8001e3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e3e:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e46:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e52:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e7c:	4811      	ldr	r0, [pc, #68]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001e7e:	f005 fe38 	bl	8007af2 <HAL_UART_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e88:	f7ff fba0 	bl	80015cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001e90:	f007 fddb 	bl	8009a4a <HAL_UARTEx_SetTxFifoThreshold>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e9a:	f7ff fb97 	bl	80015cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4808      	ldr	r0, [pc, #32]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001ea2:	f007 fe10 	bl	8009ac6 <HAL_UARTEx_SetRxFifoThreshold>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001eac:	f7ff fb8e 	bl	80015cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001eb0:	4804      	ldr	r0, [pc, #16]	; (8001ec4 <MX_USART3_UART_Init+0x90>)
 8001eb2:	f007 fd91 	bl	80099d8 <HAL_UARTEx_DisableFifoMode>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ebc:	f7ff fb86 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200005b4 	.word	0x200005b4
 8001ec8:	40004800 	.word	0x40004800

08001ecc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b0a0      	sub	sp, #128	; 0x80
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee4:	f107 0318 	add.w	r3, r7, #24
 8001ee8:	2254      	movs	r2, #84	; 0x54
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f008 f840 	bl	8009f72 <memset>
  if(uartHandle->Instance==USART2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a45      	ldr	r2, [pc, #276]	; (800200c <HAL_UART_MspInit+0x140>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d13f      	bne.n	8001f7c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 fc69 	bl	80057e0 <HAL_RCCEx_PeriphCLKConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f14:	f7ff fb5a 	bl	80015cc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f18:	4b3d      	ldr	r3, [pc, #244]	; (8002010 <HAL_UART_MspInit+0x144>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	4a3c      	ldr	r2, [pc, #240]	; (8002010 <HAL_UART_MspInit+0x144>)
 8001f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f22:	6593      	str	r3, [r2, #88]	; 0x58
 8001f24:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <HAL_UART_MspInit+0x144>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f30:	4b37      	ldr	r3, [pc, #220]	; (8002010 <HAL_UART_MspInit+0x144>)
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	4a36      	ldr	r2, [pc, #216]	; (8002010 <HAL_UART_MspInit+0x144>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3c:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_UART_MspInit+0x144>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f48:	230c      	movs	r3, #12
 8001f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f60:	4619      	mov	r1, r3
 8001f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f66:	f002 fc63 	bl	8004830 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2026      	movs	r0, #38	; 0x26
 8001f70:	f002 f904 	bl	800417c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f74:	2026      	movs	r0, #38	; 0x26
 8001f76:	f002 f91b 	bl	80041b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f7a:	e043      	b.n	8002004 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a24      	ldr	r2, [pc, #144]	; (8002014 <HAL_UART_MspInit+0x148>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d13e      	bne.n	8002004 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f86:	2304      	movs	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f8e:	f107 0318 	add.w	r3, r7, #24
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 fc24 	bl	80057e0 <HAL_RCCEx_PeriphCLKConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001f9e:	f7ff fb15 	bl	80015cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_UART_MspInit+0x144>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	4a1a      	ldr	r2, [pc, #104]	; (8002010 <HAL_UART_MspInit+0x144>)
 8001fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <HAL_UART_MspInit+0x144>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_UART_MspInit+0x144>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <HAL_UART_MspInit+0x144>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_UART_MspInit+0x144>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fe4:	2307      	movs	r3, #7
 8001fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fec:	4619      	mov	r1, r3
 8001fee:	480a      	ldr	r0, [pc, #40]	; (8002018 <HAL_UART_MspInit+0x14c>)
 8001ff0:	f002 fc1e 	bl	8004830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2027      	movs	r0, #39	; 0x27
 8001ffa:	f002 f8bf 	bl	800417c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ffe:	2027      	movs	r0, #39	; 0x27
 8002000:	f002 f8d6 	bl	80041b0 <HAL_NVIC_EnableIRQ>
}
 8002004:	bf00      	nop
 8002006:	3780      	adds	r7, #128	; 0x80
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40004400 	.word	0x40004400
 8002010:	40021000 	.word	0x40021000
 8002014:	40004800 	.word	0x40004800
 8002018:	48000800 	.word	0x48000800

0800201c <Shell_Init>:
// Code written by Mr. PAPAZOGLOU

/**
 * @brief Initializes the shell.
 */
void Shell_Init(void) {
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
    memset(argv, 0, MAX_ARGS * sizeof(char*));
 8002020:	2224      	movs	r2, #36	; 0x24
 8002022:	2100      	movs	r1, #0
 8002024:	4816      	ldr	r0, [pc, #88]	; (8002080 <Shell_Init+0x64>)
 8002026:	f007 ffa4 	bl	8009f72 <memset>
    memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 800202a:	2240      	movs	r2, #64	; 0x40
 800202c:	2100      	movs	r1, #0
 800202e:	4815      	ldr	r0, [pc, #84]	; (8002084 <Shell_Init+0x68>)
 8002030:	f007 ff9f 	bl	8009f72 <memset>
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <Shell_Init+0x6c>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
    memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
    memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 800203a:	2240      	movs	r2, #64	; 0x40
 800203c:	2100      	movs	r1, #0
 800203e:	4813      	ldr	r0, [pc, #76]	; (800208c <Shell_Init+0x70>)
 8002040:	f007 ff97 	bl	8009f72 <memset>

    HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002044:	2201      	movs	r2, #1
 8002046:	4910      	ldr	r1, [pc, #64]	; (8002088 <Shell_Init+0x6c>)
 8002048:	4811      	ldr	r0, [pc, #68]	; (8002090 <Shell_Init+0x74>)
 800204a:	f005 fe39 	bl	8007cc0 <HAL_UART_Receive_IT>
    HAL_UART_Transmit(&huart2, started, strlen((char*)started), HAL_MAX_DELAY);
 800204e:	4811      	ldr	r0, [pc, #68]	; (8002094 <Shell_Init+0x78>)
 8002050:	f7fe f8f0 	bl	8000234 <strlen>
 8002054:	4603      	mov	r3, r0
 8002056:	b29a      	uxth	r2, r3
 8002058:	f04f 33ff 	mov.w	r3, #4294967295
 800205c:	490d      	ldr	r1, [pc, #52]	; (8002094 <Shell_Init+0x78>)
 800205e:	480c      	ldr	r0, [pc, #48]	; (8002090 <Shell_Init+0x74>)
 8002060:	f005 fd97 	bl	8007b92 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <Shell_Init+0x7c>)
 8002066:	f7fe f8e5 	bl	8000234 <strlen>
 800206a:	4603      	mov	r3, r0
 800206c:	b29a      	uxth	r2, r3
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	4909      	ldr	r1, [pc, #36]	; (8002098 <Shell_Init+0x7c>)
 8002074:	4806      	ldr	r0, [pc, #24]	; (8002090 <Shell_Init+0x74>)
 8002076:	f005 fd8c 	bl	8007b92 <HAL_UART_Transmit>
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200006d0 	.word	0x200006d0
 8002084:	2000068c 	.word	0x2000068c
 8002088:	20000648 	.word	0x20000648
 800208c:	2000064c 	.word	0x2000064c
 8002090:	20000524 	.word	0x20000524
 8002094:	2000002c 	.word	0x2000002c
 8002098:	20000004 	.word	0x20000004

0800209c <Shell_Loop>:

/**
 * @brief Main loop of the shell.
 */
void Shell_Loop(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0
    if (uartRxReceived) {
 80020a2:	4b92      	ldr	r3, [pc, #584]	; (80022ec <Shell_Loop+0x250>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d05b      	beq.n	8002162 <Shell_Loop+0xc6>
        switch (uartRxBuffer[0]) {
 80020aa:	4b91      	ldr	r3, [pc, #580]	; (80022f0 <Shell_Loop+0x254>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d034      	beq.n	800211c <Shell_Loop+0x80>
 80020b2:	2b0d      	cmp	r3, #13
 80020b4:	d142      	bne.n	800213c <Shell_Loop+0xa0>
        case ASCII_CR: // Newline, process the instruction
            HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	2203      	movs	r2, #3
 80020bc:	498d      	ldr	r1, [pc, #564]	; (80022f4 <Shell_Loop+0x258>)
 80020be:	488e      	ldr	r0, [pc, #568]	; (80022f8 <Shell_Loop+0x25c>)
 80020c0:	f005 fd67 	bl	8007b92 <HAL_UART_Transmit>
            cmdBuffer[idx_cmd] = '\0';
 80020c4:	4b8d      	ldr	r3, [pc, #564]	; (80022fc <Shell_Loop+0x260>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a8d      	ldr	r2, [pc, #564]	; (8002300 <Shell_Loop+0x264>)
 80020ca:	2100      	movs	r1, #0
 80020cc:	54d1      	strb	r1, [r2, r3]
            argc = 0;
 80020ce:	4b8d      	ldr	r3, [pc, #564]	; (8002304 <Shell_Loop+0x268>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
            token = strtok(cmdBuffer, " ");
 80020d4:	498c      	ldr	r1, [pc, #560]	; (8002308 <Shell_Loop+0x26c>)
 80020d6:	488a      	ldr	r0, [pc, #552]	; (8002300 <Shell_Loop+0x264>)
 80020d8:	f007 ff54 	bl	8009f84 <strtok>
 80020dc:	4603      	mov	r3, r0
 80020de:	4a8b      	ldr	r2, [pc, #556]	; (800230c <Shell_Loop+0x270>)
 80020e0:	6013      	str	r3, [r2, #0]
            while (token != NULL) {
 80020e2:	e010      	b.n	8002106 <Shell_Loop+0x6a>
                argv[argc++] = token;
 80020e4:	4b87      	ldr	r3, [pc, #540]	; (8002304 <Shell_Loop+0x268>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	4986      	ldr	r1, [pc, #536]	; (8002304 <Shell_Loop+0x268>)
 80020ec:	600a      	str	r2, [r1, #0]
 80020ee:	4a87      	ldr	r2, [pc, #540]	; (800230c <Shell_Loop+0x270>)
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	4987      	ldr	r1, [pc, #540]	; (8002310 <Shell_Loop+0x274>)
 80020f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                token = strtok(NULL, " ");
 80020f8:	4983      	ldr	r1, [pc, #524]	; (8002308 <Shell_Loop+0x26c>)
 80020fa:	2000      	movs	r0, #0
 80020fc:	f007 ff42 	bl	8009f84 <strtok>
 8002100:	4603      	mov	r3, r0
 8002102:	4a82      	ldr	r2, [pc, #520]	; (800230c <Shell_Loop+0x270>)
 8002104:	6013      	str	r3, [r2, #0]
            while (token != NULL) {
 8002106:	4b81      	ldr	r3, [pc, #516]	; (800230c <Shell_Loop+0x270>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1ea      	bne.n	80020e4 <Shell_Loop+0x48>
            }
            idx_cmd = 0;
 800210e:	4b7b      	ldr	r3, [pc, #492]	; (80022fc <Shell_Loop+0x260>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
            newCmdReady = 1;
 8002114:	4b7f      	ldr	r3, [pc, #508]	; (8002314 <Shell_Loop+0x278>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]
            break;
 800211a:	e01f      	b.n	800215c <Shell_Loop+0xc0>
        case ASCII_BACK: // Delete the last character
            cmdBuffer[idx_cmd--] = '\0';
 800211c:	4b77      	ldr	r3, [pc, #476]	; (80022fc <Shell_Loop+0x260>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	1e5a      	subs	r2, r3, #1
 8002122:	4976      	ldr	r1, [pc, #472]	; (80022fc <Shell_Loop+0x260>)
 8002124:	600a      	str	r2, [r1, #0]
 8002126:	4a76      	ldr	r2, [pc, #472]	; (8002300 <Shell_Loop+0x264>)
 8002128:	2100      	movs	r1, #0
 800212a:	54d1      	strb	r1, [r2, r3]
            HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
 8002130:	2204      	movs	r2, #4
 8002132:	4979      	ldr	r1, [pc, #484]	; (8002318 <Shell_Loop+0x27c>)
 8002134:	4870      	ldr	r0, [pc, #448]	; (80022f8 <Shell_Loop+0x25c>)
 8002136:	f005 fd2c 	bl	8007b92 <HAL_UART_Transmit>
            break;
 800213a:	e00f      	b.n	800215c <Shell_Loop+0xc0>
        default: // New character, append it to the command buffer
            cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800213c:	4b6f      	ldr	r3, [pc, #444]	; (80022fc <Shell_Loop+0x260>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	496e      	ldr	r1, [pc, #440]	; (80022fc <Shell_Loop+0x260>)
 8002144:	600a      	str	r2, [r1, #0]
 8002146:	4a6a      	ldr	r2, [pc, #424]	; (80022f0 <Shell_Loop+0x254>)
 8002148:	7811      	ldrb	r1, [r2, #0]
 800214a:	4a6d      	ldr	r2, [pc, #436]	; (8002300 <Shell_Loop+0x264>)
 800214c:	54d1      	strb	r1, [r2, r3]
            HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	2201      	movs	r2, #1
 8002154:	4966      	ldr	r1, [pc, #408]	; (80022f0 <Shell_Loop+0x254>)
 8002156:	4868      	ldr	r0, [pc, #416]	; (80022f8 <Shell_Loop+0x25c>)
 8002158:	f005 fd1b 	bl	8007b92 <HAL_UART_Transmit>
        }
        uartRxReceived = 0;
 800215c:	4b63      	ldr	r3, [pc, #396]	; (80022ec <Shell_Loop+0x250>)
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
    }

    // Code written by Baptiste RODIER and Maxime PICHERY
    if (newCmdReady) {
 8002162:	4b6c      	ldr	r3, [pc, #432]	; (8002314 <Shell_Loop+0x278>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80bc 	beq.w	80022e4 <Shell_Loop+0x248>
        // CMD "help" -> prompt the help text in the terminal of the user
        if (strcmp(argv[0], "help") == 0) {
 800216c:	4b68      	ldr	r3, [pc, #416]	; (8002310 <Shell_Loop+0x274>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	496a      	ldr	r1, [pc, #424]	; (800231c <Shell_Loop+0x280>)
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f854 	bl	8000220 <strcmp>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10b      	bne.n	8002196 <Shell_Loop+0xfa>
            HAL_UART_Transmit(&huart2, help_prompt, strlen((char*)help_prompt), HAL_MAX_DELAY);
 800217e:	4868      	ldr	r0, [pc, #416]	; (8002320 <Shell_Loop+0x284>)
 8002180:	f7fe f858 	bl	8000234 <strlen>
 8002184:	4603      	mov	r3, r0
 8002186:	b29a      	uxth	r2, r3
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	4964      	ldr	r1, [pc, #400]	; (8002320 <Shell_Loop+0x284>)
 800218e:	485a      	ldr	r0, [pc, #360]	; (80022f8 <Shell_Loop+0x25c>)
 8002190:	f005 fcff 	bl	8007b92 <HAL_UART_Transmit>
 8002194:	e09c      	b.n	80022d0 <Shell_Loop+0x234>
        }
        // CMD "start" -> Start the engine power stage
        else if (strcmp(argv[0], "start") == 0) {
 8002196:	4b5e      	ldr	r3, [pc, #376]	; (8002310 <Shell_Loop+0x274>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4962      	ldr	r1, [pc, #392]	; (8002324 <Shell_Loop+0x288>)
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f83f 	bl	8000220 <strcmp>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d125      	bne.n	80021f4 <Shell_Loop+0x158>
            int result = start_PWM();
 80021a8:	f7ff f8ee 	bl	8001388 <start_PWM>
 80021ac:	60f8      	str	r0, [r7, #12]
            if (result == SUCCESS) {
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <Shell_Loop+0x134>
                int uartTxStringLength = snprintf((char*)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\npower ON \r\nSpeed set to 0");
 80021b4:	4a5c      	ldr	r2, [pc, #368]	; (8002328 <Shell_Loop+0x28c>)
 80021b6:	2140      	movs	r1, #64	; 0x40
 80021b8:	485c      	ldr	r0, [pc, #368]	; (800232c <Shell_Loop+0x290>)
 80021ba:	f007 fe63 	bl	8009e84 <sniprintf>
 80021be:	60b8      	str	r0, [r7, #8]
                HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295
 80021c8:	4958      	ldr	r1, [pc, #352]	; (800232c <Shell_Loop+0x290>)
 80021ca:	484b      	ldr	r0, [pc, #300]	; (80022f8 <Shell_Loop+0x25c>)
 80021cc:	f005 fce1 	bl	8007b92 <HAL_UART_Transmit>
            }
            if (result == ERROR) {
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d17c      	bne.n	80022d0 <Shell_Loop+0x234>
                int uartTxStringLength = snprintf((char*)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\n/!\\ Failed to power ON /!\\");
 80021d6:	4a56      	ldr	r2, [pc, #344]	; (8002330 <Shell_Loop+0x294>)
 80021d8:	2140      	movs	r1, #64	; 0x40
 80021da:	4854      	ldr	r0, [pc, #336]	; (800232c <Shell_Loop+0x290>)
 80021dc:	f007 fe52 	bl	8009e84 <sniprintf>
 80021e0:	6078      	str	r0, [r7, #4]
                HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	4950      	ldr	r1, [pc, #320]	; (800232c <Shell_Loop+0x290>)
 80021ec:	4842      	ldr	r0, [pc, #264]	; (80022f8 <Shell_Loop+0x25c>)
 80021ee:	f005 fcd0 	bl	8007b92 <HAL_UART_Transmit>
 80021f2:	e06d      	b.n	80022d0 <Shell_Loop+0x234>
            }
        }
        // CMD "stop" -> Stop the engine power stage
        else if (strcmp(argv[0], "stop") == 0) {
 80021f4:	4b46      	ldr	r3, [pc, #280]	; (8002310 <Shell_Loop+0x274>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	494e      	ldr	r1, [pc, #312]	; (8002334 <Shell_Loop+0x298>)
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f810 	bl	8000220 <strcmp>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d125      	bne.n	8002252 <Shell_Loop+0x1b6>
            int result = stop_PWM();
 8002206:	f7ff f905 	bl	8001414 <stop_PWM>
 800220a:	61b8      	str	r0, [r7, #24]
            if (result == SUCCESS) {
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10d      	bne.n	800222e <Shell_Loop+0x192>
                int uartTxStringLength = snprintf((char*)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\npower OFF");
 8002212:	4a49      	ldr	r2, [pc, #292]	; (8002338 <Shell_Loop+0x29c>)
 8002214:	2140      	movs	r1, #64	; 0x40
 8002216:	4845      	ldr	r0, [pc, #276]	; (800232c <Shell_Loop+0x290>)
 8002218:	f007 fe34 	bl	8009e84 <sniprintf>
 800221c:	6178      	str	r0, [r7, #20]
                HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	b29a      	uxth	r2, r3
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	4941      	ldr	r1, [pc, #260]	; (800232c <Shell_Loop+0x290>)
 8002228:	4833      	ldr	r0, [pc, #204]	; (80022f8 <Shell_Loop+0x25c>)
 800222a:	f005 fcb2 	bl	8007b92 <HAL_UART_Transmit>
            }
            if (result == ERROR) {
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d14d      	bne.n	80022d0 <Shell_Loop+0x234>
                int uartTxStringLength = snprintf((char*)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\n/!\\ Failed to power OFF /!\\");
 8002234:	4a41      	ldr	r2, [pc, #260]	; (800233c <Shell_Loop+0x2a0>)
 8002236:	2140      	movs	r1, #64	; 0x40
 8002238:	483c      	ldr	r0, [pc, #240]	; (800232c <Shell_Loop+0x290>)
 800223a:	f007 fe23 	bl	8009e84 <sniprintf>
 800223e:	6138      	str	r0, [r7, #16]
                HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	b29a      	uxth	r2, r3
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
 8002248:	4938      	ldr	r1, [pc, #224]	; (800232c <Shell_Loop+0x290>)
 800224a:	482b      	ldr	r0, [pc, #172]	; (80022f8 <Shell_Loop+0x25c>)
 800224c:	f005 fca1 	bl	8007b92 <HAL_UART_Transmit>
 8002250:	e03e      	b.n	80022d0 <Shell_Loop+0x234>
            }
        }
        // CMD "speed" -> Set the motor speed (motor speed is between -100 and 100)
        else if (strcmp(argv[0], "speed") == 0) {
 8002252:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <Shell_Loop+0x274>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	493a      	ldr	r1, [pc, #232]	; (8002340 <Shell_Loop+0x2a4>)
 8002258:	4618      	mov	r0, r3
 800225a:	f7fd ffe1 	bl	8000220 <strcmp>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d12e      	bne.n	80022c2 <Shell_Loop+0x226>
            int val = atoi(argv[1]);
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <Shell_Loop+0x274>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4618      	mov	r0, r3
 800226a:	f007 fcb9 	bl	8009be0 <atoi>
 800226e:	6278      	str	r0, [r7, #36]	; 0x24
            if ((-100 <= val) && (val <= 100)) {
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8002276:	db15      	blt.n	80022a4 <Shell_Loop+0x208>
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	2b64      	cmp	r3, #100	; 0x64
 800227c:	dc12      	bgt.n	80022a4 <Shell_Loop+0x208>
                motor_set_speed = val;
 800227e:	4a31      	ldr	r2, [pc, #196]	; (8002344 <Shell_Loop+0x2a8>)
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	6013      	str	r3, [r2, #0]
                int uartTxStringLength = snprintf((char*)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\nPWM set to %03d", val);
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	4a30      	ldr	r2, [pc, #192]	; (8002348 <Shell_Loop+0x2ac>)
 8002288:	2140      	movs	r1, #64	; 0x40
 800228a:	4828      	ldr	r0, [pc, #160]	; (800232c <Shell_Loop+0x290>)
 800228c:	f007 fdfa 	bl	8009e84 <sniprintf>
 8002290:	6238      	str	r0, [r7, #32]
                HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	b29a      	uxth	r2, r3
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	4924      	ldr	r1, [pc, #144]	; (800232c <Shell_Loop+0x290>)
 800229c:	4816      	ldr	r0, [pc, #88]	; (80022f8 <Shell_Loop+0x25c>)
 800229e:	f005 fc78 	bl	8007b92 <HAL_UART_Transmit>
            if ((-100 <= val) && (val <= 100)) {
 80022a2:	e015      	b.n	80022d0 <Shell_Loop+0x234>
            } else {
                int uartTxStringLength = snprintf((char*)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\nFailed to set PWM");
 80022a4:	4a29      	ldr	r2, [pc, #164]	; (800234c <Shell_Loop+0x2b0>)
 80022a6:	2140      	movs	r1, #64	; 0x40
 80022a8:	4820      	ldr	r0, [pc, #128]	; (800232c <Shell_Loop+0x290>)
 80022aa:	f007 fdeb 	bl	8009e84 <sniprintf>
 80022ae:	61f8      	str	r0, [r7, #28]
                HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	f04f 33ff 	mov.w	r3, #4294967295
 80022b8:	491c      	ldr	r1, [pc, #112]	; (800232c <Shell_Loop+0x290>)
 80022ba:	480f      	ldr	r0, [pc, #60]	; (80022f8 <Shell_Loop+0x25c>)
 80022bc:	f005 fc69 	bl	8007b92 <HAL_UART_Transmit>
 80022c0:	e006      	b.n	80022d0 <Shell_Loop+0x234>
            }
        }
        // NO CMD FOUND
        else {
            HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	221d      	movs	r2, #29
 80022c8:	4921      	ldr	r1, [pc, #132]	; (8002350 <Shell_Loop+0x2b4>)
 80022ca:	480b      	ldr	r0, [pc, #44]	; (80022f8 <Shell_Loop+0x25c>)
 80022cc:	f005 fc61 	bl	8007b92 <HAL_UART_Transmit>
        }

        // Prompt text is transmitted, and the "newCmdReady" flag is reset to 0
        HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295
 80022d4:	2226      	movs	r2, #38	; 0x26
 80022d6:	491f      	ldr	r1, [pc, #124]	; (8002354 <Shell_Loop+0x2b8>)
 80022d8:	4807      	ldr	r0, [pc, #28]	; (80022f8 <Shell_Loop+0x25c>)
 80022da:	f005 fc5a 	bl	8007b92 <HAL_UART_Transmit>
        newCmdReady = 0;
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <Shell_Loop+0x278>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
    }
}
 80022e4:	bf00      	nop
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000644 	.word	0x20000644
 80022f0:	20000648 	.word	0x20000648
 80022f4:	200001e0 	.word	0x200001e0
 80022f8:	20000524 	.word	0x20000524
 80022fc:	200006cc 	.word	0x200006cc
 8002300:	2000068c 	.word	0x2000068c
 8002304:	200006f4 	.word	0x200006f4
 8002308:	0800b108 	.word	0x0800b108
 800230c:	200006f8 	.word	0x200006f8
 8002310:	200006d0 	.word	0x200006d0
 8002314:	200006fc 	.word	0x200006fc
 8002318:	200001e4 	.word	0x200001e4
 800231c:	0800b10c 	.word	0x0800b10c
 8002320:	200000b4 	.word	0x200000b4
 8002324:	0800b114 	.word	0x0800b114
 8002328:	0800b11c 	.word	0x0800b11c
 800232c:	2000064c 	.word	0x2000064c
 8002330:	0800b138 	.word	0x0800b138
 8002334:	0800b158 	.word	0x0800b158
 8002338:	0800b160 	.word	0x0800b160
 800233c:	0800b16c 	.word	0x0800b16c
 8002340:	0800b18c 	.word	0x0800b18c
 8002344:	20000424 	.word	0x20000424
 8002348:	0800b194 	.word	0x0800b194
 800234c:	0800b1a8 	.word	0x0800b1a8
 8002350:	200001e8 	.word	0x200001e8
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_UART_RxCpltCallback>:
/**
 * @brief Callback function for UART data reception.
 *
 * @param huart Pointer to the UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
    uartRxReceived = 1;
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_UART_RxCpltCallback+0x20>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002366:	2201      	movs	r2, #1
 8002368:	4904      	ldr	r1, [pc, #16]	; (800237c <HAL_UART_RxCpltCallback+0x24>)
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <HAL_UART_RxCpltCallback+0x28>)
 800236c:	f005 fca8 	bl	8007cc0 <HAL_UART_Receive_IT>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000644 	.word	0x20000644
 800237c:	20000648 	.word	0x20000648
 8002380:	20000524 	.word	0x20000524

08002384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002384:	480d      	ldr	r0, [pc, #52]	; (80023bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002386:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002388:	480d      	ldr	r0, [pc, #52]	; (80023c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800238a:	490e      	ldr	r1, [pc, #56]	; (80023c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800238c:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <LoopForever+0xe>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002390:	e002      	b.n	8002398 <LoopCopyDataInit>

08002392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002396:	3304      	adds	r3, #4

08002398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800239c:	d3f9      	bcc.n	8002392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239e:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80023a0:	4c0b      	ldr	r4, [pc, #44]	; (80023d0 <LoopForever+0x16>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a4:	e001      	b.n	80023aa <LoopFillZerobss>

080023a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a8:	3204      	adds	r2, #4

080023aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ac:	d3fb      	bcc.n	80023a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023ae:	f7ff fadd 	bl	800196c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023b2:	f007 fe8f 	bl	800a0d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023b6:	f7fe ff0b 	bl	80011d0 <main>

080023ba <LoopForever>:

LoopForever:
    b LoopForever
 80023ba:	e7fe      	b.n	80023ba <LoopForever>
  ldr   r0, =_estack
 80023bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c4:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 80023c8:	0800b3f0 	.word	0x0800b3f0
  ldr r2, =_sbss
 80023cc:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 80023d0:	20000850 	.word	0x20000850

080023d4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023d4:	e7fe      	b.n	80023d4 <ADC3_IRQHandler>

080023d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e0:	2003      	movs	r0, #3
 80023e2:	f001 fec0 	bl	8004166 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023e6:	200f      	movs	r0, #15
 80023e8:	f7ff f91a 	bl	8001620 <HAL_InitTick>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	71fb      	strb	r3, [r7, #7]
 80023f6:	e001      	b.n	80023fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023f8:	f7ff f8ee 	bl	80015d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023fc:	79fb      	ldrb	r3, [r7, #7]

}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_IncTick+0x1c>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_IncTick+0x20>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4413      	add	r3, r2
 8002416:	4a03      	ldr	r2, [pc, #12]	; (8002424 <HAL_IncTick+0x1c>)
 8002418:	6013      	str	r3, [r2, #0]
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	20000700 	.word	0x20000700
 8002428:	2000020c 	.word	0x2000020c

0800242c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return uwTick;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_GetTick+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000700 	.word	0x20000700

08002444 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	609a      	str	r2, [r3, #8]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3360      	adds	r3, #96	; 0x60
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <LL_ADC_SetOffset+0x44>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	4313      	orrs	r3, r2
 80024dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	03fff000 	.word	0x03fff000

080024f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3360      	adds	r3, #96	; 0x60
 8002502:	461a      	mov	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3360      	adds	r3, #96	; 0x60
 8002530:	461a      	mov	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	431a      	orrs	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002556:	b480      	push	{r7}
 8002558:	b087      	sub	sp, #28
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3360      	adds	r3, #96	; 0x60
 8002566:	461a      	mov	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	431a      	orrs	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3360      	adds	r3, #96	; 0x60
 800259c:	461a      	mov	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	431a      	orrs	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	615a      	str	r2, [r3, #20]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800260e:	b480      	push	{r7}
 8002610:	b087      	sub	sp, #28
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3330      	adds	r3, #48	; 0x30
 800261e:	461a      	mov	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	4413      	add	r3, r2
 800262c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	211f      	movs	r1, #31
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	401a      	ands	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	0e9b      	lsrs	r3, r3, #26
 8002646:	f003 011f 	and.w	r1, r3, #31
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	431a      	orrs	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800265a:	bf00      	nop
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3314      	adds	r3, #20
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	0e5b      	lsrs	r3, r3, #25
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	4413      	add	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	0d1b      	lsrs	r3, r3, #20
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	2107      	movs	r1, #7
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	401a      	ands	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	0d1b      	lsrs	r3, r3, #20
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	431a      	orrs	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d10a      	bne.n	800270e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002704:	431a      	orrs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800270c:	e00a      	b.n	8002724 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271a:	43db      	mvns	r3, r3
 800271c:	401a      	ands	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	407f0000 	.word	0x407f0000

08002734 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 031f 	and.w	r3, r3, #31
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800277c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6093      	str	r3, [r2, #8]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a4:	d101      	bne.n	80027aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f4:	d101      	bne.n	80027fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002818:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <LL_ADC_IsEnabled+0x18>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <LL_ADC_IsEnabled+0x1a>
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002866:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800286a:	f043 0204 	orr.w	r2, r3, #4
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b04      	cmp	r3, #4
 8002890:	d101      	bne.n	8002896 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d101      	bne.n	80028bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028d8:	2300      	movs	r3, #0
 80028da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e1af      	b.n	8002c46 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d109      	bne.n	8002908 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7fe fa3f 	bl	8000d78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff3f 	bl	8002790 <LL_ADC_IsDeepPowerDownEnabled>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff25 	bl	800276c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff5a 	bl	80027e0 <LL_ADC_IsInternalRegulatorEnabled>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d115      	bne.n	800295e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff3e 	bl	80027b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800293c:	4b9f      	ldr	r3, [pc, #636]	; (8002bbc <HAL_ADC_Init+0x2f0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	099b      	lsrs	r3, r3, #6
 8002942:	4a9f      	ldr	r2, [pc, #636]	; (8002bc0 <HAL_ADC_Init+0x2f4>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	3301      	adds	r3, #1
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002950:	e002      	b.n	8002958 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	3b01      	subs	r3, #1
 8002956:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f9      	bne.n	8002952 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff3c 	bl	80027e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10d      	bne.n	800298a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	f043 0210 	orr.w	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ff75 	bl	800287e <LL_ADC_REG_IsConversionOngoing>
 8002994:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f040 8148 	bne.w	8002c34 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 8144 	bne.w	8002c34 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029b4:	f043 0202 	orr.w	r2, r3, #2
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff35 	bl	8002830 <LL_ADC_IsEnabled>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d141      	bne.n	8002a50 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029d4:	d004      	beq.n	80029e0 <HAL_ADC_Init+0x114>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7a      	ldr	r2, [pc, #488]	; (8002bc4 <HAL_ADC_Init+0x2f8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d10f      	bne.n	8002a00 <HAL_ADC_Init+0x134>
 80029e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029e4:	f7ff ff24 	bl	8002830 <LL_ADC_IsEnabled>
 80029e8:	4604      	mov	r4, r0
 80029ea:	4876      	ldr	r0, [pc, #472]	; (8002bc4 <HAL_ADC_Init+0x2f8>)
 80029ec:	f7ff ff20 	bl	8002830 <LL_ADC_IsEnabled>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4323      	orrs	r3, r4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e012      	b.n	8002a26 <HAL_ADC_Init+0x15a>
 8002a00:	4871      	ldr	r0, [pc, #452]	; (8002bc8 <HAL_ADC_Init+0x2fc>)
 8002a02:	f7ff ff15 	bl	8002830 <LL_ADC_IsEnabled>
 8002a06:	4604      	mov	r4, r0
 8002a08:	4870      	ldr	r0, [pc, #448]	; (8002bcc <HAL_ADC_Init+0x300>)
 8002a0a:	f7ff ff11 	bl	8002830 <LL_ADC_IsEnabled>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	431c      	orrs	r4, r3
 8002a12:	486f      	ldr	r0, [pc, #444]	; (8002bd0 <HAL_ADC_Init+0x304>)
 8002a14:	f7ff ff0c 	bl	8002830 <LL_ADC_IsEnabled>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4323      	orrs	r3, r4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d012      	beq.n	8002a50 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a32:	d004      	beq.n	8002a3e <HAL_ADC_Init+0x172>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a62      	ldr	r2, [pc, #392]	; (8002bc4 <HAL_ADC_Init+0x2f8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_Init+0x176>
 8002a3e:	4a65      	ldr	r2, [pc, #404]	; (8002bd4 <HAL_ADC_Init+0x308>)
 8002a40:	e000      	b.n	8002a44 <HAL_ADC_Init+0x178>
 8002a42:	4a65      	ldr	r2, [pc, #404]	; (8002bd8 <HAL_ADC_Init+0x30c>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	f7ff fcfa 	bl	8002444 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7f5b      	ldrb	r3, [r3, #29]
 8002a54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d106      	bne.n	8002a8c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	3b01      	subs	r3, #1
 8002a84:	045b      	lsls	r3, r3, #17
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_ADC_Init+0x310>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	69b9      	ldr	r1, [r7, #24]
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fed1 	bl	800287e <LL_ADC_REG_IsConversionOngoing>
 8002adc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fede 	bl	80028a4 <LL_ADC_INJ_IsConversionOngoing>
 8002ae8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d17f      	bne.n	8002bf0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d17c      	bne.n	8002bf0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002afa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b02:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b12:	f023 0302 	bic.w	r3, r3, #2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	69b9      	ldr	r1, [r7, #24]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d017      	beq.n	8002b58 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b40:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6911      	ldr	r1, [r2, #16]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	430b      	orrs	r3, r1
 8002b52:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002b56:	e013      	b.n	8002b80 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d12a      	bne.n	8002be0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ba0:	4311      	orrs	r1, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bac:	430a      	orrs	r2, r1
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	611a      	str	r2, [r3, #16]
 8002bba:	e019      	b.n	8002bf0 <HAL_ADC_Init+0x324>
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	053e2d63 	.word	0x053e2d63
 8002bc4:	50000100 	.word	0x50000100
 8002bc8:	50000400 	.word	0x50000400
 8002bcc:	50000500 	.word	0x50000500
 8002bd0:	50000600 	.word	0x50000600
 8002bd4:	50000300 	.word	0x50000300
 8002bd8:	50000700 	.word	0x50000700
 8002bdc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10c      	bne.n	8002c12 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f023 010f 	bic.w	r1, r3, #15
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	1e5a      	subs	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c10:	e007      	b.n	8002c22 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 020f 	bic.w	r2, r2, #15
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c32:	e007      	b.n	8002c44 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	f043 0210 	orr.w	r2, r3, #16
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c44:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3724      	adds	r7, #36	; 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd90      	pop	{r4, r7, pc}
 8002c4e:	bf00      	nop

08002c50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c64:	d004      	beq.n	8002c70 <HAL_ADC_Start_DMA+0x20>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a5a      	ldr	r2, [pc, #360]	; (8002dd4 <HAL_ADC_Start_DMA+0x184>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d101      	bne.n	8002c74 <HAL_ADC_Start_DMA+0x24>
 8002c70:	4b59      	ldr	r3, [pc, #356]	; (8002dd8 <HAL_ADC_Start_DMA+0x188>)
 8002c72:	e000      	b.n	8002c76 <HAL_ADC_Start_DMA+0x26>
 8002c74:	4b59      	ldr	r3, [pc, #356]	; (8002ddc <HAL_ADC_Start_DMA+0x18c>)
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fd5c 	bl	8002734 <LL_ADC_GetMultimode>
 8002c7c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fdfb 	bl	800287e <LL_ADC_REG_IsConversionOngoing>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 809b 	bne.w	8002dc6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_Start_DMA+0x4e>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e096      	b.n	8002dcc <HAL_ADC_Start_DMA+0x17c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a4d      	ldr	r2, [pc, #308]	; (8002de0 <HAL_ADC_Start_DMA+0x190>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d008      	beq.n	8002cc2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d002      	beq.n	8002cc2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b09      	cmp	r3, #9
 8002cc0:	d17a      	bne.n	8002db8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 ff4c 	bl	8003b60 <ADC_Enable>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d16d      	bne.n	8002dae <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a3a      	ldr	r2, [pc, #232]	; (8002dd4 <HAL_ADC_Start_DMA+0x184>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d009      	beq.n	8002d04 <HAL_ADC_Start_DMA+0xb4>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a3b      	ldr	r2, [pc, #236]	; (8002de4 <HAL_ADC_Start_DMA+0x194>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d002      	beq.n	8002d00 <HAL_ADC_Start_DMA+0xb0>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	e003      	b.n	8002d08 <HAL_ADC_Start_DMA+0xb8>
 8002d00:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <HAL_ADC_Start_DMA+0x198>)
 8002d02:	e001      	b.n	8002d08 <HAL_ADC_Start_DMA+0xb8>
 8002d04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d002      	beq.n	8002d16 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d006      	beq.n	8002d3c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d32:	f023 0206 	bic.w	r2, r3, #6
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	661a      	str	r2, [r3, #96]	; 0x60
 8002d3a:	e002      	b.n	8002d42 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	4a29      	ldr	r2, [pc, #164]	; (8002dec <HAL_ADC_Start_DMA+0x19c>)
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	4a28      	ldr	r2, [pc, #160]	; (8002df0 <HAL_ADC_Start_DMA+0x1a0>)
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	4a27      	ldr	r2, [pc, #156]	; (8002df4 <HAL_ADC_Start_DMA+0x1a4>)
 8002d58:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	221c      	movs	r2, #28
 8002d60:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0210 	orr.w	r2, r2, #16
 8002d78:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3340      	adds	r3, #64	; 0x40
 8002d94:	4619      	mov	r1, r3
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f001 fabf 	bl	800431c <HAL_DMA_Start_IT>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fd55 	bl	8002856 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002dac:	e00d      	b.n	8002dca <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002db6:	e008      	b.n	8002dca <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002dc4:	e001      	b.n	8002dca <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	50000100 	.word	0x50000100
 8002dd8:	50000300 	.word	0x50000300
 8002ddc:	50000700 	.word	0x50000700
 8002de0:	50000600 	.word	0x50000600
 8002de4:	50000500 	.word	0x50000500
 8002de8:	50000400 	.word	0x50000400
 8002dec:	08003c25 	.word	0x08003c25
 8002df0:	08003cfd 	.word	0x08003cfd
 8002df4:	08003d19 	.word	0x08003d19

08002df8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002e00:	2300      	movs	r3, #0
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e1c:	d004      	beq.n	8002e28 <HAL_ADC_IRQHandler+0x30>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a8e      	ldr	r2, [pc, #568]	; (800305c <HAL_ADC_IRQHandler+0x264>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <HAL_ADC_IRQHandler+0x34>
 8002e28:	4b8d      	ldr	r3, [pc, #564]	; (8003060 <HAL_ADC_IRQHandler+0x268>)
 8002e2a:	e000      	b.n	8002e2e <HAL_ADC_IRQHandler+0x36>
 8002e2c:	4b8d      	ldr	r3, [pc, #564]	; (8003064 <HAL_ADC_IRQHandler+0x26c>)
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fc80 	bl	8002734 <LL_ADC_GetMultimode>
 8002e34:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d017      	beq.n	8002e70 <HAL_ADC_IRQHandler+0x78>
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d012      	beq.n	8002e70 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 ffc0 	bl	8003de8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <HAL_ADC_IRQHandler+0x8c>
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8094 	beq.w	8002fb8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 808e 	beq.w	8002fb8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d105      	bne.n	8002eb4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fb95 	bl	80025e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d072      	beq.n	8002faa <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a64      	ldr	r2, [pc, #400]	; (800305c <HAL_ADC_IRQHandler+0x264>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d009      	beq.n	8002ee2 <HAL_ADC_IRQHandler+0xea>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a65      	ldr	r2, [pc, #404]	; (8003068 <HAL_ADC_IRQHandler+0x270>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d002      	beq.n	8002ede <HAL_ADC_IRQHandler+0xe6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	e003      	b.n	8002ee6 <HAL_ADC_IRQHandler+0xee>
 8002ede:	4b63      	ldr	r3, [pc, #396]	; (800306c <HAL_ADC_IRQHandler+0x274>)
 8002ee0:	e001      	b.n	8002ee6 <HAL_ADC_IRQHandler+0xee>
 8002ee2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d008      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d002      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b09      	cmp	r3, #9
 8002efe:	d104      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	623b      	str	r3, [r7, #32]
 8002f08:	e014      	b.n	8002f34 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a53      	ldr	r2, [pc, #332]	; (800305c <HAL_ADC_IRQHandler+0x264>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d009      	beq.n	8002f28 <HAL_ADC_IRQHandler+0x130>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a53      	ldr	r2, [pc, #332]	; (8003068 <HAL_ADC_IRQHandler+0x270>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d002      	beq.n	8002f24 <HAL_ADC_IRQHandler+0x12c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	e003      	b.n	8002f2c <HAL_ADC_IRQHandler+0x134>
 8002f24:	4b51      	ldr	r3, [pc, #324]	; (800306c <HAL_ADC_IRQHandler+0x274>)
 8002f26:	e001      	b.n	8002f2c <HAL_ADC_IRQHandler+0x134>
 8002f28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f2c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d135      	bne.n	8002faa <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d12e      	bne.n	8002faa <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fc94 	bl	800287e <LL_ADC_REG_IsConversionOngoing>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d11a      	bne.n	8002f92 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 020c 	bic.w	r2, r2, #12
 8002f6a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d112      	bne.n	8002faa <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	f043 0201 	orr.w	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f90:	e00b      	b.n	8002faa <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	f043 0210 	orr.w	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe fada 	bl	8001564 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	220c      	movs	r2, #12
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <HAL_ADC_IRQHandler+0x1d4>
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80b3 	beq.w	800313e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80ad 	beq.w	800313e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d105      	bne.n	8002ffc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fb30 	bl	8002666 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003006:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff faeb 	bl	80025e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003012:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a10      	ldr	r2, [pc, #64]	; (800305c <HAL_ADC_IRQHandler+0x264>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d009      	beq.n	8003032 <HAL_ADC_IRQHandler+0x23a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a11      	ldr	r2, [pc, #68]	; (8003068 <HAL_ADC_IRQHandler+0x270>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d002      	beq.n	800302e <HAL_ADC_IRQHandler+0x236>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	e003      	b.n	8003036 <HAL_ADC_IRQHandler+0x23e>
 800302e:	4b0f      	ldr	r3, [pc, #60]	; (800306c <HAL_ADC_IRQHandler+0x274>)
 8003030:	e001      	b.n	8003036 <HAL_ADC_IRQHandler+0x23e>
 8003032:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	4293      	cmp	r3, r2
 800303c:	d008      	beq.n	8003050 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2b06      	cmp	r3, #6
 8003048:	d002      	beq.n	8003050 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b07      	cmp	r3, #7
 800304e:	d10f      	bne.n	8003070 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	623b      	str	r3, [r7, #32]
 8003058:	e01f      	b.n	800309a <HAL_ADC_IRQHandler+0x2a2>
 800305a:	bf00      	nop
 800305c:	50000100 	.word	0x50000100
 8003060:	50000300 	.word	0x50000300
 8003064:	50000700 	.word	0x50000700
 8003068:	50000500 	.word	0x50000500
 800306c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a8b      	ldr	r2, [pc, #556]	; (80032a4 <HAL_ADC_IRQHandler+0x4ac>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_ADC_IRQHandler+0x296>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a8a      	ldr	r2, [pc, #552]	; (80032a8 <HAL_ADC_IRQHandler+0x4b0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d002      	beq.n	800308a <HAL_ADC_IRQHandler+0x292>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	e003      	b.n	8003092 <HAL_ADC_IRQHandler+0x29a>
 800308a:	4b88      	ldr	r3, [pc, #544]	; (80032ac <HAL_ADC_IRQHandler+0x4b4>)
 800308c:	e001      	b.n	8003092 <HAL_ADC_IRQHandler+0x29a>
 800308e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003092:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d047      	beq.n	8003130 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <HAL_ADC_IRQHandler+0x2c2>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d03f      	beq.n	8003130 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d13a      	bne.n	8003130 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d133      	bne.n	8003130 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d12e      	bne.n	8003130 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fbe4 	bl	80028a4 <LL_ADC_INJ_IsConversionOngoing>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d11a      	bne.n	8003118 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030f0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d112      	bne.n	8003130 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	65da      	str	r2, [r3, #92]	; 0x5c
 8003116:	e00b      	b.n	8003130 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	f043 0210 	orr.w	r2, r3, #16
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003128:	f043 0201 	orr.w	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fe31 	bl	8003d98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2260      	movs	r2, #96	; 0x60
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b00      	cmp	r3, #0
 8003146:	d011      	beq.n	800316c <HAL_ADC_IRQHandler+0x374>
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00c      	beq.n	800316c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f8b4 	bl	80032cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2280      	movs	r2, #128	; 0x80
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d012      	beq.n	800319c <HAL_ADC_IRQHandler+0x3a4>
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fe17 	bl	8003dc0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800319a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d012      	beq.n	80031cc <HAL_ADC_IRQHandler+0x3d4>
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00d      	beq.n	80031cc <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fe09 	bl	8003dd4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d043      	beq.n	800325e <HAL_ADC_IRQHandler+0x466>
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d03e      	beq.n	800325e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d102      	bne.n	80031ee <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80031e8:	2301      	movs	r3, #1
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
 80031ec:	e021      	b.n	8003232 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d015      	beq.n	8003220 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031fc:	d004      	beq.n	8003208 <HAL_ADC_IRQHandler+0x410>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a28      	ldr	r2, [pc, #160]	; (80032a4 <HAL_ADC_IRQHandler+0x4ac>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d101      	bne.n	800320c <HAL_ADC_IRQHandler+0x414>
 8003208:	4b29      	ldr	r3, [pc, #164]	; (80032b0 <HAL_ADC_IRQHandler+0x4b8>)
 800320a:	e000      	b.n	800320e <HAL_ADC_IRQHandler+0x416>
 800320c:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <HAL_ADC_IRQHandler+0x4bc>)
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fa9e 	bl	8002750 <LL_ADC_GetMultiDMATransfer>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800321a:	2301      	movs	r3, #1
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
 800321e:	e008      	b.n	8003232 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800322e:	2301      	movs	r3, #1
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	2b01      	cmp	r3, #1
 8003236:	d10e      	bne.n	8003256 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003248:	f043 0202 	orr.w	r2, r3, #2
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7fe f997 	bl	8001584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2210      	movs	r2, #16
 800325c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003264:	2b00      	cmp	r3, #0
 8003266:	d018      	beq.n	800329a <HAL_ADC_IRQHandler+0x4a2>
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326e:	2b00      	cmp	r3, #0
 8003270:	d013      	beq.n	800329a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003282:	f043 0208 	orr.w	r2, r3, #8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003292:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fd89 	bl	8003dac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800329a:	bf00      	nop
 800329c:	3728      	adds	r7, #40	; 0x28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	50000100 	.word	0x50000100
 80032a8:	50000500 	.word	0x50000500
 80032ac:	50000400 	.word	0x50000400
 80032b0:	50000300 	.word	0x50000300
 80032b4:	50000700 	.word	0x50000700

080032b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b0b6      	sub	sp, #216	; 0xd8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d102      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x24>
 80032fe:	2302      	movs	r3, #2
 8003300:	f000 bc13 	b.w	8003b2a <HAL_ADC_ConfigChannel+0x84a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fab4 	bl	800287e <LL_ADC_REG_IsConversionOngoing>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	f040 83f3 	bne.w	8003b04 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6859      	ldr	r1, [r3, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	f7ff f96f 	bl	800260e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff faa2 	bl	800287e <LL_ADC_REG_IsConversionOngoing>
 800333a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff faae 	bl	80028a4 <LL_ADC_INJ_IsConversionOngoing>
 8003348:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800334c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003350:	2b00      	cmp	r3, #0
 8003352:	f040 81d9 	bne.w	8003708 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003356:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 81d4 	bne.w	8003708 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003368:	d10f      	bne.n	800338a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2200      	movs	r2, #0
 8003374:	4619      	mov	r1, r3
 8003376:	f7ff f989 	bl	800268c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff f91d 	bl	80025c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003388:	e00e      	b.n	80033a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6819      	ldr	r1, [r3, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	461a      	mov	r2, r3
 8003398:	f7ff f978 	bl	800268c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff f90d 	bl	80025c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	08db      	lsrs	r3, r3, #3
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d022      	beq.n	8003410 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6919      	ldr	r1, [r3, #16]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033da:	f7ff f867 	bl	80024ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6919      	ldr	r1, [r3, #16]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f7ff f8b3 	bl	8002556 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6919      	ldr	r1, [r3, #16]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	7f1b      	ldrb	r3, [r3, #28]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d102      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x126>
 8003400:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003404:	e000      	b.n	8003408 <HAL_ADC_ConfigChannel+0x128>
 8003406:	2300      	movs	r3, #0
 8003408:	461a      	mov	r2, r3
 800340a:	f7ff f8bf 	bl	800258c <LL_ADC_SetOffsetSaturation>
 800340e:	e17b      	b.n	8003708 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff f86c 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 800341c:	4603      	mov	r3, r0
 800341e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <HAL_ADC_ConfigChannel+0x15c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff f861 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8003432:	4603      	mov	r3, r0
 8003434:	0e9b      	lsrs	r3, r3, #26
 8003436:	f003 021f 	and.w	r2, r3, #31
 800343a:	e01e      	b.n	800347a <HAL_ADC_ConfigChannel+0x19a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff f856 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8003448:	4603      	mov	r3, r0
 800344a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800345a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800345e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800346a:	2320      	movs	r3, #32
 800346c:	e004      	b.n	8003478 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800346e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003482:	2b00      	cmp	r3, #0
 8003484:	d105      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x1b2>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	0e9b      	lsrs	r3, r3, #26
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	e018      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x1e4>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80034a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80034ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80034b6:	2320      	movs	r3, #32
 80034b8:	e004      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80034ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d106      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff f825 	bl	8002520 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2101      	movs	r1, #1
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff f809 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x222>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe fffe 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 80034f8:	4603      	mov	r3, r0
 80034fa:	0e9b      	lsrs	r3, r3, #26
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	e01e      	b.n	8003540 <HAL_ADC_ConfigChannel+0x260>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2101      	movs	r1, #1
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fff3 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 800350e:	4603      	mov	r3, r0
 8003510:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003518:	fa93 f3a3 	rbit	r3, r3
 800351c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003520:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003528:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003530:	2320      	movs	r3, #32
 8003532:	e004      	b.n	800353e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003548:	2b00      	cmp	r3, #0
 800354a:	d105      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x278>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	0e9b      	lsrs	r3, r3, #26
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	e018      	b.n	800358a <HAL_ADC_ConfigChannel+0x2aa>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003564:	fa93 f3a3 	rbit	r3, r3
 8003568:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800356c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003574:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800357c:	2320      	movs	r3, #32
 800357e:	e004      	b.n	800358a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003580:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800358a:	429a      	cmp	r2, r3
 800358c:	d106      	bne.n	800359c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2200      	movs	r2, #0
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe ffc2 	bl	8002520 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2102      	movs	r1, #2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe ffa6 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x2e8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2102      	movs	r1, #2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe ff9b 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 80035be:	4603      	mov	r3, r0
 80035c0:	0e9b      	lsrs	r3, r3, #26
 80035c2:	f003 021f 	and.w	r2, r3, #31
 80035c6:	e01e      	b.n	8003606 <HAL_ADC_ConfigChannel+0x326>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2102      	movs	r1, #2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe ff90 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80035e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80035ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80035f6:	2320      	movs	r3, #32
 80035f8:	e004      	b.n	8003604 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80035fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360e:	2b00      	cmp	r3, #0
 8003610:	d105      	bne.n	800361e <HAL_ADC_ConfigChannel+0x33e>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	0e9b      	lsrs	r3, r3, #26
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	e016      	b.n	800364c <HAL_ADC_ConfigChannel+0x36c>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003630:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003636:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800363e:	2320      	movs	r3, #32
 8003640:	e004      	b.n	800364c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003642:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800364c:	429a      	cmp	r2, r3
 800364e:	d106      	bne.n	800365e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	2102      	movs	r1, #2
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe ff61 	bl	8002520 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2103      	movs	r1, #3
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe ff45 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 800366a:	4603      	mov	r3, r0
 800366c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <HAL_ADC_ConfigChannel+0x3aa>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2103      	movs	r1, #3
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe ff3a 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8003680:	4603      	mov	r3, r0
 8003682:	0e9b      	lsrs	r3, r3, #26
 8003684:	f003 021f 	and.w	r2, r3, #31
 8003688:	e017      	b.n	80036ba <HAL_ADC_ConfigChannel+0x3da>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2103      	movs	r1, #3
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe ff2f 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8003696:	4603      	mov	r3, r0
 8003698:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80036a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80036a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80036ac:	2320      	movs	r3, #32
 80036ae:	e003      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80036b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d105      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x3f2>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	0e9b      	lsrs	r3, r3, #26
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	e011      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x416>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80036e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80036ea:	2320      	movs	r3, #32
 80036ec:	e003      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80036ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d106      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2200      	movs	r2, #0
 8003700:	2103      	movs	r1, #3
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe ff0c 	bl	8002520 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff f88f 	bl	8002830 <LL_ADC_IsEnabled>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	f040 813d 	bne.w	8003994 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6819      	ldr	r1, [r3, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	461a      	mov	r2, r3
 8003728:	f7fe ffdc 	bl	80026e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4aa2      	ldr	r2, [pc, #648]	; (80039bc <HAL_ADC_ConfigChannel+0x6dc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	f040 812e 	bne.w	8003994 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10b      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x480>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0e9b      	lsrs	r3, r3, #26
 800374e:	3301      	adds	r3, #1
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2b09      	cmp	r3, #9
 8003756:	bf94      	ite	ls
 8003758:	2301      	movls	r3, #1
 800375a:	2300      	movhi	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	e019      	b.n	8003794 <HAL_ADC_ConfigChannel+0x4b4>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003768:	fa93 f3a3 	rbit	r3, r3
 800376c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800376e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003770:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003778:	2320      	movs	r3, #32
 800377a:	e003      	b.n	8003784 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800377c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	3301      	adds	r3, #1
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	2b09      	cmp	r3, #9
 800378c:	bf94      	ite	ls
 800378e:	2301      	movls	r3, #1
 8003790:	2300      	movhi	r3, #0
 8003792:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003794:	2b00      	cmp	r3, #0
 8003796:	d079      	beq.n	800388c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d107      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x4d4>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0e9b      	lsrs	r3, r3, #26
 80037aa:	3301      	adds	r3, #1
 80037ac:	069b      	lsls	r3, r3, #26
 80037ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037b2:	e015      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x500>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80037c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80037cc:	2320      	movs	r3, #32
 80037ce:	e003      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80037d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d2:	fab3 f383 	clz	r3, r3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	3301      	adds	r3, #1
 80037da:	069b      	lsls	r3, r3, #26
 80037dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x520>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	0e9b      	lsrs	r3, r3, #26
 80037f2:	3301      	adds	r3, #1
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	e017      	b.n	8003830 <HAL_ADC_ConfigChannel+0x550>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003808:	fa93 f3a3 	rbit	r3, r3
 800380c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800380e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003810:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003818:	2320      	movs	r3, #32
 800381a:	e003      	b.n	8003824 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800381c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	3301      	adds	r3, #1
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	2101      	movs	r1, #1
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	ea42 0103 	orr.w	r1, r2, r3
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x576>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	0e9b      	lsrs	r3, r3, #26
 8003846:	3301      	adds	r3, #1
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	051b      	lsls	r3, r3, #20
 8003854:	e018      	b.n	8003888 <HAL_ADC_ConfigChannel+0x5a8>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003866:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e003      	b.n	800387a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f003 021f 	and.w	r2, r3, #31
 8003880:	4613      	mov	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4413      	add	r3, r2
 8003886:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003888:	430b      	orrs	r3, r1
 800388a:	e07e      	b.n	800398a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x5c8>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	0e9b      	lsrs	r3, r3, #26
 800389e:	3301      	adds	r3, #1
 80038a0:	069b      	lsls	r3, r3, #26
 80038a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038a6:	e015      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x5f4>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	fa93 f3a3 	rbit	r3, r3
 80038b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80038c0:	2320      	movs	r3, #32
 80038c2:	e003      	b.n	80038cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	fab3 f383 	clz	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	3301      	adds	r3, #1
 80038ce:	069b      	lsls	r3, r3, #26
 80038d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x614>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	0e9b      	lsrs	r3, r3, #26
 80038e6:	3301      	adds	r3, #1
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	2101      	movs	r1, #1
 80038ee:	fa01 f303 	lsl.w	r3, r1, r3
 80038f2:	e017      	b.n	8003924 <HAL_ADC_ConfigChannel+0x644>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	61fb      	str	r3, [r7, #28]
  return result;
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800390c:	2320      	movs	r3, #32
 800390e:	e003      	b.n	8003918 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	3301      	adds	r3, #1
 800391a:	f003 031f 	and.w	r3, r3, #31
 800391e:	2101      	movs	r1, #1
 8003920:	fa01 f303 	lsl.w	r3, r1, r3
 8003924:	ea42 0103 	orr.w	r1, r2, r3
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10d      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x670>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	0e9b      	lsrs	r3, r3, #26
 800393a:	3301      	adds	r3, #1
 800393c:	f003 021f 	and.w	r2, r3, #31
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	3b1e      	subs	r3, #30
 8003948:	051b      	lsls	r3, r3, #20
 800394a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800394e:	e01b      	b.n	8003988 <HAL_ADC_ConfigChannel+0x6a8>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	613b      	str	r3, [r7, #16]
  return result;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003968:	2320      	movs	r3, #32
 800396a:	e003      	b.n	8003974 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	fab3 f383 	clz	r3, r3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	3301      	adds	r3, #1
 8003976:	f003 021f 	and.w	r2, r3, #31
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	3b1e      	subs	r3, #30
 8003982:	051b      	lsls	r3, r3, #20
 8003984:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003988:	430b      	orrs	r3, r1
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	6892      	ldr	r2, [r2, #8]
 800398e:	4619      	mov	r1, r3
 8003990:	f7fe fe7c 	bl	800268c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_ADC_ConfigChannel+0x6e0>)
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80be 	beq.w	8003b1e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039aa:	d004      	beq.n	80039b6 <HAL_ADC_ConfigChannel+0x6d6>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_ADC_ConfigChannel+0x6e4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10a      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x6ec>
 80039b6:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <HAL_ADC_ConfigChannel+0x6e8>)
 80039b8:	e009      	b.n	80039ce <HAL_ADC_ConfigChannel+0x6ee>
 80039ba:	bf00      	nop
 80039bc:	407f0000 	.word	0x407f0000
 80039c0:	80080000 	.word	0x80080000
 80039c4:	50000100 	.word	0x50000100
 80039c8:	50000300 	.word	0x50000300
 80039cc:	4b59      	ldr	r3, [pc, #356]	; (8003b34 <HAL_ADC_ConfigChannel+0x854>)
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe fd5e 	bl	8002490 <LL_ADC_GetCommonPathInternalCh>
 80039d4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a56      	ldr	r2, [pc, #344]	; (8003b38 <HAL_ADC_ConfigChannel+0x858>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_ADC_ConfigChannel+0x70c>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a55      	ldr	r2, [pc, #340]	; (8003b3c <HAL_ADC_ConfigChannel+0x85c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d13a      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d134      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a00:	d005      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0x72e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a4e      	ldr	r2, [pc, #312]	; (8003b40 <HAL_ADC_ConfigChannel+0x860>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	f040 8085 	bne.w	8003b18 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a16:	d004      	beq.n	8003a22 <HAL_ADC_ConfigChannel+0x742>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a49      	ldr	r2, [pc, #292]	; (8003b44 <HAL_ADC_ConfigChannel+0x864>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d101      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x746>
 8003a22:	4a49      	ldr	r2, [pc, #292]	; (8003b48 <HAL_ADC_ConfigChannel+0x868>)
 8003a24:	e000      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x748>
 8003a26:	4a43      	ldr	r2, [pc, #268]	; (8003b34 <HAL_ADC_ConfigChannel+0x854>)
 8003a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f7fe fd19 	bl	800246a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a38:	4b44      	ldr	r3, [pc, #272]	; (8003b4c <HAL_ADC_ConfigChannel+0x86c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	099b      	lsrs	r3, r3, #6
 8003a3e:	4a44      	ldr	r2, [pc, #272]	; (8003b50 <HAL_ADC_ConfigChannel+0x870>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a52:	e002      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f9      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a60:	e05a      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a3b      	ldr	r2, [pc, #236]	; (8003b54 <HAL_ADC_ConfigChannel+0x874>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d125      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x7d8>
 8003a6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11f      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a31      	ldr	r2, [pc, #196]	; (8003b44 <HAL_ADC_ConfigChannel+0x864>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d104      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x7ac>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a34      	ldr	r2, [pc, #208]	; (8003b58 <HAL_ADC_ConfigChannel+0x878>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d047      	beq.n	8003b1c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a94:	d004      	beq.n	8003aa0 <HAL_ADC_ConfigChannel+0x7c0>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2a      	ldr	r2, [pc, #168]	; (8003b44 <HAL_ADC_ConfigChannel+0x864>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d101      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x7c4>
 8003aa0:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <HAL_ADC_ConfigChannel+0x868>)
 8003aa2:	e000      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x7c6>
 8003aa4:	4a23      	ldr	r2, [pc, #140]	; (8003b34 <HAL_ADC_ConfigChannel+0x854>)
 8003aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f7fe fcda 	bl	800246a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ab6:	e031      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a27      	ldr	r2, [pc, #156]	; (8003b5c <HAL_ADC_ConfigChannel+0x87c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d12d      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d127      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <HAL_ADC_ConfigChannel+0x864>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ae0:	d004      	beq.n	8003aec <HAL_ADC_ConfigChannel+0x80c>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <HAL_ADC_ConfigChannel+0x864>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d101      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x810>
 8003aec:	4a16      	ldr	r2, [pc, #88]	; (8003b48 <HAL_ADC_ConfigChannel+0x868>)
 8003aee:	e000      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x812>
 8003af0:	4a10      	ldr	r2, [pc, #64]	; (8003b34 <HAL_ADC_ConfigChannel+0x854>)
 8003af2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003af6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003afa:	4619      	mov	r1, r3
 8003afc:	4610      	mov	r0, r2
 8003afe:	f7fe fcb4 	bl	800246a <LL_ADC_SetCommonPathInternalCh>
 8003b02:	e00c      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003b16:	e002      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	37d8      	adds	r7, #216	; 0xd8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	50000700 	.word	0x50000700
 8003b38:	c3210000 	.word	0xc3210000
 8003b3c:	90c00010 	.word	0x90c00010
 8003b40:	50000600 	.word	0x50000600
 8003b44:	50000100 	.word	0x50000100
 8003b48:	50000300 	.word	0x50000300
 8003b4c:	20000000 	.word	0x20000000
 8003b50:	053e2d63 	.word	0x053e2d63
 8003b54:	c7520000 	.word	0xc7520000
 8003b58:	50000500 	.word	0x50000500
 8003b5c:	cb840000 	.word	0xcb840000

08003b60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe fe5f 	bl	8002830 <LL_ADC_IsEnabled>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d14d      	bne.n	8003c14 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	4b28      	ldr	r3, [pc, #160]	; (8003c20 <ADC_Enable+0xc0>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	f043 0210 	orr.w	r2, r3, #16
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e039      	b.n	8003c16 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fe2e 	bl	8002808 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bac:	f7fe fc3e 	bl	800242c <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bb2:	e028      	b.n	8003c06 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fe fe39 	bl	8002830 <LL_ADC_IsEnabled>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe fe1d 	bl	8002808 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bce:	f7fe fc2d 	bl	800242c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d914      	bls.n	8003c06 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d00d      	beq.n	8003c06 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bee:	f043 0210 	orr.w	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e007      	b.n	8003c16 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d1cf      	bne.n	8003bb4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	8000003f 	.word	0x8000003f

08003c24 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d14b      	bne.n	8003cd6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d021      	beq.n	8003c9c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe fcc3 	bl	80025e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d032      	beq.n	8003cce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d12b      	bne.n	8003cce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d11f      	bne.n	8003cce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c9a:	e018      	b.n	8003cce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d111      	bne.n	8003cce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d105      	bne.n	8003cce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	f043 0201 	orr.w	r2, r3, #1
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7fd fc48 	bl	8001564 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cd4:	e00e      	b.n	8003cf4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7fd fc4e 	bl	8001584 <HAL_ADC_ErrorCallback>
}
 8003ce8:	e004      	b.n	8003cf4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f7ff fad4 	bl	80032b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d36:	f043 0204 	orr.w	r2, r3, #4
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7fd fc20 	bl	8001584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <LL_ADC_IsEnabled>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <LL_ADC_IsEnabled+0x18>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <LL_ADC_IsEnabled+0x1a>
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d101      	bne.n	8003d8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b0a1      	sub	sp, #132	; 0x84
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e0e7      	b.n	8003fea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003e22:	2300      	movs	r3, #0
 8003e24:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003e26:	2300      	movs	r3, #0
 8003e28:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e32:	d102      	bne.n	8003e3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e34:	4b6f      	ldr	r3, [pc, #444]	; (8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	e009      	b.n	8003e4e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6e      	ldr	r2, [pc, #440]	; (8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d102      	bne.n	8003e4a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003e44:	4b6d      	ldr	r3, [pc, #436]	; (8003ffc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	e001      	b.n	8003e4e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	f043 0220 	orr.w	r2, r3, #32
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0be      	b.n	8003fea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff ff7f 	bl	8003d72 <LL_ADC_REG_IsConversionOngoing>
 8003e74:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ff79 	bl	8003d72 <LL_ADC_REG_IsConversionOngoing>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f040 80a0 	bne.w	8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 809c 	bne.w	8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e98:	d004      	beq.n	8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a55      	ldr	r2, [pc, #340]	; (8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ea4:	4b56      	ldr	r3, [pc, #344]	; (8004000 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003ea6:	e000      	b.n	8003eaa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003ea8:	4b56      	ldr	r3, [pc, #344]	; (8004004 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003eaa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d04b      	beq.n	8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ec6:	035b      	lsls	r3, r3, #13
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ece:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ed8:	d004      	beq.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a45      	ldr	r2, [pc, #276]	; (8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d10f      	bne.n	8003f04 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003ee4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ee8:	f7ff ff30 	bl	8003d4c <LL_ADC_IsEnabled>
 8003eec:	4604      	mov	r4, r0
 8003eee:	4841      	ldr	r0, [pc, #260]	; (8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ef0:	f7ff ff2c 	bl	8003d4c <LL_ADC_IsEnabled>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	4323      	orrs	r3, r4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	e012      	b.n	8003f2a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003f04:	483c      	ldr	r0, [pc, #240]	; (8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f06:	f7ff ff21 	bl	8003d4c <LL_ADC_IsEnabled>
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	483b      	ldr	r0, [pc, #236]	; (8003ffc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f0e:	f7ff ff1d 	bl	8003d4c <LL_ADC_IsEnabled>
 8003f12:	4603      	mov	r3, r0
 8003f14:	431c      	orrs	r4, r3
 8003f16:	483c      	ldr	r0, [pc, #240]	; (8004008 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f18:	f7ff ff18 	bl	8003d4c <LL_ADC_IsEnabled>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4323      	orrs	r3, r4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d056      	beq.n	8003fdc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f36:	f023 030f 	bic.w	r3, r3, #15
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	6811      	ldr	r1, [r2, #0]
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	6892      	ldr	r2, [r2, #8]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	431a      	orrs	r2, r3
 8003f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f48:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f4a:	e047      	b.n	8003fdc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f56:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f60:	d004      	beq.n	8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d10f      	bne.n	8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003f6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f70:	f7ff feec 	bl	8003d4c <LL_ADC_IsEnabled>
 8003f74:	4604      	mov	r4, r0
 8003f76:	481f      	ldr	r0, [pc, #124]	; (8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f78:	f7ff fee8 	bl	8003d4c <LL_ADC_IsEnabled>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	4323      	orrs	r3, r4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e012      	b.n	8003fb2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003f8c:	481a      	ldr	r0, [pc, #104]	; (8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f8e:	f7ff fedd 	bl	8003d4c <LL_ADC_IsEnabled>
 8003f92:	4604      	mov	r4, r0
 8003f94:	4819      	ldr	r0, [pc, #100]	; (8003ffc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f96:	f7ff fed9 	bl	8003d4c <LL_ADC_IsEnabled>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	431c      	orrs	r4, r3
 8003f9e:	481a      	ldr	r0, [pc, #104]	; (8004008 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003fa0:	f7ff fed4 	bl	8003d4c <LL_ADC_IsEnabled>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	4323      	orrs	r3, r4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf0c      	ite	eq
 8003fac:	2301      	moveq	r3, #1
 8003fae:	2300      	movne	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d012      	beq.n	8003fdc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003fbe:	f023 030f 	bic.w	r3, r3, #15
 8003fc2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fc4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fc6:	e009      	b.n	8003fdc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	f043 0220 	orr.w	r2, r3, #32
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003fda:	e000      	b.n	8003fde <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fe6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3784      	adds	r7, #132	; 0x84
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd90      	pop	{r4, r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	50000100 	.word	0x50000100
 8003ff8:	50000400 	.word	0x50000400
 8003ffc:	50000500 	.word	0x50000500
 8004000:	50000300 	.word	0x50000300
 8004004:	50000700 	.word	0x50000700
 8004008:	50000600 	.word	0x50000600

0800400c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <__NVIC_SetPriorityGrouping+0x44>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004028:	4013      	ands	r3, r2
 800402a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800403e:	4a04      	ldr	r2, [pc, #16]	; (8004050 <__NVIC_SetPriorityGrouping+0x44>)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	60d3      	str	r3, [r2, #12]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	e000ed00 	.word	0xe000ed00

08004054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004058:	4b04      	ldr	r3, [pc, #16]	; (800406c <__NVIC_GetPriorityGrouping+0x18>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	0a1b      	lsrs	r3, r3, #8
 800405e:	f003 0307 	and.w	r3, r3, #7
}
 8004062:	4618      	mov	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	e000ed00 	.word	0xe000ed00

08004070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	2b00      	cmp	r3, #0
 8004080:	db0b      	blt.n	800409a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	f003 021f 	and.w	r2, r3, #31
 8004088:	4907      	ldr	r1, [pc, #28]	; (80040a8 <__NVIC_EnableIRQ+0x38>)
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2001      	movs	r0, #1
 8004092:	fa00 f202 	lsl.w	r2, r0, r2
 8004096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000e100 	.word	0xe000e100

080040ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	6039      	str	r1, [r7, #0]
 80040b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	db0a      	blt.n	80040d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	490c      	ldr	r1, [pc, #48]	; (80040f8 <__NVIC_SetPriority+0x4c>)
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	0112      	lsls	r2, r2, #4
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	440b      	add	r3, r1
 80040d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040d4:	e00a      	b.n	80040ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	4908      	ldr	r1, [pc, #32]	; (80040fc <__NVIC_SetPriority+0x50>)
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	3b04      	subs	r3, #4
 80040e4:	0112      	lsls	r2, r2, #4
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	440b      	add	r3, r1
 80040ea:	761a      	strb	r2, [r3, #24]
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	e000e100 	.word	0xe000e100
 80040fc:	e000ed00 	.word	0xe000ed00

08004100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004100:	b480      	push	{r7}
 8004102:	b089      	sub	sp, #36	; 0x24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f1c3 0307 	rsb	r3, r3, #7
 800411a:	2b04      	cmp	r3, #4
 800411c:	bf28      	it	cs
 800411e:	2304      	movcs	r3, #4
 8004120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3304      	adds	r3, #4
 8004126:	2b06      	cmp	r3, #6
 8004128:	d902      	bls.n	8004130 <NVIC_EncodePriority+0x30>
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3b03      	subs	r3, #3
 800412e:	e000      	b.n	8004132 <NVIC_EncodePriority+0x32>
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004134:	f04f 32ff 	mov.w	r2, #4294967295
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43da      	mvns	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	401a      	ands	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004148:	f04f 31ff 	mov.w	r1, #4294967295
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	fa01 f303 	lsl.w	r3, r1, r3
 8004152:	43d9      	mvns	r1, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004158:	4313      	orrs	r3, r2
         );
}
 800415a:	4618      	mov	r0, r3
 800415c:	3724      	adds	r7, #36	; 0x24
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff ff4c 	bl	800400c <__NVIC_SetPriorityGrouping>
}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800418a:	f7ff ff63 	bl	8004054 <__NVIC_GetPriorityGrouping>
 800418e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	6978      	ldr	r0, [r7, #20]
 8004196:	f7ff ffb3 	bl	8004100 <NVIC_EncodePriority>
 800419a:	4602      	mov	r2, r0
 800419c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041a0:	4611      	mov	r1, r2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff ff82 	bl	80040ac <__NVIC_SetPriority>
}
 80041a8:	bf00      	nop
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff ff56 	bl	8004070 <__NVIC_EnableIRQ>
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e08d      	b.n	80042fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b47      	ldr	r3, [pc, #284]	; (8004304 <HAL_DMA_Init+0x138>)
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d80f      	bhi.n	800420a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b45      	ldr	r3, [pc, #276]	; (8004308 <HAL_DMA_Init+0x13c>)
 80041f2:	4413      	add	r3, r2
 80041f4:	4a45      	ldr	r2, [pc, #276]	; (800430c <HAL_DMA_Init+0x140>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	009a      	lsls	r2, r3, #2
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a42      	ldr	r2, [pc, #264]	; (8004310 <HAL_DMA_Init+0x144>)
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
 8004208:	e00e      	b.n	8004228 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	4b40      	ldr	r3, [pc, #256]	; (8004314 <HAL_DMA_Init+0x148>)
 8004212:	4413      	add	r3, r2
 8004214:	4a3d      	ldr	r2, [pc, #244]	; (800430c <HAL_DMA_Init+0x140>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	009a      	lsls	r2, r3, #2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a3c      	ldr	r2, [pc, #240]	; (8004318 <HAL_DMA_Init+0x14c>)
 8004226:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800423e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004242:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800424c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004258:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004264:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa76 	bl	800476c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004288:	d102      	bne.n	8004290 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d010      	beq.n	80042d0 <HAL_DMA_Init+0x104>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d80c      	bhi.n	80042d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fa96 	bl	80047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	e008      	b.n	80042e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40020407 	.word	0x40020407
 8004308:	bffdfff8 	.word	0xbffdfff8
 800430c:	cccccccd 	.word	0xcccccccd
 8004310:	40020000 	.word	0x40020000
 8004314:	bffdfbf8 	.word	0xbffdfbf8
 8004318:	40020400 	.word	0x40020400

0800431c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_DMA_Start_IT+0x20>
 8004338:	2302      	movs	r3, #2
 800433a:	e066      	b.n	800440a <HAL_DMA_Start_IT+0xee>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	d155      	bne.n	80043fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0201 	bic.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f9bb 	bl	80046f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 020e 	orr.w	r2, r2, #14
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	e00f      	b.n	80043b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0204 	bic.w	r2, r2, #4
 80043a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 020a 	orr.w	r2, r2, #10
 80043b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e005      	b.n	8004408 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004404:	2302      	movs	r3, #2
 8004406:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004408:	7dfb      	ldrb	r3, [r7, #23]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d005      	beq.n	8004436 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2204      	movs	r2, #4
 800442e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
 8004434:	e037      	b.n	80044a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 020e 	bic.w	r2, r2, #14
 8004444:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004454:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	f003 021f 	and.w	r2, r3, #31
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	2101      	movs	r1, #1
 8004474:	fa01 f202 	lsl.w	r2, r1, r2
 8004478:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004482:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00c      	beq.n	80044a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004496:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800449a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d00d      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2204      	movs	r2, #4
 80044e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	73fb      	strb	r3, [r7, #15]
 80044f6:	e047      	b.n	8004588 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 020e 	bic.w	r2, r2, #14
 8004506:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004522:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004526:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452c:	f003 021f 	and.w	r2, r3, #31
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	2101      	movs	r1, #1
 8004536:	fa01 f202 	lsl.w	r2, r1, r2
 800453a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004544:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00c      	beq.n	8004568 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800455c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004566:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	4798      	blx	r3
    }
  }
  return status;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	2204      	movs	r2, #4
 80045b4:	409a      	lsls	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d026      	beq.n	800460c <HAL_DMA_IRQHandler+0x7a>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d021      	beq.n	800460c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d107      	bne.n	80045e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0204 	bic.w	r2, r2, #4
 80045e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	f003 021f 	and.w	r2, r3, #31
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	2104      	movs	r1, #4
 80045f4:	fa01 f202 	lsl.w	r2, r1, r2
 80045f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d071      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800460a:	e06c      	b.n	80046e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	2202      	movs	r2, #2
 8004616:	409a      	lsls	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d02e      	beq.n	800467e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d029      	beq.n	800467e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10b      	bne.n	8004650 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 020a 	bic.w	r2, r2, #10
 8004646:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004654:	f003 021f 	and.w	r2, r3, #31
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	2102      	movs	r1, #2
 800465e:	fa01 f202 	lsl.w	r2, r1, r2
 8004662:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d038      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800467c:	e033      	b.n	80046e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	2208      	movs	r2, #8
 8004688:	409a      	lsls	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d02a      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b00      	cmp	r3, #0
 800469a:	d025      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 020e 	bic.w	r2, r2, #14
 80046aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b0:	f003 021f 	and.w	r2, r3, #31
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	2101      	movs	r1, #1
 80046ba:	fa01 f202 	lsl.w	r2, r1, r2
 80046be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046e6:	bf00      	nop
 80046e8:	bf00      	nop
}
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004706:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470c:	2b00      	cmp	r3, #0
 800470e:	d004      	beq.n	800471a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004718:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	f003 021f 	and.w	r2, r3, #31
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	2101      	movs	r1, #1
 8004728:	fa01 f202 	lsl.w	r2, r1, r2
 800472c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b10      	cmp	r3, #16
 800473c:	d108      	bne.n	8004750 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800474e:	e007      	b.n	8004760 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	60da      	str	r2, [r3, #12]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	4b16      	ldr	r3, [pc, #88]	; (80047d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800477c:	429a      	cmp	r2, r3
 800477e:	d802      	bhi.n	8004786 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004780:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e001      	b.n	800478a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004786:	4b15      	ldr	r3, [pc, #84]	; (80047dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004788:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	3b08      	subs	r3, #8
 8004796:	4a12      	ldr	r2, [pc, #72]	; (80047e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	009a      	lsls	r2, r3, #2
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4413      	add	r3, r2
 80047ac:	461a      	mov	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a0b      	ldr	r2, [pc, #44]	; (80047e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80047b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	2201      	movs	r2, #1
 80047c0:	409a      	lsls	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047c6:	bf00      	nop
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40020407 	.word	0x40020407
 80047d8:	40020800 	.word	0x40020800
 80047dc:	40020820 	.word	0x40020820
 80047e0:	cccccccd 	.word	0xcccccccd
 80047e4:	40020880 	.word	0x40020880

080047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a08      	ldr	r2, [pc, #32]	; (800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800480a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3b01      	subs	r3, #1
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	2201      	movs	r2, #1
 8004816:	409a      	lsls	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	1000823f 	.word	0x1000823f
 800482c:	40020940 	.word	0x40020940

08004830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800483e:	e15a      	b.n	8004af6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2101      	movs	r1, #1
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	4013      	ands	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 814c 	beq.w	8004af0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	2b01      	cmp	r3, #1
 8004862:	d005      	beq.n	8004870 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800486c:	2b02      	cmp	r3, #2
 800486e:	d130      	bne.n	80048d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	2203      	movs	r2, #3
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4013      	ands	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048a6:	2201      	movs	r2, #1
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43db      	mvns	r3, r3
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4013      	ands	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	091b      	lsrs	r3, r3, #4
 80048bc:	f003 0201 	and.w	r2, r3, #1
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d017      	beq.n	800490e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	2203      	movs	r2, #3
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4013      	ands	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d123      	bne.n	8004962 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	08da      	lsrs	r2, r3, #3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3208      	adds	r2, #8
 8004922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004926:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	220f      	movs	r2, #15
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43db      	mvns	r3, r3
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4013      	ands	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	08da      	lsrs	r2, r3, #3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3208      	adds	r2, #8
 800495c:	6939      	ldr	r1, [r7, #16]
 800495e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	2203      	movs	r2, #3
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4013      	ands	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f003 0203 	and.w	r2, r3, #3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 80a6 	beq.w	8004af0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049a4:	4b5b      	ldr	r3, [pc, #364]	; (8004b14 <HAL_GPIO_Init+0x2e4>)
 80049a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a8:	4a5a      	ldr	r2, [pc, #360]	; (8004b14 <HAL_GPIO_Init+0x2e4>)
 80049aa:	f043 0301 	orr.w	r3, r3, #1
 80049ae:	6613      	str	r3, [r2, #96]	; 0x60
 80049b0:	4b58      	ldr	r3, [pc, #352]	; (8004b14 <HAL_GPIO_Init+0x2e4>)
 80049b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	60bb      	str	r3, [r7, #8]
 80049ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049bc:	4a56      	ldr	r2, [pc, #344]	; (8004b18 <HAL_GPIO_Init+0x2e8>)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	089b      	lsrs	r3, r3, #2
 80049c2:	3302      	adds	r3, #2
 80049c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	220f      	movs	r2, #15
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	43db      	mvns	r3, r3
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4013      	ands	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049e6:	d01f      	beq.n	8004a28 <HAL_GPIO_Init+0x1f8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a4c      	ldr	r2, [pc, #304]	; (8004b1c <HAL_GPIO_Init+0x2ec>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d019      	beq.n	8004a24 <HAL_GPIO_Init+0x1f4>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a4b      	ldr	r2, [pc, #300]	; (8004b20 <HAL_GPIO_Init+0x2f0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d013      	beq.n	8004a20 <HAL_GPIO_Init+0x1f0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a4a      	ldr	r2, [pc, #296]	; (8004b24 <HAL_GPIO_Init+0x2f4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00d      	beq.n	8004a1c <HAL_GPIO_Init+0x1ec>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a49      	ldr	r2, [pc, #292]	; (8004b28 <HAL_GPIO_Init+0x2f8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d007      	beq.n	8004a18 <HAL_GPIO_Init+0x1e8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a48      	ldr	r2, [pc, #288]	; (8004b2c <HAL_GPIO_Init+0x2fc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d101      	bne.n	8004a14 <HAL_GPIO_Init+0x1e4>
 8004a10:	2305      	movs	r3, #5
 8004a12:	e00a      	b.n	8004a2a <HAL_GPIO_Init+0x1fa>
 8004a14:	2306      	movs	r3, #6
 8004a16:	e008      	b.n	8004a2a <HAL_GPIO_Init+0x1fa>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	e006      	b.n	8004a2a <HAL_GPIO_Init+0x1fa>
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e004      	b.n	8004a2a <HAL_GPIO_Init+0x1fa>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e002      	b.n	8004a2a <HAL_GPIO_Init+0x1fa>
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <HAL_GPIO_Init+0x1fa>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	f002 0203 	and.w	r2, r2, #3
 8004a30:	0092      	lsls	r2, r2, #2
 8004a32:	4093      	lsls	r3, r2
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a3a:	4937      	ldr	r1, [pc, #220]	; (8004b18 <HAL_GPIO_Init+0x2e8>)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	089b      	lsrs	r3, r3, #2
 8004a40:	3302      	adds	r3, #2
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a48:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <HAL_GPIO_Init+0x300>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4013      	ands	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a6c:	4a30      	ldr	r2, [pc, #192]	; (8004b30 <HAL_GPIO_Init+0x300>)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a72:	4b2f      	ldr	r3, [pc, #188]	; (8004b30 <HAL_GPIO_Init+0x300>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a96:	4a26      	ldr	r2, [pc, #152]	; (8004b30 <HAL_GPIO_Init+0x300>)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a9c:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <HAL_GPIO_Init+0x300>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ac0:	4a1b      	ldr	r2, [pc, #108]	; (8004b30 <HAL_GPIO_Init+0x300>)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ac6:	4b1a      	ldr	r3, [pc, #104]	; (8004b30 <HAL_GPIO_Init+0x300>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aea:	4a11      	ldr	r2, [pc, #68]	; (8004b30 <HAL_GPIO_Init+0x300>)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	3301      	adds	r3, #1
 8004af4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	fa22 f303 	lsr.w	r3, r2, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f47f ae9d 	bne.w	8004840 <HAL_GPIO_Init+0x10>
  }
}
 8004b06:	bf00      	nop
 8004b08:	bf00      	nop
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	40021000 	.word	0x40021000
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	48000400 	.word	0x48000400
 8004b20:	48000800 	.word	0x48000800
 8004b24:	48000c00 	.word	0x48000c00
 8004b28:	48001000 	.word	0x48001000
 8004b2c:	48001400 	.word	0x48001400
 8004b30:	40010400 	.word	0x40010400

08004b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
 8004b40:	4613      	mov	r3, r2
 8004b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b44:	787b      	ldrb	r3, [r7, #1]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b50:	e002      	b.n	8004b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b52:	887a      	ldrh	r2, [r7, #2]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b6e:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d006      	beq.n	8004b88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b7a:	4a05      	ldr	r2, [pc, #20]	; (8004b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f806 	bl	8004b94 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40010400 	.word	0x40010400

08004b94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d141      	bne.n	8004c3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bba:	4b4b      	ldr	r3, [pc, #300]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc6:	d131      	bne.n	8004c2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bc8:	4b47      	ldr	r3, [pc, #284]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bce:	4a46      	ldr	r2, [pc, #280]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd8:	4b43      	ldr	r3, [pc, #268]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004be0:	4a41      	ldr	r2, [pc, #260]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004be6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004be8:	4b40      	ldr	r3, [pc, #256]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2232      	movs	r2, #50	; 0x32
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	4a3f      	ldr	r2, [pc, #252]	; (8004cf0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	0c9b      	lsrs	r3, r3, #18
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bfe:	e002      	b.n	8004c06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c06:	4b38      	ldr	r3, [pc, #224]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	d102      	bne.n	8004c1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f2      	bne.n	8004c00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c1a:	4b33      	ldr	r3, [pc, #204]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c26:	d158      	bne.n	8004cda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e057      	b.n	8004cdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c32:	4a2d      	ldr	r2, [pc, #180]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c3c:	e04d      	b.n	8004cda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c44:	d141      	bne.n	8004cca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c46:	4b28      	ldr	r3, [pc, #160]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c52:	d131      	bne.n	8004cb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c54:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c5a:	4a23      	ldr	r2, [pc, #140]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c64:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c74:	4b1d      	ldr	r3, [pc, #116]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2232      	movs	r2, #50	; 0x32
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	4a1c      	ldr	r2, [pc, #112]	; (8004cf0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	0c9b      	lsrs	r3, r3, #18
 8004c86:	3301      	adds	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c8a:	e002      	b.n	8004c92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c92:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9e:	d102      	bne.n	8004ca6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f2      	bne.n	8004c8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb2:	d112      	bne.n	8004cda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e011      	b.n	8004cdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cbe:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cc8:	e007      	b.n	8004cda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cca:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cd2:	4a05      	ldr	r2, [pc, #20]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cd8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40007000 	.word	0x40007000
 8004cec:	20000000 	.word	0x20000000
 8004cf0:	431bde83 	.word	0x431bde83

08004cf4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d02:	6093      	str	r3, [r2, #8]
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40007000 	.word	0x40007000

08004d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e306      	b.n	8005334 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d075      	beq.n	8004e1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d32:	4b97      	ldr	r3, [pc, #604]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d3c:	4b94      	ldr	r3, [pc, #592]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b0c      	cmp	r3, #12
 8004d4a:	d102      	bne.n	8004d52 <HAL_RCC_OscConfig+0x3e>
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d002      	beq.n	8004d58 <HAL_RCC_OscConfig+0x44>
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d10b      	bne.n	8004d70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d58:	4b8d      	ldr	r3, [pc, #564]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d05b      	beq.n	8004e1c <HAL_RCC_OscConfig+0x108>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d157      	bne.n	8004e1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e2e1      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d78:	d106      	bne.n	8004d88 <HAL_RCC_OscConfig+0x74>
 8004d7a:	4b85      	ldr	r3, [pc, #532]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a84      	ldr	r2, [pc, #528]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	e01d      	b.n	8004dc4 <HAL_RCC_OscConfig+0xb0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d90:	d10c      	bne.n	8004dac <HAL_RCC_OscConfig+0x98>
 8004d92:	4b7f      	ldr	r3, [pc, #508]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a7e      	ldr	r2, [pc, #504]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	4b7c      	ldr	r3, [pc, #496]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a7b      	ldr	r2, [pc, #492]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e00b      	b.n	8004dc4 <HAL_RCC_OscConfig+0xb0>
 8004dac:	4b78      	ldr	r3, [pc, #480]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a77      	ldr	r2, [pc, #476]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	4b75      	ldr	r3, [pc, #468]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a74      	ldr	r2, [pc, #464]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d013      	beq.n	8004df4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fd fb2e 	bl	800242c <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd4:	f7fd fb2a 	bl	800242c <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b64      	cmp	r3, #100	; 0x64
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e2a6      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de6:	4b6a      	ldr	r3, [pc, #424]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0xc0>
 8004df2:	e014      	b.n	8004e1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fd fb1a 	bl	800242c <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dfc:	f7fd fb16 	bl	800242c <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	; 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e292      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e0e:	4b60      	ldr	r3, [pc, #384]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0xe8>
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d075      	beq.n	8004f16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e2a:	4b59      	ldr	r3, [pc, #356]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
 8004e32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e34:	4b56      	ldr	r3, [pc, #344]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b0c      	cmp	r3, #12
 8004e42:	d102      	bne.n	8004e4a <HAL_RCC_OscConfig+0x136>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d002      	beq.n	8004e50 <HAL_RCC_OscConfig+0x13c>
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d11f      	bne.n	8004e90 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e50:	4b4f      	ldr	r3, [pc, #316]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_OscConfig+0x154>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e265      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e68:	4b49      	ldr	r3, [pc, #292]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	061b      	lsls	r3, r3, #24
 8004e76:	4946      	ldr	r1, [pc, #280]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e7c:	4b45      	ldr	r3, [pc, #276]	; (8004f94 <HAL_RCC_OscConfig+0x280>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fc fbcd 	bl	8001620 <HAL_InitTick>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d043      	beq.n	8004f14 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e251      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d023      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e98:	4b3d      	ldr	r3, [pc, #244]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a3c      	ldr	r2, [pc, #240]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea4:	f7fd fac2 	bl	800242c <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eac:	f7fd fabe 	bl	800242c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e23a      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ebe:	4b34      	ldr	r3, [pc, #208]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eca:	4b31      	ldr	r3, [pc, #196]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	061b      	lsls	r3, r3, #24
 8004ed8:	492d      	ldr	r1, [pc, #180]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	604b      	str	r3, [r1, #4]
 8004ede:	e01a      	b.n	8004f16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ee0:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2a      	ldr	r2, [pc, #168]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004ee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fd fa9e 	bl	800242c <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef4:	f7fd fa9a 	bl	800242c <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e216      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f06:	4b22      	ldr	r3, [pc, #136]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x1e0>
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d041      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01c      	beq.n	8004f64 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f2a:	4b19      	ldr	r3, [pc, #100]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f30:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004f32:	f043 0301 	orr.w	r3, r3, #1
 8004f36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3a:	f7fd fa77 	bl	800242c <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f42:	f7fd fa73 	bl	800242c <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e1ef      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f54:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0ef      	beq.n	8004f42 <HAL_RCC_OscConfig+0x22e>
 8004f62:	e020      	b.n	8004fa6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f64:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6a:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f74:	f7fd fa5a 	bl	800242c <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f7a:	e00d      	b.n	8004f98 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7c:	f7fd fa56 	bl	800242c <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d906      	bls.n	8004f98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e1d2      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000
 8004f94:	20000208 	.word	0x20000208
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f98:	4b8c      	ldr	r3, [pc, #560]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8004f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1ea      	bne.n	8004f7c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80a6 	beq.w	8005100 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fb8:	4b84      	ldr	r3, [pc, #528]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x2b4>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <HAL_RCC_OscConfig+0x2b6>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00d      	beq.n	8004fea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fce:	4b7f      	ldr	r3, [pc, #508]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	4a7e      	ldr	r2, [pc, #504]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8004fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8004fda:	4b7c      	ldr	r3, [pc, #496]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fea:	4b79      	ldr	r3, [pc, #484]	; (80051d0 <HAL_RCC_OscConfig+0x4bc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d118      	bne.n	8005028 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ff6:	4b76      	ldr	r3, [pc, #472]	; (80051d0 <HAL_RCC_OscConfig+0x4bc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a75      	ldr	r2, [pc, #468]	; (80051d0 <HAL_RCC_OscConfig+0x4bc>)
 8004ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005002:	f7fd fa13 	bl	800242c <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800500a:	f7fd fa0f 	bl	800242c <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e18b      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800501c:	4b6c      	ldr	r3, [pc, #432]	; (80051d0 <HAL_RCC_OscConfig+0x4bc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0f0      	beq.n	800500a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d108      	bne.n	8005042 <HAL_RCC_OscConfig+0x32e>
 8005030:	4b66      	ldr	r3, [pc, #408]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	4a65      	ldr	r2, [pc, #404]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005040:	e024      	b.n	800508c <HAL_RCC_OscConfig+0x378>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b05      	cmp	r3, #5
 8005048:	d110      	bne.n	800506c <HAL_RCC_OscConfig+0x358>
 800504a:	4b60      	ldr	r3, [pc, #384]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 800504c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005050:	4a5e      	ldr	r2, [pc, #376]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005052:	f043 0304 	orr.w	r3, r3, #4
 8005056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800505a:	4b5c      	ldr	r3, [pc, #368]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	4a5a      	ldr	r2, [pc, #360]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800506a:	e00f      	b.n	800508c <HAL_RCC_OscConfig+0x378>
 800506c:	4b57      	ldr	r3, [pc, #348]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	4a56      	ldr	r2, [pc, #344]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800507c:	4b53      	ldr	r3, [pc, #332]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	4a52      	ldr	r2, [pc, #328]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005084:	f023 0304 	bic.w	r3, r3, #4
 8005088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d016      	beq.n	80050c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005094:	f7fd f9ca 	bl	800242c <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fd f9c6 	bl	800242c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e140      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b2:	4b46      	ldr	r3, [pc, #280]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0ed      	beq.n	800509c <HAL_RCC_OscConfig+0x388>
 80050c0:	e015      	b.n	80050ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c2:	f7fd f9b3 	bl	800242c <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fd f9af 	bl	800242c <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e129      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050e0:	4b3a      	ldr	r3, [pc, #232]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1ed      	bne.n	80050ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050ee:	7ffb      	ldrb	r3, [r7, #31]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d105      	bne.n	8005100 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f4:	4b35      	ldr	r3, [pc, #212]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 80050f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f8:	4a34      	ldr	r2, [pc, #208]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 80050fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b00      	cmp	r3, #0
 800510a:	d03c      	beq.n	8005186 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01c      	beq.n	800514e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005114:	4b2d      	ldr	r3, [pc, #180]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005116:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800511a:	4a2c      	ldr	r2, [pc, #176]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005124:	f7fd f982 	bl	800242c <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800512c:	f7fd f97e 	bl	800242c <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e0fa      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800513e:	4b23      	ldr	r3, [pc, #140]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005140:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0ef      	beq.n	800512c <HAL_RCC_OscConfig+0x418>
 800514c:	e01b      	b.n	8005186 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800514e:	4b1f      	ldr	r3, [pc, #124]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005154:	4a1d      	ldr	r2, [pc, #116]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fd f965 	bl	800242c <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005166:	f7fd f961 	bl	800242c <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e0dd      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005178:	4b14      	ldr	r3, [pc, #80]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 800517a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1ef      	bne.n	8005166 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80d1 	beq.w	8005332 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005190:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 030c 	and.w	r3, r3, #12
 8005198:	2b0c      	cmp	r3, #12
 800519a:	f000 808b 	beq.w	80052b4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d15e      	bne.n	8005264 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a08      	ldr	r2, [pc, #32]	; (80051cc <HAL_RCC_OscConfig+0x4b8>)
 80051ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b2:	f7fd f93b 	bl	800242c <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b8:	e00c      	b.n	80051d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ba:	f7fd f937 	bl	800242c <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d905      	bls.n	80051d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e0b3      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
 80051cc:	40021000 	.word	0x40021000
 80051d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d4:	4b59      	ldr	r3, [pc, #356]	; (800533c <HAL_RCC_OscConfig+0x628>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1ec      	bne.n	80051ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051e0:	4b56      	ldr	r3, [pc, #344]	; (800533c <HAL_RCC_OscConfig+0x628>)
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	4b56      	ldr	r3, [pc, #344]	; (8005340 <HAL_RCC_OscConfig+0x62c>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6a11      	ldr	r1, [r2, #32]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051f0:	3a01      	subs	r2, #1
 80051f2:	0112      	lsls	r2, r2, #4
 80051f4:	4311      	orrs	r1, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80051fa:	0212      	lsls	r2, r2, #8
 80051fc:	4311      	orrs	r1, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005202:	0852      	lsrs	r2, r2, #1
 8005204:	3a01      	subs	r2, #1
 8005206:	0552      	lsls	r2, r2, #21
 8005208:	4311      	orrs	r1, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800520e:	0852      	lsrs	r2, r2, #1
 8005210:	3a01      	subs	r2, #1
 8005212:	0652      	lsls	r2, r2, #25
 8005214:	4311      	orrs	r1, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800521a:	06d2      	lsls	r2, r2, #27
 800521c:	430a      	orrs	r2, r1
 800521e:	4947      	ldr	r1, [pc, #284]	; (800533c <HAL_RCC_OscConfig+0x628>)
 8005220:	4313      	orrs	r3, r2
 8005222:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005224:	4b45      	ldr	r3, [pc, #276]	; (800533c <HAL_RCC_OscConfig+0x628>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a44      	ldr	r2, [pc, #272]	; (800533c <HAL_RCC_OscConfig+0x628>)
 800522a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800522e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005230:	4b42      	ldr	r3, [pc, #264]	; (800533c <HAL_RCC_OscConfig+0x628>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a41      	ldr	r2, [pc, #260]	; (800533c <HAL_RCC_OscConfig+0x628>)
 8005236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800523a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7fd f8f6 	bl	800242c <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005244:	f7fd f8f2 	bl	800242c <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e06e      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005256:	4b39      	ldr	r3, [pc, #228]	; (800533c <HAL_RCC_OscConfig+0x628>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0x530>
 8005262:	e066      	b.n	8005332 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005264:	4b35      	ldr	r3, [pc, #212]	; (800533c <HAL_RCC_OscConfig+0x628>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a34      	ldr	r2, [pc, #208]	; (800533c <HAL_RCC_OscConfig+0x628>)
 800526a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800526e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005270:	4b32      	ldr	r3, [pc, #200]	; (800533c <HAL_RCC_OscConfig+0x628>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4a31      	ldr	r2, [pc, #196]	; (800533c <HAL_RCC_OscConfig+0x628>)
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800527c:	4b2f      	ldr	r3, [pc, #188]	; (800533c <HAL_RCC_OscConfig+0x628>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4a2e      	ldr	r2, [pc, #184]	; (800533c <HAL_RCC_OscConfig+0x628>)
 8005282:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800528a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fd f8ce 	bl	800242c <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005294:	f7fd f8ca 	bl	800242c <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e046      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a6:	4b25      	ldr	r3, [pc, #148]	; (800533c <HAL_RCC_OscConfig+0x628>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x580>
 80052b2:	e03e      	b.n	8005332 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e039      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80052c0:	4b1e      	ldr	r3, [pc, #120]	; (800533c <HAL_RCC_OscConfig+0x628>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f003 0203 	and.w	r2, r3, #3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d12c      	bne.n	800532e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	3b01      	subs	r3, #1
 80052e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d123      	bne.n	800532e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d11b      	bne.n	800532e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005302:	429a      	cmp	r2, r3
 8005304:	d113      	bne.n	800532e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	3b01      	subs	r3, #1
 8005314:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005316:	429a      	cmp	r2, r3
 8005318:	d109      	bne.n	800532e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	085b      	lsrs	r3, r3, #1
 8005326:	3b01      	subs	r3, #1
 8005328:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800532a:	429a      	cmp	r2, r3
 800532c:	d001      	beq.n	8005332 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40021000 	.word	0x40021000
 8005340:	019f800c 	.word	0x019f800c

08005344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e11e      	b.n	800559a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800535c:	4b91      	ldr	r3, [pc, #580]	; (80055a4 <HAL_RCC_ClockConfig+0x260>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d910      	bls.n	800538c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536a:	4b8e      	ldr	r3, [pc, #568]	; (80055a4 <HAL_RCC_ClockConfig+0x260>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f023 020f 	bic.w	r2, r3, #15
 8005372:	498c      	ldr	r1, [pc, #560]	; (80055a4 <HAL_RCC_ClockConfig+0x260>)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	4313      	orrs	r3, r2
 8005378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800537a:	4b8a      	ldr	r3, [pc, #552]	; (80055a4 <HAL_RCC_ClockConfig+0x260>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d001      	beq.n	800538c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e106      	b.n	800559a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d073      	beq.n	8005480 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b03      	cmp	r3, #3
 800539e:	d129      	bne.n	80053f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053a0:	4b81      	ldr	r3, [pc, #516]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0f4      	b.n	800559a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80053b0:	f000 f9d0 	bl	8005754 <RCC_GetSysClockFreqFromPLLSource>
 80053b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4a7c      	ldr	r2, [pc, #496]	; (80055ac <HAL_RCC_ClockConfig+0x268>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d93f      	bls.n	800543e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053be:	4b7a      	ldr	r3, [pc, #488]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d009      	beq.n	80053de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d033      	beq.n	800543e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d12f      	bne.n	800543e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053de:	4b72      	ldr	r3, [pc, #456]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053e6:	4a70      	ldr	r2, [pc, #448]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 80053e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	e024      	b.n	800543e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d107      	bne.n	800540c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053fc:	4b6a      	ldr	r3, [pc, #424]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d109      	bne.n	800541c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0c6      	b.n	800559a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800540c:	4b66      	ldr	r3, [pc, #408]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e0be      	b.n	800559a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800541c:	f000 f8ce 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 8005420:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4a61      	ldr	r2, [pc, #388]	; (80055ac <HAL_RCC_ClockConfig+0x268>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d909      	bls.n	800543e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800542a:	4b5f      	ldr	r3, [pc, #380]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005432:	4a5d      	ldr	r2, [pc, #372]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 8005434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005438:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800543a:	2380      	movs	r3, #128	; 0x80
 800543c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800543e:	4b5a      	ldr	r3, [pc, #360]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f023 0203 	bic.w	r2, r3, #3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	4957      	ldr	r1, [pc, #348]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 800544c:	4313      	orrs	r3, r2
 800544e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005450:	f7fc ffec 	bl	800242c <HAL_GetTick>
 8005454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005456:	e00a      	b.n	800546e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005458:	f7fc ffe8 	bl	800242c <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f241 3288 	movw	r2, #5000	; 0x1388
 8005466:	4293      	cmp	r3, r2
 8005468:	d901      	bls.n	800546e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e095      	b.n	800559a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	4b4e      	ldr	r3, [pc, #312]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 020c 	and.w	r2, r3, #12
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	429a      	cmp	r2, r3
 800547e:	d1eb      	bne.n	8005458 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d023      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005498:	4b43      	ldr	r3, [pc, #268]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	4a42      	ldr	r2, [pc, #264]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 800549e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d007      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80054b0:	4b3d      	ldr	r3, [pc, #244]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80054b8:	4a3b      	ldr	r2, [pc, #236]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 80054ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c0:	4b39      	ldr	r3, [pc, #228]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4936      	ldr	r1, [pc, #216]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b80      	cmp	r3, #128	; 0x80
 80054d8:	d105      	bne.n	80054e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054da:	4b33      	ldr	r3, [pc, #204]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	4a32      	ldr	r2, [pc, #200]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 80054e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054e6:	4b2f      	ldr	r3, [pc, #188]	; (80055a4 <HAL_RCC_ClockConfig+0x260>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d21d      	bcs.n	8005530 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f4:	4b2b      	ldr	r3, [pc, #172]	; (80055a4 <HAL_RCC_ClockConfig+0x260>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f023 020f 	bic.w	r2, r3, #15
 80054fc:	4929      	ldr	r1, [pc, #164]	; (80055a4 <HAL_RCC_ClockConfig+0x260>)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	4313      	orrs	r3, r2
 8005502:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005504:	f7fc ff92 	bl	800242c <HAL_GetTick>
 8005508:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800550a:	e00a      	b.n	8005522 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800550c:	f7fc ff8e 	bl	800242c <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	; 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e03b      	b.n	800559a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005522:	4b20      	ldr	r3, [pc, #128]	; (80055a4 <HAL_RCC_ClockConfig+0x260>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d1ed      	bne.n	800550c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800553c:	4b1a      	ldr	r3, [pc, #104]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4917      	ldr	r1, [pc, #92]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 800554a:	4313      	orrs	r3, r2
 800554c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d009      	beq.n	800556e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800555a:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	490f      	ldr	r1, [pc, #60]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 800556a:	4313      	orrs	r3, r2
 800556c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800556e:	f000 f825 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 8005572:	4602      	mov	r2, r0
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <HAL_RCC_ClockConfig+0x264>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	091b      	lsrs	r3, r3, #4
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	490c      	ldr	r1, [pc, #48]	; (80055b0 <HAL_RCC_ClockConfig+0x26c>)
 8005580:	5ccb      	ldrb	r3, [r1, r3]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	fa22 f303 	lsr.w	r3, r2, r3
 800558a:	4a0a      	ldr	r2, [pc, #40]	; (80055b4 <HAL_RCC_ClockConfig+0x270>)
 800558c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800558e:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <HAL_RCC_ClockConfig+0x274>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f7fc f844 	bl	8001620 <HAL_InitTick>
 8005598:	4603      	mov	r3, r0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40022000 	.word	0x40022000
 80055a8:	40021000 	.word	0x40021000
 80055ac:	04c4b400 	.word	0x04c4b400
 80055b0:	0800b1bc 	.word	0x0800b1bc
 80055b4:	20000000 	.word	0x20000000
 80055b8:	20000208 	.word	0x20000208

080055bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055c2:	4b2c      	ldr	r3, [pc, #176]	; (8005674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 030c 	and.w	r3, r3, #12
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d102      	bne.n	80055d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055ce:	4b2a      	ldr	r3, [pc, #168]	; (8005678 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	e047      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055d4:	4b27      	ldr	r3, [pc, #156]	; (8005674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 030c 	and.w	r3, r3, #12
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d102      	bne.n	80055e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055e0:	4b26      	ldr	r3, [pc, #152]	; (800567c <HAL_RCC_GetSysClockFreq+0xc0>)
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	e03e      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055e6:	4b23      	ldr	r3, [pc, #140]	; (8005674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
 80055ee:	2b0c      	cmp	r3, #12
 80055f0:	d136      	bne.n	8005660 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055f2:	4b20      	ldr	r3, [pc, #128]	; (8005674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055fc:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	3301      	adds	r3, #1
 8005608:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d10c      	bne.n	800562a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005610:	4a1a      	ldr	r2, [pc, #104]	; (800567c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	4a16      	ldr	r2, [pc, #88]	; (8005674 <HAL_RCC_GetSysClockFreq+0xb8>)
 800561a:	68d2      	ldr	r2, [r2, #12]
 800561c:	0a12      	lsrs	r2, r2, #8
 800561e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	617b      	str	r3, [r7, #20]
      break;
 8005628:	e00c      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800562a:	4a13      	ldr	r2, [pc, #76]	; (8005678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005632:	4a10      	ldr	r2, [pc, #64]	; (8005674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005634:	68d2      	ldr	r2, [r2, #12]
 8005636:	0a12      	lsrs	r2, r2, #8
 8005638:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800563c:	fb02 f303 	mul.w	r3, r2, r3
 8005640:	617b      	str	r3, [r7, #20]
      break;
 8005642:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	0e5b      	lsrs	r3, r3, #25
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	3301      	adds	r3, #1
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	fbb2 f3f3 	udiv	r3, r2, r3
 800565c:	613b      	str	r3, [r7, #16]
 800565e:	e001      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005664:	693b      	ldr	r3, [r7, #16]
}
 8005666:	4618      	mov	r0, r3
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40021000 	.word	0x40021000
 8005678:	00f42400 	.word	0x00f42400
 800567c:	016e3600 	.word	0x016e3600

08005680 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005684:	4b03      	ldr	r3, [pc, #12]	; (8005694 <HAL_RCC_GetHCLKFreq+0x14>)
 8005686:	681b      	ldr	r3, [r3, #0]
}
 8005688:	4618      	mov	r0, r3
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20000000 	.word	0x20000000

08005698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800569c:	f7ff fff0 	bl	8005680 <HAL_RCC_GetHCLKFreq>
 80056a0:	4602      	mov	r2, r0
 80056a2:	4b06      	ldr	r3, [pc, #24]	; (80056bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	4904      	ldr	r1, [pc, #16]	; (80056c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056ae:	5ccb      	ldrb	r3, [r1, r3]
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40021000 	.word	0x40021000
 80056c0:	0800b1cc 	.word	0x0800b1cc

080056c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056c8:	f7ff ffda 	bl	8005680 <HAL_RCC_GetHCLKFreq>
 80056cc:	4602      	mov	r2, r0
 80056ce:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	0adb      	lsrs	r3, r3, #11
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	4904      	ldr	r1, [pc, #16]	; (80056ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80056da:	5ccb      	ldrb	r3, [r1, r3]
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40021000 	.word	0x40021000
 80056ec:	0800b1cc 	.word	0x0800b1cc

080056f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	220f      	movs	r2, #15
 80056fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005700:	4b12      	ldr	r3, [pc, #72]	; (800574c <HAL_RCC_GetClockConfig+0x5c>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 0203 	and.w	r2, r3, #3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800570c:	4b0f      	ldr	r3, [pc, #60]	; (800574c <HAL_RCC_GetClockConfig+0x5c>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005718:	4b0c      	ldr	r3, [pc, #48]	; (800574c <HAL_RCC_GetClockConfig+0x5c>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005724:	4b09      	ldr	r3, [pc, #36]	; (800574c <HAL_RCC_GetClockConfig+0x5c>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	08db      	lsrs	r3, r3, #3
 800572a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005732:	4b07      	ldr	r3, [pc, #28]	; (8005750 <HAL_RCC_GetClockConfig+0x60>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 020f 	and.w	r2, r3, #15
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	601a      	str	r2, [r3, #0]
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40021000 	.word	0x40021000
 8005750:	40022000 	.word	0x40022000

08005754 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800575a:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005764:	4b1b      	ldr	r3, [pc, #108]	; (80057d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	3301      	adds	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b03      	cmp	r3, #3
 8005776:	d10c      	bne.n	8005792 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005778:	4a17      	ldr	r2, [pc, #92]	; (80057d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005780:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005782:	68d2      	ldr	r2, [r2, #12]
 8005784:	0a12      	lsrs	r2, r2, #8
 8005786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	617b      	str	r3, [r7, #20]
    break;
 8005790:	e00c      	b.n	80057ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005792:	4a12      	ldr	r2, [pc, #72]	; (80057dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	fbb2 f3f3 	udiv	r3, r2, r3
 800579a:	4a0e      	ldr	r2, [pc, #56]	; (80057d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800579c:	68d2      	ldr	r2, [r2, #12]
 800579e:	0a12      	lsrs	r2, r2, #8
 80057a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
 80057a8:	617b      	str	r3, [r7, #20]
    break;
 80057aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057ac:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	0e5b      	lsrs	r3, r3, #25
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	3301      	adds	r3, #1
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80057c6:	687b      	ldr	r3, [r7, #4]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	40021000 	.word	0x40021000
 80057d8:	016e3600 	.word	0x016e3600
 80057dc:	00f42400 	.word	0x00f42400

080057e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057e8:	2300      	movs	r3, #0
 80057ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057ec:	2300      	movs	r3, #0
 80057ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 8098 	beq.w	800592e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057fe:	2300      	movs	r3, #0
 8005800:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005802:	4b43      	ldr	r3, [pc, #268]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10d      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800580e:	4b40      	ldr	r3, [pc, #256]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005812:	4a3f      	ldr	r2, [pc, #252]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005818:	6593      	str	r3, [r2, #88]	; 0x58
 800581a:	4b3d      	ldr	r3, [pc, #244]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800581c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005822:	60bb      	str	r3, [r7, #8]
 8005824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005826:	2301      	movs	r3, #1
 8005828:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800582a:	4b3a      	ldr	r3, [pc, #232]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a39      	ldr	r2, [pc, #228]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005834:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005836:	f7fc fdf9 	bl	800242c <HAL_GetTick>
 800583a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800583c:	e009      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583e:	f7fc fdf5 	bl	800242c <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d902      	bls.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	74fb      	strb	r3, [r7, #19]
        break;
 8005850:	e005      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005852:	4b30      	ldr	r3, [pc, #192]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0ef      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800585e:	7cfb      	ldrb	r3, [r7, #19]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d159      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005864:	4b2a      	ldr	r3, [pc, #168]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01e      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	429a      	cmp	r2, r3
 800587e:	d019      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005880:	4b23      	ldr	r3, [pc, #140]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800588c:	4b20      	ldr	r3, [pc, #128]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	4a1f      	ldr	r2, [pc, #124]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800589c:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a2:	4a1b      	ldr	r2, [pc, #108]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058ac:	4a18      	ldr	r2, [pc, #96]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d016      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058be:	f7fc fdb5 	bl	800242c <HAL_GetTick>
 80058c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058c4:	e00b      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c6:	f7fc fdb1 	bl	800242c <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d902      	bls.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	74fb      	strb	r3, [r7, #19]
            break;
 80058dc:	e006      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058de:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0ec      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80058ec:	7cfb      	ldrb	r3, [r7, #19]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10b      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058f2:	4b07      	ldr	r3, [pc, #28]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005900:	4903      	ldr	r1, [pc, #12]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005908:	e008      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800590a:	7cfb      	ldrb	r3, [r7, #19]
 800590c:	74bb      	strb	r3, [r7, #18]
 800590e:	e005      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005910:	40021000 	.word	0x40021000
 8005914:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005918:	7cfb      	ldrb	r3, [r7, #19]
 800591a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800591c:	7c7b      	ldrb	r3, [r7, #17]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d105      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005922:	4ba7      	ldr	r3, [pc, #668]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005926:	4aa6      	ldr	r2, [pc, #664]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800592c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800593a:	4ba1      	ldr	r3, [pc, #644]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005940:	f023 0203 	bic.w	r2, r3, #3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	499d      	ldr	r1, [pc, #628]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800595c:	4b98      	ldr	r3, [pc, #608]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	f023 020c 	bic.w	r2, r3, #12
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	4995      	ldr	r1, [pc, #596]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800597e:	4b90      	ldr	r3, [pc, #576]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005984:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	498c      	ldr	r1, [pc, #560]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059a0:	4b87      	ldr	r3, [pc, #540]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	4984      	ldr	r1, [pc, #528]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059c2:	4b7f      	ldr	r3, [pc, #508]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	497b      	ldr	r1, [pc, #492]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059e4:	4b76      	ldr	r3, [pc, #472]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	4973      	ldr	r1, [pc, #460]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a06:	4b6e      	ldr	r3, [pc, #440]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	496a      	ldr	r1, [pc, #424]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00a      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a28:	4b65      	ldr	r3, [pc, #404]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	4962      	ldr	r1, [pc, #392]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a4a:	4b5d      	ldr	r3, [pc, #372]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	4959      	ldr	r1, [pc, #356]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00a      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a6c:	4b54      	ldr	r3, [pc, #336]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a72:	f023 0203 	bic.w	r2, r3, #3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	4951      	ldr	r1, [pc, #324]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a8e:	4b4c      	ldr	r3, [pc, #304]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	4948      	ldr	r1, [pc, #288]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d015      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ab0:	4b43      	ldr	r3, [pc, #268]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	4940      	ldr	r1, [pc, #256]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ace:	d105      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ad0:	4b3b      	ldr	r3, [pc, #236]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4a3a      	ldr	r2, [pc, #232]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ada:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d015      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ae8:	4b35      	ldr	r3, [pc, #212]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af6:	4932      	ldr	r1, [pc, #200]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b06:	d105      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b08:	4b2d      	ldr	r3, [pc, #180]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4a2c      	ldr	r2, [pc, #176]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d015      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b20:	4b27      	ldr	r3, [pc, #156]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	4924      	ldr	r1, [pc, #144]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b3e:	d105      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b40:	4b1f      	ldr	r3, [pc, #124]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4a1e      	ldr	r2, [pc, #120]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d015      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b58:	4b19      	ldr	r3, [pc, #100]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	4916      	ldr	r1, [pc, #88]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b76:	d105      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b78:	4b11      	ldr	r3, [pc, #68]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4a10      	ldr	r2, [pc, #64]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d019      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	4908      	ldr	r1, [pc, #32]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bae:	d109      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb0:	4b03      	ldr	r3, [pc, #12]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	4a02      	ldr	r2, [pc, #8]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bba:	60d3      	str	r3, [r2, #12]
 8005bbc:	e002      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005bbe:	bf00      	nop
 8005bc0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d015      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bd0:	4b29      	ldr	r3, [pc, #164]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bde:	4926      	ldr	r1, [pc, #152]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bee:	d105      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bf0:	4b21      	ldr	r3, [pc, #132]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4a20      	ldr	r2, [pc, #128]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bfa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d015      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005c08:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c16:	4918      	ldr	r1, [pc, #96]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c26:	d105      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c28:	4b13      	ldr	r3, [pc, #76]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	4a12      	ldr	r2, [pc, #72]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c32:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d015      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c40:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4e:	490a      	ldr	r1, [pc, #40]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c5e:	d105      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	4a04      	ldr	r2, [pc, #16]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40021000 	.word	0x40021000

08005c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e049      	b.n	8005d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fb ff90 	bl	8001bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	f000 fe90 	bl	80069e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d001      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e054      	b.n	8005dee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a26      	ldr	r2, [pc, #152]	; (8005dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d022      	beq.n	8005dac <HAL_TIM_Base_Start_IT+0x80>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6e:	d01d      	beq.n	8005dac <HAL_TIM_Base_Start_IT+0x80>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a22      	ldr	r2, [pc, #136]	; (8005e00 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d018      	beq.n	8005dac <HAL_TIM_Base_Start_IT+0x80>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a21      	ldr	r2, [pc, #132]	; (8005e04 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d013      	beq.n	8005dac <HAL_TIM_Base_Start_IT+0x80>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1f      	ldr	r2, [pc, #124]	; (8005e08 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00e      	beq.n	8005dac <HAL_TIM_Base_Start_IT+0x80>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1e      	ldr	r2, [pc, #120]	; (8005e0c <HAL_TIM_Base_Start_IT+0xe0>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d009      	beq.n	8005dac <HAL_TIM_Base_Start_IT+0x80>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1c      	ldr	r2, [pc, #112]	; (8005e10 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_TIM_Base_Start_IT+0x80>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a1b      	ldr	r2, [pc, #108]	; (8005e14 <HAL_TIM_Base_Start_IT+0xe8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d115      	bne.n	8005dd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <HAL_TIM_Base_Start_IT+0xec>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b06      	cmp	r3, #6
 8005dbc:	d015      	beq.n	8005dea <HAL_TIM_Base_Start_IT+0xbe>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc4:	d011      	beq.n	8005dea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f042 0201 	orr.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd6:	e008      	b.n	8005dea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	e000      	b.n	8005dec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40012c00 	.word	0x40012c00
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40000800 	.word	0x40000800
 8005e08:	40000c00 	.word	0x40000c00
 8005e0c:	40013400 	.word	0x40013400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40015000 	.word	0x40015000
 8005e18:	00010007 	.word	0x00010007

08005e1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e049      	b.n	8005ec2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f841 	bl	8005eca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	f000 fdc0 	bl	80069e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
	...

08005ee0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d109      	bne.n	8005f04 <HAL_TIM_PWM_Start+0x24>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	bf14      	ite	ne
 8005efc:	2301      	movne	r3, #1
 8005efe:	2300      	moveq	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	e03c      	b.n	8005f7e <HAL_TIM_PWM_Start+0x9e>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d109      	bne.n	8005f1e <HAL_TIM_PWM_Start+0x3e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	bf14      	ite	ne
 8005f16:	2301      	movne	r3, #1
 8005f18:	2300      	moveq	r3, #0
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	e02f      	b.n	8005f7e <HAL_TIM_PWM_Start+0x9e>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d109      	bne.n	8005f38 <HAL_TIM_PWM_Start+0x58>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	bf14      	ite	ne
 8005f30:	2301      	movne	r3, #1
 8005f32:	2300      	moveq	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	e022      	b.n	8005f7e <HAL_TIM_PWM_Start+0x9e>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b0c      	cmp	r3, #12
 8005f3c:	d109      	bne.n	8005f52 <HAL_TIM_PWM_Start+0x72>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	bf14      	ite	ne
 8005f4a:	2301      	movne	r3, #1
 8005f4c:	2300      	moveq	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	e015      	b.n	8005f7e <HAL_TIM_PWM_Start+0x9e>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b10      	cmp	r3, #16
 8005f56:	d109      	bne.n	8005f6c <HAL_TIM_PWM_Start+0x8c>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	bf14      	ite	ne
 8005f64:	2301      	movne	r3, #1
 8005f66:	2300      	moveq	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	e008      	b.n	8005f7e <HAL_TIM_PWM_Start+0x9e>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	bf14      	ite	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	2300      	moveq	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e0a6      	b.n	80060d4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_PWM_Start+0xb6>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f94:	e023      	b.n	8005fde <HAL_TIM_PWM_Start+0xfe>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	d104      	bne.n	8005fa6 <HAL_TIM_PWM_Start+0xc6>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa4:	e01b      	b.n	8005fde <HAL_TIM_PWM_Start+0xfe>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d104      	bne.n	8005fb6 <HAL_TIM_PWM_Start+0xd6>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fb4:	e013      	b.n	8005fde <HAL_TIM_PWM_Start+0xfe>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b0c      	cmp	r3, #12
 8005fba:	d104      	bne.n	8005fc6 <HAL_TIM_PWM_Start+0xe6>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fc4:	e00b      	b.n	8005fde <HAL_TIM_PWM_Start+0xfe>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d104      	bne.n	8005fd6 <HAL_TIM_PWM_Start+0xf6>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fd4:	e003      	b.n	8005fde <HAL_TIM_PWM_Start+0xfe>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 f9dc 	bl	80073a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a3a      	ldr	r2, [pc, #232]	; (80060dc <HAL_TIM_PWM_Start+0x1fc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d018      	beq.n	8006028 <HAL_TIM_PWM_Start+0x148>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a39      	ldr	r2, [pc, #228]	; (80060e0 <HAL_TIM_PWM_Start+0x200>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d013      	beq.n	8006028 <HAL_TIM_PWM_Start+0x148>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a37      	ldr	r2, [pc, #220]	; (80060e4 <HAL_TIM_PWM_Start+0x204>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00e      	beq.n	8006028 <HAL_TIM_PWM_Start+0x148>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a36      	ldr	r2, [pc, #216]	; (80060e8 <HAL_TIM_PWM_Start+0x208>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d009      	beq.n	8006028 <HAL_TIM_PWM_Start+0x148>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a34      	ldr	r2, [pc, #208]	; (80060ec <HAL_TIM_PWM_Start+0x20c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <HAL_TIM_PWM_Start+0x148>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a33      	ldr	r2, [pc, #204]	; (80060f0 <HAL_TIM_PWM_Start+0x210>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d101      	bne.n	800602c <HAL_TIM_PWM_Start+0x14c>
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <HAL_TIM_PWM_Start+0x14e>
 800602c:	2300      	movs	r3, #0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d007      	beq.n	8006042 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006040:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a25      	ldr	r2, [pc, #148]	; (80060dc <HAL_TIM_PWM_Start+0x1fc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d022      	beq.n	8006092 <HAL_TIM_PWM_Start+0x1b2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006054:	d01d      	beq.n	8006092 <HAL_TIM_PWM_Start+0x1b2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a26      	ldr	r2, [pc, #152]	; (80060f4 <HAL_TIM_PWM_Start+0x214>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d018      	beq.n	8006092 <HAL_TIM_PWM_Start+0x1b2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a24      	ldr	r2, [pc, #144]	; (80060f8 <HAL_TIM_PWM_Start+0x218>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <HAL_TIM_PWM_Start+0x1b2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a23      	ldr	r2, [pc, #140]	; (80060fc <HAL_TIM_PWM_Start+0x21c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00e      	beq.n	8006092 <HAL_TIM_PWM_Start+0x1b2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a19      	ldr	r2, [pc, #100]	; (80060e0 <HAL_TIM_PWM_Start+0x200>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d009      	beq.n	8006092 <HAL_TIM_PWM_Start+0x1b2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <HAL_TIM_PWM_Start+0x204>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d004      	beq.n	8006092 <HAL_TIM_PWM_Start+0x1b2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a18      	ldr	r2, [pc, #96]	; (80060f0 <HAL_TIM_PWM_Start+0x210>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d115      	bne.n	80060be <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	4b19      	ldr	r3, [pc, #100]	; (8006100 <HAL_TIM_PWM_Start+0x220>)
 800609a:	4013      	ands	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b06      	cmp	r3, #6
 80060a2:	d015      	beq.n	80060d0 <HAL_TIM_PWM_Start+0x1f0>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060aa:	d011      	beq.n	80060d0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060bc:	e008      	b.n	80060d0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0201 	orr.w	r2, r2, #1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e000      	b.n	80060d2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40013400 	.word	0x40013400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40014800 	.word	0x40014800
 80060f0:	40015000 	.word	0x40015000
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40000800 	.word	0x40000800
 80060fc:	40000c00 	.word	0x40000c00
 8006100:	00010007 	.word	0x00010007

08006104 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f001 f944 	bl	80073a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a40      	ldr	r2, [pc, #256]	; (8006224 <HAL_TIM_PWM_Stop+0x120>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d018      	beq.n	8006158 <HAL_TIM_PWM_Stop+0x54>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a3f      	ldr	r2, [pc, #252]	; (8006228 <HAL_TIM_PWM_Stop+0x124>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d013      	beq.n	8006158 <HAL_TIM_PWM_Stop+0x54>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a3d      	ldr	r2, [pc, #244]	; (800622c <HAL_TIM_PWM_Stop+0x128>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00e      	beq.n	8006158 <HAL_TIM_PWM_Stop+0x54>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a3c      	ldr	r2, [pc, #240]	; (8006230 <HAL_TIM_PWM_Stop+0x12c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d009      	beq.n	8006158 <HAL_TIM_PWM_Stop+0x54>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a3a      	ldr	r2, [pc, #232]	; (8006234 <HAL_TIM_PWM_Stop+0x130>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d004      	beq.n	8006158 <HAL_TIM_PWM_Stop+0x54>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a39      	ldr	r2, [pc, #228]	; (8006238 <HAL_TIM_PWM_Stop+0x134>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d101      	bne.n	800615c <HAL_TIM_PWM_Stop+0x58>
 8006158:	2301      	movs	r3, #1
 800615a:	e000      	b.n	800615e <HAL_TIM_PWM_Stop+0x5a>
 800615c:	2300      	movs	r3, #0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d017      	beq.n	8006192 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6a1a      	ldr	r2, [r3, #32]
 8006168:	f241 1311 	movw	r3, #4369	; 0x1111
 800616c:	4013      	ands	r3, r2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10f      	bne.n	8006192 <HAL_TIM_PWM_Stop+0x8e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6a1a      	ldr	r2, [r3, #32]
 8006178:	f244 4344 	movw	r3, #17476	; 0x4444
 800617c:	4013      	ands	r3, r2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d107      	bne.n	8006192 <HAL_TIM_PWM_Stop+0x8e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006190:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6a1a      	ldr	r2, [r3, #32]
 8006198:	f241 1311 	movw	r3, #4369	; 0x1111
 800619c:	4013      	ands	r3, r2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10f      	bne.n	80061c2 <HAL_TIM_PWM_Stop+0xbe>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a1a      	ldr	r2, [r3, #32]
 80061a8:	f244 4344 	movw	r3, #17476	; 0x4444
 80061ac:	4013      	ands	r3, r2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d107      	bne.n	80061c2 <HAL_TIM_PWM_Stop+0xbe>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_PWM_Stop+0xce>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061d0:	e023      	b.n	800621a <HAL_TIM_PWM_Stop+0x116>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_PWM_Stop+0xde>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e0:	e01b      	b.n	800621a <HAL_TIM_PWM_Stop+0x116>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d104      	bne.n	80061f2 <HAL_TIM_PWM_Stop+0xee>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061f0:	e013      	b.n	800621a <HAL_TIM_PWM_Stop+0x116>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b0c      	cmp	r3, #12
 80061f6:	d104      	bne.n	8006202 <HAL_TIM_PWM_Stop+0xfe>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006200:	e00b      	b.n	800621a <HAL_TIM_PWM_Stop+0x116>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b10      	cmp	r3, #16
 8006206:	d104      	bne.n	8006212 <HAL_TIM_PWM_Stop+0x10e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006210:	e003      	b.n	800621a <HAL_TIM_PWM_Stop+0x116>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40013400 	.word	0x40013400
 800622c:	40014000 	.word	0x40014000
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800
 8006238:	40015000 	.word	0x40015000

0800623c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b02      	cmp	r3, #2
 8006250:	d122      	bne.n	8006298 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b02      	cmp	r3, #2
 800625e:	d11b      	bne.n	8006298 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0202 	mvn.w	r2, #2
 8006268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fb90 	bl	80069a4 <HAL_TIM_IC_CaptureCallback>
 8006284:	e005      	b.n	8006292 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fb82 	bl	8006990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fb93 	bl	80069b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0304 	and.w	r3, r3, #4
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d122      	bne.n	80062ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d11b      	bne.n	80062ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0204 	mvn.w	r2, #4
 80062bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fb66 	bl	80069a4 <HAL_TIM_IC_CaptureCallback>
 80062d8:	e005      	b.n	80062e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fb58 	bl	8006990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fb69 	bl	80069b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d122      	bne.n	8006340 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b08      	cmp	r3, #8
 8006306:	d11b      	bne.n	8006340 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0208 	mvn.w	r2, #8
 8006310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2204      	movs	r2, #4
 8006316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fb3c 	bl	80069a4 <HAL_TIM_IC_CaptureCallback>
 800632c:	e005      	b.n	800633a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fb2e 	bl	8006990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fb3f 	bl	80069b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	2b10      	cmp	r3, #16
 800634c:	d122      	bne.n	8006394 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b10      	cmp	r3, #16
 800635a:	d11b      	bne.n	8006394 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0210 	mvn.w	r2, #16
 8006364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2208      	movs	r2, #8
 800636a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fb12 	bl	80069a4 <HAL_TIM_IC_CaptureCallback>
 8006380:	e005      	b.n	800638e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fb04 	bl	8006990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fb15 	bl	80069b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d10e      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d107      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f06f 0201 	mvn.w	r2, #1
 80063b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fb f8f4 	bl	80015a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ca:	2b80      	cmp	r3, #128	; 0x80
 80063cc:	d10e      	bne.n	80063ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d8:	2b80      	cmp	r3, #128	; 0x80
 80063da:	d107      	bne.n	80063ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 fb22 	bl	8007a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fa:	d10e      	bne.n	800641a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006406:	2b80      	cmp	r3, #128	; 0x80
 8006408:	d107      	bne.n	800641a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f001 fb15 	bl	8007a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	d10e      	bne.n	8006446 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	d107      	bne.n	8006446 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800643e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fac3 	bl	80069cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b20      	cmp	r3, #32
 8006452:	d10e      	bne.n	8006472 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b20      	cmp	r3, #32
 8006460:	d107      	bne.n	8006472 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f06f 0220 	mvn.w	r2, #32
 800646a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fad5 	bl	8007a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800647c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006480:	d10f      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800648c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006490:	d107      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800649a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 fadb 	bl	8007a58 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064b0:	d10f      	bne.n	80064d2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064c0:	d107      	bne.n	80064d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80064ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 facd 	bl	8007a6c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064e0:	d10f      	bne.n	8006502 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064f0:	d107      	bne.n	8006502 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80064fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 fabf 	bl	8007a80 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800650c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006510:	d10f      	bne.n	8006532 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800651c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006520:	d107      	bne.n	8006532 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800652a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 fab1 	bl	8007a94 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006552:	2b01      	cmp	r3, #1
 8006554:	d101      	bne.n	800655a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006556:	2302      	movs	r3, #2
 8006558:	e0ff      	b.n	800675a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b14      	cmp	r3, #20
 8006566:	f200 80f0 	bhi.w	800674a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800656a:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	080065c5 	.word	0x080065c5
 8006574:	0800674b 	.word	0x0800674b
 8006578:	0800674b 	.word	0x0800674b
 800657c:	0800674b 	.word	0x0800674b
 8006580:	08006605 	.word	0x08006605
 8006584:	0800674b 	.word	0x0800674b
 8006588:	0800674b 	.word	0x0800674b
 800658c:	0800674b 	.word	0x0800674b
 8006590:	08006647 	.word	0x08006647
 8006594:	0800674b 	.word	0x0800674b
 8006598:	0800674b 	.word	0x0800674b
 800659c:	0800674b 	.word	0x0800674b
 80065a0:	08006687 	.word	0x08006687
 80065a4:	0800674b 	.word	0x0800674b
 80065a8:	0800674b 	.word	0x0800674b
 80065ac:	0800674b 	.word	0x0800674b
 80065b0:	080066c9 	.word	0x080066c9
 80065b4:	0800674b 	.word	0x0800674b
 80065b8:	0800674b 	.word	0x0800674b
 80065bc:	0800674b 	.word	0x0800674b
 80065c0:	08006709 	.word	0x08006709
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68b9      	ldr	r1, [r7, #8]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fab0 	bl	8006b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0208 	orr.w	r2, r2, #8
 80065de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699a      	ldr	r2, [r3, #24]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0204 	bic.w	r2, r2, #4
 80065ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6999      	ldr	r1, [r3, #24]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	691a      	ldr	r2, [r3, #16]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	619a      	str	r2, [r3, #24]
      break;
 8006602:	e0a5      	b.n	8006750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fb2a 	bl	8006c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800661e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699a      	ldr	r2, [r3, #24]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800662e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6999      	ldr	r1, [r3, #24]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	021a      	lsls	r2, r3, #8
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	619a      	str	r2, [r3, #24]
      break;
 8006644:	e084      	b.n	8006750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fb9d 	bl	8006d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69da      	ldr	r2, [r3, #28]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f042 0208 	orr.w	r2, r2, #8
 8006660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69da      	ldr	r2, [r3, #28]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0204 	bic.w	r2, r2, #4
 8006670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69d9      	ldr	r1, [r3, #28]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	691a      	ldr	r2, [r3, #16]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	61da      	str	r2, [r3, #28]
      break;
 8006684:	e064      	b.n	8006750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68b9      	ldr	r1, [r7, #8]
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fc0f 	bl	8006eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69da      	ldr	r2, [r3, #28]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69da      	ldr	r2, [r3, #28]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69d9      	ldr	r1, [r3, #28]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	021a      	lsls	r2, r3, #8
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	61da      	str	r2, [r3, #28]
      break;
 80066c6:	e043      	b.n	8006750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fc82 	bl	8006fd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0208 	orr.w	r2, r2, #8
 80066e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0204 	bic.w	r2, r2, #4
 80066f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006706:	e023      	b.n	8006750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fccc 	bl	80070ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006722:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006732:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	021a      	lsls	r2, r3, #8
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006748:	e002      	b.n	8006750 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	75fb      	strb	r3, [r7, #23]
      break;
 800674e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006758:	7dfb      	ldrb	r3, [r7, #23]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop

08006764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_TIM_ConfigClockSource+0x1c>
 800677c:	2302      	movs	r3, #2
 800677e:	e0f6      	b.n	800696e <HAL_TIM_ConfigClockSource+0x20a>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800679e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a6f      	ldr	r2, [pc, #444]	; (8006978 <HAL_TIM_ConfigClockSource+0x214>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	f000 80c1 	beq.w	8006942 <HAL_TIM_ConfigClockSource+0x1de>
 80067c0:	4a6d      	ldr	r2, [pc, #436]	; (8006978 <HAL_TIM_ConfigClockSource+0x214>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	f200 80c6 	bhi.w	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 80067c8:	4a6c      	ldr	r2, [pc, #432]	; (800697c <HAL_TIM_ConfigClockSource+0x218>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	f000 80b9 	beq.w	8006942 <HAL_TIM_ConfigClockSource+0x1de>
 80067d0:	4a6a      	ldr	r2, [pc, #424]	; (800697c <HAL_TIM_ConfigClockSource+0x218>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	f200 80be 	bhi.w	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 80067d8:	4a69      	ldr	r2, [pc, #420]	; (8006980 <HAL_TIM_ConfigClockSource+0x21c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	f000 80b1 	beq.w	8006942 <HAL_TIM_ConfigClockSource+0x1de>
 80067e0:	4a67      	ldr	r2, [pc, #412]	; (8006980 <HAL_TIM_ConfigClockSource+0x21c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	f200 80b6 	bhi.w	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 80067e8:	4a66      	ldr	r2, [pc, #408]	; (8006984 <HAL_TIM_ConfigClockSource+0x220>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	f000 80a9 	beq.w	8006942 <HAL_TIM_ConfigClockSource+0x1de>
 80067f0:	4a64      	ldr	r2, [pc, #400]	; (8006984 <HAL_TIM_ConfigClockSource+0x220>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	f200 80ae 	bhi.w	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 80067f8:	4a63      	ldr	r2, [pc, #396]	; (8006988 <HAL_TIM_ConfigClockSource+0x224>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	f000 80a1 	beq.w	8006942 <HAL_TIM_ConfigClockSource+0x1de>
 8006800:	4a61      	ldr	r2, [pc, #388]	; (8006988 <HAL_TIM_ConfigClockSource+0x224>)
 8006802:	4293      	cmp	r3, r2
 8006804:	f200 80a6 	bhi.w	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 8006808:	4a60      	ldr	r2, [pc, #384]	; (800698c <HAL_TIM_ConfigClockSource+0x228>)
 800680a:	4293      	cmp	r3, r2
 800680c:	f000 8099 	beq.w	8006942 <HAL_TIM_ConfigClockSource+0x1de>
 8006810:	4a5e      	ldr	r2, [pc, #376]	; (800698c <HAL_TIM_ConfigClockSource+0x228>)
 8006812:	4293      	cmp	r3, r2
 8006814:	f200 809e 	bhi.w	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 8006818:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800681c:	f000 8091 	beq.w	8006942 <HAL_TIM_ConfigClockSource+0x1de>
 8006820:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006824:	f200 8096 	bhi.w	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 8006828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800682c:	f000 8089 	beq.w	8006942 <HAL_TIM_ConfigClockSource+0x1de>
 8006830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006834:	f200 808e 	bhi.w	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 8006838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800683c:	d03e      	beq.n	80068bc <HAL_TIM_ConfigClockSource+0x158>
 800683e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006842:	f200 8087 	bhi.w	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 8006846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684a:	f000 8086 	beq.w	800695a <HAL_TIM_ConfigClockSource+0x1f6>
 800684e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006852:	d87f      	bhi.n	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 8006854:	2b70      	cmp	r3, #112	; 0x70
 8006856:	d01a      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x12a>
 8006858:	2b70      	cmp	r3, #112	; 0x70
 800685a:	d87b      	bhi.n	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 800685c:	2b60      	cmp	r3, #96	; 0x60
 800685e:	d050      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x19e>
 8006860:	2b60      	cmp	r3, #96	; 0x60
 8006862:	d877      	bhi.n	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 8006864:	2b50      	cmp	r3, #80	; 0x50
 8006866:	d03c      	beq.n	80068e2 <HAL_TIM_ConfigClockSource+0x17e>
 8006868:	2b50      	cmp	r3, #80	; 0x50
 800686a:	d873      	bhi.n	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d058      	beq.n	8006922 <HAL_TIM_ConfigClockSource+0x1be>
 8006870:	2b40      	cmp	r3, #64	; 0x40
 8006872:	d86f      	bhi.n	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 8006874:	2b30      	cmp	r3, #48	; 0x30
 8006876:	d064      	beq.n	8006942 <HAL_TIM_ConfigClockSource+0x1de>
 8006878:	2b30      	cmp	r3, #48	; 0x30
 800687a:	d86b      	bhi.n	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 800687c:	2b20      	cmp	r3, #32
 800687e:	d060      	beq.n	8006942 <HAL_TIM_ConfigClockSource+0x1de>
 8006880:	2b20      	cmp	r3, #32
 8006882:	d867      	bhi.n	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
 8006884:	2b00      	cmp	r3, #0
 8006886:	d05c      	beq.n	8006942 <HAL_TIM_ConfigClockSource+0x1de>
 8006888:	2b10      	cmp	r3, #16
 800688a:	d05a      	beq.n	8006942 <HAL_TIM_ConfigClockSource+0x1de>
 800688c:	e062      	b.n	8006954 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6818      	ldr	r0, [r3, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	6899      	ldr	r1, [r3, #8]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f000 fd61 	bl	8007364 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	609a      	str	r2, [r3, #8]
      break;
 80068ba:	e04f      	b.n	800695c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	6899      	ldr	r1, [r3, #8]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f000 fd4a 	bl	8007364 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689a      	ldr	r2, [r3, #8]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068de:	609a      	str	r2, [r3, #8]
      break;
 80068e0:	e03c      	b.n	800695c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	6859      	ldr	r1, [r3, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f000 fcbc 	bl	800726c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2150      	movs	r1, #80	; 0x50
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fd15 	bl	800732a <TIM_ITRx_SetConfig>
      break;
 8006900:	e02c      	b.n	800695c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	6859      	ldr	r1, [r3, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	461a      	mov	r2, r3
 8006910:	f000 fcdb 	bl	80072ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2160      	movs	r1, #96	; 0x60
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fd05 	bl	800732a <TIM_ITRx_SetConfig>
      break;
 8006920:	e01c      	b.n	800695c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	6859      	ldr	r1, [r3, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	461a      	mov	r2, r3
 8006930:	f000 fc9c 	bl	800726c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2140      	movs	r1, #64	; 0x40
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fcf5 	bl	800732a <TIM_ITRx_SetConfig>
      break;
 8006940:	e00c      	b.n	800695c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4619      	mov	r1, r3
 800694c:	4610      	mov	r0, r2
 800694e:	f000 fcec 	bl	800732a <TIM_ITRx_SetConfig>
      break;
 8006952:	e003      	b.n	800695c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	73fb      	strb	r3, [r7, #15]
      break;
 8006958:	e000      	b.n	800695c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800695a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800696c:	7bfb      	ldrb	r3, [r7, #15]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	00100070 	.word	0x00100070
 800697c:	00100060 	.word	0x00100060
 8006980:	00100050 	.word	0x00100050
 8006984:	00100040 	.word	0x00100040
 8006988:	00100030 	.word	0x00100030
 800698c:	00100020 	.word	0x00100020

08006990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a46      	ldr	r2, [pc, #280]	; (8006b0c <TIM_Base_SetConfig+0x12c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d017      	beq.n	8006a28 <TIM_Base_SetConfig+0x48>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fe:	d013      	beq.n	8006a28 <TIM_Base_SetConfig+0x48>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a43      	ldr	r2, [pc, #268]	; (8006b10 <TIM_Base_SetConfig+0x130>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d00f      	beq.n	8006a28 <TIM_Base_SetConfig+0x48>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a42      	ldr	r2, [pc, #264]	; (8006b14 <TIM_Base_SetConfig+0x134>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00b      	beq.n	8006a28 <TIM_Base_SetConfig+0x48>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a41      	ldr	r2, [pc, #260]	; (8006b18 <TIM_Base_SetConfig+0x138>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d007      	beq.n	8006a28 <TIM_Base_SetConfig+0x48>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a40      	ldr	r2, [pc, #256]	; (8006b1c <TIM_Base_SetConfig+0x13c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d003      	beq.n	8006a28 <TIM_Base_SetConfig+0x48>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a3f      	ldr	r2, [pc, #252]	; (8006b20 <TIM_Base_SetConfig+0x140>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d108      	bne.n	8006a3a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a33      	ldr	r2, [pc, #204]	; (8006b0c <TIM_Base_SetConfig+0x12c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d023      	beq.n	8006a8a <TIM_Base_SetConfig+0xaa>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a48:	d01f      	beq.n	8006a8a <TIM_Base_SetConfig+0xaa>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a30      	ldr	r2, [pc, #192]	; (8006b10 <TIM_Base_SetConfig+0x130>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d01b      	beq.n	8006a8a <TIM_Base_SetConfig+0xaa>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a2f      	ldr	r2, [pc, #188]	; (8006b14 <TIM_Base_SetConfig+0x134>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d017      	beq.n	8006a8a <TIM_Base_SetConfig+0xaa>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a2e      	ldr	r2, [pc, #184]	; (8006b18 <TIM_Base_SetConfig+0x138>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <TIM_Base_SetConfig+0xaa>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a2d      	ldr	r2, [pc, #180]	; (8006b1c <TIM_Base_SetConfig+0x13c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00f      	beq.n	8006a8a <TIM_Base_SetConfig+0xaa>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a2d      	ldr	r2, [pc, #180]	; (8006b24 <TIM_Base_SetConfig+0x144>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00b      	beq.n	8006a8a <TIM_Base_SetConfig+0xaa>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a2c      	ldr	r2, [pc, #176]	; (8006b28 <TIM_Base_SetConfig+0x148>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d007      	beq.n	8006a8a <TIM_Base_SetConfig+0xaa>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a2b      	ldr	r2, [pc, #172]	; (8006b2c <TIM_Base_SetConfig+0x14c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d003      	beq.n	8006a8a <TIM_Base_SetConfig+0xaa>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a26      	ldr	r2, [pc, #152]	; (8006b20 <TIM_Base_SetConfig+0x140>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d108      	bne.n	8006a9c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a12      	ldr	r2, [pc, #72]	; (8006b0c <TIM_Base_SetConfig+0x12c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d013      	beq.n	8006af0 <TIM_Base_SetConfig+0x110>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a14      	ldr	r2, [pc, #80]	; (8006b1c <TIM_Base_SetConfig+0x13c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00f      	beq.n	8006af0 <TIM_Base_SetConfig+0x110>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a14      	ldr	r2, [pc, #80]	; (8006b24 <TIM_Base_SetConfig+0x144>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00b      	beq.n	8006af0 <TIM_Base_SetConfig+0x110>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a13      	ldr	r2, [pc, #76]	; (8006b28 <TIM_Base_SetConfig+0x148>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d007      	beq.n	8006af0 <TIM_Base_SetConfig+0x110>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a12      	ldr	r2, [pc, #72]	; (8006b2c <TIM_Base_SetConfig+0x14c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_Base_SetConfig+0x110>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a0d      	ldr	r2, [pc, #52]	; (8006b20 <TIM_Base_SetConfig+0x140>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d103      	bne.n	8006af8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	615a      	str	r2, [r3, #20]
}
 8006afe:	bf00      	nop
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40000400 	.word	0x40000400
 8006b14:	40000800 	.word	0x40000800
 8006b18:	40000c00 	.word	0x40000c00
 8006b1c:	40013400 	.word	0x40013400
 8006b20:	40015000 	.word	0x40015000
 8006b24:	40014000 	.word	0x40014000
 8006b28:	40014400 	.word	0x40014400
 8006b2c:	40014800 	.word	0x40014800

08006b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f023 0201 	bic.w	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0303 	bic.w	r3, r3, #3
 8006b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f023 0302 	bic.w	r3, r3, #2
 8006b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a30      	ldr	r2, [pc, #192]	; (8006c4c <TIM_OC1_SetConfig+0x11c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <TIM_OC1_SetConfig+0x88>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a2f      	ldr	r2, [pc, #188]	; (8006c50 <TIM_OC1_SetConfig+0x120>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00f      	beq.n	8006bb8 <TIM_OC1_SetConfig+0x88>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a2e      	ldr	r2, [pc, #184]	; (8006c54 <TIM_OC1_SetConfig+0x124>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00b      	beq.n	8006bb8 <TIM_OC1_SetConfig+0x88>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a2d      	ldr	r2, [pc, #180]	; (8006c58 <TIM_OC1_SetConfig+0x128>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d007      	beq.n	8006bb8 <TIM_OC1_SetConfig+0x88>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a2c      	ldr	r2, [pc, #176]	; (8006c5c <TIM_OC1_SetConfig+0x12c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_OC1_SetConfig+0x88>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a2b      	ldr	r2, [pc, #172]	; (8006c60 <TIM_OC1_SetConfig+0x130>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d10c      	bne.n	8006bd2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f023 0308 	bic.w	r3, r3, #8
 8006bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f023 0304 	bic.w	r3, r3, #4
 8006bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a1d      	ldr	r2, [pc, #116]	; (8006c4c <TIM_OC1_SetConfig+0x11c>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d013      	beq.n	8006c02 <TIM_OC1_SetConfig+0xd2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a1c      	ldr	r2, [pc, #112]	; (8006c50 <TIM_OC1_SetConfig+0x120>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d00f      	beq.n	8006c02 <TIM_OC1_SetConfig+0xd2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a1b      	ldr	r2, [pc, #108]	; (8006c54 <TIM_OC1_SetConfig+0x124>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00b      	beq.n	8006c02 <TIM_OC1_SetConfig+0xd2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a1a      	ldr	r2, [pc, #104]	; (8006c58 <TIM_OC1_SetConfig+0x128>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d007      	beq.n	8006c02 <TIM_OC1_SetConfig+0xd2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a19      	ldr	r2, [pc, #100]	; (8006c5c <TIM_OC1_SetConfig+0x12c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d003      	beq.n	8006c02 <TIM_OC1_SetConfig+0xd2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a18      	ldr	r2, [pc, #96]	; (8006c60 <TIM_OC1_SetConfig+0x130>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d111      	bne.n	8006c26 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	621a      	str	r2, [r3, #32]
}
 8006c40:	bf00      	nop
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	40012c00 	.word	0x40012c00
 8006c50:	40013400 	.word	0x40013400
 8006c54:	40014000 	.word	0x40014000
 8006c58:	40014400 	.word	0x40014400
 8006c5c:	40014800 	.word	0x40014800
 8006c60:	40015000 	.word	0x40015000

08006c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	f023 0210 	bic.w	r2, r3, #16
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	021b      	lsls	r3, r3, #8
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f023 0320 	bic.w	r3, r3, #32
 8006cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a2c      	ldr	r2, [pc, #176]	; (8006d74 <TIM_OC2_SetConfig+0x110>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d007      	beq.n	8006cd8 <TIM_OC2_SetConfig+0x74>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a2b      	ldr	r2, [pc, #172]	; (8006d78 <TIM_OC2_SetConfig+0x114>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_OC2_SetConfig+0x74>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a2a      	ldr	r2, [pc, #168]	; (8006d7c <TIM_OC2_SetConfig+0x118>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d10d      	bne.n	8006cf4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a1f      	ldr	r2, [pc, #124]	; (8006d74 <TIM_OC2_SetConfig+0x110>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d013      	beq.n	8006d24 <TIM_OC2_SetConfig+0xc0>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a1e      	ldr	r2, [pc, #120]	; (8006d78 <TIM_OC2_SetConfig+0x114>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00f      	beq.n	8006d24 <TIM_OC2_SetConfig+0xc0>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a1e      	ldr	r2, [pc, #120]	; (8006d80 <TIM_OC2_SetConfig+0x11c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00b      	beq.n	8006d24 <TIM_OC2_SetConfig+0xc0>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a1d      	ldr	r2, [pc, #116]	; (8006d84 <TIM_OC2_SetConfig+0x120>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d007      	beq.n	8006d24 <TIM_OC2_SetConfig+0xc0>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a1c      	ldr	r2, [pc, #112]	; (8006d88 <TIM_OC2_SetConfig+0x124>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_OC2_SetConfig+0xc0>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a17      	ldr	r2, [pc, #92]	; (8006d7c <TIM_OC2_SetConfig+0x118>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d113      	bne.n	8006d4c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	621a      	str	r2, [r3, #32]
}
 8006d66:	bf00      	nop
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	40012c00 	.word	0x40012c00
 8006d78:	40013400 	.word	0x40013400
 8006d7c:	40015000 	.word	0x40015000
 8006d80:	40014000 	.word	0x40014000
 8006d84:	40014400 	.word	0x40014400
 8006d88:	40014800 	.word	0x40014800

08006d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0303 	bic.w	r3, r3, #3
 8006dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	021b      	lsls	r3, r3, #8
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a2b      	ldr	r2, [pc, #172]	; (8006e98 <TIM_OC3_SetConfig+0x10c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d007      	beq.n	8006dfe <TIM_OC3_SetConfig+0x72>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a2a      	ldr	r2, [pc, #168]	; (8006e9c <TIM_OC3_SetConfig+0x110>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d003      	beq.n	8006dfe <TIM_OC3_SetConfig+0x72>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a29      	ldr	r2, [pc, #164]	; (8006ea0 <TIM_OC3_SetConfig+0x114>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d10d      	bne.n	8006e1a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	021b      	lsls	r3, r3, #8
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a1e      	ldr	r2, [pc, #120]	; (8006e98 <TIM_OC3_SetConfig+0x10c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d013      	beq.n	8006e4a <TIM_OC3_SetConfig+0xbe>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a1d      	ldr	r2, [pc, #116]	; (8006e9c <TIM_OC3_SetConfig+0x110>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00f      	beq.n	8006e4a <TIM_OC3_SetConfig+0xbe>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ea4 <TIM_OC3_SetConfig+0x118>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00b      	beq.n	8006e4a <TIM_OC3_SetConfig+0xbe>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a1c      	ldr	r2, [pc, #112]	; (8006ea8 <TIM_OC3_SetConfig+0x11c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d007      	beq.n	8006e4a <TIM_OC3_SetConfig+0xbe>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a1b      	ldr	r2, [pc, #108]	; (8006eac <TIM_OC3_SetConfig+0x120>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d003      	beq.n	8006e4a <TIM_OC3_SetConfig+0xbe>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a16      	ldr	r2, [pc, #88]	; (8006ea0 <TIM_OC3_SetConfig+0x114>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d113      	bne.n	8006e72 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	011b      	lsls	r3, r3, #4
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	621a      	str	r2, [r3, #32]
}
 8006e8c:	bf00      	nop
 8006e8e:	371c      	adds	r7, #28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40013400 	.word	0x40013400
 8006ea0:	40015000 	.word	0x40015000
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	40014400 	.word	0x40014400
 8006eac:	40014800 	.word	0x40014800

08006eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	021b      	lsls	r3, r3, #8
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	031b      	lsls	r3, r3, #12
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a2c      	ldr	r2, [pc, #176]	; (8006fc0 <TIM_OC4_SetConfig+0x110>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d007      	beq.n	8006f24 <TIM_OC4_SetConfig+0x74>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a2b      	ldr	r2, [pc, #172]	; (8006fc4 <TIM_OC4_SetConfig+0x114>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d003      	beq.n	8006f24 <TIM_OC4_SetConfig+0x74>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a2a      	ldr	r2, [pc, #168]	; (8006fc8 <TIM_OC4_SetConfig+0x118>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d10d      	bne.n	8006f40 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	031b      	lsls	r3, r3, #12
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a1f      	ldr	r2, [pc, #124]	; (8006fc0 <TIM_OC4_SetConfig+0x110>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d013      	beq.n	8006f70 <TIM_OC4_SetConfig+0xc0>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a1e      	ldr	r2, [pc, #120]	; (8006fc4 <TIM_OC4_SetConfig+0x114>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00f      	beq.n	8006f70 <TIM_OC4_SetConfig+0xc0>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a1e      	ldr	r2, [pc, #120]	; (8006fcc <TIM_OC4_SetConfig+0x11c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00b      	beq.n	8006f70 <TIM_OC4_SetConfig+0xc0>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a1d      	ldr	r2, [pc, #116]	; (8006fd0 <TIM_OC4_SetConfig+0x120>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d007      	beq.n	8006f70 <TIM_OC4_SetConfig+0xc0>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a1c      	ldr	r2, [pc, #112]	; (8006fd4 <TIM_OC4_SetConfig+0x124>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC4_SetConfig+0xc0>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a17      	ldr	r2, [pc, #92]	; (8006fc8 <TIM_OC4_SetConfig+0x118>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d113      	bne.n	8006f98 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	019b      	lsls	r3, r3, #6
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	019b      	lsls	r3, r3, #6
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	621a      	str	r2, [r3, #32]
}
 8006fb2:	bf00      	nop
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	40012c00 	.word	0x40012c00
 8006fc4:	40013400 	.word	0x40013400
 8006fc8:	40015000 	.word	0x40015000
 8006fcc:	40014000 	.word	0x40014000
 8006fd0:	40014400 	.word	0x40014400
 8006fd4:	40014800 	.word	0x40014800

08006fd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800701c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	041b      	lsls	r3, r3, #16
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a19      	ldr	r2, [pc, #100]	; (8007094 <TIM_OC5_SetConfig+0xbc>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d013      	beq.n	800705a <TIM_OC5_SetConfig+0x82>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a18      	ldr	r2, [pc, #96]	; (8007098 <TIM_OC5_SetConfig+0xc0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00f      	beq.n	800705a <TIM_OC5_SetConfig+0x82>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a17      	ldr	r2, [pc, #92]	; (800709c <TIM_OC5_SetConfig+0xc4>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00b      	beq.n	800705a <TIM_OC5_SetConfig+0x82>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a16      	ldr	r2, [pc, #88]	; (80070a0 <TIM_OC5_SetConfig+0xc8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d007      	beq.n	800705a <TIM_OC5_SetConfig+0x82>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a15      	ldr	r2, [pc, #84]	; (80070a4 <TIM_OC5_SetConfig+0xcc>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d003      	beq.n	800705a <TIM_OC5_SetConfig+0x82>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a14      	ldr	r2, [pc, #80]	; (80070a8 <TIM_OC5_SetConfig+0xd0>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d109      	bne.n	800706e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007060:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	621a      	str	r2, [r3, #32]
}
 8007088:	bf00      	nop
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	40012c00 	.word	0x40012c00
 8007098:	40013400 	.word	0x40013400
 800709c:	40014000 	.word	0x40014000
 80070a0:	40014400 	.word	0x40014400
 80070a4:	40014800 	.word	0x40014800
 80070a8:	40015000 	.word	0x40015000

080070ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	021b      	lsls	r3, r3, #8
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	051b      	lsls	r3, r3, #20
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a1a      	ldr	r2, [pc, #104]	; (800716c <TIM_OC6_SetConfig+0xc0>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d013      	beq.n	8007130 <TIM_OC6_SetConfig+0x84>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a19      	ldr	r2, [pc, #100]	; (8007170 <TIM_OC6_SetConfig+0xc4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00f      	beq.n	8007130 <TIM_OC6_SetConfig+0x84>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a18      	ldr	r2, [pc, #96]	; (8007174 <TIM_OC6_SetConfig+0xc8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00b      	beq.n	8007130 <TIM_OC6_SetConfig+0x84>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a17      	ldr	r2, [pc, #92]	; (8007178 <TIM_OC6_SetConfig+0xcc>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d007      	beq.n	8007130 <TIM_OC6_SetConfig+0x84>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a16      	ldr	r2, [pc, #88]	; (800717c <TIM_OC6_SetConfig+0xd0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_OC6_SetConfig+0x84>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a15      	ldr	r2, [pc, #84]	; (8007180 <TIM_OC6_SetConfig+0xd4>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d109      	bne.n	8007144 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007136:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	029b      	lsls	r3, r3, #10
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	621a      	str	r2, [r3, #32]
}
 800715e:	bf00      	nop
 8007160:	371c      	adds	r7, #28
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40013400 	.word	0x40013400
 8007174:	40014000 	.word	0x40014000
 8007178:	40014400 	.word	0x40014400
 800717c:	40014800 	.word	0x40014800
 8007180:	40015000 	.word	0x40015000

08007184 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f023 0201 	bic.w	r2, r3, #1
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4a28      	ldr	r2, [pc, #160]	; (8007250 <TIM_TI1_SetConfig+0xcc>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d01b      	beq.n	80071ea <TIM_TI1_SetConfig+0x66>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b8:	d017      	beq.n	80071ea <TIM_TI1_SetConfig+0x66>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4a25      	ldr	r2, [pc, #148]	; (8007254 <TIM_TI1_SetConfig+0xd0>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d013      	beq.n	80071ea <TIM_TI1_SetConfig+0x66>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	4a24      	ldr	r2, [pc, #144]	; (8007258 <TIM_TI1_SetConfig+0xd4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00f      	beq.n	80071ea <TIM_TI1_SetConfig+0x66>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4a23      	ldr	r2, [pc, #140]	; (800725c <TIM_TI1_SetConfig+0xd8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00b      	beq.n	80071ea <TIM_TI1_SetConfig+0x66>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4a22      	ldr	r2, [pc, #136]	; (8007260 <TIM_TI1_SetConfig+0xdc>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d007      	beq.n	80071ea <TIM_TI1_SetConfig+0x66>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4a21      	ldr	r2, [pc, #132]	; (8007264 <TIM_TI1_SetConfig+0xe0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d003      	beq.n	80071ea <TIM_TI1_SetConfig+0x66>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4a20      	ldr	r2, [pc, #128]	; (8007268 <TIM_TI1_SetConfig+0xe4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d101      	bne.n	80071ee <TIM_TI1_SetConfig+0x6a>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <TIM_TI1_SetConfig+0x6c>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d008      	beq.n	8007206 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	e003      	b.n	800720e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f043 0301 	orr.w	r3, r3, #1
 800720c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	011b      	lsls	r3, r3, #4
 800721a:	b2db      	uxtb	r3, r3
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f023 030a 	bic.w	r3, r3, #10
 8007228:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f003 030a 	and.w	r3, r3, #10
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40012c00 	.word	0x40012c00
 8007254:	40000400 	.word	0x40000400
 8007258:	40000800 	.word	0x40000800
 800725c:	40000c00 	.word	0x40000c00
 8007260:	40013400 	.word	0x40013400
 8007264:	40014000 	.word	0x40014000
 8007268:	40015000 	.word	0x40015000

0800726c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	f023 0201 	bic.w	r2, r3, #1
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	011b      	lsls	r3, r3, #4
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4313      	orrs	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f023 030a 	bic.w	r3, r3, #10
 80072a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	621a      	str	r2, [r3, #32]
}
 80072be:	bf00      	nop
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b087      	sub	sp, #28
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	f023 0210 	bic.w	r2, r3, #16
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	031b      	lsls	r3, r3, #12
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007306:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	011b      	lsls	r3, r3, #4
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	4313      	orrs	r3, r2
 8007310:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	621a      	str	r2, [r3, #32]
}
 800731e:	bf00      	nop
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	f043 0307 	orr.w	r3, r3, #7
 8007350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	609a      	str	r2, [r3, #8]
}
 8007358:	bf00      	nop
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800737e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	021a      	lsls	r2, r3, #8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	431a      	orrs	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4313      	orrs	r3, r2
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	bf00      	nop
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	2201      	movs	r2, #1
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a1a      	ldr	r2, [r3, #32]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	43db      	mvns	r3, r3
 80073c6:	401a      	ands	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a1a      	ldr	r2, [r3, #32]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	fa01 f303 	lsl.w	r3, r1, r3
 80073dc:	431a      	orrs	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	621a      	str	r2, [r3, #32]
}
 80073e2:	bf00      	nop
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b08a      	sub	sp, #40	; 0x28
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e0a0      	b.n	8007544 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d106      	bne.n	800741c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fa fbf6 	bl	8001c08 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3304      	adds	r3, #4
 800742c:	4619      	mov	r1, r3
 800742e:	4610      	mov	r0, r2
 8007430:	f7ff fad6 	bl	80069e0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	6819      	ldr	r1, [r3, #0]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2203      	movs	r2, #3
 8007442:	f7ff fe9f 	bl	8007184 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	699a      	ldr	r2, [r3, #24]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 020c 	bic.w	r2, r2, #12
 8007454:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6999      	ldr	r1, [r3, #24]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007476:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6812      	ldr	r2, [r2, #0]
 8007482:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800749a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074aa:	f023 0307 	bic.w	r3, r3, #7
 80074ae:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0204 	orr.w	r2, r2, #4
 80074be:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80074c0:	2300      	movs	r3, #0
 80074c2:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80074c4:	2300      	movs	r3, #0
 80074c6:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80074c8:	2370      	movs	r3, #112	; 0x70
 80074ca:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80074cc:	2300      	movs	r3, #0
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80074d4:	2300      	movs	r3, #0
 80074d6:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f107 020c 	add.w	r2, r7, #12
 80074e6:	4611      	mov	r1, r2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff fbbb 	bl	8006c64 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80074fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007500:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8007510:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3728      	adds	r7, #40	; 0x28
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d109      	bne.n	8007570 <HAL_TIMEx_PWMN_Start+0x24>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b01      	cmp	r3, #1
 8007566:	bf14      	ite	ne
 8007568:	2301      	movne	r3, #1
 800756a:	2300      	moveq	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	e022      	b.n	80075b6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2b04      	cmp	r3, #4
 8007574:	d109      	bne.n	800758a <HAL_TIMEx_PWMN_Start+0x3e>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b01      	cmp	r3, #1
 8007580:	bf14      	ite	ne
 8007582:	2301      	movne	r3, #1
 8007584:	2300      	moveq	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	e015      	b.n	80075b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b08      	cmp	r3, #8
 800758e:	d109      	bne.n	80075a4 <HAL_TIMEx_PWMN_Start+0x58>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b01      	cmp	r3, #1
 800759a:	bf14      	ite	ne
 800759c:	2301      	movne	r3, #1
 800759e:	2300      	moveq	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	e008      	b.n	80075b6 <HAL_TIMEx_PWMN_Start+0x6a>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	bf14      	ite	ne
 80075b0:	2301      	movne	r3, #1
 80075b2:	2300      	moveq	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e073      	b.n	80076a6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d104      	bne.n	80075ce <HAL_TIMEx_PWMN_Start+0x82>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075cc:	e013      	b.n	80075f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d104      	bne.n	80075de <HAL_TIMEx_PWMN_Start+0x92>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075dc:	e00b      	b.n	80075f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d104      	bne.n	80075ee <HAL_TIMEx_PWMN_Start+0xa2>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075ec:	e003      	b.n	80075f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2202      	movs	r2, #2
 80075f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2204      	movs	r2, #4
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fa52 	bl	8007aa8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007612:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a25      	ldr	r2, [pc, #148]	; (80076b0 <HAL_TIMEx_PWMN_Start+0x164>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d022      	beq.n	8007664 <HAL_TIMEx_PWMN_Start+0x118>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007626:	d01d      	beq.n	8007664 <HAL_TIMEx_PWMN_Start+0x118>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a21      	ldr	r2, [pc, #132]	; (80076b4 <HAL_TIMEx_PWMN_Start+0x168>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d018      	beq.n	8007664 <HAL_TIMEx_PWMN_Start+0x118>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a20      	ldr	r2, [pc, #128]	; (80076b8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d013      	beq.n	8007664 <HAL_TIMEx_PWMN_Start+0x118>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a1e      	ldr	r2, [pc, #120]	; (80076bc <HAL_TIMEx_PWMN_Start+0x170>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00e      	beq.n	8007664 <HAL_TIMEx_PWMN_Start+0x118>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1d      	ldr	r2, [pc, #116]	; (80076c0 <HAL_TIMEx_PWMN_Start+0x174>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d009      	beq.n	8007664 <HAL_TIMEx_PWMN_Start+0x118>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a1b      	ldr	r2, [pc, #108]	; (80076c4 <HAL_TIMEx_PWMN_Start+0x178>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d004      	beq.n	8007664 <HAL_TIMEx_PWMN_Start+0x118>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a1a      	ldr	r2, [pc, #104]	; (80076c8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d115      	bne.n	8007690 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689a      	ldr	r2, [r3, #8]
 800766a:	4b18      	ldr	r3, [pc, #96]	; (80076cc <HAL_TIMEx_PWMN_Start+0x180>)
 800766c:	4013      	ands	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b06      	cmp	r3, #6
 8007674:	d015      	beq.n	80076a2 <HAL_TIMEx_PWMN_Start+0x156>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800767c:	d011      	beq.n	80076a2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f042 0201 	orr.w	r2, r2, #1
 800768c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768e:	e008      	b.n	80076a2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0201 	orr.w	r2, r2, #1
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	e000      	b.n	80076a4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	40012c00 	.word	0x40012c00
 80076b4:	40000400 	.word	0x40000400
 80076b8:	40000800 	.word	0x40000800
 80076bc:	40000c00 	.word	0x40000c00
 80076c0:	40013400 	.word	0x40013400
 80076c4:	40014000 	.word	0x40014000
 80076c8:	40015000 	.word	0x40015000
 80076cc:	00010007 	.word	0x00010007

080076d0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2200      	movs	r2, #0
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 f9e0 	bl	8007aa8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6a1a      	ldr	r2, [r3, #32]
 80076ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80076f2:	4013      	ands	r3, r2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10f      	bne.n	8007718 <HAL_TIMEx_PWMN_Stop+0x48>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6a1a      	ldr	r2, [r3, #32]
 80076fe:	f244 4344 	movw	r3, #17476	; 0x4444
 8007702:	4013      	ands	r3, r2
 8007704:	2b00      	cmp	r3, #0
 8007706:	d107      	bne.n	8007718 <HAL_TIMEx_PWMN_Stop+0x48>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007716:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6a1a      	ldr	r2, [r3, #32]
 800771e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007722:	4013      	ands	r3, r2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10f      	bne.n	8007748 <HAL_TIMEx_PWMN_Stop+0x78>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6a1a      	ldr	r2, [r3, #32]
 800772e:	f244 4344 	movw	r3, #17476	; 0x4444
 8007732:	4013      	ands	r3, r2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d107      	bne.n	8007748 <HAL_TIMEx_PWMN_Stop+0x78>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 0201 	bic.w	r2, r2, #1
 8007746:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d104      	bne.n	8007758 <HAL_TIMEx_PWMN_Stop+0x88>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007756:	e013      	b.n	8007780 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b04      	cmp	r3, #4
 800775c:	d104      	bne.n	8007768 <HAL_TIMEx_PWMN_Stop+0x98>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007766:	e00b      	b.n	8007780 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b08      	cmp	r3, #8
 800776c:	d104      	bne.n	8007778 <HAL_TIMEx_PWMN_Stop+0xa8>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007776:	e003      	b.n	8007780 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800779c:	2b01      	cmp	r3, #1
 800779e:	d101      	bne.n	80077a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077a0:	2302      	movs	r3, #2
 80077a2:	e074      	b.n	800788e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a34      	ldr	r2, [pc, #208]	; (800789c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d009      	beq.n	80077e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a33      	ldr	r2, [pc, #204]	; (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d004      	beq.n	80077e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a31      	ldr	r2, [pc, #196]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d108      	bne.n	80077f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80077fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a21      	ldr	r2, [pc, #132]	; (800789c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d022      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007824:	d01d      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1f      	ldr	r2, [pc, #124]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d018      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a1d      	ldr	r2, [pc, #116]	; (80078ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d013      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a1c      	ldr	r2, [pc, #112]	; (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d00e      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a15      	ldr	r2, [pc, #84]	; (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d009      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a18      	ldr	r2, [pc, #96]	; (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d004      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a11      	ldr	r2, [pc, #68]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d10c      	bne.n	800787c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	4313      	orrs	r3, r2
 8007872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	40012c00 	.word	0x40012c00
 80078a0:	40013400 	.word	0x40013400
 80078a4:	40015000 	.word	0x40015000
 80078a8:	40000400 	.word	0x40000400
 80078ac:	40000800 	.word	0x40000800
 80078b0:	40000c00 	.word	0x40000c00
 80078b4:	40014000 	.word	0x40014000

080078b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e096      	b.n	8007a02 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	4313      	orrs	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	4313      	orrs	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	041b      	lsls	r3, r3, #16
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a2f      	ldr	r2, [pc, #188]	; (8007a10 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d009      	beq.n	800796c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a2d      	ldr	r2, [pc, #180]	; (8007a14 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d004      	beq.n	800796c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a2c      	ldr	r2, [pc, #176]	; (8007a18 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d106      	bne.n	800797a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a24      	ldr	r2, [pc, #144]	; (8007a10 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d009      	beq.n	8007998 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a22      	ldr	r2, [pc, #136]	; (8007a14 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d004      	beq.n	8007998 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a21      	ldr	r2, [pc, #132]	; (8007a18 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d12b      	bne.n	80079f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a2:	051b      	lsls	r3, r3, #20
 80079a4:	4313      	orrs	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a11      	ldr	r2, [pc, #68]	; (8007a10 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d009      	beq.n	80079e2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a10      	ldr	r2, [pc, #64]	; (8007a14 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d004      	beq.n	80079e2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a0e      	ldr	r2, [pc, #56]	; (8007a18 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d106      	bne.n	80079f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	40012c00 	.word	0x40012c00
 8007a14:	40013400 	.word	0x40013400
 8007a18:	40015000 	.word	0x40015000

08007a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 031f 	and.w	r3, r3, #31
 8007aba:	2204      	movs	r2, #4
 8007abc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a1a      	ldr	r2, [r3, #32]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	401a      	ands	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a1a      	ldr	r2, [r3, #32]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f003 031f 	and.w	r3, r3, #31
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	621a      	str	r2, [r3, #32]
}
 8007ae6:	bf00      	nop
 8007ae8:	371c      	adds	r7, #28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b082      	sub	sp, #8
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e042      	b.n	8007b8a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fa f9d8 	bl	8001ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2224      	movs	r2, #36	; 0x24
 8007b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0201 	bic.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fc51 	bl	80083dc <UART_SetConfig>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e022      	b.n	8007b8a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 ff41 	bl	80089d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f042 0201 	orr.w	r2, r2, #1
 8007b80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 ffc8 	bl	8008b18 <UART_CheckIdleState>
 8007b88:	4603      	mov	r3, r0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b08a      	sub	sp, #40	; 0x28
 8007b96:	af02      	add	r7, sp, #8
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	603b      	str	r3, [r7, #0]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ba8:	2b20      	cmp	r3, #32
 8007baa:	f040 8083 	bne.w	8007cb4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <HAL_UART_Transmit+0x28>
 8007bb4:	88fb      	ldrh	r3, [r7, #6]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e07b      	b.n	8007cb6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_UART_Transmit+0x3a>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e074      	b.n	8007cb6 <HAL_UART_Transmit+0x124>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2221      	movs	r2, #33	; 0x21
 8007be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007be4:	f7fa fc22 	bl	800242c <HAL_GetTick>
 8007be8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	88fa      	ldrh	r2, [r7, #6]
 8007bee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	88fa      	ldrh	r2, [r7, #6]
 8007bf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c02:	d108      	bne.n	8007c16 <HAL_UART_Transmit+0x84>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d104      	bne.n	8007c16 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	61bb      	str	r3, [r7, #24]
 8007c14:	e003      	b.n	8007c1e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007c26:	e02c      	b.n	8007c82 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2180      	movs	r1, #128	; 0x80
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 ffbb 	bl	8008bae <UART_WaitOnFlagUntilTimeout>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e039      	b.n	8007cb6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10b      	bne.n	8007c60 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	3302      	adds	r3, #2
 8007c5c:	61bb      	str	r3, [r7, #24]
 8007c5e:	e007      	b.n	8007c70 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	781a      	ldrb	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1cc      	bne.n	8007c28 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2200      	movs	r2, #0
 8007c96:	2140      	movs	r1, #64	; 0x40
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 ff88 	bl	8008bae <UART_WaitOnFlagUntilTimeout>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e006      	b.n	8007cb6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e000      	b.n	8007cb6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007cb4:	2302      	movs	r3, #2
  }
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3720      	adds	r7, #32
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	; 0x28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d142      	bne.n	8007d5e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <HAL_UART_Receive_IT+0x24>
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e03b      	b.n	8007d60 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <HAL_UART_Receive_IT+0x36>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e034      	b.n	8007d60 <HAL_UART_Receive_IT+0xa0>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a17      	ldr	r2, [pc, #92]	; (8007d68 <HAL_UART_Receive_IT+0xa8>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d01f      	beq.n	8007d4e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d018      	beq.n	8007d4e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	623b      	str	r3, [r7, #32]
 8007d3c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	69f9      	ldr	r1, [r7, #28]
 8007d40:	6a3a      	ldr	r2, [r7, #32]
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e6      	bne.n	8007d1c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d4e:	88fb      	ldrh	r3, [r7, #6]
 8007d50:	461a      	mov	r2, r3
 8007d52:	68b9      	ldr	r1, [r7, #8]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 fff3 	bl	8008d40 <UART_Start_Receive_IT>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	e000      	b.n	8007d60 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007d5e:	2302      	movs	r3, #2
  }
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3728      	adds	r7, #40	; 0x28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	40008000 	.word	0x40008000

08007d6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b0ba      	sub	sp, #232	; 0xe8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007d96:	f640 030f 	movw	r3, #2063	; 0x80f
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d11b      	bne.n	8007de0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dac:	f003 0320 	and.w	r3, r3, #32
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d015      	beq.n	8007de0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db8:	f003 0320 	and.w	r3, r3, #32
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d105      	bne.n	8007dcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d009      	beq.n	8007de0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 82d6 	beq.w	8008382 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
      }
      return;
 8007dde:	e2d0      	b.n	8008382 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 811f 	beq.w	8008028 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007dea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007dee:	4b8b      	ldr	r3, [pc, #556]	; (800801c <HAL_UART_IRQHandler+0x2b0>)
 8007df0:	4013      	ands	r3, r2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007df6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007dfa:	4b89      	ldr	r3, [pc, #548]	; (8008020 <HAL_UART_IRQHandler+0x2b4>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 8112 	beq.w	8008028 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d011      	beq.n	8007e34 <HAL_UART_IRQHandler+0xc8>
 8007e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2201      	movs	r2, #1
 8007e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e2a:	f043 0201 	orr.w	r2, r3, #1
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d011      	beq.n	8007e64 <HAL_UART_IRQHandler+0xf8>
 8007e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2202      	movs	r2, #2
 8007e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e5a:	f043 0204 	orr.w	r2, r3, #4
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d011      	beq.n	8007e94 <HAL_UART_IRQHandler+0x128>
 8007e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00b      	beq.n	8007e94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2204      	movs	r2, #4
 8007e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e8a:	f043 0202 	orr.w	r2, r3, #2
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e98:	f003 0308 	and.w	r3, r3, #8
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d017      	beq.n	8007ed0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d105      	bne.n	8007eb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007eac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007eb0:	4b5a      	ldr	r3, [pc, #360]	; (800801c <HAL_UART_IRQHandler+0x2b0>)
 8007eb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00b      	beq.n	8007ed0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2208      	movs	r2, #8
 8007ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ec6:	f043 0208 	orr.w	r2, r3, #8
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d012      	beq.n	8007f02 <HAL_UART_IRQHandler+0x196>
 8007edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00c      	beq.n	8007f02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ef8:	f043 0220 	orr.w	r2, r3, #32
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 823c 	beq.w	8008386 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f12:	f003 0320 	and.w	r3, r3, #32
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d013      	beq.n	8007f42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f1e:	f003 0320 	and.w	r3, r3, #32
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d105      	bne.n	8007f32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f56:	2b40      	cmp	r3, #64	; 0x40
 8007f58:	d005      	beq.n	8007f66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d04f      	beq.n	8008006 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 f814 	bl	8008f94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f76:	2b40      	cmp	r3, #64	; 0x40
 8007f78:	d141      	bne.n	8007ffe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3308      	adds	r3, #8
 8007f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f88:	e853 3f00 	ldrex	r3, [r3]
 8007f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1d9      	bne.n	8007f7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d013      	beq.n	8007ff6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fd2:	4a14      	ldr	r2, [pc, #80]	; (8008024 <HAL_UART_IRQHandler+0x2b8>)
 8007fd4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fc fa72 	bl	80044c4 <HAL_DMA_Abort_IT>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d017      	beq.n	8008016 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff4:	e00f      	b.n	8008016 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f9da 	bl	80083b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffc:	e00b      	b.n	8008016 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f9d6 	bl	80083b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008004:	e007      	b.n	8008016 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f9d2 	bl	80083b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008014:	e1b7      	b.n	8008386 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008016:	bf00      	nop
    return;
 8008018:	e1b5      	b.n	8008386 <HAL_UART_IRQHandler+0x61a>
 800801a:	bf00      	nop
 800801c:	10000001 	.word	0x10000001
 8008020:	04000120 	.word	0x04000120
 8008024:	08009061 	.word	0x08009061

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800802c:	2b01      	cmp	r3, #1
 800802e:	f040 814a 	bne.w	80082c6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008036:	f003 0310 	and.w	r3, r3, #16
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 8143 	beq.w	80082c6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008044:	f003 0310 	and.w	r3, r3, #16
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 813c 	beq.w	80082c6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2210      	movs	r2, #16
 8008054:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008060:	2b40      	cmp	r3, #64	; 0x40
 8008062:	f040 80b5 	bne.w	80081d0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008072:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 8187 	beq.w	800838a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008086:	429a      	cmp	r2, r3
 8008088:	f080 817f 	bcs.w	800838a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008092:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0320 	and.w	r3, r3, #32
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f040 8086 	bne.w	80081b4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080b4:	e853 3f00 	ldrex	r3, [r3]
 80080b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1da      	bne.n	80080a8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3308      	adds	r3, #8
 80080f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008104:	f023 0301 	bic.w	r3, r3, #1
 8008108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3308      	adds	r3, #8
 8008112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008116:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800811a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800811e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e1      	bne.n	80080f2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3308      	adds	r3, #8
 8008134:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800813e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3308      	adds	r3, #8
 800814e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008152:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008154:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008158:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e3      	bne.n	800812e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008184:	f023 0310 	bic.w	r3, r3, #16
 8008188:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	461a      	mov	r2, r3
 8008192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008196:	65bb      	str	r3, [r7, #88]	; 0x58
 8008198:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800819c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e4      	bne.n	8008174 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fc f92f 	bl	8004412 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f8fb 	bl	80083c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081ce:	e0dc      	b.n	800838a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081dc:	b29b      	uxth	r3, r3
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 80ce 	beq.w	800838e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80081f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 80c9 	beq.w	800838e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	461a      	mov	r2, r3
 800821a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800821e:	647b      	str	r3, [r7, #68]	; 0x44
 8008220:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008224:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800822c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1e4      	bne.n	80081fc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3308      	adds	r3, #8
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	e853 3f00 	ldrex	r3, [r3]
 8008240:	623b      	str	r3, [r7, #32]
   return(result);
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008248:	f023 0301 	bic.w	r3, r3, #1
 800824c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3308      	adds	r3, #8
 8008256:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800825a:	633a      	str	r2, [r7, #48]	; 0x30
 800825c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e1      	bne.n	8008232 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2220      	movs	r2, #32
 8008272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 0310 	bic.w	r3, r3, #16
 8008296:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	461a      	mov	r2, r3
 80082a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082a4:	61fb      	str	r3, [r7, #28]
 80082a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	69b9      	ldr	r1, [r7, #24]
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	617b      	str	r3, [r7, #20]
   return(result);
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e4      	bne.n	8008282 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f880 	bl	80083c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082c4:	e063      	b.n	800838e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00e      	beq.n	80082f0 <HAL_UART_IRQHandler+0x584>
 80082d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d008      	beq.n	80082f0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80082e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 fb57 	bl	800999c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082ee:	e051      	b.n	8008394 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80082f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d014      	beq.n	8008326 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80082fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008304:	2b00      	cmp	r3, #0
 8008306:	d105      	bne.n	8008314 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800830c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d008      	beq.n	8008326 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008318:	2b00      	cmp	r3, #0
 800831a:	d03a      	beq.n	8008392 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
    }
    return;
 8008324:	e035      	b.n	8008392 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d009      	beq.n	8008346 <HAL_UART_IRQHandler+0x5da>
 8008332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fea4 	bl	800908c <UART_EndTransmit_IT>
    return;
 8008344:	e026      	b.n	8008394 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d009      	beq.n	8008366 <HAL_UART_IRQHandler+0x5fa>
 8008352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008356:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 fb30 	bl	80099c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008364:	e016      	b.n	8008394 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d010      	beq.n	8008394 <HAL_UART_IRQHandler+0x628>
 8008372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008376:	2b00      	cmp	r3, #0
 8008378:	da0c      	bge.n	8008394 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 fb18 	bl	80099b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008380:	e008      	b.n	8008394 <HAL_UART_IRQHandler+0x628>
      return;
 8008382:	bf00      	nop
 8008384:	e006      	b.n	8008394 <HAL_UART_IRQHandler+0x628>
    return;
 8008386:	bf00      	nop
 8008388:	e004      	b.n	8008394 <HAL_UART_IRQHandler+0x628>
      return;
 800838a:	bf00      	nop
 800838c:	e002      	b.n	8008394 <HAL_UART_IRQHandler+0x628>
      return;
 800838e:	bf00      	nop
 8008390:	e000      	b.n	8008394 <HAL_UART_IRQHandler+0x628>
    return;
 8008392:	bf00      	nop
  }
}
 8008394:	37e8      	adds	r7, #232	; 0xe8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop

0800839c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083e0:	b08c      	sub	sp, #48	; 0x30
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	431a      	orrs	r2, r3
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	431a      	orrs	r2, r3
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	4313      	orrs	r3, r2
 8008402:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	4baa      	ldr	r3, [pc, #680]	; (80086b4 <UART_SetConfig+0x2d8>)
 800840c:	4013      	ands	r3, r2
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	6812      	ldr	r2, [r2, #0]
 8008412:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008414:	430b      	orrs	r3, r1
 8008416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	68da      	ldr	r2, [r3, #12]
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	430a      	orrs	r2, r1
 800842c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a9f      	ldr	r2, [pc, #636]	; (80086b8 <UART_SetConfig+0x2dc>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d004      	beq.n	8008448 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008444:	4313      	orrs	r3, r2
 8008446:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008452:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	6812      	ldr	r2, [r2, #0]
 800845a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800845c:	430b      	orrs	r3, r1
 800845e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008466:	f023 010f 	bic.w	r1, r3, #15
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a90      	ldr	r2, [pc, #576]	; (80086bc <UART_SetConfig+0x2e0>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d125      	bne.n	80084cc <UART_SetConfig+0xf0>
 8008480:	4b8f      	ldr	r3, [pc, #572]	; (80086c0 <UART_SetConfig+0x2e4>)
 8008482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	2b03      	cmp	r3, #3
 800848c:	d81a      	bhi.n	80084c4 <UART_SetConfig+0xe8>
 800848e:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <UART_SetConfig+0xb8>)
 8008490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008494:	080084a5 	.word	0x080084a5
 8008498:	080084b5 	.word	0x080084b5
 800849c:	080084ad 	.word	0x080084ad
 80084a0:	080084bd 	.word	0x080084bd
 80084a4:	2301      	movs	r3, #1
 80084a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084aa:	e116      	b.n	80086da <UART_SetConfig+0x2fe>
 80084ac:	2302      	movs	r3, #2
 80084ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b2:	e112      	b.n	80086da <UART_SetConfig+0x2fe>
 80084b4:	2304      	movs	r3, #4
 80084b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ba:	e10e      	b.n	80086da <UART_SetConfig+0x2fe>
 80084bc:	2308      	movs	r3, #8
 80084be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c2:	e10a      	b.n	80086da <UART_SetConfig+0x2fe>
 80084c4:	2310      	movs	r3, #16
 80084c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ca:	e106      	b.n	80086da <UART_SetConfig+0x2fe>
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a7c      	ldr	r2, [pc, #496]	; (80086c4 <UART_SetConfig+0x2e8>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d138      	bne.n	8008548 <UART_SetConfig+0x16c>
 80084d6:	4b7a      	ldr	r3, [pc, #488]	; (80086c0 <UART_SetConfig+0x2e4>)
 80084d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084dc:	f003 030c 	and.w	r3, r3, #12
 80084e0:	2b0c      	cmp	r3, #12
 80084e2:	d82d      	bhi.n	8008540 <UART_SetConfig+0x164>
 80084e4:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <UART_SetConfig+0x110>)
 80084e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ea:	bf00      	nop
 80084ec:	08008521 	.word	0x08008521
 80084f0:	08008541 	.word	0x08008541
 80084f4:	08008541 	.word	0x08008541
 80084f8:	08008541 	.word	0x08008541
 80084fc:	08008531 	.word	0x08008531
 8008500:	08008541 	.word	0x08008541
 8008504:	08008541 	.word	0x08008541
 8008508:	08008541 	.word	0x08008541
 800850c:	08008529 	.word	0x08008529
 8008510:	08008541 	.word	0x08008541
 8008514:	08008541 	.word	0x08008541
 8008518:	08008541 	.word	0x08008541
 800851c:	08008539 	.word	0x08008539
 8008520:	2300      	movs	r3, #0
 8008522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008526:	e0d8      	b.n	80086da <UART_SetConfig+0x2fe>
 8008528:	2302      	movs	r3, #2
 800852a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800852e:	e0d4      	b.n	80086da <UART_SetConfig+0x2fe>
 8008530:	2304      	movs	r3, #4
 8008532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008536:	e0d0      	b.n	80086da <UART_SetConfig+0x2fe>
 8008538:	2308      	movs	r3, #8
 800853a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800853e:	e0cc      	b.n	80086da <UART_SetConfig+0x2fe>
 8008540:	2310      	movs	r3, #16
 8008542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008546:	e0c8      	b.n	80086da <UART_SetConfig+0x2fe>
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a5e      	ldr	r2, [pc, #376]	; (80086c8 <UART_SetConfig+0x2ec>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d125      	bne.n	800859e <UART_SetConfig+0x1c2>
 8008552:	4b5b      	ldr	r3, [pc, #364]	; (80086c0 <UART_SetConfig+0x2e4>)
 8008554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008558:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800855c:	2b30      	cmp	r3, #48	; 0x30
 800855e:	d016      	beq.n	800858e <UART_SetConfig+0x1b2>
 8008560:	2b30      	cmp	r3, #48	; 0x30
 8008562:	d818      	bhi.n	8008596 <UART_SetConfig+0x1ba>
 8008564:	2b20      	cmp	r3, #32
 8008566:	d00a      	beq.n	800857e <UART_SetConfig+0x1a2>
 8008568:	2b20      	cmp	r3, #32
 800856a:	d814      	bhi.n	8008596 <UART_SetConfig+0x1ba>
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <UART_SetConfig+0x19a>
 8008570:	2b10      	cmp	r3, #16
 8008572:	d008      	beq.n	8008586 <UART_SetConfig+0x1aa>
 8008574:	e00f      	b.n	8008596 <UART_SetConfig+0x1ba>
 8008576:	2300      	movs	r3, #0
 8008578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800857c:	e0ad      	b.n	80086da <UART_SetConfig+0x2fe>
 800857e:	2302      	movs	r3, #2
 8008580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008584:	e0a9      	b.n	80086da <UART_SetConfig+0x2fe>
 8008586:	2304      	movs	r3, #4
 8008588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800858c:	e0a5      	b.n	80086da <UART_SetConfig+0x2fe>
 800858e:	2308      	movs	r3, #8
 8008590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008594:	e0a1      	b.n	80086da <UART_SetConfig+0x2fe>
 8008596:	2310      	movs	r3, #16
 8008598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800859c:	e09d      	b.n	80086da <UART_SetConfig+0x2fe>
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a4a      	ldr	r2, [pc, #296]	; (80086cc <UART_SetConfig+0x2f0>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d125      	bne.n	80085f4 <UART_SetConfig+0x218>
 80085a8:	4b45      	ldr	r3, [pc, #276]	; (80086c0 <UART_SetConfig+0x2e4>)
 80085aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80085b2:	2bc0      	cmp	r3, #192	; 0xc0
 80085b4:	d016      	beq.n	80085e4 <UART_SetConfig+0x208>
 80085b6:	2bc0      	cmp	r3, #192	; 0xc0
 80085b8:	d818      	bhi.n	80085ec <UART_SetConfig+0x210>
 80085ba:	2b80      	cmp	r3, #128	; 0x80
 80085bc:	d00a      	beq.n	80085d4 <UART_SetConfig+0x1f8>
 80085be:	2b80      	cmp	r3, #128	; 0x80
 80085c0:	d814      	bhi.n	80085ec <UART_SetConfig+0x210>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <UART_SetConfig+0x1f0>
 80085c6:	2b40      	cmp	r3, #64	; 0x40
 80085c8:	d008      	beq.n	80085dc <UART_SetConfig+0x200>
 80085ca:	e00f      	b.n	80085ec <UART_SetConfig+0x210>
 80085cc:	2300      	movs	r3, #0
 80085ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085d2:	e082      	b.n	80086da <UART_SetConfig+0x2fe>
 80085d4:	2302      	movs	r3, #2
 80085d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085da:	e07e      	b.n	80086da <UART_SetConfig+0x2fe>
 80085dc:	2304      	movs	r3, #4
 80085de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085e2:	e07a      	b.n	80086da <UART_SetConfig+0x2fe>
 80085e4:	2308      	movs	r3, #8
 80085e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ea:	e076      	b.n	80086da <UART_SetConfig+0x2fe>
 80085ec:	2310      	movs	r3, #16
 80085ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085f2:	e072      	b.n	80086da <UART_SetConfig+0x2fe>
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a35      	ldr	r2, [pc, #212]	; (80086d0 <UART_SetConfig+0x2f4>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d12a      	bne.n	8008654 <UART_SetConfig+0x278>
 80085fe:	4b30      	ldr	r3, [pc, #192]	; (80086c0 <UART_SetConfig+0x2e4>)
 8008600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800860c:	d01a      	beq.n	8008644 <UART_SetConfig+0x268>
 800860e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008612:	d81b      	bhi.n	800864c <UART_SetConfig+0x270>
 8008614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008618:	d00c      	beq.n	8008634 <UART_SetConfig+0x258>
 800861a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800861e:	d815      	bhi.n	800864c <UART_SetConfig+0x270>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <UART_SetConfig+0x250>
 8008624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008628:	d008      	beq.n	800863c <UART_SetConfig+0x260>
 800862a:	e00f      	b.n	800864c <UART_SetConfig+0x270>
 800862c:	2300      	movs	r3, #0
 800862e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008632:	e052      	b.n	80086da <UART_SetConfig+0x2fe>
 8008634:	2302      	movs	r3, #2
 8008636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800863a:	e04e      	b.n	80086da <UART_SetConfig+0x2fe>
 800863c:	2304      	movs	r3, #4
 800863e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008642:	e04a      	b.n	80086da <UART_SetConfig+0x2fe>
 8008644:	2308      	movs	r3, #8
 8008646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800864a:	e046      	b.n	80086da <UART_SetConfig+0x2fe>
 800864c:	2310      	movs	r3, #16
 800864e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008652:	e042      	b.n	80086da <UART_SetConfig+0x2fe>
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a17      	ldr	r2, [pc, #92]	; (80086b8 <UART_SetConfig+0x2dc>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d13a      	bne.n	80086d4 <UART_SetConfig+0x2f8>
 800865e:	4b18      	ldr	r3, [pc, #96]	; (80086c0 <UART_SetConfig+0x2e4>)
 8008660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008664:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008668:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800866c:	d01a      	beq.n	80086a4 <UART_SetConfig+0x2c8>
 800866e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008672:	d81b      	bhi.n	80086ac <UART_SetConfig+0x2d0>
 8008674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008678:	d00c      	beq.n	8008694 <UART_SetConfig+0x2b8>
 800867a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800867e:	d815      	bhi.n	80086ac <UART_SetConfig+0x2d0>
 8008680:	2b00      	cmp	r3, #0
 8008682:	d003      	beq.n	800868c <UART_SetConfig+0x2b0>
 8008684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008688:	d008      	beq.n	800869c <UART_SetConfig+0x2c0>
 800868a:	e00f      	b.n	80086ac <UART_SetConfig+0x2d0>
 800868c:	2300      	movs	r3, #0
 800868e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008692:	e022      	b.n	80086da <UART_SetConfig+0x2fe>
 8008694:	2302      	movs	r3, #2
 8008696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800869a:	e01e      	b.n	80086da <UART_SetConfig+0x2fe>
 800869c:	2304      	movs	r3, #4
 800869e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086a2:	e01a      	b.n	80086da <UART_SetConfig+0x2fe>
 80086a4:	2308      	movs	r3, #8
 80086a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086aa:	e016      	b.n	80086da <UART_SetConfig+0x2fe>
 80086ac:	2310      	movs	r3, #16
 80086ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086b2:	e012      	b.n	80086da <UART_SetConfig+0x2fe>
 80086b4:	cfff69f3 	.word	0xcfff69f3
 80086b8:	40008000 	.word	0x40008000
 80086bc:	40013800 	.word	0x40013800
 80086c0:	40021000 	.word	0x40021000
 80086c4:	40004400 	.word	0x40004400
 80086c8:	40004800 	.word	0x40004800
 80086cc:	40004c00 	.word	0x40004c00
 80086d0:	40005000 	.word	0x40005000
 80086d4:	2310      	movs	r3, #16
 80086d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4aae      	ldr	r2, [pc, #696]	; (8008998 <UART_SetConfig+0x5bc>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	f040 8097 	bne.w	8008814 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086ea:	2b08      	cmp	r3, #8
 80086ec:	d823      	bhi.n	8008736 <UART_SetConfig+0x35a>
 80086ee:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <UART_SetConfig+0x318>)
 80086f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f4:	08008719 	.word	0x08008719
 80086f8:	08008737 	.word	0x08008737
 80086fc:	08008721 	.word	0x08008721
 8008700:	08008737 	.word	0x08008737
 8008704:	08008727 	.word	0x08008727
 8008708:	08008737 	.word	0x08008737
 800870c:	08008737 	.word	0x08008737
 8008710:	08008737 	.word	0x08008737
 8008714:	0800872f 	.word	0x0800872f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008718:	f7fc ffbe 	bl	8005698 <HAL_RCC_GetPCLK1Freq>
 800871c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800871e:	e010      	b.n	8008742 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008720:	4b9e      	ldr	r3, [pc, #632]	; (800899c <UART_SetConfig+0x5c0>)
 8008722:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008724:	e00d      	b.n	8008742 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008726:	f7fc ff49 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 800872a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800872c:	e009      	b.n	8008742 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800872e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008732:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008734:	e005      	b.n	8008742 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008740:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 8130 	beq.w	80089aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874e:	4a94      	ldr	r2, [pc, #592]	; (80089a0 <UART_SetConfig+0x5c4>)
 8008750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008754:	461a      	mov	r2, r3
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008758:	fbb3 f3f2 	udiv	r3, r3, r2
 800875c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	4613      	mov	r3, r2
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	4413      	add	r3, r2
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	429a      	cmp	r2, r3
 800876c:	d305      	bcc.n	800877a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	429a      	cmp	r2, r3
 8008778:	d903      	bls.n	8008782 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008780:	e113      	b.n	80089aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	2200      	movs	r2, #0
 8008786:	60bb      	str	r3, [r7, #8]
 8008788:	60fa      	str	r2, [r7, #12]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	4a84      	ldr	r2, [pc, #528]	; (80089a0 <UART_SetConfig+0x5c4>)
 8008790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008794:	b29b      	uxth	r3, r3
 8008796:	2200      	movs	r2, #0
 8008798:	603b      	str	r3, [r7, #0]
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087a4:	f7f8 f8b2 	bl	800090c <__aeabi_uldivmod>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4610      	mov	r0, r2
 80087ae:	4619      	mov	r1, r3
 80087b0:	f04f 0200 	mov.w	r2, #0
 80087b4:	f04f 0300 	mov.w	r3, #0
 80087b8:	020b      	lsls	r3, r1, #8
 80087ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80087be:	0202      	lsls	r2, r0, #8
 80087c0:	6979      	ldr	r1, [r7, #20]
 80087c2:	6849      	ldr	r1, [r1, #4]
 80087c4:	0849      	lsrs	r1, r1, #1
 80087c6:	2000      	movs	r0, #0
 80087c8:	460c      	mov	r4, r1
 80087ca:	4605      	mov	r5, r0
 80087cc:	eb12 0804 	adds.w	r8, r2, r4
 80087d0:	eb43 0905 	adc.w	r9, r3, r5
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	469a      	mov	sl, r3
 80087dc:	4693      	mov	fp, r2
 80087de:	4652      	mov	r2, sl
 80087e0:	465b      	mov	r3, fp
 80087e2:	4640      	mov	r0, r8
 80087e4:	4649      	mov	r1, r9
 80087e6:	f7f8 f891 	bl	800090c <__aeabi_uldivmod>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	4613      	mov	r3, r2
 80087f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087f8:	d308      	bcc.n	800880c <UART_SetConfig+0x430>
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008800:	d204      	bcs.n	800880c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6a3a      	ldr	r2, [r7, #32]
 8008808:	60da      	str	r2, [r3, #12]
 800880a:	e0ce      	b.n	80089aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008812:	e0ca      	b.n	80089aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800881c:	d166      	bne.n	80088ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800881e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008822:	2b08      	cmp	r3, #8
 8008824:	d827      	bhi.n	8008876 <UART_SetConfig+0x49a>
 8008826:	a201      	add	r2, pc, #4	; (adr r2, 800882c <UART_SetConfig+0x450>)
 8008828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882c:	08008851 	.word	0x08008851
 8008830:	08008859 	.word	0x08008859
 8008834:	08008861 	.word	0x08008861
 8008838:	08008877 	.word	0x08008877
 800883c:	08008867 	.word	0x08008867
 8008840:	08008877 	.word	0x08008877
 8008844:	08008877 	.word	0x08008877
 8008848:	08008877 	.word	0x08008877
 800884c:	0800886f 	.word	0x0800886f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008850:	f7fc ff22 	bl	8005698 <HAL_RCC_GetPCLK1Freq>
 8008854:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008856:	e014      	b.n	8008882 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008858:	f7fc ff34 	bl	80056c4 <HAL_RCC_GetPCLK2Freq>
 800885c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800885e:	e010      	b.n	8008882 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008860:	4b4e      	ldr	r3, [pc, #312]	; (800899c <UART_SetConfig+0x5c0>)
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008864:	e00d      	b.n	8008882 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008866:	f7fc fea9 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 800886a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800886c:	e009      	b.n	8008882 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800886e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008874:	e005      	b.n	8008882 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008880:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 8090 	beq.w	80089aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888e:	4a44      	ldr	r2, [pc, #272]	; (80089a0 <UART_SetConfig+0x5c4>)
 8008890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008894:	461a      	mov	r2, r3
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	fbb3 f3f2 	udiv	r3, r3, r2
 800889c:	005a      	lsls	r2, r3, #1
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	085b      	lsrs	r3, r3, #1
 80088a4:	441a      	add	r2, r3
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	2b0f      	cmp	r3, #15
 80088b4:	d916      	bls.n	80088e4 <UART_SetConfig+0x508>
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088bc:	d212      	bcs.n	80088e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	f023 030f 	bic.w	r3, r3, #15
 80088c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	085b      	lsrs	r3, r3, #1
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	8bfb      	ldrh	r3, [r7, #30]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	8bfa      	ldrh	r2, [r7, #30]
 80088e0:	60da      	str	r2, [r3, #12]
 80088e2:	e062      	b.n	80089aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088ea:	e05e      	b.n	80089aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d828      	bhi.n	8008946 <UART_SetConfig+0x56a>
 80088f4:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <UART_SetConfig+0x520>)
 80088f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fa:	bf00      	nop
 80088fc:	08008921 	.word	0x08008921
 8008900:	08008929 	.word	0x08008929
 8008904:	08008931 	.word	0x08008931
 8008908:	08008947 	.word	0x08008947
 800890c:	08008937 	.word	0x08008937
 8008910:	08008947 	.word	0x08008947
 8008914:	08008947 	.word	0x08008947
 8008918:	08008947 	.word	0x08008947
 800891c:	0800893f 	.word	0x0800893f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008920:	f7fc feba 	bl	8005698 <HAL_RCC_GetPCLK1Freq>
 8008924:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008926:	e014      	b.n	8008952 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008928:	f7fc fecc 	bl	80056c4 <HAL_RCC_GetPCLK2Freq>
 800892c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800892e:	e010      	b.n	8008952 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008930:	4b1a      	ldr	r3, [pc, #104]	; (800899c <UART_SetConfig+0x5c0>)
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008934:	e00d      	b.n	8008952 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008936:	f7fc fe41 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 800893a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800893c:	e009      	b.n	8008952 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800893e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008942:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008944:	e005      	b.n	8008952 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008950:	bf00      	nop
    }

    if (pclk != 0U)
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	2b00      	cmp	r3, #0
 8008956:	d028      	beq.n	80089aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	4a10      	ldr	r2, [pc, #64]	; (80089a0 <UART_SetConfig+0x5c4>)
 800895e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008962:	461a      	mov	r2, r3
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	fbb3 f2f2 	udiv	r2, r3, r2
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	085b      	lsrs	r3, r3, #1
 8008970:	441a      	add	r2, r3
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	fbb2 f3f3 	udiv	r3, r2, r3
 800897a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	2b0f      	cmp	r3, #15
 8008980:	d910      	bls.n	80089a4 <UART_SetConfig+0x5c8>
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008988:	d20c      	bcs.n	80089a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	b29a      	uxth	r2, r3
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	60da      	str	r2, [r3, #12]
 8008994:	e009      	b.n	80089aa <UART_SetConfig+0x5ce>
 8008996:	bf00      	nop
 8008998:	40008000 	.word	0x40008000
 800899c:	00f42400 	.word	0x00f42400
 80089a0:	0800b1d4 	.word	0x0800b1d4
      }
      else
      {
        ret = HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2200      	movs	r2, #0
 80089be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2200      	movs	r2, #0
 80089c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80089c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3730      	adds	r7, #48	; 0x30
 80089ce:	46bd      	mov	sp, r7
 80089d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080089d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00a      	beq.n	80089fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00a      	beq.n	8008a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00a      	beq.n	8008a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a46:	f003 0308 	and.w	r3, r3, #8
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00a      	beq.n	8008a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	430a      	orrs	r2, r1
 8008a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a68:	f003 0310 	and.w	r3, r3, #16
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00a      	beq.n	8008a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8a:	f003 0320 	and.w	r3, r3, #32
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00a      	beq.n	8008aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d01a      	beq.n	8008aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ad2:	d10a      	bne.n	8008aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00a      	beq.n	8008b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	605a      	str	r2, [r3, #4]
  }
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af02      	add	r7, sp, #8
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b28:	f7f9 fc80 	bl	800242c <HAL_GetTick>
 8008b2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0308 	and.w	r3, r3, #8
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d10e      	bne.n	8008b5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f82f 	bl	8008bae <UART_WaitOnFlagUntilTimeout>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b56:	2303      	movs	r3, #3
 8008b58:	e025      	b.n	8008ba6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d10e      	bne.n	8008b86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f819 	bl	8008bae <UART_WaitOnFlagUntilTimeout>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e00f      	b.n	8008ba6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b09c      	sub	sp, #112	; 0x70
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	60f8      	str	r0, [r7, #12]
 8008bb6:	60b9      	str	r1, [r7, #8]
 8008bb8:	603b      	str	r3, [r7, #0]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bbe:	e0a9      	b.n	8008d14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc6:	f000 80a5 	beq.w	8008d14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bca:	f7f9 fc2f 	bl	800242c <HAL_GetTick>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d302      	bcc.n	8008be0 <UART_WaitOnFlagUntilTimeout+0x32>
 8008bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d140      	bne.n	8008c62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008be8:	e853 3f00 	ldrex	r3, [r3]
 8008bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c06:	e841 2300 	strex	r3, r2, [r1]
 8008c0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1e6      	bne.n	8008be0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3308      	adds	r3, #8
 8008c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1c:	e853 3f00 	ldrex	r3, [r3]
 8008c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c24:	f023 0301 	bic.w	r3, r3, #1
 8008c28:	663b      	str	r3, [r7, #96]	; 0x60
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3308      	adds	r3, #8
 8008c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c32:	64ba      	str	r2, [r7, #72]	; 0x48
 8008c34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c3a:	e841 2300 	strex	r3, r2, [r1]
 8008c3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1e5      	bne.n	8008c12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e069      	b.n	8008d36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0304 	and.w	r3, r3, #4
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d051      	beq.n	8008d14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c7e:	d149      	bne.n	8008d14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8008caa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e6      	bne.n	8008c8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	e853 3f00 	ldrex	r3, [r3]
 8008cca:	613b      	str	r3, [r7, #16]
   return(result);
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f023 0301 	bic.w	r3, r3, #1
 8008cd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008cdc:	623a      	str	r2, [r7, #32]
 8008cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce0:	69f9      	ldr	r1, [r7, #28]
 8008ce2:	6a3a      	ldr	r2, [r7, #32]
 8008ce4:	e841 2300 	strex	r3, r2, [r1]
 8008ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1e5      	bne.n	8008cbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e010      	b.n	8008d36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	69da      	ldr	r2, [r3, #28]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	bf0c      	ite	eq
 8008d24:	2301      	moveq	r3, #1
 8008d26:	2300      	movne	r3, #0
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	f43f af46 	beq.w	8008bc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3770      	adds	r7, #112	; 0x70
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b0a3      	sub	sp, #140	; 0x8c
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	88fa      	ldrh	r2, [r7, #6]
 8008d58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	88fa      	ldrh	r2, [r7, #6]
 8008d60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d72:	d10e      	bne.n	8008d92 <UART_Start_Receive_IT+0x52>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d105      	bne.n	8008d88 <UART_Start_Receive_IT+0x48>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008d82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d86:	e02d      	b.n	8008de4 <UART_Start_Receive_IT+0xa4>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	22ff      	movs	r2, #255	; 0xff
 8008d8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d90:	e028      	b.n	8008de4 <UART_Start_Receive_IT+0xa4>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10d      	bne.n	8008db6 <UART_Start_Receive_IT+0x76>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d104      	bne.n	8008dac <UART_Start_Receive_IT+0x6c>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	22ff      	movs	r2, #255	; 0xff
 8008da6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008daa:	e01b      	b.n	8008de4 <UART_Start_Receive_IT+0xa4>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	227f      	movs	r2, #127	; 0x7f
 8008db0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008db4:	e016      	b.n	8008de4 <UART_Start_Receive_IT+0xa4>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dbe:	d10d      	bne.n	8008ddc <UART_Start_Receive_IT+0x9c>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <UART_Start_Receive_IT+0x92>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	227f      	movs	r2, #127	; 0x7f
 8008dcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008dd0:	e008      	b.n	8008de4 <UART_Start_Receive_IT+0xa4>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	223f      	movs	r2, #63	; 0x3f
 8008dd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008dda:	e003      	b.n	8008de4 <UART_Start_Receive_IT+0xa4>
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2222      	movs	r2, #34	; 0x22
 8008df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3308      	adds	r3, #8
 8008dfa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dfe:	e853 3f00 	ldrex	r3, [r3]
 8008e02:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e06:	f043 0301 	orr.w	r3, r3, #1
 8008e0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3308      	adds	r3, #8
 8008e14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008e18:	673a      	str	r2, [r7, #112]	; 0x70
 8008e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008e1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008e20:	e841 2300 	strex	r3, r2, [r1]
 8008e24:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008e26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1e3      	bne.n	8008df4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e34:	d153      	bne.n	8008ede <UART_Start_Receive_IT+0x19e>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e3c:	88fa      	ldrh	r2, [r7, #6]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d34d      	bcc.n	8008ede <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e4a:	d107      	bne.n	8008e5c <UART_Start_Receive_IT+0x11c>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d103      	bne.n	8008e5c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4a4b      	ldr	r2, [pc, #300]	; (8008f84 <UART_Start_Receive_IT+0x244>)
 8008e58:	671a      	str	r2, [r3, #112]	; 0x70
 8008e5a:	e002      	b.n	8008e62 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4a4a      	ldr	r2, [pc, #296]	; (8008f88 <UART_Start_Receive_IT+0x248>)
 8008e60:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d01a      	beq.n	8008ea8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e7a:	e853 3f00 	ldrex	r3, [r3]
 8008e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e96:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e9c:	e841 2300 	strex	r3, r2, [r1]
 8008ea0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e4      	bne.n	8008e72 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3308      	adds	r3, #8
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3308      	adds	r3, #8
 8008ec6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008ec8:	64ba      	str	r2, [r7, #72]	; 0x48
 8008eca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e5      	bne.n	8008ea8 <UART_Start_Receive_IT+0x168>
 8008edc:	e04a      	b.n	8008f74 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee6:	d107      	bne.n	8008ef8 <UART_Start_Receive_IT+0x1b8>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d103      	bne.n	8008ef8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4a26      	ldr	r2, [pc, #152]	; (8008f8c <UART_Start_Receive_IT+0x24c>)
 8008ef4:	671a      	str	r2, [r3, #112]	; 0x70
 8008ef6:	e002      	b.n	8008efe <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4a25      	ldr	r2, [pc, #148]	; (8008f90 <UART_Start_Receive_IT+0x250>)
 8008efc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d019      	beq.n	8008f42 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	e853 3f00 	ldrex	r3, [r3]
 8008f1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008f22:	677b      	str	r3, [r7, #116]	; 0x74
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f34:	e841 2300 	strex	r3, r2, [r1]
 8008f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1e6      	bne.n	8008f0e <UART_Start_Receive_IT+0x1ce>
 8008f40:	e018      	b.n	8008f74 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f043 0320 	orr.w	r3, r3, #32
 8008f56:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f60:	623b      	str	r3, [r7, #32]
 8008f62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	69f9      	ldr	r1, [r7, #28]
 8008f66:	6a3a      	ldr	r2, [r7, #32]
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e6      	bne.n	8008f42 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	378c      	adds	r7, #140	; 0x8c
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	0800969d 	.word	0x0800969d
 8008f88:	080093a5 	.word	0x080093a5
 8008f8c:	08009243 	.word	0x08009243
 8008f90:	080090e3 	.word	0x080090e3

08008f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b095      	sub	sp, #84	; 0x54
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa4:	e853 3f00 	ldrex	r3, [r3]
 8008fa8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fba:	643b      	str	r3, [r7, #64]	; 0x40
 8008fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fc2:	e841 2300 	strex	r3, r2, [r1]
 8008fc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1e6      	bne.n	8008f9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3308      	adds	r3, #8
 8008fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fe4:	f023 0301 	bic.w	r3, r3, #1
 8008fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3308      	adds	r3, #8
 8008ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ffa:	e841 2300 	strex	r3, r2, [r1]
 8008ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1e3      	bne.n	8008fce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800900a:	2b01      	cmp	r3, #1
 800900c:	d118      	bne.n	8009040 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	e853 3f00 	ldrex	r3, [r3]
 800901a:	60bb      	str	r3, [r7, #8]
   return(result);
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f023 0310 	bic.w	r3, r3, #16
 8009022:	647b      	str	r3, [r7, #68]	; 0x44
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	461a      	mov	r2, r3
 800902a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800902c:	61bb      	str	r3, [r7, #24]
 800902e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009030:	6979      	ldr	r1, [r7, #20]
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	e841 2300 	strex	r3, r2, [r1]
 8009038:	613b      	str	r3, [r7, #16]
   return(result);
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e6      	bne.n	800900e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2220      	movs	r2, #32
 8009044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009054:	bf00      	nop
 8009056:	3754      	adds	r7, #84	; 0x54
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f7ff f996 	bl	80083b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009084:	bf00      	nop
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090a8:	61fb      	str	r3, [r7, #28]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	61bb      	str	r3, [r7, #24]
 80090b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	6979      	ldr	r1, [r7, #20]
 80090b8:	69ba      	ldr	r2, [r7, #24]
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	613b      	str	r3, [r7, #16]
   return(result);
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e6      	bne.n	8009094 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2220      	movs	r2, #32
 80090ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff f961 	bl	800839c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090da:	bf00      	nop
 80090dc:	3720      	adds	r7, #32
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b096      	sub	sp, #88	; 0x58
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090fa:	2b22      	cmp	r3, #34	; 0x22
 80090fc:	f040 8095 	bne.w	800922a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009106:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800910a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800910e:	b2d9      	uxtb	r1, r3
 8009110:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009114:	b2da      	uxtb	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911a:	400a      	ands	r2, r1
 800911c:	b2d2      	uxtb	r2, r2
 800911e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009130:	b29b      	uxth	r3, r3
 8009132:	3b01      	subs	r3, #1
 8009134:	b29a      	uxth	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009142:	b29b      	uxth	r3, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	d178      	bne.n	800923a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800915c:	653b      	str	r3, [r7, #80]	; 0x50
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009166:	647b      	str	r3, [r7, #68]	; 0x44
 8009168:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800916c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e6      	bne.n	8009148 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3308      	adds	r3, #8
 8009180:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	e853 3f00 	ldrex	r3, [r3]
 8009188:	623b      	str	r3, [r7, #32]
   return(result);
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	f023 0301 	bic.w	r3, r3, #1
 8009190:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3308      	adds	r3, #8
 8009198:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800919a:	633a      	str	r2, [r7, #48]	; 0x30
 800919c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e5      	bne.n	800917a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d12e      	bne.n	8009222 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f023 0310 	bic.w	r3, r3, #16
 80091de:	64bb      	str	r3, [r7, #72]	; 0x48
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	461a      	mov	r2, r3
 80091e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091e8:	61fb      	str	r3, [r7, #28]
 80091ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	69b9      	ldr	r1, [r7, #24]
 80091ee:	69fa      	ldr	r2, [r7, #28]
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	617b      	str	r3, [r7, #20]
   return(result);
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e6      	bne.n	80091ca <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	f003 0310 	and.w	r3, r3, #16
 8009206:	2b10      	cmp	r3, #16
 8009208:	d103      	bne.n	8009212 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2210      	movs	r2, #16
 8009210:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff f8d2 	bl	80083c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009220:	e00b      	b.n	800923a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7f9 f898 	bl	8002358 <HAL_UART_RxCpltCallback>
}
 8009228:	e007      	b.n	800923a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	699a      	ldr	r2, [r3, #24]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f042 0208 	orr.w	r2, r2, #8
 8009238:	619a      	str	r2, [r3, #24]
}
 800923a:	bf00      	nop
 800923c:	3758      	adds	r7, #88	; 0x58
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b096      	sub	sp, #88	; 0x58
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009250:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800925a:	2b22      	cmp	r3, #34	; 0x22
 800925c:	f040 8095 	bne.w	800938a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009266:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800926e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009270:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009274:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009278:	4013      	ands	r3, r2
 800927a:	b29a      	uxth	r2, r3
 800927c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800927e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009284:	1c9a      	adds	r2, r3, #2
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009290:	b29b      	uxth	r3, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	b29a      	uxth	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d178      	bne.n	800939a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b0:	e853 3f00 	ldrex	r3, [r3]
 80092b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c6:	643b      	str	r3, [r7, #64]	; 0x40
 80092c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1e6      	bne.n	80092a8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3308      	adds	r3, #8
 80092e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	e853 3f00 	ldrex	r3, [r3]
 80092e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	f023 0301 	bic.w	r3, r3, #1
 80092f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3308      	adds	r3, #8
 80092f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e5      	bne.n	80092da <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2220      	movs	r2, #32
 8009312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009320:	2b01      	cmp	r3, #1
 8009322:	d12e      	bne.n	8009382 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	60bb      	str	r3, [r7, #8]
   return(result);
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f023 0310 	bic.w	r3, r3, #16
 800933e:	647b      	str	r3, [r7, #68]	; 0x44
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	461a      	mov	r2, r3
 8009346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009348:	61bb      	str	r3, [r7, #24]
 800934a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	6979      	ldr	r1, [r7, #20]
 800934e:	69ba      	ldr	r2, [r7, #24]
 8009350:	e841 2300 	strex	r3, r2, [r1]
 8009354:	613b      	str	r3, [r7, #16]
   return(result);
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e6      	bne.n	800932a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	f003 0310 	and.w	r3, r3, #16
 8009366:	2b10      	cmp	r3, #16
 8009368:	d103      	bne.n	8009372 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2210      	movs	r2, #16
 8009370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff f822 	bl	80083c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009380:	e00b      	b.n	800939a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7f8 ffe8 	bl	8002358 <HAL_UART_RxCpltCallback>
}
 8009388:	e007      	b.n	800939a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	699a      	ldr	r2, [r3, #24]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f042 0208 	orr.w	r2, r2, #8
 8009398:	619a      	str	r2, [r3, #24]
}
 800939a:	bf00      	nop
 800939c:	3758      	adds	r7, #88	; 0x58
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b0a6      	sub	sp, #152	; 0x98
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093b2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	69db      	ldr	r3, [r3, #28]
 80093bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093da:	2b22      	cmp	r3, #34	; 0x22
 80093dc:	f040 814f 	bne.w	800967e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093e6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093ea:	e0f6      	b.n	80095da <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80093f6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80093fa:	b2d9      	uxtb	r1, r3
 80093fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009400:	b2da      	uxtb	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009406:	400a      	ands	r2, r1
 8009408:	b2d2      	uxtb	r2, r2
 800940a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800941c:	b29b      	uxth	r3, r3
 800941e:	3b01      	subs	r3, #1
 8009420:	b29a      	uxth	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009432:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	2b00      	cmp	r3, #0
 800943c:	d053      	beq.n	80094e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800943e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b00      	cmp	r3, #0
 8009448:	d011      	beq.n	800946e <UART_RxISR_8BIT_FIFOEN+0xca>
 800944a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800944e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00b      	beq.n	800946e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2201      	movs	r2, #1
 800945c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009464:	f043 0201 	orr.w	r2, r3, #1
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800946e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b00      	cmp	r3, #0
 8009478:	d011      	beq.n	800949e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800947a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00b      	beq.n	800949e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2202      	movs	r2, #2
 800948c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009494:	f043 0204 	orr.w	r2, r3, #4
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800949e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094a2:	f003 0304 	and.w	r3, r3, #4
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d011      	beq.n	80094ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 80094aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00b      	beq.n	80094ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2204      	movs	r2, #4
 80094bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094c4:	f043 0202 	orr.w	r2, r3, #2
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d006      	beq.n	80094e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7fe ff69 	bl	80083b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d173      	bne.n	80095da <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009514:	66bb      	str	r3, [r7, #104]	; 0x68
 8009516:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009518:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800951a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800951c:	e841 2300 	strex	r3, r2, [r1]
 8009520:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1e4      	bne.n	80094f2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3308      	adds	r3, #8
 800952e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009532:	e853 3f00 	ldrex	r3, [r3]
 8009536:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800953a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800953e:	f023 0301 	bic.w	r3, r3, #1
 8009542:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3308      	adds	r3, #8
 800954a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800954c:	657a      	str	r2, [r7, #84]	; 0x54
 800954e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009552:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800955a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e3      	bne.n	8009528 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2220      	movs	r2, #32
 8009564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009572:	2b01      	cmp	r3, #1
 8009574:	d12e      	bne.n	80095d4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009584:	e853 3f00 	ldrex	r3, [r3]
 8009588:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	f023 0310 	bic.w	r3, r3, #16
 8009590:	67bb      	str	r3, [r7, #120]	; 0x78
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	461a      	mov	r2, r3
 8009598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800959a:	643b      	str	r3, [r7, #64]	; 0x40
 800959c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095a2:	e841 2300 	strex	r3, r2, [r1]
 80095a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1e6      	bne.n	800957c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	f003 0310 	and.w	r3, r3, #16
 80095b8:	2b10      	cmp	r3, #16
 80095ba:	d103      	bne.n	80095c4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2210      	movs	r2, #16
 80095c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7fe fef9 	bl	80083c4 <HAL_UARTEx_RxEventCallback>
 80095d2:	e002      	b.n	80095da <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7f8 febf 	bl	8002358 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d006      	beq.n	80095f0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80095e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095e6:	f003 0320 	and.w	r3, r3, #32
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f47f aefe 	bne.w	80093ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80095fa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d045      	beq.n	800968e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009608:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800960c:	429a      	cmp	r2, r3
 800960e:	d23e      	bcs.n	800968e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3308      	adds	r3, #8
 8009616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	e853 3f00 	ldrex	r3, [r3]
 800961e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009626:	673b      	str	r3, [r7, #112]	; 0x70
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3308      	adds	r3, #8
 800962e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009630:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e5      	bne.n	8009610 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a14      	ldr	r2, [pc, #80]	; (8009698 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009648:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	e853 3f00 	ldrex	r3, [r3]
 8009656:	60bb      	str	r3, [r7, #8]
   return(result);
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f043 0320 	orr.w	r3, r3, #32
 800965e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	461a      	mov	r2, r3
 8009666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009668:	61bb      	str	r3, [r7, #24]
 800966a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966c:	6979      	ldr	r1, [r7, #20]
 800966e:	69ba      	ldr	r2, [r7, #24]
 8009670:	e841 2300 	strex	r3, r2, [r1]
 8009674:	613b      	str	r3, [r7, #16]
   return(result);
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1e6      	bne.n	800964a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800967c:	e007      	b.n	800968e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	699a      	ldr	r2, [r3, #24]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f042 0208 	orr.w	r2, r2, #8
 800968c:	619a      	str	r2, [r3, #24]
}
 800968e:	bf00      	nop
 8009690:	3798      	adds	r7, #152	; 0x98
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	080090e3 	.word	0x080090e3

0800969c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b0a8      	sub	sp, #160	; 0xa0
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096aa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	69db      	ldr	r3, [r3, #28]
 80096b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d2:	2b22      	cmp	r3, #34	; 0x22
 80096d4:	f040 8153 	bne.w	800997e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096de:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096e2:	e0fa      	b.n	80098da <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ea:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80096f6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80096fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80096fe:	4013      	ands	r3, r2
 8009700:	b29a      	uxth	r2, r3
 8009702:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009706:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800970c:	1c9a      	adds	r2, r3, #2
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009718:	b29b      	uxth	r3, r3
 800971a:	3b01      	subs	r3, #1
 800971c:	b29a      	uxth	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800972e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	2b00      	cmp	r3, #0
 8009738:	d053      	beq.n	80097e2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800973a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800973e:	f003 0301 	and.w	r3, r3, #1
 8009742:	2b00      	cmp	r3, #0
 8009744:	d011      	beq.n	800976a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009746:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800974a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00b      	beq.n	800976a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2201      	movs	r2, #1
 8009758:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009760:	f043 0201 	orr.w	r2, r3, #1
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800976a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800976e:	f003 0302 	and.w	r3, r3, #2
 8009772:	2b00      	cmp	r3, #0
 8009774:	d011      	beq.n	800979a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009776:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00b      	beq.n	800979a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2202      	movs	r2, #2
 8009788:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009790:	f043 0204 	orr.w	r2, r3, #4
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800979a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800979e:	f003 0304 	and.w	r3, r3, #4
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d011      	beq.n	80097ca <UART_RxISR_16BIT_FIFOEN+0x12e>
 80097a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00b      	beq.n	80097ca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2204      	movs	r2, #4
 80097b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097c0:	f043 0202 	orr.w	r2, r3, #2
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d006      	beq.n	80097e2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7fe fdeb 	bl	80083b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d175      	bne.n	80098da <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80097fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	461a      	mov	r2, r3
 800980c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009812:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009816:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800981e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e4      	bne.n	80097ee <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3308      	adds	r3, #8
 800982a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800982e:	e853 3f00 	ldrex	r3, [r3]
 8009832:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800983a:	f023 0301 	bic.w	r3, r3, #1
 800983e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3308      	adds	r3, #8
 8009848:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800984c:	65ba      	str	r2, [r7, #88]	; 0x58
 800984e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009850:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009854:	e841 2300 	strex	r3, r2, [r1]
 8009858:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800985a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1e1      	bne.n	8009824 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2220      	movs	r2, #32
 8009864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009872:	2b01      	cmp	r3, #1
 8009874:	d12e      	bne.n	80098d4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800988a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800988c:	f023 0310 	bic.w	r3, r3, #16
 8009890:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	461a      	mov	r2, r3
 8009898:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800989a:	647b      	str	r3, [r7, #68]	; 0x44
 800989c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e6      	bne.n	800987c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	69db      	ldr	r3, [r3, #28]
 80098b4:	f003 0310 	and.w	r3, r3, #16
 80098b8:	2b10      	cmp	r3, #16
 80098ba:	d103      	bne.n	80098c4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2210      	movs	r2, #16
 80098c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7fe fd79 	bl	80083c4 <HAL_UARTEx_RxEventCallback>
 80098d2:	e002      	b.n	80098da <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7f8 fd3f 	bl	8002358 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80098da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d006      	beq.n	80098f0 <UART_RxISR_16BIT_FIFOEN+0x254>
 80098e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098e6:	f003 0320 	and.w	r3, r3, #32
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f47f aefa 	bne.w	80096e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098f6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80098fa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d045      	beq.n	800998e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009908:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800990c:	429a      	cmp	r2, r3
 800990e:	d23e      	bcs.n	800998e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3308      	adds	r3, #8
 8009916:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	e853 3f00 	ldrex	r3, [r3]
 800991e:	623b      	str	r3, [r7, #32]
   return(result);
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009926:	677b      	str	r3, [r7, #116]	; 0x74
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3308      	adds	r3, #8
 800992e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009930:	633a      	str	r2, [r7, #48]	; 0x30
 8009932:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009934:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009938:	e841 2300 	strex	r3, r2, [r1]
 800993c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1e5      	bne.n	8009910 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a14      	ldr	r2, [pc, #80]	; (8009998 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009948:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	e853 3f00 	ldrex	r3, [r3]
 8009956:	60fb      	str	r3, [r7, #12]
   return(result);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f043 0320 	orr.w	r3, r3, #32
 800995e:	673b      	str	r3, [r7, #112]	; 0x70
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	461a      	mov	r2, r3
 8009966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009968:	61fb      	str	r3, [r7, #28]
 800996a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996c:	69b9      	ldr	r1, [r7, #24]
 800996e:	69fa      	ldr	r2, [r7, #28]
 8009970:	e841 2300 	strex	r3, r2, [r1]
 8009974:	617b      	str	r3, [r7, #20]
   return(result);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1e6      	bne.n	800994a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800997c:	e007      	b.n	800998e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	699a      	ldr	r2, [r3, #24]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f042 0208 	orr.w	r2, r2, #8
 800998c:	619a      	str	r2, [r3, #24]
}
 800998e:	bf00      	nop
 8009990:	37a0      	adds	r7, #160	; 0xa0
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	08009243 	.word	0x08009243

0800999c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d101      	bne.n	80099ee <HAL_UARTEx_DisableFifoMode+0x16>
 80099ea:	2302      	movs	r3, #2
 80099ec:	e027      	b.n	8009a3e <HAL_UARTEx_DisableFifoMode+0x66>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2224      	movs	r2, #36	; 0x24
 80099fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f022 0201 	bic.w	r2, r2, #1
 8009a14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2220      	movs	r2, #32
 8009a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d101      	bne.n	8009a62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a5e:	2302      	movs	r3, #2
 8009a60:	e02d      	b.n	8009abe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2224      	movs	r2, #36	; 0x24
 8009a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f022 0201 	bic.w	r2, r2, #1
 8009a88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f850 	bl	8009b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2220      	movs	r2, #32
 8009ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d101      	bne.n	8009ade <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ada:	2302      	movs	r3, #2
 8009adc:	e02d      	b.n	8009b3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2224      	movs	r2, #36	; 0x24
 8009aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 0201 	bic.w	r2, r2, #1
 8009b04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	430a      	orrs	r2, r1
 8009b18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f812 	bl	8009b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2220      	movs	r2, #32
 8009b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
	...

08009b44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d108      	bne.n	8009b66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b64:	e031      	b.n	8009bca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b66:	2308      	movs	r3, #8
 8009b68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b6a:	2308      	movs	r3, #8
 8009b6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	0e5b      	lsrs	r3, r3, #25
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	0f5b      	lsrs	r3, r3, #29
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	f003 0307 	and.w	r3, r3, #7
 8009b8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
 8009b90:	7b3a      	ldrb	r2, [r7, #12]
 8009b92:	4911      	ldr	r1, [pc, #68]	; (8009bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8009b94:	5c8a      	ldrb	r2, [r1, r2]
 8009b96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b9a:	7b3a      	ldrb	r2, [r7, #12]
 8009b9c:	490f      	ldr	r1, [pc, #60]	; (8009bdc <UARTEx_SetNbDataToProcess+0x98>)
 8009b9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	7b7a      	ldrb	r2, [r7, #13]
 8009bb0:	4909      	ldr	r1, [pc, #36]	; (8009bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8009bb2:	5c8a      	ldrb	r2, [r1, r2]
 8009bb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009bb8:	7b7a      	ldrb	r2, [r7, #13]
 8009bba:	4908      	ldr	r1, [pc, #32]	; (8009bdc <UARTEx_SetNbDataToProcess+0x98>)
 8009bbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009bca:	bf00      	nop
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	0800b1ec 	.word	0x0800b1ec
 8009bdc:	0800b1f4 	.word	0x0800b1f4

08009be0 <atoi>:
 8009be0:	220a      	movs	r2, #10
 8009be2:	2100      	movs	r1, #0
 8009be4:	f000 b882 	b.w	8009cec <strtol>

08009be8 <_strtol_l.constprop.0>:
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bee:	d001      	beq.n	8009bf4 <_strtol_l.constprop.0+0xc>
 8009bf0:	2b24      	cmp	r3, #36	; 0x24
 8009bf2:	d906      	bls.n	8009c02 <_strtol_l.constprop.0+0x1a>
 8009bf4:	f000 fa68 	bl	800a0c8 <__errno>
 8009bf8:	2316      	movs	r3, #22
 8009bfa:	6003      	str	r3, [r0, #0]
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009ce8 <_strtol_l.constprop.0+0x100>
 8009c06:	460d      	mov	r5, r1
 8009c08:	462e      	mov	r6, r5
 8009c0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c0e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009c12:	f017 0708 	ands.w	r7, r7, #8
 8009c16:	d1f7      	bne.n	8009c08 <_strtol_l.constprop.0+0x20>
 8009c18:	2c2d      	cmp	r4, #45	; 0x2d
 8009c1a:	d132      	bne.n	8009c82 <_strtol_l.constprop.0+0x9a>
 8009c1c:	782c      	ldrb	r4, [r5, #0]
 8009c1e:	2701      	movs	r7, #1
 8009c20:	1cb5      	adds	r5, r6, #2
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d05b      	beq.n	8009cde <_strtol_l.constprop.0+0xf6>
 8009c26:	2b10      	cmp	r3, #16
 8009c28:	d109      	bne.n	8009c3e <_strtol_l.constprop.0+0x56>
 8009c2a:	2c30      	cmp	r4, #48	; 0x30
 8009c2c:	d107      	bne.n	8009c3e <_strtol_l.constprop.0+0x56>
 8009c2e:	782c      	ldrb	r4, [r5, #0]
 8009c30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009c34:	2c58      	cmp	r4, #88	; 0x58
 8009c36:	d14d      	bne.n	8009cd4 <_strtol_l.constprop.0+0xec>
 8009c38:	786c      	ldrb	r4, [r5, #1]
 8009c3a:	2310      	movs	r3, #16
 8009c3c:	3502      	adds	r5, #2
 8009c3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009c42:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c46:	f04f 0e00 	mov.w	lr, #0
 8009c4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009c4e:	4676      	mov	r6, lr
 8009c50:	fb03 8a19 	mls	sl, r3, r9, r8
 8009c54:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009c58:	f1bc 0f09 	cmp.w	ip, #9
 8009c5c:	d816      	bhi.n	8009c8c <_strtol_l.constprop.0+0xa4>
 8009c5e:	4664      	mov	r4, ip
 8009c60:	42a3      	cmp	r3, r4
 8009c62:	dd24      	ble.n	8009cae <_strtol_l.constprop.0+0xc6>
 8009c64:	f1be 3fff 	cmp.w	lr, #4294967295
 8009c68:	d008      	beq.n	8009c7c <_strtol_l.constprop.0+0x94>
 8009c6a:	45b1      	cmp	r9, r6
 8009c6c:	d31c      	bcc.n	8009ca8 <_strtol_l.constprop.0+0xc0>
 8009c6e:	d101      	bne.n	8009c74 <_strtol_l.constprop.0+0x8c>
 8009c70:	45a2      	cmp	sl, r4
 8009c72:	db19      	blt.n	8009ca8 <_strtol_l.constprop.0+0xc0>
 8009c74:	fb06 4603 	mla	r6, r6, r3, r4
 8009c78:	f04f 0e01 	mov.w	lr, #1
 8009c7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c80:	e7e8      	b.n	8009c54 <_strtol_l.constprop.0+0x6c>
 8009c82:	2c2b      	cmp	r4, #43	; 0x2b
 8009c84:	bf04      	itt	eq
 8009c86:	782c      	ldrbeq	r4, [r5, #0]
 8009c88:	1cb5      	addeq	r5, r6, #2
 8009c8a:	e7ca      	b.n	8009c22 <_strtol_l.constprop.0+0x3a>
 8009c8c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009c90:	f1bc 0f19 	cmp.w	ip, #25
 8009c94:	d801      	bhi.n	8009c9a <_strtol_l.constprop.0+0xb2>
 8009c96:	3c37      	subs	r4, #55	; 0x37
 8009c98:	e7e2      	b.n	8009c60 <_strtol_l.constprop.0+0x78>
 8009c9a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009c9e:	f1bc 0f19 	cmp.w	ip, #25
 8009ca2:	d804      	bhi.n	8009cae <_strtol_l.constprop.0+0xc6>
 8009ca4:	3c57      	subs	r4, #87	; 0x57
 8009ca6:	e7db      	b.n	8009c60 <_strtol_l.constprop.0+0x78>
 8009ca8:	f04f 3eff 	mov.w	lr, #4294967295
 8009cac:	e7e6      	b.n	8009c7c <_strtol_l.constprop.0+0x94>
 8009cae:	f1be 3fff 	cmp.w	lr, #4294967295
 8009cb2:	d105      	bne.n	8009cc0 <_strtol_l.constprop.0+0xd8>
 8009cb4:	2322      	movs	r3, #34	; 0x22
 8009cb6:	6003      	str	r3, [r0, #0]
 8009cb8:	4646      	mov	r6, r8
 8009cba:	b942      	cbnz	r2, 8009cce <_strtol_l.constprop.0+0xe6>
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	e79e      	b.n	8009bfe <_strtol_l.constprop.0+0x16>
 8009cc0:	b107      	cbz	r7, 8009cc4 <_strtol_l.constprop.0+0xdc>
 8009cc2:	4276      	negs	r6, r6
 8009cc4:	2a00      	cmp	r2, #0
 8009cc6:	d0f9      	beq.n	8009cbc <_strtol_l.constprop.0+0xd4>
 8009cc8:	f1be 0f00 	cmp.w	lr, #0
 8009ccc:	d000      	beq.n	8009cd0 <_strtol_l.constprop.0+0xe8>
 8009cce:	1e69      	subs	r1, r5, #1
 8009cd0:	6011      	str	r1, [r2, #0]
 8009cd2:	e7f3      	b.n	8009cbc <_strtol_l.constprop.0+0xd4>
 8009cd4:	2430      	movs	r4, #48	; 0x30
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1b1      	bne.n	8009c3e <_strtol_l.constprop.0+0x56>
 8009cda:	2308      	movs	r3, #8
 8009cdc:	e7af      	b.n	8009c3e <_strtol_l.constprop.0+0x56>
 8009cde:	2c30      	cmp	r4, #48	; 0x30
 8009ce0:	d0a5      	beq.n	8009c2e <_strtol_l.constprop.0+0x46>
 8009ce2:	230a      	movs	r3, #10
 8009ce4:	e7ab      	b.n	8009c3e <_strtol_l.constprop.0+0x56>
 8009ce6:	bf00      	nop
 8009ce8:	0800b1fd 	.word	0x0800b1fd

08009cec <strtol>:
 8009cec:	4613      	mov	r3, r2
 8009cee:	460a      	mov	r2, r1
 8009cf0:	4601      	mov	r1, r0
 8009cf2:	4802      	ldr	r0, [pc, #8]	; (8009cfc <strtol+0x10>)
 8009cf4:	6800      	ldr	r0, [r0, #0]
 8009cf6:	f7ff bf77 	b.w	8009be8 <_strtol_l.constprop.0>
 8009cfa:	bf00      	nop
 8009cfc:	20000268 	.word	0x20000268

08009d00 <std>:
 8009d00:	2300      	movs	r3, #0
 8009d02:	b510      	push	{r4, lr}
 8009d04:	4604      	mov	r4, r0
 8009d06:	e9c0 3300 	strd	r3, r3, [r0]
 8009d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d0e:	6083      	str	r3, [r0, #8]
 8009d10:	8181      	strh	r1, [r0, #12]
 8009d12:	6643      	str	r3, [r0, #100]	; 0x64
 8009d14:	81c2      	strh	r2, [r0, #14]
 8009d16:	6183      	str	r3, [r0, #24]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	2208      	movs	r2, #8
 8009d1c:	305c      	adds	r0, #92	; 0x5c
 8009d1e:	f000 f928 	bl	8009f72 <memset>
 8009d22:	4b0d      	ldr	r3, [pc, #52]	; (8009d58 <std+0x58>)
 8009d24:	6263      	str	r3, [r4, #36]	; 0x24
 8009d26:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <std+0x5c>)
 8009d28:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d2a:	4b0d      	ldr	r3, [pc, #52]	; (8009d60 <std+0x60>)
 8009d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d2e:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <std+0x64>)
 8009d30:	6323      	str	r3, [r4, #48]	; 0x30
 8009d32:	4b0d      	ldr	r3, [pc, #52]	; (8009d68 <std+0x68>)
 8009d34:	6224      	str	r4, [r4, #32]
 8009d36:	429c      	cmp	r4, r3
 8009d38:	d006      	beq.n	8009d48 <std+0x48>
 8009d3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009d3e:	4294      	cmp	r4, r2
 8009d40:	d002      	beq.n	8009d48 <std+0x48>
 8009d42:	33d0      	adds	r3, #208	; 0xd0
 8009d44:	429c      	cmp	r4, r3
 8009d46:	d105      	bne.n	8009d54 <std+0x54>
 8009d48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d50:	f000 b9e4 	b.w	800a11c <__retarget_lock_init_recursive>
 8009d54:	bd10      	pop	{r4, pc}
 8009d56:	bf00      	nop
 8009d58:	08009eed 	.word	0x08009eed
 8009d5c:	08009f0f 	.word	0x08009f0f
 8009d60:	08009f47 	.word	0x08009f47
 8009d64:	08009f6b 	.word	0x08009f6b
 8009d68:	20000704 	.word	0x20000704

08009d6c <stdio_exit_handler>:
 8009d6c:	4a02      	ldr	r2, [pc, #8]	; (8009d78 <stdio_exit_handler+0xc>)
 8009d6e:	4903      	ldr	r1, [pc, #12]	; (8009d7c <stdio_exit_handler+0x10>)
 8009d70:	4803      	ldr	r0, [pc, #12]	; (8009d80 <stdio_exit_handler+0x14>)
 8009d72:	f000 b869 	b.w	8009e48 <_fwalk_sglue>
 8009d76:	bf00      	nop
 8009d78:	20000210 	.word	0x20000210
 8009d7c:	0800aa3d 	.word	0x0800aa3d
 8009d80:	2000021c 	.word	0x2000021c

08009d84 <cleanup_stdio>:
 8009d84:	6841      	ldr	r1, [r0, #4]
 8009d86:	4b0c      	ldr	r3, [pc, #48]	; (8009db8 <cleanup_stdio+0x34>)
 8009d88:	4299      	cmp	r1, r3
 8009d8a:	b510      	push	{r4, lr}
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	d001      	beq.n	8009d94 <cleanup_stdio+0x10>
 8009d90:	f000 fe54 	bl	800aa3c <_fflush_r>
 8009d94:	68a1      	ldr	r1, [r4, #8]
 8009d96:	4b09      	ldr	r3, [pc, #36]	; (8009dbc <cleanup_stdio+0x38>)
 8009d98:	4299      	cmp	r1, r3
 8009d9a:	d002      	beq.n	8009da2 <cleanup_stdio+0x1e>
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 fe4d 	bl	800aa3c <_fflush_r>
 8009da2:	68e1      	ldr	r1, [r4, #12]
 8009da4:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <cleanup_stdio+0x3c>)
 8009da6:	4299      	cmp	r1, r3
 8009da8:	d004      	beq.n	8009db4 <cleanup_stdio+0x30>
 8009daa:	4620      	mov	r0, r4
 8009dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009db0:	f000 be44 	b.w	800aa3c <_fflush_r>
 8009db4:	bd10      	pop	{r4, pc}
 8009db6:	bf00      	nop
 8009db8:	20000704 	.word	0x20000704
 8009dbc:	2000076c 	.word	0x2000076c
 8009dc0:	200007d4 	.word	0x200007d4

08009dc4 <global_stdio_init.part.0>:
 8009dc4:	b510      	push	{r4, lr}
 8009dc6:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <global_stdio_init.part.0+0x30>)
 8009dc8:	4c0b      	ldr	r4, [pc, #44]	; (8009df8 <global_stdio_init.part.0+0x34>)
 8009dca:	4a0c      	ldr	r2, [pc, #48]	; (8009dfc <global_stdio_init.part.0+0x38>)
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	4620      	mov	r0, r4
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	2104      	movs	r1, #4
 8009dd4:	f7ff ff94 	bl	8009d00 <std>
 8009dd8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009ddc:	2201      	movs	r2, #1
 8009dde:	2109      	movs	r1, #9
 8009de0:	f7ff ff8e 	bl	8009d00 <std>
 8009de4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009de8:	2202      	movs	r2, #2
 8009dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dee:	2112      	movs	r1, #18
 8009df0:	f7ff bf86 	b.w	8009d00 <std>
 8009df4:	2000083c 	.word	0x2000083c
 8009df8:	20000704 	.word	0x20000704
 8009dfc:	08009d6d 	.word	0x08009d6d

08009e00 <__sfp_lock_acquire>:
 8009e00:	4801      	ldr	r0, [pc, #4]	; (8009e08 <__sfp_lock_acquire+0x8>)
 8009e02:	f000 b98c 	b.w	800a11e <__retarget_lock_acquire_recursive>
 8009e06:	bf00      	nop
 8009e08:	20000845 	.word	0x20000845

08009e0c <__sfp_lock_release>:
 8009e0c:	4801      	ldr	r0, [pc, #4]	; (8009e14 <__sfp_lock_release+0x8>)
 8009e0e:	f000 b987 	b.w	800a120 <__retarget_lock_release_recursive>
 8009e12:	bf00      	nop
 8009e14:	20000845 	.word	0x20000845

08009e18 <__sinit>:
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	f7ff fff0 	bl	8009e00 <__sfp_lock_acquire>
 8009e20:	6a23      	ldr	r3, [r4, #32]
 8009e22:	b11b      	cbz	r3, 8009e2c <__sinit+0x14>
 8009e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e28:	f7ff bff0 	b.w	8009e0c <__sfp_lock_release>
 8009e2c:	4b04      	ldr	r3, [pc, #16]	; (8009e40 <__sinit+0x28>)
 8009e2e:	6223      	str	r3, [r4, #32]
 8009e30:	4b04      	ldr	r3, [pc, #16]	; (8009e44 <__sinit+0x2c>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1f5      	bne.n	8009e24 <__sinit+0xc>
 8009e38:	f7ff ffc4 	bl	8009dc4 <global_stdio_init.part.0>
 8009e3c:	e7f2      	b.n	8009e24 <__sinit+0xc>
 8009e3e:	bf00      	nop
 8009e40:	08009d85 	.word	0x08009d85
 8009e44:	2000083c 	.word	0x2000083c

08009e48 <_fwalk_sglue>:
 8009e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e4c:	4607      	mov	r7, r0
 8009e4e:	4688      	mov	r8, r1
 8009e50:	4614      	mov	r4, r2
 8009e52:	2600      	movs	r6, #0
 8009e54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e58:	f1b9 0901 	subs.w	r9, r9, #1
 8009e5c:	d505      	bpl.n	8009e6a <_fwalk_sglue+0x22>
 8009e5e:	6824      	ldr	r4, [r4, #0]
 8009e60:	2c00      	cmp	r4, #0
 8009e62:	d1f7      	bne.n	8009e54 <_fwalk_sglue+0xc>
 8009e64:	4630      	mov	r0, r6
 8009e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e6a:	89ab      	ldrh	r3, [r5, #12]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d907      	bls.n	8009e80 <_fwalk_sglue+0x38>
 8009e70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e74:	3301      	adds	r3, #1
 8009e76:	d003      	beq.n	8009e80 <_fwalk_sglue+0x38>
 8009e78:	4629      	mov	r1, r5
 8009e7a:	4638      	mov	r0, r7
 8009e7c:	47c0      	blx	r8
 8009e7e:	4306      	orrs	r6, r0
 8009e80:	3568      	adds	r5, #104	; 0x68
 8009e82:	e7e9      	b.n	8009e58 <_fwalk_sglue+0x10>

08009e84 <sniprintf>:
 8009e84:	b40c      	push	{r2, r3}
 8009e86:	b530      	push	{r4, r5, lr}
 8009e88:	4b17      	ldr	r3, [pc, #92]	; (8009ee8 <sniprintf+0x64>)
 8009e8a:	1e0c      	subs	r4, r1, #0
 8009e8c:	681d      	ldr	r5, [r3, #0]
 8009e8e:	b09d      	sub	sp, #116	; 0x74
 8009e90:	da08      	bge.n	8009ea4 <sniprintf+0x20>
 8009e92:	238b      	movs	r3, #139	; 0x8b
 8009e94:	602b      	str	r3, [r5, #0]
 8009e96:	f04f 30ff 	mov.w	r0, #4294967295
 8009e9a:	b01d      	add	sp, #116	; 0x74
 8009e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ea0:	b002      	add	sp, #8
 8009ea2:	4770      	bx	lr
 8009ea4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009ea8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009eac:	bf14      	ite	ne
 8009eae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009eb2:	4623      	moveq	r3, r4
 8009eb4:	9304      	str	r3, [sp, #16]
 8009eb6:	9307      	str	r3, [sp, #28]
 8009eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ebc:	9002      	str	r0, [sp, #8]
 8009ebe:	9006      	str	r0, [sp, #24]
 8009ec0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ec4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009ec6:	ab21      	add	r3, sp, #132	; 0x84
 8009ec8:	a902      	add	r1, sp, #8
 8009eca:	4628      	mov	r0, r5
 8009ecc:	9301      	str	r3, [sp, #4]
 8009ece:	f000 faa1 	bl	800a414 <_svfiprintf_r>
 8009ed2:	1c43      	adds	r3, r0, #1
 8009ed4:	bfbc      	itt	lt
 8009ed6:	238b      	movlt	r3, #139	; 0x8b
 8009ed8:	602b      	strlt	r3, [r5, #0]
 8009eda:	2c00      	cmp	r4, #0
 8009edc:	d0dd      	beq.n	8009e9a <sniprintf+0x16>
 8009ede:	9b02      	ldr	r3, [sp, #8]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	701a      	strb	r2, [r3, #0]
 8009ee4:	e7d9      	b.n	8009e9a <sniprintf+0x16>
 8009ee6:	bf00      	nop
 8009ee8:	20000268 	.word	0x20000268

08009eec <__sread>:
 8009eec:	b510      	push	{r4, lr}
 8009eee:	460c      	mov	r4, r1
 8009ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef4:	f000 f8c4 	bl	800a080 <_read_r>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	bfab      	itete	ge
 8009efc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009efe:	89a3      	ldrhlt	r3, [r4, #12]
 8009f00:	181b      	addge	r3, r3, r0
 8009f02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f06:	bfac      	ite	ge
 8009f08:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f0a:	81a3      	strhlt	r3, [r4, #12]
 8009f0c:	bd10      	pop	{r4, pc}

08009f0e <__swrite>:
 8009f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f12:	461f      	mov	r7, r3
 8009f14:	898b      	ldrh	r3, [r1, #12]
 8009f16:	05db      	lsls	r3, r3, #23
 8009f18:	4605      	mov	r5, r0
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	4616      	mov	r6, r2
 8009f1e:	d505      	bpl.n	8009f2c <__swrite+0x1e>
 8009f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f24:	2302      	movs	r3, #2
 8009f26:	2200      	movs	r2, #0
 8009f28:	f000 f898 	bl	800a05c <_lseek_r>
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	4632      	mov	r2, r6
 8009f3a:	463b      	mov	r3, r7
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f42:	f000 b8af 	b.w	800a0a4 <_write_r>

08009f46 <__sseek>:
 8009f46:	b510      	push	{r4, lr}
 8009f48:	460c      	mov	r4, r1
 8009f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f4e:	f000 f885 	bl	800a05c <_lseek_r>
 8009f52:	1c43      	adds	r3, r0, #1
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	bf15      	itete	ne
 8009f58:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f62:	81a3      	strheq	r3, [r4, #12]
 8009f64:	bf18      	it	ne
 8009f66:	81a3      	strhne	r3, [r4, #12]
 8009f68:	bd10      	pop	{r4, pc}

08009f6a <__sclose>:
 8009f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6e:	f000 b865 	b.w	800a03c <_close_r>

08009f72 <memset>:
 8009f72:	4402      	add	r2, r0
 8009f74:	4603      	mov	r3, r0
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d100      	bne.n	8009f7c <memset+0xa>
 8009f7a:	4770      	bx	lr
 8009f7c:	f803 1b01 	strb.w	r1, [r3], #1
 8009f80:	e7f9      	b.n	8009f76 <memset+0x4>
	...

08009f84 <strtok>:
 8009f84:	4b16      	ldr	r3, [pc, #88]	; (8009fe0 <strtok+0x5c>)
 8009f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f88:	681e      	ldr	r6, [r3, #0]
 8009f8a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	b9fc      	cbnz	r4, 8009fd0 <strtok+0x4c>
 8009f90:	2050      	movs	r0, #80	; 0x50
 8009f92:	9101      	str	r1, [sp, #4]
 8009f94:	f000 f930 	bl	800a1f8 <malloc>
 8009f98:	9901      	ldr	r1, [sp, #4]
 8009f9a:	6470      	str	r0, [r6, #68]	; 0x44
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	b920      	cbnz	r0, 8009faa <strtok+0x26>
 8009fa0:	4b10      	ldr	r3, [pc, #64]	; (8009fe4 <strtok+0x60>)
 8009fa2:	4811      	ldr	r0, [pc, #68]	; (8009fe8 <strtok+0x64>)
 8009fa4:	215b      	movs	r1, #91	; 0x5b
 8009fa6:	f000 f8bd 	bl	800a124 <__assert_func>
 8009faa:	e9c0 4400 	strd	r4, r4, [r0]
 8009fae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009fb2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009fb6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009fba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009fbe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009fc2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009fc6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009fca:	6184      	str	r4, [r0, #24]
 8009fcc:	7704      	strb	r4, [r0, #28]
 8009fce:	6244      	str	r4, [r0, #36]	; 0x24
 8009fd0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	b002      	add	sp, #8
 8009fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fdc:	f000 b806 	b.w	8009fec <__strtok_r>
 8009fe0:	20000268 	.word	0x20000268
 8009fe4:	0800b2fd 	.word	0x0800b2fd
 8009fe8:	0800b314 	.word	0x0800b314

08009fec <__strtok_r>:
 8009fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fee:	b908      	cbnz	r0, 8009ff4 <__strtok_r+0x8>
 8009ff0:	6810      	ldr	r0, [r2, #0]
 8009ff2:	b188      	cbz	r0, 800a018 <__strtok_r+0x2c>
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009ffc:	460f      	mov	r7, r1
 8009ffe:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a002:	b91e      	cbnz	r6, 800a00c <__strtok_r+0x20>
 800a004:	b965      	cbnz	r5, 800a020 <__strtok_r+0x34>
 800a006:	6015      	str	r5, [r2, #0]
 800a008:	4628      	mov	r0, r5
 800a00a:	e005      	b.n	800a018 <__strtok_r+0x2c>
 800a00c:	42b5      	cmp	r5, r6
 800a00e:	d1f6      	bne.n	8009ffe <__strtok_r+0x12>
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1f0      	bne.n	8009ff6 <__strtok_r+0xa>
 800a014:	6014      	str	r4, [r2, #0]
 800a016:	7003      	strb	r3, [r0, #0]
 800a018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a01a:	461c      	mov	r4, r3
 800a01c:	e00c      	b.n	800a038 <__strtok_r+0x4c>
 800a01e:	b915      	cbnz	r5, 800a026 <__strtok_r+0x3a>
 800a020:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a024:	460e      	mov	r6, r1
 800a026:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a02a:	42ab      	cmp	r3, r5
 800a02c:	d1f7      	bne.n	800a01e <__strtok_r+0x32>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0f3      	beq.n	800a01a <__strtok_r+0x2e>
 800a032:	2300      	movs	r3, #0
 800a034:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a038:	6014      	str	r4, [r2, #0]
 800a03a:	e7ed      	b.n	800a018 <__strtok_r+0x2c>

0800a03c <_close_r>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	4d06      	ldr	r5, [pc, #24]	; (800a058 <_close_r+0x1c>)
 800a040:	2300      	movs	r3, #0
 800a042:	4604      	mov	r4, r0
 800a044:	4608      	mov	r0, r1
 800a046:	602b      	str	r3, [r5, #0]
 800a048:	f7f7 fc25 	bl	8001896 <_close>
 800a04c:	1c43      	adds	r3, r0, #1
 800a04e:	d102      	bne.n	800a056 <_close_r+0x1a>
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	b103      	cbz	r3, 800a056 <_close_r+0x1a>
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	20000840 	.word	0x20000840

0800a05c <_lseek_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d07      	ldr	r5, [pc, #28]	; (800a07c <_lseek_r+0x20>)
 800a060:	4604      	mov	r4, r0
 800a062:	4608      	mov	r0, r1
 800a064:	4611      	mov	r1, r2
 800a066:	2200      	movs	r2, #0
 800a068:	602a      	str	r2, [r5, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	f7f7 fc3a 	bl	80018e4 <_lseek>
 800a070:	1c43      	adds	r3, r0, #1
 800a072:	d102      	bne.n	800a07a <_lseek_r+0x1e>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	b103      	cbz	r3, 800a07a <_lseek_r+0x1e>
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	20000840 	.word	0x20000840

0800a080 <_read_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4d07      	ldr	r5, [pc, #28]	; (800a0a0 <_read_r+0x20>)
 800a084:	4604      	mov	r4, r0
 800a086:	4608      	mov	r0, r1
 800a088:	4611      	mov	r1, r2
 800a08a:	2200      	movs	r2, #0
 800a08c:	602a      	str	r2, [r5, #0]
 800a08e:	461a      	mov	r2, r3
 800a090:	f7f7 fbc8 	bl	8001824 <_read>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	d102      	bne.n	800a09e <_read_r+0x1e>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	b103      	cbz	r3, 800a09e <_read_r+0x1e>
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	20000840 	.word	0x20000840

0800a0a4 <_write_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4d07      	ldr	r5, [pc, #28]	; (800a0c4 <_write_r+0x20>)
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	4608      	mov	r0, r1
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	602a      	str	r2, [r5, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	f7f7 fbd3 	bl	800185e <_write>
 800a0b8:	1c43      	adds	r3, r0, #1
 800a0ba:	d102      	bne.n	800a0c2 <_write_r+0x1e>
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	b103      	cbz	r3, 800a0c2 <_write_r+0x1e>
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	bd38      	pop	{r3, r4, r5, pc}
 800a0c4:	20000840 	.word	0x20000840

0800a0c8 <__errno>:
 800a0c8:	4b01      	ldr	r3, [pc, #4]	; (800a0d0 <__errno+0x8>)
 800a0ca:	6818      	ldr	r0, [r3, #0]
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	20000268 	.word	0x20000268

0800a0d4 <__libc_init_array>:
 800a0d4:	b570      	push	{r4, r5, r6, lr}
 800a0d6:	4d0d      	ldr	r5, [pc, #52]	; (800a10c <__libc_init_array+0x38>)
 800a0d8:	4c0d      	ldr	r4, [pc, #52]	; (800a110 <__libc_init_array+0x3c>)
 800a0da:	1b64      	subs	r4, r4, r5
 800a0dc:	10a4      	asrs	r4, r4, #2
 800a0de:	2600      	movs	r6, #0
 800a0e0:	42a6      	cmp	r6, r4
 800a0e2:	d109      	bne.n	800a0f8 <__libc_init_array+0x24>
 800a0e4:	4d0b      	ldr	r5, [pc, #44]	; (800a114 <__libc_init_array+0x40>)
 800a0e6:	4c0c      	ldr	r4, [pc, #48]	; (800a118 <__libc_init_array+0x44>)
 800a0e8:	f000 fffa 	bl	800b0e0 <_init>
 800a0ec:	1b64      	subs	r4, r4, r5
 800a0ee:	10a4      	asrs	r4, r4, #2
 800a0f0:	2600      	movs	r6, #0
 800a0f2:	42a6      	cmp	r6, r4
 800a0f4:	d105      	bne.n	800a102 <__libc_init_array+0x2e>
 800a0f6:	bd70      	pop	{r4, r5, r6, pc}
 800a0f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0fc:	4798      	blx	r3
 800a0fe:	3601      	adds	r6, #1
 800a100:	e7ee      	b.n	800a0e0 <__libc_init_array+0xc>
 800a102:	f855 3b04 	ldr.w	r3, [r5], #4
 800a106:	4798      	blx	r3
 800a108:	3601      	adds	r6, #1
 800a10a:	e7f2      	b.n	800a0f2 <__libc_init_array+0x1e>
 800a10c:	0800b3e8 	.word	0x0800b3e8
 800a110:	0800b3e8 	.word	0x0800b3e8
 800a114:	0800b3e8 	.word	0x0800b3e8
 800a118:	0800b3ec 	.word	0x0800b3ec

0800a11c <__retarget_lock_init_recursive>:
 800a11c:	4770      	bx	lr

0800a11e <__retarget_lock_acquire_recursive>:
 800a11e:	4770      	bx	lr

0800a120 <__retarget_lock_release_recursive>:
 800a120:	4770      	bx	lr
	...

0800a124 <__assert_func>:
 800a124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a126:	4614      	mov	r4, r2
 800a128:	461a      	mov	r2, r3
 800a12a:	4b09      	ldr	r3, [pc, #36]	; (800a150 <__assert_func+0x2c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4605      	mov	r5, r0
 800a130:	68d8      	ldr	r0, [r3, #12]
 800a132:	b14c      	cbz	r4, 800a148 <__assert_func+0x24>
 800a134:	4b07      	ldr	r3, [pc, #28]	; (800a154 <__assert_func+0x30>)
 800a136:	9100      	str	r1, [sp, #0]
 800a138:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a13c:	4906      	ldr	r1, [pc, #24]	; (800a158 <__assert_func+0x34>)
 800a13e:	462b      	mov	r3, r5
 800a140:	f000 fca4 	bl	800aa8c <fiprintf>
 800a144:	f000 fcec 	bl	800ab20 <abort>
 800a148:	4b04      	ldr	r3, [pc, #16]	; (800a15c <__assert_func+0x38>)
 800a14a:	461c      	mov	r4, r3
 800a14c:	e7f3      	b.n	800a136 <__assert_func+0x12>
 800a14e:	bf00      	nop
 800a150:	20000268 	.word	0x20000268
 800a154:	0800b36e 	.word	0x0800b36e
 800a158:	0800b37b 	.word	0x0800b37b
 800a15c:	0800b3a9 	.word	0x0800b3a9

0800a160 <_free_r>:
 800a160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a162:	2900      	cmp	r1, #0
 800a164:	d044      	beq.n	800a1f0 <_free_r+0x90>
 800a166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a16a:	9001      	str	r0, [sp, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f1a1 0404 	sub.w	r4, r1, #4
 800a172:	bfb8      	it	lt
 800a174:	18e4      	addlt	r4, r4, r3
 800a176:	f000 f8e7 	bl	800a348 <__malloc_lock>
 800a17a:	4a1e      	ldr	r2, [pc, #120]	; (800a1f4 <_free_r+0x94>)
 800a17c:	9801      	ldr	r0, [sp, #4]
 800a17e:	6813      	ldr	r3, [r2, #0]
 800a180:	b933      	cbnz	r3, 800a190 <_free_r+0x30>
 800a182:	6063      	str	r3, [r4, #4]
 800a184:	6014      	str	r4, [r2, #0]
 800a186:	b003      	add	sp, #12
 800a188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a18c:	f000 b8e2 	b.w	800a354 <__malloc_unlock>
 800a190:	42a3      	cmp	r3, r4
 800a192:	d908      	bls.n	800a1a6 <_free_r+0x46>
 800a194:	6825      	ldr	r5, [r4, #0]
 800a196:	1961      	adds	r1, r4, r5
 800a198:	428b      	cmp	r3, r1
 800a19a:	bf01      	itttt	eq
 800a19c:	6819      	ldreq	r1, [r3, #0]
 800a19e:	685b      	ldreq	r3, [r3, #4]
 800a1a0:	1949      	addeq	r1, r1, r5
 800a1a2:	6021      	streq	r1, [r4, #0]
 800a1a4:	e7ed      	b.n	800a182 <_free_r+0x22>
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	b10b      	cbz	r3, 800a1b0 <_free_r+0x50>
 800a1ac:	42a3      	cmp	r3, r4
 800a1ae:	d9fa      	bls.n	800a1a6 <_free_r+0x46>
 800a1b0:	6811      	ldr	r1, [r2, #0]
 800a1b2:	1855      	adds	r5, r2, r1
 800a1b4:	42a5      	cmp	r5, r4
 800a1b6:	d10b      	bne.n	800a1d0 <_free_r+0x70>
 800a1b8:	6824      	ldr	r4, [r4, #0]
 800a1ba:	4421      	add	r1, r4
 800a1bc:	1854      	adds	r4, r2, r1
 800a1be:	42a3      	cmp	r3, r4
 800a1c0:	6011      	str	r1, [r2, #0]
 800a1c2:	d1e0      	bne.n	800a186 <_free_r+0x26>
 800a1c4:	681c      	ldr	r4, [r3, #0]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	6053      	str	r3, [r2, #4]
 800a1ca:	440c      	add	r4, r1
 800a1cc:	6014      	str	r4, [r2, #0]
 800a1ce:	e7da      	b.n	800a186 <_free_r+0x26>
 800a1d0:	d902      	bls.n	800a1d8 <_free_r+0x78>
 800a1d2:	230c      	movs	r3, #12
 800a1d4:	6003      	str	r3, [r0, #0]
 800a1d6:	e7d6      	b.n	800a186 <_free_r+0x26>
 800a1d8:	6825      	ldr	r5, [r4, #0]
 800a1da:	1961      	adds	r1, r4, r5
 800a1dc:	428b      	cmp	r3, r1
 800a1de:	bf04      	itt	eq
 800a1e0:	6819      	ldreq	r1, [r3, #0]
 800a1e2:	685b      	ldreq	r3, [r3, #4]
 800a1e4:	6063      	str	r3, [r4, #4]
 800a1e6:	bf04      	itt	eq
 800a1e8:	1949      	addeq	r1, r1, r5
 800a1ea:	6021      	streq	r1, [r4, #0]
 800a1ec:	6054      	str	r4, [r2, #4]
 800a1ee:	e7ca      	b.n	800a186 <_free_r+0x26>
 800a1f0:	b003      	add	sp, #12
 800a1f2:	bd30      	pop	{r4, r5, pc}
 800a1f4:	20000848 	.word	0x20000848

0800a1f8 <malloc>:
 800a1f8:	4b02      	ldr	r3, [pc, #8]	; (800a204 <malloc+0xc>)
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	6818      	ldr	r0, [r3, #0]
 800a1fe:	f000 b823 	b.w	800a248 <_malloc_r>
 800a202:	bf00      	nop
 800a204:	20000268 	.word	0x20000268

0800a208 <sbrk_aligned>:
 800a208:	b570      	push	{r4, r5, r6, lr}
 800a20a:	4e0e      	ldr	r6, [pc, #56]	; (800a244 <sbrk_aligned+0x3c>)
 800a20c:	460c      	mov	r4, r1
 800a20e:	6831      	ldr	r1, [r6, #0]
 800a210:	4605      	mov	r5, r0
 800a212:	b911      	cbnz	r1, 800a21a <sbrk_aligned+0x12>
 800a214:	f000 fc66 	bl	800aae4 <_sbrk_r>
 800a218:	6030      	str	r0, [r6, #0]
 800a21a:	4621      	mov	r1, r4
 800a21c:	4628      	mov	r0, r5
 800a21e:	f000 fc61 	bl	800aae4 <_sbrk_r>
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	d00a      	beq.n	800a23c <sbrk_aligned+0x34>
 800a226:	1cc4      	adds	r4, r0, #3
 800a228:	f024 0403 	bic.w	r4, r4, #3
 800a22c:	42a0      	cmp	r0, r4
 800a22e:	d007      	beq.n	800a240 <sbrk_aligned+0x38>
 800a230:	1a21      	subs	r1, r4, r0
 800a232:	4628      	mov	r0, r5
 800a234:	f000 fc56 	bl	800aae4 <_sbrk_r>
 800a238:	3001      	adds	r0, #1
 800a23a:	d101      	bne.n	800a240 <sbrk_aligned+0x38>
 800a23c:	f04f 34ff 	mov.w	r4, #4294967295
 800a240:	4620      	mov	r0, r4
 800a242:	bd70      	pop	{r4, r5, r6, pc}
 800a244:	2000084c 	.word	0x2000084c

0800a248 <_malloc_r>:
 800a248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a24c:	1ccd      	adds	r5, r1, #3
 800a24e:	f025 0503 	bic.w	r5, r5, #3
 800a252:	3508      	adds	r5, #8
 800a254:	2d0c      	cmp	r5, #12
 800a256:	bf38      	it	cc
 800a258:	250c      	movcc	r5, #12
 800a25a:	2d00      	cmp	r5, #0
 800a25c:	4607      	mov	r7, r0
 800a25e:	db01      	blt.n	800a264 <_malloc_r+0x1c>
 800a260:	42a9      	cmp	r1, r5
 800a262:	d905      	bls.n	800a270 <_malloc_r+0x28>
 800a264:	230c      	movs	r3, #12
 800a266:	603b      	str	r3, [r7, #0]
 800a268:	2600      	movs	r6, #0
 800a26a:	4630      	mov	r0, r6
 800a26c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a270:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a344 <_malloc_r+0xfc>
 800a274:	f000 f868 	bl	800a348 <__malloc_lock>
 800a278:	f8d8 3000 	ldr.w	r3, [r8]
 800a27c:	461c      	mov	r4, r3
 800a27e:	bb5c      	cbnz	r4, 800a2d8 <_malloc_r+0x90>
 800a280:	4629      	mov	r1, r5
 800a282:	4638      	mov	r0, r7
 800a284:	f7ff ffc0 	bl	800a208 <sbrk_aligned>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	4604      	mov	r4, r0
 800a28c:	d155      	bne.n	800a33a <_malloc_r+0xf2>
 800a28e:	f8d8 4000 	ldr.w	r4, [r8]
 800a292:	4626      	mov	r6, r4
 800a294:	2e00      	cmp	r6, #0
 800a296:	d145      	bne.n	800a324 <_malloc_r+0xdc>
 800a298:	2c00      	cmp	r4, #0
 800a29a:	d048      	beq.n	800a32e <_malloc_r+0xe6>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	4631      	mov	r1, r6
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	eb04 0903 	add.w	r9, r4, r3
 800a2a6:	f000 fc1d 	bl	800aae4 <_sbrk_r>
 800a2aa:	4581      	cmp	r9, r0
 800a2ac:	d13f      	bne.n	800a32e <_malloc_r+0xe6>
 800a2ae:	6821      	ldr	r1, [r4, #0]
 800a2b0:	1a6d      	subs	r5, r5, r1
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	4638      	mov	r0, r7
 800a2b6:	f7ff ffa7 	bl	800a208 <sbrk_aligned>
 800a2ba:	3001      	adds	r0, #1
 800a2bc:	d037      	beq.n	800a32e <_malloc_r+0xe6>
 800a2be:	6823      	ldr	r3, [r4, #0]
 800a2c0:	442b      	add	r3, r5
 800a2c2:	6023      	str	r3, [r4, #0]
 800a2c4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d038      	beq.n	800a33e <_malloc_r+0xf6>
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	42a2      	cmp	r2, r4
 800a2d0:	d12b      	bne.n	800a32a <_malloc_r+0xe2>
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	605a      	str	r2, [r3, #4]
 800a2d6:	e00f      	b.n	800a2f8 <_malloc_r+0xb0>
 800a2d8:	6822      	ldr	r2, [r4, #0]
 800a2da:	1b52      	subs	r2, r2, r5
 800a2dc:	d41f      	bmi.n	800a31e <_malloc_r+0xd6>
 800a2de:	2a0b      	cmp	r2, #11
 800a2e0:	d917      	bls.n	800a312 <_malloc_r+0xca>
 800a2e2:	1961      	adds	r1, r4, r5
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	6025      	str	r5, [r4, #0]
 800a2e8:	bf18      	it	ne
 800a2ea:	6059      	strne	r1, [r3, #4]
 800a2ec:	6863      	ldr	r3, [r4, #4]
 800a2ee:	bf08      	it	eq
 800a2f0:	f8c8 1000 	streq.w	r1, [r8]
 800a2f4:	5162      	str	r2, [r4, r5]
 800a2f6:	604b      	str	r3, [r1, #4]
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	f104 060b 	add.w	r6, r4, #11
 800a2fe:	f000 f829 	bl	800a354 <__malloc_unlock>
 800a302:	f026 0607 	bic.w	r6, r6, #7
 800a306:	1d23      	adds	r3, r4, #4
 800a308:	1af2      	subs	r2, r6, r3
 800a30a:	d0ae      	beq.n	800a26a <_malloc_r+0x22>
 800a30c:	1b9b      	subs	r3, r3, r6
 800a30e:	50a3      	str	r3, [r4, r2]
 800a310:	e7ab      	b.n	800a26a <_malloc_r+0x22>
 800a312:	42a3      	cmp	r3, r4
 800a314:	6862      	ldr	r2, [r4, #4]
 800a316:	d1dd      	bne.n	800a2d4 <_malloc_r+0x8c>
 800a318:	f8c8 2000 	str.w	r2, [r8]
 800a31c:	e7ec      	b.n	800a2f8 <_malloc_r+0xb0>
 800a31e:	4623      	mov	r3, r4
 800a320:	6864      	ldr	r4, [r4, #4]
 800a322:	e7ac      	b.n	800a27e <_malloc_r+0x36>
 800a324:	4634      	mov	r4, r6
 800a326:	6876      	ldr	r6, [r6, #4]
 800a328:	e7b4      	b.n	800a294 <_malloc_r+0x4c>
 800a32a:	4613      	mov	r3, r2
 800a32c:	e7cc      	b.n	800a2c8 <_malloc_r+0x80>
 800a32e:	230c      	movs	r3, #12
 800a330:	603b      	str	r3, [r7, #0]
 800a332:	4638      	mov	r0, r7
 800a334:	f000 f80e 	bl	800a354 <__malloc_unlock>
 800a338:	e797      	b.n	800a26a <_malloc_r+0x22>
 800a33a:	6025      	str	r5, [r4, #0]
 800a33c:	e7dc      	b.n	800a2f8 <_malloc_r+0xb0>
 800a33e:	605b      	str	r3, [r3, #4]
 800a340:	deff      	udf	#255	; 0xff
 800a342:	bf00      	nop
 800a344:	20000848 	.word	0x20000848

0800a348 <__malloc_lock>:
 800a348:	4801      	ldr	r0, [pc, #4]	; (800a350 <__malloc_lock+0x8>)
 800a34a:	f7ff bee8 	b.w	800a11e <__retarget_lock_acquire_recursive>
 800a34e:	bf00      	nop
 800a350:	20000844 	.word	0x20000844

0800a354 <__malloc_unlock>:
 800a354:	4801      	ldr	r0, [pc, #4]	; (800a35c <__malloc_unlock+0x8>)
 800a356:	f7ff bee3 	b.w	800a120 <__retarget_lock_release_recursive>
 800a35a:	bf00      	nop
 800a35c:	20000844 	.word	0x20000844

0800a360 <__ssputs_r>:
 800a360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a364:	688e      	ldr	r6, [r1, #8]
 800a366:	461f      	mov	r7, r3
 800a368:	42be      	cmp	r6, r7
 800a36a:	680b      	ldr	r3, [r1, #0]
 800a36c:	4682      	mov	sl, r0
 800a36e:	460c      	mov	r4, r1
 800a370:	4690      	mov	r8, r2
 800a372:	d82c      	bhi.n	800a3ce <__ssputs_r+0x6e>
 800a374:	898a      	ldrh	r2, [r1, #12]
 800a376:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a37a:	d026      	beq.n	800a3ca <__ssputs_r+0x6a>
 800a37c:	6965      	ldr	r5, [r4, #20]
 800a37e:	6909      	ldr	r1, [r1, #16]
 800a380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a384:	eba3 0901 	sub.w	r9, r3, r1
 800a388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a38c:	1c7b      	adds	r3, r7, #1
 800a38e:	444b      	add	r3, r9
 800a390:	106d      	asrs	r5, r5, #1
 800a392:	429d      	cmp	r5, r3
 800a394:	bf38      	it	cc
 800a396:	461d      	movcc	r5, r3
 800a398:	0553      	lsls	r3, r2, #21
 800a39a:	d527      	bpl.n	800a3ec <__ssputs_r+0x8c>
 800a39c:	4629      	mov	r1, r5
 800a39e:	f7ff ff53 	bl	800a248 <_malloc_r>
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	b360      	cbz	r0, 800a400 <__ssputs_r+0xa0>
 800a3a6:	6921      	ldr	r1, [r4, #16]
 800a3a8:	464a      	mov	r2, r9
 800a3aa:	f000 fbab 	bl	800ab04 <memcpy>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b8:	81a3      	strh	r3, [r4, #12]
 800a3ba:	6126      	str	r6, [r4, #16]
 800a3bc:	6165      	str	r5, [r4, #20]
 800a3be:	444e      	add	r6, r9
 800a3c0:	eba5 0509 	sub.w	r5, r5, r9
 800a3c4:	6026      	str	r6, [r4, #0]
 800a3c6:	60a5      	str	r5, [r4, #8]
 800a3c8:	463e      	mov	r6, r7
 800a3ca:	42be      	cmp	r6, r7
 800a3cc:	d900      	bls.n	800a3d0 <__ssputs_r+0x70>
 800a3ce:	463e      	mov	r6, r7
 800a3d0:	6820      	ldr	r0, [r4, #0]
 800a3d2:	4632      	mov	r2, r6
 800a3d4:	4641      	mov	r1, r8
 800a3d6:	f000 fb6b 	bl	800aab0 <memmove>
 800a3da:	68a3      	ldr	r3, [r4, #8]
 800a3dc:	1b9b      	subs	r3, r3, r6
 800a3de:	60a3      	str	r3, [r4, #8]
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	4433      	add	r3, r6
 800a3e4:	6023      	str	r3, [r4, #0]
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ec:	462a      	mov	r2, r5
 800a3ee:	f000 fb9e 	bl	800ab2e <_realloc_r>
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d1e0      	bne.n	800a3ba <__ssputs_r+0x5a>
 800a3f8:	6921      	ldr	r1, [r4, #16]
 800a3fa:	4650      	mov	r0, sl
 800a3fc:	f7ff feb0 	bl	800a160 <_free_r>
 800a400:	230c      	movs	r3, #12
 800a402:	f8ca 3000 	str.w	r3, [sl]
 800a406:	89a3      	ldrh	r3, [r4, #12]
 800a408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a40c:	81a3      	strh	r3, [r4, #12]
 800a40e:	f04f 30ff 	mov.w	r0, #4294967295
 800a412:	e7e9      	b.n	800a3e8 <__ssputs_r+0x88>

0800a414 <_svfiprintf_r>:
 800a414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a418:	4698      	mov	r8, r3
 800a41a:	898b      	ldrh	r3, [r1, #12]
 800a41c:	061b      	lsls	r3, r3, #24
 800a41e:	b09d      	sub	sp, #116	; 0x74
 800a420:	4607      	mov	r7, r0
 800a422:	460d      	mov	r5, r1
 800a424:	4614      	mov	r4, r2
 800a426:	d50e      	bpl.n	800a446 <_svfiprintf_r+0x32>
 800a428:	690b      	ldr	r3, [r1, #16]
 800a42a:	b963      	cbnz	r3, 800a446 <_svfiprintf_r+0x32>
 800a42c:	2140      	movs	r1, #64	; 0x40
 800a42e:	f7ff ff0b 	bl	800a248 <_malloc_r>
 800a432:	6028      	str	r0, [r5, #0]
 800a434:	6128      	str	r0, [r5, #16]
 800a436:	b920      	cbnz	r0, 800a442 <_svfiprintf_r+0x2e>
 800a438:	230c      	movs	r3, #12
 800a43a:	603b      	str	r3, [r7, #0]
 800a43c:	f04f 30ff 	mov.w	r0, #4294967295
 800a440:	e0d0      	b.n	800a5e4 <_svfiprintf_r+0x1d0>
 800a442:	2340      	movs	r3, #64	; 0x40
 800a444:	616b      	str	r3, [r5, #20]
 800a446:	2300      	movs	r3, #0
 800a448:	9309      	str	r3, [sp, #36]	; 0x24
 800a44a:	2320      	movs	r3, #32
 800a44c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a450:	f8cd 800c 	str.w	r8, [sp, #12]
 800a454:	2330      	movs	r3, #48	; 0x30
 800a456:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a5fc <_svfiprintf_r+0x1e8>
 800a45a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a45e:	f04f 0901 	mov.w	r9, #1
 800a462:	4623      	mov	r3, r4
 800a464:	469a      	mov	sl, r3
 800a466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a46a:	b10a      	cbz	r2, 800a470 <_svfiprintf_r+0x5c>
 800a46c:	2a25      	cmp	r2, #37	; 0x25
 800a46e:	d1f9      	bne.n	800a464 <_svfiprintf_r+0x50>
 800a470:	ebba 0b04 	subs.w	fp, sl, r4
 800a474:	d00b      	beq.n	800a48e <_svfiprintf_r+0x7a>
 800a476:	465b      	mov	r3, fp
 800a478:	4622      	mov	r2, r4
 800a47a:	4629      	mov	r1, r5
 800a47c:	4638      	mov	r0, r7
 800a47e:	f7ff ff6f 	bl	800a360 <__ssputs_r>
 800a482:	3001      	adds	r0, #1
 800a484:	f000 80a9 	beq.w	800a5da <_svfiprintf_r+0x1c6>
 800a488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a48a:	445a      	add	r2, fp
 800a48c:	9209      	str	r2, [sp, #36]	; 0x24
 800a48e:	f89a 3000 	ldrb.w	r3, [sl]
 800a492:	2b00      	cmp	r3, #0
 800a494:	f000 80a1 	beq.w	800a5da <_svfiprintf_r+0x1c6>
 800a498:	2300      	movs	r3, #0
 800a49a:	f04f 32ff 	mov.w	r2, #4294967295
 800a49e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4a2:	f10a 0a01 	add.w	sl, sl, #1
 800a4a6:	9304      	str	r3, [sp, #16]
 800a4a8:	9307      	str	r3, [sp, #28]
 800a4aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4ae:	931a      	str	r3, [sp, #104]	; 0x68
 800a4b0:	4654      	mov	r4, sl
 800a4b2:	2205      	movs	r2, #5
 800a4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b8:	4850      	ldr	r0, [pc, #320]	; (800a5fc <_svfiprintf_r+0x1e8>)
 800a4ba:	f7f5 fec9 	bl	8000250 <memchr>
 800a4be:	9a04      	ldr	r2, [sp, #16]
 800a4c0:	b9d8      	cbnz	r0, 800a4fa <_svfiprintf_r+0xe6>
 800a4c2:	06d0      	lsls	r0, r2, #27
 800a4c4:	bf44      	itt	mi
 800a4c6:	2320      	movmi	r3, #32
 800a4c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4cc:	0711      	lsls	r1, r2, #28
 800a4ce:	bf44      	itt	mi
 800a4d0:	232b      	movmi	r3, #43	; 0x2b
 800a4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4da:	2b2a      	cmp	r3, #42	; 0x2a
 800a4dc:	d015      	beq.n	800a50a <_svfiprintf_r+0xf6>
 800a4de:	9a07      	ldr	r2, [sp, #28]
 800a4e0:	4654      	mov	r4, sl
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	f04f 0c0a 	mov.w	ip, #10
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4ee:	3b30      	subs	r3, #48	; 0x30
 800a4f0:	2b09      	cmp	r3, #9
 800a4f2:	d94d      	bls.n	800a590 <_svfiprintf_r+0x17c>
 800a4f4:	b1b0      	cbz	r0, 800a524 <_svfiprintf_r+0x110>
 800a4f6:	9207      	str	r2, [sp, #28]
 800a4f8:	e014      	b.n	800a524 <_svfiprintf_r+0x110>
 800a4fa:	eba0 0308 	sub.w	r3, r0, r8
 800a4fe:	fa09 f303 	lsl.w	r3, r9, r3
 800a502:	4313      	orrs	r3, r2
 800a504:	9304      	str	r3, [sp, #16]
 800a506:	46a2      	mov	sl, r4
 800a508:	e7d2      	b.n	800a4b0 <_svfiprintf_r+0x9c>
 800a50a:	9b03      	ldr	r3, [sp, #12]
 800a50c:	1d19      	adds	r1, r3, #4
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	9103      	str	r1, [sp, #12]
 800a512:	2b00      	cmp	r3, #0
 800a514:	bfbb      	ittet	lt
 800a516:	425b      	neglt	r3, r3
 800a518:	f042 0202 	orrlt.w	r2, r2, #2
 800a51c:	9307      	strge	r3, [sp, #28]
 800a51e:	9307      	strlt	r3, [sp, #28]
 800a520:	bfb8      	it	lt
 800a522:	9204      	strlt	r2, [sp, #16]
 800a524:	7823      	ldrb	r3, [r4, #0]
 800a526:	2b2e      	cmp	r3, #46	; 0x2e
 800a528:	d10c      	bne.n	800a544 <_svfiprintf_r+0x130>
 800a52a:	7863      	ldrb	r3, [r4, #1]
 800a52c:	2b2a      	cmp	r3, #42	; 0x2a
 800a52e:	d134      	bne.n	800a59a <_svfiprintf_r+0x186>
 800a530:	9b03      	ldr	r3, [sp, #12]
 800a532:	1d1a      	adds	r2, r3, #4
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	9203      	str	r2, [sp, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	bfb8      	it	lt
 800a53c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a540:	3402      	adds	r4, #2
 800a542:	9305      	str	r3, [sp, #20]
 800a544:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a60c <_svfiprintf_r+0x1f8>
 800a548:	7821      	ldrb	r1, [r4, #0]
 800a54a:	2203      	movs	r2, #3
 800a54c:	4650      	mov	r0, sl
 800a54e:	f7f5 fe7f 	bl	8000250 <memchr>
 800a552:	b138      	cbz	r0, 800a564 <_svfiprintf_r+0x150>
 800a554:	9b04      	ldr	r3, [sp, #16]
 800a556:	eba0 000a 	sub.w	r0, r0, sl
 800a55a:	2240      	movs	r2, #64	; 0x40
 800a55c:	4082      	lsls	r2, r0
 800a55e:	4313      	orrs	r3, r2
 800a560:	3401      	adds	r4, #1
 800a562:	9304      	str	r3, [sp, #16]
 800a564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a568:	4825      	ldr	r0, [pc, #148]	; (800a600 <_svfiprintf_r+0x1ec>)
 800a56a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a56e:	2206      	movs	r2, #6
 800a570:	f7f5 fe6e 	bl	8000250 <memchr>
 800a574:	2800      	cmp	r0, #0
 800a576:	d038      	beq.n	800a5ea <_svfiprintf_r+0x1d6>
 800a578:	4b22      	ldr	r3, [pc, #136]	; (800a604 <_svfiprintf_r+0x1f0>)
 800a57a:	bb1b      	cbnz	r3, 800a5c4 <_svfiprintf_r+0x1b0>
 800a57c:	9b03      	ldr	r3, [sp, #12]
 800a57e:	3307      	adds	r3, #7
 800a580:	f023 0307 	bic.w	r3, r3, #7
 800a584:	3308      	adds	r3, #8
 800a586:	9303      	str	r3, [sp, #12]
 800a588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a58a:	4433      	add	r3, r6
 800a58c:	9309      	str	r3, [sp, #36]	; 0x24
 800a58e:	e768      	b.n	800a462 <_svfiprintf_r+0x4e>
 800a590:	fb0c 3202 	mla	r2, ip, r2, r3
 800a594:	460c      	mov	r4, r1
 800a596:	2001      	movs	r0, #1
 800a598:	e7a6      	b.n	800a4e8 <_svfiprintf_r+0xd4>
 800a59a:	2300      	movs	r3, #0
 800a59c:	3401      	adds	r4, #1
 800a59e:	9305      	str	r3, [sp, #20]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	f04f 0c0a 	mov.w	ip, #10
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5ac:	3a30      	subs	r2, #48	; 0x30
 800a5ae:	2a09      	cmp	r2, #9
 800a5b0:	d903      	bls.n	800a5ba <_svfiprintf_r+0x1a6>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d0c6      	beq.n	800a544 <_svfiprintf_r+0x130>
 800a5b6:	9105      	str	r1, [sp, #20]
 800a5b8:	e7c4      	b.n	800a544 <_svfiprintf_r+0x130>
 800a5ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5be:	4604      	mov	r4, r0
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e7f0      	b.n	800a5a6 <_svfiprintf_r+0x192>
 800a5c4:	ab03      	add	r3, sp, #12
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	462a      	mov	r2, r5
 800a5ca:	4b0f      	ldr	r3, [pc, #60]	; (800a608 <_svfiprintf_r+0x1f4>)
 800a5cc:	a904      	add	r1, sp, #16
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	f3af 8000 	nop.w
 800a5d4:	1c42      	adds	r2, r0, #1
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	d1d6      	bne.n	800a588 <_svfiprintf_r+0x174>
 800a5da:	89ab      	ldrh	r3, [r5, #12]
 800a5dc:	065b      	lsls	r3, r3, #25
 800a5de:	f53f af2d 	bmi.w	800a43c <_svfiprintf_r+0x28>
 800a5e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5e4:	b01d      	add	sp, #116	; 0x74
 800a5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ea:	ab03      	add	r3, sp, #12
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	462a      	mov	r2, r5
 800a5f0:	4b05      	ldr	r3, [pc, #20]	; (800a608 <_svfiprintf_r+0x1f4>)
 800a5f2:	a904      	add	r1, sp, #16
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f000 f879 	bl	800a6ec <_printf_i>
 800a5fa:	e7eb      	b.n	800a5d4 <_svfiprintf_r+0x1c0>
 800a5fc:	0800b3aa 	.word	0x0800b3aa
 800a600:	0800b3b4 	.word	0x0800b3b4
 800a604:	00000000 	.word	0x00000000
 800a608:	0800a361 	.word	0x0800a361
 800a60c:	0800b3b0 	.word	0x0800b3b0

0800a610 <_printf_common>:
 800a610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a614:	4616      	mov	r6, r2
 800a616:	4699      	mov	r9, r3
 800a618:	688a      	ldr	r2, [r1, #8]
 800a61a:	690b      	ldr	r3, [r1, #16]
 800a61c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a620:	4293      	cmp	r3, r2
 800a622:	bfb8      	it	lt
 800a624:	4613      	movlt	r3, r2
 800a626:	6033      	str	r3, [r6, #0]
 800a628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a62c:	4607      	mov	r7, r0
 800a62e:	460c      	mov	r4, r1
 800a630:	b10a      	cbz	r2, 800a636 <_printf_common+0x26>
 800a632:	3301      	adds	r3, #1
 800a634:	6033      	str	r3, [r6, #0]
 800a636:	6823      	ldr	r3, [r4, #0]
 800a638:	0699      	lsls	r1, r3, #26
 800a63a:	bf42      	ittt	mi
 800a63c:	6833      	ldrmi	r3, [r6, #0]
 800a63e:	3302      	addmi	r3, #2
 800a640:	6033      	strmi	r3, [r6, #0]
 800a642:	6825      	ldr	r5, [r4, #0]
 800a644:	f015 0506 	ands.w	r5, r5, #6
 800a648:	d106      	bne.n	800a658 <_printf_common+0x48>
 800a64a:	f104 0a19 	add.w	sl, r4, #25
 800a64e:	68e3      	ldr	r3, [r4, #12]
 800a650:	6832      	ldr	r2, [r6, #0]
 800a652:	1a9b      	subs	r3, r3, r2
 800a654:	42ab      	cmp	r3, r5
 800a656:	dc26      	bgt.n	800a6a6 <_printf_common+0x96>
 800a658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a65c:	1e13      	subs	r3, r2, #0
 800a65e:	6822      	ldr	r2, [r4, #0]
 800a660:	bf18      	it	ne
 800a662:	2301      	movne	r3, #1
 800a664:	0692      	lsls	r2, r2, #26
 800a666:	d42b      	bmi.n	800a6c0 <_printf_common+0xb0>
 800a668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a66c:	4649      	mov	r1, r9
 800a66e:	4638      	mov	r0, r7
 800a670:	47c0      	blx	r8
 800a672:	3001      	adds	r0, #1
 800a674:	d01e      	beq.n	800a6b4 <_printf_common+0xa4>
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	6922      	ldr	r2, [r4, #16]
 800a67a:	f003 0306 	and.w	r3, r3, #6
 800a67e:	2b04      	cmp	r3, #4
 800a680:	bf02      	ittt	eq
 800a682:	68e5      	ldreq	r5, [r4, #12]
 800a684:	6833      	ldreq	r3, [r6, #0]
 800a686:	1aed      	subeq	r5, r5, r3
 800a688:	68a3      	ldr	r3, [r4, #8]
 800a68a:	bf0c      	ite	eq
 800a68c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a690:	2500      	movne	r5, #0
 800a692:	4293      	cmp	r3, r2
 800a694:	bfc4      	itt	gt
 800a696:	1a9b      	subgt	r3, r3, r2
 800a698:	18ed      	addgt	r5, r5, r3
 800a69a:	2600      	movs	r6, #0
 800a69c:	341a      	adds	r4, #26
 800a69e:	42b5      	cmp	r5, r6
 800a6a0:	d11a      	bne.n	800a6d8 <_printf_common+0xc8>
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	e008      	b.n	800a6b8 <_printf_common+0xa8>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	4652      	mov	r2, sl
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	47c0      	blx	r8
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	d103      	bne.n	800a6bc <_printf_common+0xac>
 800a6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6bc:	3501      	adds	r5, #1
 800a6be:	e7c6      	b.n	800a64e <_printf_common+0x3e>
 800a6c0:	18e1      	adds	r1, r4, r3
 800a6c2:	1c5a      	adds	r2, r3, #1
 800a6c4:	2030      	movs	r0, #48	; 0x30
 800a6c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6ca:	4422      	add	r2, r4
 800a6cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6d4:	3302      	adds	r3, #2
 800a6d6:	e7c7      	b.n	800a668 <_printf_common+0x58>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	4622      	mov	r2, r4
 800a6dc:	4649      	mov	r1, r9
 800a6de:	4638      	mov	r0, r7
 800a6e0:	47c0      	blx	r8
 800a6e2:	3001      	adds	r0, #1
 800a6e4:	d0e6      	beq.n	800a6b4 <_printf_common+0xa4>
 800a6e6:	3601      	adds	r6, #1
 800a6e8:	e7d9      	b.n	800a69e <_printf_common+0x8e>
	...

0800a6ec <_printf_i>:
 800a6ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f0:	7e0f      	ldrb	r7, [r1, #24]
 800a6f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6f4:	2f78      	cmp	r7, #120	; 0x78
 800a6f6:	4691      	mov	r9, r2
 800a6f8:	4680      	mov	r8, r0
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	469a      	mov	sl, r3
 800a6fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a702:	d807      	bhi.n	800a714 <_printf_i+0x28>
 800a704:	2f62      	cmp	r7, #98	; 0x62
 800a706:	d80a      	bhi.n	800a71e <_printf_i+0x32>
 800a708:	2f00      	cmp	r7, #0
 800a70a:	f000 80d4 	beq.w	800a8b6 <_printf_i+0x1ca>
 800a70e:	2f58      	cmp	r7, #88	; 0x58
 800a710:	f000 80c0 	beq.w	800a894 <_printf_i+0x1a8>
 800a714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a71c:	e03a      	b.n	800a794 <_printf_i+0xa8>
 800a71e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a722:	2b15      	cmp	r3, #21
 800a724:	d8f6      	bhi.n	800a714 <_printf_i+0x28>
 800a726:	a101      	add	r1, pc, #4	; (adr r1, 800a72c <_printf_i+0x40>)
 800a728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a72c:	0800a785 	.word	0x0800a785
 800a730:	0800a799 	.word	0x0800a799
 800a734:	0800a715 	.word	0x0800a715
 800a738:	0800a715 	.word	0x0800a715
 800a73c:	0800a715 	.word	0x0800a715
 800a740:	0800a715 	.word	0x0800a715
 800a744:	0800a799 	.word	0x0800a799
 800a748:	0800a715 	.word	0x0800a715
 800a74c:	0800a715 	.word	0x0800a715
 800a750:	0800a715 	.word	0x0800a715
 800a754:	0800a715 	.word	0x0800a715
 800a758:	0800a89d 	.word	0x0800a89d
 800a75c:	0800a7c5 	.word	0x0800a7c5
 800a760:	0800a857 	.word	0x0800a857
 800a764:	0800a715 	.word	0x0800a715
 800a768:	0800a715 	.word	0x0800a715
 800a76c:	0800a8bf 	.word	0x0800a8bf
 800a770:	0800a715 	.word	0x0800a715
 800a774:	0800a7c5 	.word	0x0800a7c5
 800a778:	0800a715 	.word	0x0800a715
 800a77c:	0800a715 	.word	0x0800a715
 800a780:	0800a85f 	.word	0x0800a85f
 800a784:	682b      	ldr	r3, [r5, #0]
 800a786:	1d1a      	adds	r2, r3, #4
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	602a      	str	r2, [r5, #0]
 800a78c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a794:	2301      	movs	r3, #1
 800a796:	e09f      	b.n	800a8d8 <_printf_i+0x1ec>
 800a798:	6820      	ldr	r0, [r4, #0]
 800a79a:	682b      	ldr	r3, [r5, #0]
 800a79c:	0607      	lsls	r7, r0, #24
 800a79e:	f103 0104 	add.w	r1, r3, #4
 800a7a2:	6029      	str	r1, [r5, #0]
 800a7a4:	d501      	bpl.n	800a7aa <_printf_i+0xbe>
 800a7a6:	681e      	ldr	r6, [r3, #0]
 800a7a8:	e003      	b.n	800a7b2 <_printf_i+0xc6>
 800a7aa:	0646      	lsls	r6, r0, #25
 800a7ac:	d5fb      	bpl.n	800a7a6 <_printf_i+0xba>
 800a7ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a7b2:	2e00      	cmp	r6, #0
 800a7b4:	da03      	bge.n	800a7be <_printf_i+0xd2>
 800a7b6:	232d      	movs	r3, #45	; 0x2d
 800a7b8:	4276      	negs	r6, r6
 800a7ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7be:	485a      	ldr	r0, [pc, #360]	; (800a928 <_printf_i+0x23c>)
 800a7c0:	230a      	movs	r3, #10
 800a7c2:	e012      	b.n	800a7ea <_printf_i+0xfe>
 800a7c4:	682b      	ldr	r3, [r5, #0]
 800a7c6:	6820      	ldr	r0, [r4, #0]
 800a7c8:	1d19      	adds	r1, r3, #4
 800a7ca:	6029      	str	r1, [r5, #0]
 800a7cc:	0605      	lsls	r5, r0, #24
 800a7ce:	d501      	bpl.n	800a7d4 <_printf_i+0xe8>
 800a7d0:	681e      	ldr	r6, [r3, #0]
 800a7d2:	e002      	b.n	800a7da <_printf_i+0xee>
 800a7d4:	0641      	lsls	r1, r0, #25
 800a7d6:	d5fb      	bpl.n	800a7d0 <_printf_i+0xe4>
 800a7d8:	881e      	ldrh	r6, [r3, #0]
 800a7da:	4853      	ldr	r0, [pc, #332]	; (800a928 <_printf_i+0x23c>)
 800a7dc:	2f6f      	cmp	r7, #111	; 0x6f
 800a7de:	bf0c      	ite	eq
 800a7e0:	2308      	moveq	r3, #8
 800a7e2:	230a      	movne	r3, #10
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7ea:	6865      	ldr	r5, [r4, #4]
 800a7ec:	60a5      	str	r5, [r4, #8]
 800a7ee:	2d00      	cmp	r5, #0
 800a7f0:	bfa2      	ittt	ge
 800a7f2:	6821      	ldrge	r1, [r4, #0]
 800a7f4:	f021 0104 	bicge.w	r1, r1, #4
 800a7f8:	6021      	strge	r1, [r4, #0]
 800a7fa:	b90e      	cbnz	r6, 800a800 <_printf_i+0x114>
 800a7fc:	2d00      	cmp	r5, #0
 800a7fe:	d04b      	beq.n	800a898 <_printf_i+0x1ac>
 800a800:	4615      	mov	r5, r2
 800a802:	fbb6 f1f3 	udiv	r1, r6, r3
 800a806:	fb03 6711 	mls	r7, r3, r1, r6
 800a80a:	5dc7      	ldrb	r7, [r0, r7]
 800a80c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a810:	4637      	mov	r7, r6
 800a812:	42bb      	cmp	r3, r7
 800a814:	460e      	mov	r6, r1
 800a816:	d9f4      	bls.n	800a802 <_printf_i+0x116>
 800a818:	2b08      	cmp	r3, #8
 800a81a:	d10b      	bne.n	800a834 <_printf_i+0x148>
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	07de      	lsls	r6, r3, #31
 800a820:	d508      	bpl.n	800a834 <_printf_i+0x148>
 800a822:	6923      	ldr	r3, [r4, #16]
 800a824:	6861      	ldr	r1, [r4, #4]
 800a826:	4299      	cmp	r1, r3
 800a828:	bfde      	ittt	le
 800a82a:	2330      	movle	r3, #48	; 0x30
 800a82c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a830:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a834:	1b52      	subs	r2, r2, r5
 800a836:	6122      	str	r2, [r4, #16]
 800a838:	f8cd a000 	str.w	sl, [sp]
 800a83c:	464b      	mov	r3, r9
 800a83e:	aa03      	add	r2, sp, #12
 800a840:	4621      	mov	r1, r4
 800a842:	4640      	mov	r0, r8
 800a844:	f7ff fee4 	bl	800a610 <_printf_common>
 800a848:	3001      	adds	r0, #1
 800a84a:	d14a      	bne.n	800a8e2 <_printf_i+0x1f6>
 800a84c:	f04f 30ff 	mov.w	r0, #4294967295
 800a850:	b004      	add	sp, #16
 800a852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	f043 0320 	orr.w	r3, r3, #32
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	4833      	ldr	r0, [pc, #204]	; (800a92c <_printf_i+0x240>)
 800a860:	2778      	movs	r7, #120	; 0x78
 800a862:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	6829      	ldr	r1, [r5, #0]
 800a86a:	061f      	lsls	r7, r3, #24
 800a86c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a870:	d402      	bmi.n	800a878 <_printf_i+0x18c>
 800a872:	065f      	lsls	r7, r3, #25
 800a874:	bf48      	it	mi
 800a876:	b2b6      	uxthmi	r6, r6
 800a878:	07df      	lsls	r7, r3, #31
 800a87a:	bf48      	it	mi
 800a87c:	f043 0320 	orrmi.w	r3, r3, #32
 800a880:	6029      	str	r1, [r5, #0]
 800a882:	bf48      	it	mi
 800a884:	6023      	strmi	r3, [r4, #0]
 800a886:	b91e      	cbnz	r6, 800a890 <_printf_i+0x1a4>
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	f023 0320 	bic.w	r3, r3, #32
 800a88e:	6023      	str	r3, [r4, #0]
 800a890:	2310      	movs	r3, #16
 800a892:	e7a7      	b.n	800a7e4 <_printf_i+0xf8>
 800a894:	4824      	ldr	r0, [pc, #144]	; (800a928 <_printf_i+0x23c>)
 800a896:	e7e4      	b.n	800a862 <_printf_i+0x176>
 800a898:	4615      	mov	r5, r2
 800a89a:	e7bd      	b.n	800a818 <_printf_i+0x12c>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	6826      	ldr	r6, [r4, #0]
 800a8a0:	6961      	ldr	r1, [r4, #20]
 800a8a2:	1d18      	adds	r0, r3, #4
 800a8a4:	6028      	str	r0, [r5, #0]
 800a8a6:	0635      	lsls	r5, r6, #24
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	d501      	bpl.n	800a8b0 <_printf_i+0x1c4>
 800a8ac:	6019      	str	r1, [r3, #0]
 800a8ae:	e002      	b.n	800a8b6 <_printf_i+0x1ca>
 800a8b0:	0670      	lsls	r0, r6, #25
 800a8b2:	d5fb      	bpl.n	800a8ac <_printf_i+0x1c0>
 800a8b4:	8019      	strh	r1, [r3, #0]
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	6123      	str	r3, [r4, #16]
 800a8ba:	4615      	mov	r5, r2
 800a8bc:	e7bc      	b.n	800a838 <_printf_i+0x14c>
 800a8be:	682b      	ldr	r3, [r5, #0]
 800a8c0:	1d1a      	adds	r2, r3, #4
 800a8c2:	602a      	str	r2, [r5, #0]
 800a8c4:	681d      	ldr	r5, [r3, #0]
 800a8c6:	6862      	ldr	r2, [r4, #4]
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f7f5 fcc0 	bl	8000250 <memchr>
 800a8d0:	b108      	cbz	r0, 800a8d6 <_printf_i+0x1ea>
 800a8d2:	1b40      	subs	r0, r0, r5
 800a8d4:	6060      	str	r0, [r4, #4]
 800a8d6:	6863      	ldr	r3, [r4, #4]
 800a8d8:	6123      	str	r3, [r4, #16]
 800a8da:	2300      	movs	r3, #0
 800a8dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8e0:	e7aa      	b.n	800a838 <_printf_i+0x14c>
 800a8e2:	6923      	ldr	r3, [r4, #16]
 800a8e4:	462a      	mov	r2, r5
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	4640      	mov	r0, r8
 800a8ea:	47d0      	blx	sl
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	d0ad      	beq.n	800a84c <_printf_i+0x160>
 800a8f0:	6823      	ldr	r3, [r4, #0]
 800a8f2:	079b      	lsls	r3, r3, #30
 800a8f4:	d413      	bmi.n	800a91e <_printf_i+0x232>
 800a8f6:	68e0      	ldr	r0, [r4, #12]
 800a8f8:	9b03      	ldr	r3, [sp, #12]
 800a8fa:	4298      	cmp	r0, r3
 800a8fc:	bfb8      	it	lt
 800a8fe:	4618      	movlt	r0, r3
 800a900:	e7a6      	b.n	800a850 <_printf_i+0x164>
 800a902:	2301      	movs	r3, #1
 800a904:	4632      	mov	r2, r6
 800a906:	4649      	mov	r1, r9
 800a908:	4640      	mov	r0, r8
 800a90a:	47d0      	blx	sl
 800a90c:	3001      	adds	r0, #1
 800a90e:	d09d      	beq.n	800a84c <_printf_i+0x160>
 800a910:	3501      	adds	r5, #1
 800a912:	68e3      	ldr	r3, [r4, #12]
 800a914:	9903      	ldr	r1, [sp, #12]
 800a916:	1a5b      	subs	r3, r3, r1
 800a918:	42ab      	cmp	r3, r5
 800a91a:	dcf2      	bgt.n	800a902 <_printf_i+0x216>
 800a91c:	e7eb      	b.n	800a8f6 <_printf_i+0x20a>
 800a91e:	2500      	movs	r5, #0
 800a920:	f104 0619 	add.w	r6, r4, #25
 800a924:	e7f5      	b.n	800a912 <_printf_i+0x226>
 800a926:	bf00      	nop
 800a928:	0800b3bb 	.word	0x0800b3bb
 800a92c:	0800b3cc 	.word	0x0800b3cc

0800a930 <__sflush_r>:
 800a930:	898a      	ldrh	r2, [r1, #12]
 800a932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a936:	4605      	mov	r5, r0
 800a938:	0710      	lsls	r0, r2, #28
 800a93a:	460c      	mov	r4, r1
 800a93c:	d458      	bmi.n	800a9f0 <__sflush_r+0xc0>
 800a93e:	684b      	ldr	r3, [r1, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	dc05      	bgt.n	800a950 <__sflush_r+0x20>
 800a944:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a946:	2b00      	cmp	r3, #0
 800a948:	dc02      	bgt.n	800a950 <__sflush_r+0x20>
 800a94a:	2000      	movs	r0, #0
 800a94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a952:	2e00      	cmp	r6, #0
 800a954:	d0f9      	beq.n	800a94a <__sflush_r+0x1a>
 800a956:	2300      	movs	r3, #0
 800a958:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a95c:	682f      	ldr	r7, [r5, #0]
 800a95e:	6a21      	ldr	r1, [r4, #32]
 800a960:	602b      	str	r3, [r5, #0]
 800a962:	d032      	beq.n	800a9ca <__sflush_r+0x9a>
 800a964:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	075a      	lsls	r2, r3, #29
 800a96a:	d505      	bpl.n	800a978 <__sflush_r+0x48>
 800a96c:	6863      	ldr	r3, [r4, #4]
 800a96e:	1ac0      	subs	r0, r0, r3
 800a970:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a972:	b10b      	cbz	r3, 800a978 <__sflush_r+0x48>
 800a974:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a976:	1ac0      	subs	r0, r0, r3
 800a978:	2300      	movs	r3, #0
 800a97a:	4602      	mov	r2, r0
 800a97c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a97e:	6a21      	ldr	r1, [r4, #32]
 800a980:	4628      	mov	r0, r5
 800a982:	47b0      	blx	r6
 800a984:	1c43      	adds	r3, r0, #1
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	d106      	bne.n	800a998 <__sflush_r+0x68>
 800a98a:	6829      	ldr	r1, [r5, #0]
 800a98c:	291d      	cmp	r1, #29
 800a98e:	d82b      	bhi.n	800a9e8 <__sflush_r+0xb8>
 800a990:	4a29      	ldr	r2, [pc, #164]	; (800aa38 <__sflush_r+0x108>)
 800a992:	410a      	asrs	r2, r1
 800a994:	07d6      	lsls	r6, r2, #31
 800a996:	d427      	bmi.n	800a9e8 <__sflush_r+0xb8>
 800a998:	2200      	movs	r2, #0
 800a99a:	6062      	str	r2, [r4, #4]
 800a99c:	04d9      	lsls	r1, r3, #19
 800a99e:	6922      	ldr	r2, [r4, #16]
 800a9a0:	6022      	str	r2, [r4, #0]
 800a9a2:	d504      	bpl.n	800a9ae <__sflush_r+0x7e>
 800a9a4:	1c42      	adds	r2, r0, #1
 800a9a6:	d101      	bne.n	800a9ac <__sflush_r+0x7c>
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	b903      	cbnz	r3, 800a9ae <__sflush_r+0x7e>
 800a9ac:	6560      	str	r0, [r4, #84]	; 0x54
 800a9ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9b0:	602f      	str	r7, [r5, #0]
 800a9b2:	2900      	cmp	r1, #0
 800a9b4:	d0c9      	beq.n	800a94a <__sflush_r+0x1a>
 800a9b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9ba:	4299      	cmp	r1, r3
 800a9bc:	d002      	beq.n	800a9c4 <__sflush_r+0x94>
 800a9be:	4628      	mov	r0, r5
 800a9c0:	f7ff fbce 	bl	800a160 <_free_r>
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	6360      	str	r0, [r4, #52]	; 0x34
 800a9c8:	e7c0      	b.n	800a94c <__sflush_r+0x1c>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	47b0      	blx	r6
 800a9d0:	1c41      	adds	r1, r0, #1
 800a9d2:	d1c8      	bne.n	800a966 <__sflush_r+0x36>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d0c5      	beq.n	800a966 <__sflush_r+0x36>
 800a9da:	2b1d      	cmp	r3, #29
 800a9dc:	d001      	beq.n	800a9e2 <__sflush_r+0xb2>
 800a9de:	2b16      	cmp	r3, #22
 800a9e0:	d101      	bne.n	800a9e6 <__sflush_r+0xb6>
 800a9e2:	602f      	str	r7, [r5, #0]
 800a9e4:	e7b1      	b.n	800a94a <__sflush_r+0x1a>
 800a9e6:	89a3      	ldrh	r3, [r4, #12]
 800a9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ec:	81a3      	strh	r3, [r4, #12]
 800a9ee:	e7ad      	b.n	800a94c <__sflush_r+0x1c>
 800a9f0:	690f      	ldr	r7, [r1, #16]
 800a9f2:	2f00      	cmp	r7, #0
 800a9f4:	d0a9      	beq.n	800a94a <__sflush_r+0x1a>
 800a9f6:	0793      	lsls	r3, r2, #30
 800a9f8:	680e      	ldr	r6, [r1, #0]
 800a9fa:	bf08      	it	eq
 800a9fc:	694b      	ldreq	r3, [r1, #20]
 800a9fe:	600f      	str	r7, [r1, #0]
 800aa00:	bf18      	it	ne
 800aa02:	2300      	movne	r3, #0
 800aa04:	eba6 0807 	sub.w	r8, r6, r7
 800aa08:	608b      	str	r3, [r1, #8]
 800aa0a:	f1b8 0f00 	cmp.w	r8, #0
 800aa0e:	dd9c      	ble.n	800a94a <__sflush_r+0x1a>
 800aa10:	6a21      	ldr	r1, [r4, #32]
 800aa12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa14:	4643      	mov	r3, r8
 800aa16:	463a      	mov	r2, r7
 800aa18:	4628      	mov	r0, r5
 800aa1a:	47b0      	blx	r6
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	dc06      	bgt.n	800aa2e <__sflush_r+0xfe>
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa26:	81a3      	strh	r3, [r4, #12]
 800aa28:	f04f 30ff 	mov.w	r0, #4294967295
 800aa2c:	e78e      	b.n	800a94c <__sflush_r+0x1c>
 800aa2e:	4407      	add	r7, r0
 800aa30:	eba8 0800 	sub.w	r8, r8, r0
 800aa34:	e7e9      	b.n	800aa0a <__sflush_r+0xda>
 800aa36:	bf00      	nop
 800aa38:	dfbffffe 	.word	0xdfbffffe

0800aa3c <_fflush_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	690b      	ldr	r3, [r1, #16]
 800aa40:	4605      	mov	r5, r0
 800aa42:	460c      	mov	r4, r1
 800aa44:	b913      	cbnz	r3, 800aa4c <_fflush_r+0x10>
 800aa46:	2500      	movs	r5, #0
 800aa48:	4628      	mov	r0, r5
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
 800aa4c:	b118      	cbz	r0, 800aa56 <_fflush_r+0x1a>
 800aa4e:	6a03      	ldr	r3, [r0, #32]
 800aa50:	b90b      	cbnz	r3, 800aa56 <_fflush_r+0x1a>
 800aa52:	f7ff f9e1 	bl	8009e18 <__sinit>
 800aa56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d0f3      	beq.n	800aa46 <_fflush_r+0xa>
 800aa5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa60:	07d0      	lsls	r0, r2, #31
 800aa62:	d404      	bmi.n	800aa6e <_fflush_r+0x32>
 800aa64:	0599      	lsls	r1, r3, #22
 800aa66:	d402      	bmi.n	800aa6e <_fflush_r+0x32>
 800aa68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa6a:	f7ff fb58 	bl	800a11e <__retarget_lock_acquire_recursive>
 800aa6e:	4628      	mov	r0, r5
 800aa70:	4621      	mov	r1, r4
 800aa72:	f7ff ff5d 	bl	800a930 <__sflush_r>
 800aa76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa78:	07da      	lsls	r2, r3, #31
 800aa7a:	4605      	mov	r5, r0
 800aa7c:	d4e4      	bmi.n	800aa48 <_fflush_r+0xc>
 800aa7e:	89a3      	ldrh	r3, [r4, #12]
 800aa80:	059b      	lsls	r3, r3, #22
 800aa82:	d4e1      	bmi.n	800aa48 <_fflush_r+0xc>
 800aa84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa86:	f7ff fb4b 	bl	800a120 <__retarget_lock_release_recursive>
 800aa8a:	e7dd      	b.n	800aa48 <_fflush_r+0xc>

0800aa8c <fiprintf>:
 800aa8c:	b40e      	push	{r1, r2, r3}
 800aa8e:	b503      	push	{r0, r1, lr}
 800aa90:	4601      	mov	r1, r0
 800aa92:	ab03      	add	r3, sp, #12
 800aa94:	4805      	ldr	r0, [pc, #20]	; (800aaac <fiprintf+0x20>)
 800aa96:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa9a:	6800      	ldr	r0, [r0, #0]
 800aa9c:	9301      	str	r3, [sp, #4]
 800aa9e:	f000 f89f 	bl	800abe0 <_vfiprintf_r>
 800aaa2:	b002      	add	sp, #8
 800aaa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaa8:	b003      	add	sp, #12
 800aaaa:	4770      	bx	lr
 800aaac:	20000268 	.word	0x20000268

0800aab0 <memmove>:
 800aab0:	4288      	cmp	r0, r1
 800aab2:	b510      	push	{r4, lr}
 800aab4:	eb01 0402 	add.w	r4, r1, r2
 800aab8:	d902      	bls.n	800aac0 <memmove+0x10>
 800aaba:	4284      	cmp	r4, r0
 800aabc:	4623      	mov	r3, r4
 800aabe:	d807      	bhi.n	800aad0 <memmove+0x20>
 800aac0:	1e43      	subs	r3, r0, #1
 800aac2:	42a1      	cmp	r1, r4
 800aac4:	d008      	beq.n	800aad8 <memmove+0x28>
 800aac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aace:	e7f8      	b.n	800aac2 <memmove+0x12>
 800aad0:	4402      	add	r2, r0
 800aad2:	4601      	mov	r1, r0
 800aad4:	428a      	cmp	r2, r1
 800aad6:	d100      	bne.n	800aada <memmove+0x2a>
 800aad8:	bd10      	pop	{r4, pc}
 800aada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aae2:	e7f7      	b.n	800aad4 <memmove+0x24>

0800aae4 <_sbrk_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	4d06      	ldr	r5, [pc, #24]	; (800ab00 <_sbrk_r+0x1c>)
 800aae8:	2300      	movs	r3, #0
 800aaea:	4604      	mov	r4, r0
 800aaec:	4608      	mov	r0, r1
 800aaee:	602b      	str	r3, [r5, #0]
 800aaf0:	f7f6 ff06 	bl	8001900 <_sbrk>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	d102      	bne.n	800aafe <_sbrk_r+0x1a>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	b103      	cbz	r3, 800aafe <_sbrk_r+0x1a>
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	20000840 	.word	0x20000840

0800ab04 <memcpy>:
 800ab04:	440a      	add	r2, r1
 800ab06:	4291      	cmp	r1, r2
 800ab08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab0c:	d100      	bne.n	800ab10 <memcpy+0xc>
 800ab0e:	4770      	bx	lr
 800ab10:	b510      	push	{r4, lr}
 800ab12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab1a:	4291      	cmp	r1, r2
 800ab1c:	d1f9      	bne.n	800ab12 <memcpy+0xe>
 800ab1e:	bd10      	pop	{r4, pc}

0800ab20 <abort>:
 800ab20:	b508      	push	{r3, lr}
 800ab22:	2006      	movs	r0, #6
 800ab24:	f000 fa34 	bl	800af90 <raise>
 800ab28:	2001      	movs	r0, #1
 800ab2a:	f7f6 fe71 	bl	8001810 <_exit>

0800ab2e <_realloc_r>:
 800ab2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab32:	4680      	mov	r8, r0
 800ab34:	4614      	mov	r4, r2
 800ab36:	460e      	mov	r6, r1
 800ab38:	b921      	cbnz	r1, 800ab44 <_realloc_r+0x16>
 800ab3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3e:	4611      	mov	r1, r2
 800ab40:	f7ff bb82 	b.w	800a248 <_malloc_r>
 800ab44:	b92a      	cbnz	r2, 800ab52 <_realloc_r+0x24>
 800ab46:	f7ff fb0b 	bl	800a160 <_free_r>
 800ab4a:	4625      	mov	r5, r4
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab52:	f000 fa39 	bl	800afc8 <_malloc_usable_size_r>
 800ab56:	4284      	cmp	r4, r0
 800ab58:	4607      	mov	r7, r0
 800ab5a:	d802      	bhi.n	800ab62 <_realloc_r+0x34>
 800ab5c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab60:	d812      	bhi.n	800ab88 <_realloc_r+0x5a>
 800ab62:	4621      	mov	r1, r4
 800ab64:	4640      	mov	r0, r8
 800ab66:	f7ff fb6f 	bl	800a248 <_malloc_r>
 800ab6a:	4605      	mov	r5, r0
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d0ed      	beq.n	800ab4c <_realloc_r+0x1e>
 800ab70:	42bc      	cmp	r4, r7
 800ab72:	4622      	mov	r2, r4
 800ab74:	4631      	mov	r1, r6
 800ab76:	bf28      	it	cs
 800ab78:	463a      	movcs	r2, r7
 800ab7a:	f7ff ffc3 	bl	800ab04 <memcpy>
 800ab7e:	4631      	mov	r1, r6
 800ab80:	4640      	mov	r0, r8
 800ab82:	f7ff faed 	bl	800a160 <_free_r>
 800ab86:	e7e1      	b.n	800ab4c <_realloc_r+0x1e>
 800ab88:	4635      	mov	r5, r6
 800ab8a:	e7df      	b.n	800ab4c <_realloc_r+0x1e>

0800ab8c <__sfputc_r>:
 800ab8c:	6893      	ldr	r3, [r2, #8]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	b410      	push	{r4}
 800ab94:	6093      	str	r3, [r2, #8]
 800ab96:	da08      	bge.n	800abaa <__sfputc_r+0x1e>
 800ab98:	6994      	ldr	r4, [r2, #24]
 800ab9a:	42a3      	cmp	r3, r4
 800ab9c:	db01      	blt.n	800aba2 <__sfputc_r+0x16>
 800ab9e:	290a      	cmp	r1, #10
 800aba0:	d103      	bne.n	800abaa <__sfputc_r+0x1e>
 800aba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aba6:	f000 b935 	b.w	800ae14 <__swbuf_r>
 800abaa:	6813      	ldr	r3, [r2, #0]
 800abac:	1c58      	adds	r0, r3, #1
 800abae:	6010      	str	r0, [r2, #0]
 800abb0:	7019      	strb	r1, [r3, #0]
 800abb2:	4608      	mov	r0, r1
 800abb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <__sfputs_r>:
 800abba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbc:	4606      	mov	r6, r0
 800abbe:	460f      	mov	r7, r1
 800abc0:	4614      	mov	r4, r2
 800abc2:	18d5      	adds	r5, r2, r3
 800abc4:	42ac      	cmp	r4, r5
 800abc6:	d101      	bne.n	800abcc <__sfputs_r+0x12>
 800abc8:	2000      	movs	r0, #0
 800abca:	e007      	b.n	800abdc <__sfputs_r+0x22>
 800abcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd0:	463a      	mov	r2, r7
 800abd2:	4630      	mov	r0, r6
 800abd4:	f7ff ffda 	bl	800ab8c <__sfputc_r>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d1f3      	bne.n	800abc4 <__sfputs_r+0xa>
 800abdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abe0 <_vfiprintf_r>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	460d      	mov	r5, r1
 800abe6:	b09d      	sub	sp, #116	; 0x74
 800abe8:	4614      	mov	r4, r2
 800abea:	4698      	mov	r8, r3
 800abec:	4606      	mov	r6, r0
 800abee:	b118      	cbz	r0, 800abf8 <_vfiprintf_r+0x18>
 800abf0:	6a03      	ldr	r3, [r0, #32]
 800abf2:	b90b      	cbnz	r3, 800abf8 <_vfiprintf_r+0x18>
 800abf4:	f7ff f910 	bl	8009e18 <__sinit>
 800abf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abfa:	07d9      	lsls	r1, r3, #31
 800abfc:	d405      	bmi.n	800ac0a <_vfiprintf_r+0x2a>
 800abfe:	89ab      	ldrh	r3, [r5, #12]
 800ac00:	059a      	lsls	r2, r3, #22
 800ac02:	d402      	bmi.n	800ac0a <_vfiprintf_r+0x2a>
 800ac04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac06:	f7ff fa8a 	bl	800a11e <__retarget_lock_acquire_recursive>
 800ac0a:	89ab      	ldrh	r3, [r5, #12]
 800ac0c:	071b      	lsls	r3, r3, #28
 800ac0e:	d501      	bpl.n	800ac14 <_vfiprintf_r+0x34>
 800ac10:	692b      	ldr	r3, [r5, #16]
 800ac12:	b99b      	cbnz	r3, 800ac3c <_vfiprintf_r+0x5c>
 800ac14:	4629      	mov	r1, r5
 800ac16:	4630      	mov	r0, r6
 800ac18:	f000 f93a 	bl	800ae90 <__swsetup_r>
 800ac1c:	b170      	cbz	r0, 800ac3c <_vfiprintf_r+0x5c>
 800ac1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac20:	07dc      	lsls	r4, r3, #31
 800ac22:	d504      	bpl.n	800ac2e <_vfiprintf_r+0x4e>
 800ac24:	f04f 30ff 	mov.w	r0, #4294967295
 800ac28:	b01d      	add	sp, #116	; 0x74
 800ac2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2e:	89ab      	ldrh	r3, [r5, #12]
 800ac30:	0598      	lsls	r0, r3, #22
 800ac32:	d4f7      	bmi.n	800ac24 <_vfiprintf_r+0x44>
 800ac34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac36:	f7ff fa73 	bl	800a120 <__retarget_lock_release_recursive>
 800ac3a:	e7f3      	b.n	800ac24 <_vfiprintf_r+0x44>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac40:	2320      	movs	r3, #32
 800ac42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac4a:	2330      	movs	r3, #48	; 0x30
 800ac4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ae00 <_vfiprintf_r+0x220>
 800ac50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac54:	f04f 0901 	mov.w	r9, #1
 800ac58:	4623      	mov	r3, r4
 800ac5a:	469a      	mov	sl, r3
 800ac5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac60:	b10a      	cbz	r2, 800ac66 <_vfiprintf_r+0x86>
 800ac62:	2a25      	cmp	r2, #37	; 0x25
 800ac64:	d1f9      	bne.n	800ac5a <_vfiprintf_r+0x7a>
 800ac66:	ebba 0b04 	subs.w	fp, sl, r4
 800ac6a:	d00b      	beq.n	800ac84 <_vfiprintf_r+0xa4>
 800ac6c:	465b      	mov	r3, fp
 800ac6e:	4622      	mov	r2, r4
 800ac70:	4629      	mov	r1, r5
 800ac72:	4630      	mov	r0, r6
 800ac74:	f7ff ffa1 	bl	800abba <__sfputs_r>
 800ac78:	3001      	adds	r0, #1
 800ac7a:	f000 80a9 	beq.w	800add0 <_vfiprintf_r+0x1f0>
 800ac7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac80:	445a      	add	r2, fp
 800ac82:	9209      	str	r2, [sp, #36]	; 0x24
 800ac84:	f89a 3000 	ldrb.w	r3, [sl]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f000 80a1 	beq.w	800add0 <_vfiprintf_r+0x1f0>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f04f 32ff 	mov.w	r2, #4294967295
 800ac94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac98:	f10a 0a01 	add.w	sl, sl, #1
 800ac9c:	9304      	str	r3, [sp, #16]
 800ac9e:	9307      	str	r3, [sp, #28]
 800aca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aca4:	931a      	str	r3, [sp, #104]	; 0x68
 800aca6:	4654      	mov	r4, sl
 800aca8:	2205      	movs	r2, #5
 800acaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acae:	4854      	ldr	r0, [pc, #336]	; (800ae00 <_vfiprintf_r+0x220>)
 800acb0:	f7f5 face 	bl	8000250 <memchr>
 800acb4:	9a04      	ldr	r2, [sp, #16]
 800acb6:	b9d8      	cbnz	r0, 800acf0 <_vfiprintf_r+0x110>
 800acb8:	06d1      	lsls	r1, r2, #27
 800acba:	bf44      	itt	mi
 800acbc:	2320      	movmi	r3, #32
 800acbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acc2:	0713      	lsls	r3, r2, #28
 800acc4:	bf44      	itt	mi
 800acc6:	232b      	movmi	r3, #43	; 0x2b
 800acc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800accc:	f89a 3000 	ldrb.w	r3, [sl]
 800acd0:	2b2a      	cmp	r3, #42	; 0x2a
 800acd2:	d015      	beq.n	800ad00 <_vfiprintf_r+0x120>
 800acd4:	9a07      	ldr	r2, [sp, #28]
 800acd6:	4654      	mov	r4, sl
 800acd8:	2000      	movs	r0, #0
 800acda:	f04f 0c0a 	mov.w	ip, #10
 800acde:	4621      	mov	r1, r4
 800ace0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ace4:	3b30      	subs	r3, #48	; 0x30
 800ace6:	2b09      	cmp	r3, #9
 800ace8:	d94d      	bls.n	800ad86 <_vfiprintf_r+0x1a6>
 800acea:	b1b0      	cbz	r0, 800ad1a <_vfiprintf_r+0x13a>
 800acec:	9207      	str	r2, [sp, #28]
 800acee:	e014      	b.n	800ad1a <_vfiprintf_r+0x13a>
 800acf0:	eba0 0308 	sub.w	r3, r0, r8
 800acf4:	fa09 f303 	lsl.w	r3, r9, r3
 800acf8:	4313      	orrs	r3, r2
 800acfa:	9304      	str	r3, [sp, #16]
 800acfc:	46a2      	mov	sl, r4
 800acfe:	e7d2      	b.n	800aca6 <_vfiprintf_r+0xc6>
 800ad00:	9b03      	ldr	r3, [sp, #12]
 800ad02:	1d19      	adds	r1, r3, #4
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	9103      	str	r1, [sp, #12]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	bfbb      	ittet	lt
 800ad0c:	425b      	neglt	r3, r3
 800ad0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ad12:	9307      	strge	r3, [sp, #28]
 800ad14:	9307      	strlt	r3, [sp, #28]
 800ad16:	bfb8      	it	lt
 800ad18:	9204      	strlt	r2, [sp, #16]
 800ad1a:	7823      	ldrb	r3, [r4, #0]
 800ad1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad1e:	d10c      	bne.n	800ad3a <_vfiprintf_r+0x15a>
 800ad20:	7863      	ldrb	r3, [r4, #1]
 800ad22:	2b2a      	cmp	r3, #42	; 0x2a
 800ad24:	d134      	bne.n	800ad90 <_vfiprintf_r+0x1b0>
 800ad26:	9b03      	ldr	r3, [sp, #12]
 800ad28:	1d1a      	adds	r2, r3, #4
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	9203      	str	r2, [sp, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	bfb8      	it	lt
 800ad32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad36:	3402      	adds	r4, #2
 800ad38:	9305      	str	r3, [sp, #20]
 800ad3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ae10 <_vfiprintf_r+0x230>
 800ad3e:	7821      	ldrb	r1, [r4, #0]
 800ad40:	2203      	movs	r2, #3
 800ad42:	4650      	mov	r0, sl
 800ad44:	f7f5 fa84 	bl	8000250 <memchr>
 800ad48:	b138      	cbz	r0, 800ad5a <_vfiprintf_r+0x17a>
 800ad4a:	9b04      	ldr	r3, [sp, #16]
 800ad4c:	eba0 000a 	sub.w	r0, r0, sl
 800ad50:	2240      	movs	r2, #64	; 0x40
 800ad52:	4082      	lsls	r2, r0
 800ad54:	4313      	orrs	r3, r2
 800ad56:	3401      	adds	r4, #1
 800ad58:	9304      	str	r3, [sp, #16]
 800ad5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5e:	4829      	ldr	r0, [pc, #164]	; (800ae04 <_vfiprintf_r+0x224>)
 800ad60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad64:	2206      	movs	r2, #6
 800ad66:	f7f5 fa73 	bl	8000250 <memchr>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d03f      	beq.n	800adee <_vfiprintf_r+0x20e>
 800ad6e:	4b26      	ldr	r3, [pc, #152]	; (800ae08 <_vfiprintf_r+0x228>)
 800ad70:	bb1b      	cbnz	r3, 800adba <_vfiprintf_r+0x1da>
 800ad72:	9b03      	ldr	r3, [sp, #12]
 800ad74:	3307      	adds	r3, #7
 800ad76:	f023 0307 	bic.w	r3, r3, #7
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	9303      	str	r3, [sp, #12]
 800ad7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad80:	443b      	add	r3, r7
 800ad82:	9309      	str	r3, [sp, #36]	; 0x24
 800ad84:	e768      	b.n	800ac58 <_vfiprintf_r+0x78>
 800ad86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	e7a6      	b.n	800acde <_vfiprintf_r+0xfe>
 800ad90:	2300      	movs	r3, #0
 800ad92:	3401      	adds	r4, #1
 800ad94:	9305      	str	r3, [sp, #20]
 800ad96:	4619      	mov	r1, r3
 800ad98:	f04f 0c0a 	mov.w	ip, #10
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ada2:	3a30      	subs	r2, #48	; 0x30
 800ada4:	2a09      	cmp	r2, #9
 800ada6:	d903      	bls.n	800adb0 <_vfiprintf_r+0x1d0>
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d0c6      	beq.n	800ad3a <_vfiprintf_r+0x15a>
 800adac:	9105      	str	r1, [sp, #20]
 800adae:	e7c4      	b.n	800ad3a <_vfiprintf_r+0x15a>
 800adb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800adb4:	4604      	mov	r4, r0
 800adb6:	2301      	movs	r3, #1
 800adb8:	e7f0      	b.n	800ad9c <_vfiprintf_r+0x1bc>
 800adba:	ab03      	add	r3, sp, #12
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	462a      	mov	r2, r5
 800adc0:	4b12      	ldr	r3, [pc, #72]	; (800ae0c <_vfiprintf_r+0x22c>)
 800adc2:	a904      	add	r1, sp, #16
 800adc4:	4630      	mov	r0, r6
 800adc6:	f3af 8000 	nop.w
 800adca:	4607      	mov	r7, r0
 800adcc:	1c78      	adds	r0, r7, #1
 800adce:	d1d6      	bne.n	800ad7e <_vfiprintf_r+0x19e>
 800add0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800add2:	07d9      	lsls	r1, r3, #31
 800add4:	d405      	bmi.n	800ade2 <_vfiprintf_r+0x202>
 800add6:	89ab      	ldrh	r3, [r5, #12]
 800add8:	059a      	lsls	r2, r3, #22
 800adda:	d402      	bmi.n	800ade2 <_vfiprintf_r+0x202>
 800addc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adde:	f7ff f99f 	bl	800a120 <__retarget_lock_release_recursive>
 800ade2:	89ab      	ldrh	r3, [r5, #12]
 800ade4:	065b      	lsls	r3, r3, #25
 800ade6:	f53f af1d 	bmi.w	800ac24 <_vfiprintf_r+0x44>
 800adea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adec:	e71c      	b.n	800ac28 <_vfiprintf_r+0x48>
 800adee:	ab03      	add	r3, sp, #12
 800adf0:	9300      	str	r3, [sp, #0]
 800adf2:	462a      	mov	r2, r5
 800adf4:	4b05      	ldr	r3, [pc, #20]	; (800ae0c <_vfiprintf_r+0x22c>)
 800adf6:	a904      	add	r1, sp, #16
 800adf8:	4630      	mov	r0, r6
 800adfa:	f7ff fc77 	bl	800a6ec <_printf_i>
 800adfe:	e7e4      	b.n	800adca <_vfiprintf_r+0x1ea>
 800ae00:	0800b3aa 	.word	0x0800b3aa
 800ae04:	0800b3b4 	.word	0x0800b3b4
 800ae08:	00000000 	.word	0x00000000
 800ae0c:	0800abbb 	.word	0x0800abbb
 800ae10:	0800b3b0 	.word	0x0800b3b0

0800ae14 <__swbuf_r>:
 800ae14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae16:	460e      	mov	r6, r1
 800ae18:	4614      	mov	r4, r2
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	b118      	cbz	r0, 800ae26 <__swbuf_r+0x12>
 800ae1e:	6a03      	ldr	r3, [r0, #32]
 800ae20:	b90b      	cbnz	r3, 800ae26 <__swbuf_r+0x12>
 800ae22:	f7fe fff9 	bl	8009e18 <__sinit>
 800ae26:	69a3      	ldr	r3, [r4, #24]
 800ae28:	60a3      	str	r3, [r4, #8]
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	071a      	lsls	r2, r3, #28
 800ae2e:	d525      	bpl.n	800ae7c <__swbuf_r+0x68>
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	b31b      	cbz	r3, 800ae7c <__swbuf_r+0x68>
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	6922      	ldr	r2, [r4, #16]
 800ae38:	1a98      	subs	r0, r3, r2
 800ae3a:	6963      	ldr	r3, [r4, #20]
 800ae3c:	b2f6      	uxtb	r6, r6
 800ae3e:	4283      	cmp	r3, r0
 800ae40:	4637      	mov	r7, r6
 800ae42:	dc04      	bgt.n	800ae4e <__swbuf_r+0x3a>
 800ae44:	4621      	mov	r1, r4
 800ae46:	4628      	mov	r0, r5
 800ae48:	f7ff fdf8 	bl	800aa3c <_fflush_r>
 800ae4c:	b9e0      	cbnz	r0, 800ae88 <__swbuf_r+0x74>
 800ae4e:	68a3      	ldr	r3, [r4, #8]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	60a3      	str	r3, [r4, #8]
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	6022      	str	r2, [r4, #0]
 800ae5a:	701e      	strb	r6, [r3, #0]
 800ae5c:	6962      	ldr	r2, [r4, #20]
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d004      	beq.n	800ae6e <__swbuf_r+0x5a>
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	07db      	lsls	r3, r3, #31
 800ae68:	d506      	bpl.n	800ae78 <__swbuf_r+0x64>
 800ae6a:	2e0a      	cmp	r6, #10
 800ae6c:	d104      	bne.n	800ae78 <__swbuf_r+0x64>
 800ae6e:	4621      	mov	r1, r4
 800ae70:	4628      	mov	r0, r5
 800ae72:	f7ff fde3 	bl	800aa3c <_fflush_r>
 800ae76:	b938      	cbnz	r0, 800ae88 <__swbuf_r+0x74>
 800ae78:	4638      	mov	r0, r7
 800ae7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f000 f806 	bl	800ae90 <__swsetup_r>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d0d5      	beq.n	800ae34 <__swbuf_r+0x20>
 800ae88:	f04f 37ff 	mov.w	r7, #4294967295
 800ae8c:	e7f4      	b.n	800ae78 <__swbuf_r+0x64>
	...

0800ae90 <__swsetup_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4b2a      	ldr	r3, [pc, #168]	; (800af3c <__swsetup_r+0xac>)
 800ae94:	4605      	mov	r5, r0
 800ae96:	6818      	ldr	r0, [r3, #0]
 800ae98:	460c      	mov	r4, r1
 800ae9a:	b118      	cbz	r0, 800aea4 <__swsetup_r+0x14>
 800ae9c:	6a03      	ldr	r3, [r0, #32]
 800ae9e:	b90b      	cbnz	r3, 800aea4 <__swsetup_r+0x14>
 800aea0:	f7fe ffba 	bl	8009e18 <__sinit>
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aeaa:	0718      	lsls	r0, r3, #28
 800aeac:	d422      	bmi.n	800aef4 <__swsetup_r+0x64>
 800aeae:	06d9      	lsls	r1, r3, #27
 800aeb0:	d407      	bmi.n	800aec2 <__swsetup_r+0x32>
 800aeb2:	2309      	movs	r3, #9
 800aeb4:	602b      	str	r3, [r5, #0]
 800aeb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aeba:	81a3      	strh	r3, [r4, #12]
 800aebc:	f04f 30ff 	mov.w	r0, #4294967295
 800aec0:	e034      	b.n	800af2c <__swsetup_r+0x9c>
 800aec2:	0758      	lsls	r0, r3, #29
 800aec4:	d512      	bpl.n	800aeec <__swsetup_r+0x5c>
 800aec6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aec8:	b141      	cbz	r1, 800aedc <__swsetup_r+0x4c>
 800aeca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aece:	4299      	cmp	r1, r3
 800aed0:	d002      	beq.n	800aed8 <__swsetup_r+0x48>
 800aed2:	4628      	mov	r0, r5
 800aed4:	f7ff f944 	bl	800a160 <_free_r>
 800aed8:	2300      	movs	r3, #0
 800aeda:	6363      	str	r3, [r4, #52]	; 0x34
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aee2:	81a3      	strh	r3, [r4, #12]
 800aee4:	2300      	movs	r3, #0
 800aee6:	6063      	str	r3, [r4, #4]
 800aee8:	6923      	ldr	r3, [r4, #16]
 800aeea:	6023      	str	r3, [r4, #0]
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	f043 0308 	orr.w	r3, r3, #8
 800aef2:	81a3      	strh	r3, [r4, #12]
 800aef4:	6923      	ldr	r3, [r4, #16]
 800aef6:	b94b      	cbnz	r3, 800af0c <__swsetup_r+0x7c>
 800aef8:	89a3      	ldrh	r3, [r4, #12]
 800aefa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aefe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af02:	d003      	beq.n	800af0c <__swsetup_r+0x7c>
 800af04:	4621      	mov	r1, r4
 800af06:	4628      	mov	r0, r5
 800af08:	f000 f88c 	bl	800b024 <__smakebuf_r>
 800af0c:	89a0      	ldrh	r0, [r4, #12]
 800af0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af12:	f010 0301 	ands.w	r3, r0, #1
 800af16:	d00a      	beq.n	800af2e <__swsetup_r+0x9e>
 800af18:	2300      	movs	r3, #0
 800af1a:	60a3      	str	r3, [r4, #8]
 800af1c:	6963      	ldr	r3, [r4, #20]
 800af1e:	425b      	negs	r3, r3
 800af20:	61a3      	str	r3, [r4, #24]
 800af22:	6923      	ldr	r3, [r4, #16]
 800af24:	b943      	cbnz	r3, 800af38 <__swsetup_r+0xa8>
 800af26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af2a:	d1c4      	bne.n	800aeb6 <__swsetup_r+0x26>
 800af2c:	bd38      	pop	{r3, r4, r5, pc}
 800af2e:	0781      	lsls	r1, r0, #30
 800af30:	bf58      	it	pl
 800af32:	6963      	ldrpl	r3, [r4, #20]
 800af34:	60a3      	str	r3, [r4, #8]
 800af36:	e7f4      	b.n	800af22 <__swsetup_r+0x92>
 800af38:	2000      	movs	r0, #0
 800af3a:	e7f7      	b.n	800af2c <__swsetup_r+0x9c>
 800af3c:	20000268 	.word	0x20000268

0800af40 <_raise_r>:
 800af40:	291f      	cmp	r1, #31
 800af42:	b538      	push	{r3, r4, r5, lr}
 800af44:	4604      	mov	r4, r0
 800af46:	460d      	mov	r5, r1
 800af48:	d904      	bls.n	800af54 <_raise_r+0x14>
 800af4a:	2316      	movs	r3, #22
 800af4c:	6003      	str	r3, [r0, #0]
 800af4e:	f04f 30ff 	mov.w	r0, #4294967295
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800af56:	b112      	cbz	r2, 800af5e <_raise_r+0x1e>
 800af58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af5c:	b94b      	cbnz	r3, 800af72 <_raise_r+0x32>
 800af5e:	4620      	mov	r0, r4
 800af60:	f000 f830 	bl	800afc4 <_getpid_r>
 800af64:	462a      	mov	r2, r5
 800af66:	4601      	mov	r1, r0
 800af68:	4620      	mov	r0, r4
 800af6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af6e:	f000 b817 	b.w	800afa0 <_kill_r>
 800af72:	2b01      	cmp	r3, #1
 800af74:	d00a      	beq.n	800af8c <_raise_r+0x4c>
 800af76:	1c59      	adds	r1, r3, #1
 800af78:	d103      	bne.n	800af82 <_raise_r+0x42>
 800af7a:	2316      	movs	r3, #22
 800af7c:	6003      	str	r3, [r0, #0]
 800af7e:	2001      	movs	r0, #1
 800af80:	e7e7      	b.n	800af52 <_raise_r+0x12>
 800af82:	2400      	movs	r4, #0
 800af84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af88:	4628      	mov	r0, r5
 800af8a:	4798      	blx	r3
 800af8c:	2000      	movs	r0, #0
 800af8e:	e7e0      	b.n	800af52 <_raise_r+0x12>

0800af90 <raise>:
 800af90:	4b02      	ldr	r3, [pc, #8]	; (800af9c <raise+0xc>)
 800af92:	4601      	mov	r1, r0
 800af94:	6818      	ldr	r0, [r3, #0]
 800af96:	f7ff bfd3 	b.w	800af40 <_raise_r>
 800af9a:	bf00      	nop
 800af9c:	20000268 	.word	0x20000268

0800afa0 <_kill_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4d07      	ldr	r5, [pc, #28]	; (800afc0 <_kill_r+0x20>)
 800afa4:	2300      	movs	r3, #0
 800afa6:	4604      	mov	r4, r0
 800afa8:	4608      	mov	r0, r1
 800afaa:	4611      	mov	r1, r2
 800afac:	602b      	str	r3, [r5, #0]
 800afae:	f7f6 fc1f 	bl	80017f0 <_kill>
 800afb2:	1c43      	adds	r3, r0, #1
 800afb4:	d102      	bne.n	800afbc <_kill_r+0x1c>
 800afb6:	682b      	ldr	r3, [r5, #0]
 800afb8:	b103      	cbz	r3, 800afbc <_kill_r+0x1c>
 800afba:	6023      	str	r3, [r4, #0]
 800afbc:	bd38      	pop	{r3, r4, r5, pc}
 800afbe:	bf00      	nop
 800afc0:	20000840 	.word	0x20000840

0800afc4 <_getpid_r>:
 800afc4:	f7f6 bc0c 	b.w	80017e0 <_getpid>

0800afc8 <_malloc_usable_size_r>:
 800afc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afcc:	1f18      	subs	r0, r3, #4
 800afce:	2b00      	cmp	r3, #0
 800afd0:	bfbc      	itt	lt
 800afd2:	580b      	ldrlt	r3, [r1, r0]
 800afd4:	18c0      	addlt	r0, r0, r3
 800afd6:	4770      	bx	lr

0800afd8 <__swhatbuf_r>:
 800afd8:	b570      	push	{r4, r5, r6, lr}
 800afda:	460c      	mov	r4, r1
 800afdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afe0:	2900      	cmp	r1, #0
 800afe2:	b096      	sub	sp, #88	; 0x58
 800afe4:	4615      	mov	r5, r2
 800afe6:	461e      	mov	r6, r3
 800afe8:	da0d      	bge.n	800b006 <__swhatbuf_r+0x2e>
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aff0:	f04f 0100 	mov.w	r1, #0
 800aff4:	bf0c      	ite	eq
 800aff6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800affa:	2340      	movne	r3, #64	; 0x40
 800affc:	2000      	movs	r0, #0
 800affe:	6031      	str	r1, [r6, #0]
 800b000:	602b      	str	r3, [r5, #0]
 800b002:	b016      	add	sp, #88	; 0x58
 800b004:	bd70      	pop	{r4, r5, r6, pc}
 800b006:	466a      	mov	r2, sp
 800b008:	f000 f848 	bl	800b09c <_fstat_r>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	dbec      	blt.n	800afea <__swhatbuf_r+0x12>
 800b010:	9901      	ldr	r1, [sp, #4]
 800b012:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b016:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b01a:	4259      	negs	r1, r3
 800b01c:	4159      	adcs	r1, r3
 800b01e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b022:	e7eb      	b.n	800affc <__swhatbuf_r+0x24>

0800b024 <__smakebuf_r>:
 800b024:	898b      	ldrh	r3, [r1, #12]
 800b026:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b028:	079d      	lsls	r5, r3, #30
 800b02a:	4606      	mov	r6, r0
 800b02c:	460c      	mov	r4, r1
 800b02e:	d507      	bpl.n	800b040 <__smakebuf_r+0x1c>
 800b030:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	6123      	str	r3, [r4, #16]
 800b038:	2301      	movs	r3, #1
 800b03a:	6163      	str	r3, [r4, #20]
 800b03c:	b002      	add	sp, #8
 800b03e:	bd70      	pop	{r4, r5, r6, pc}
 800b040:	ab01      	add	r3, sp, #4
 800b042:	466a      	mov	r2, sp
 800b044:	f7ff ffc8 	bl	800afd8 <__swhatbuf_r>
 800b048:	9900      	ldr	r1, [sp, #0]
 800b04a:	4605      	mov	r5, r0
 800b04c:	4630      	mov	r0, r6
 800b04e:	f7ff f8fb 	bl	800a248 <_malloc_r>
 800b052:	b948      	cbnz	r0, 800b068 <__smakebuf_r+0x44>
 800b054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b058:	059a      	lsls	r2, r3, #22
 800b05a:	d4ef      	bmi.n	800b03c <__smakebuf_r+0x18>
 800b05c:	f023 0303 	bic.w	r3, r3, #3
 800b060:	f043 0302 	orr.w	r3, r3, #2
 800b064:	81a3      	strh	r3, [r4, #12]
 800b066:	e7e3      	b.n	800b030 <__smakebuf_r+0xc>
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	6020      	str	r0, [r4, #0]
 800b06c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b070:	81a3      	strh	r3, [r4, #12]
 800b072:	9b00      	ldr	r3, [sp, #0]
 800b074:	6163      	str	r3, [r4, #20]
 800b076:	9b01      	ldr	r3, [sp, #4]
 800b078:	6120      	str	r0, [r4, #16]
 800b07a:	b15b      	cbz	r3, 800b094 <__smakebuf_r+0x70>
 800b07c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b080:	4630      	mov	r0, r6
 800b082:	f000 f81d 	bl	800b0c0 <_isatty_r>
 800b086:	b128      	cbz	r0, 800b094 <__smakebuf_r+0x70>
 800b088:	89a3      	ldrh	r3, [r4, #12]
 800b08a:	f023 0303 	bic.w	r3, r3, #3
 800b08e:	f043 0301 	orr.w	r3, r3, #1
 800b092:	81a3      	strh	r3, [r4, #12]
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	431d      	orrs	r5, r3
 800b098:	81a5      	strh	r5, [r4, #12]
 800b09a:	e7cf      	b.n	800b03c <__smakebuf_r+0x18>

0800b09c <_fstat_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	4d07      	ldr	r5, [pc, #28]	; (800b0bc <_fstat_r+0x20>)
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	4608      	mov	r0, r1
 800b0a6:	4611      	mov	r1, r2
 800b0a8:	602b      	str	r3, [r5, #0]
 800b0aa:	f7f6 fc00 	bl	80018ae <_fstat>
 800b0ae:	1c43      	adds	r3, r0, #1
 800b0b0:	d102      	bne.n	800b0b8 <_fstat_r+0x1c>
 800b0b2:	682b      	ldr	r3, [r5, #0]
 800b0b4:	b103      	cbz	r3, 800b0b8 <_fstat_r+0x1c>
 800b0b6:	6023      	str	r3, [r4, #0]
 800b0b8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20000840 	.word	0x20000840

0800b0c0 <_isatty_r>:
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	4d06      	ldr	r5, [pc, #24]	; (800b0dc <_isatty_r+0x1c>)
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	4608      	mov	r0, r1
 800b0ca:	602b      	str	r3, [r5, #0]
 800b0cc:	f7f6 fbff 	bl	80018ce <_isatty>
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	d102      	bne.n	800b0da <_isatty_r+0x1a>
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	b103      	cbz	r3, 800b0da <_isatty_r+0x1a>
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	bd38      	pop	{r3, r4, r5, pc}
 800b0dc:	20000840 	.word	0x20000840

0800b0e0 <_init>:
 800b0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e2:	bf00      	nop
 800b0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0e6:	bc08      	pop	{r3}
 800b0e8:	469e      	mov	lr, r3
 800b0ea:	4770      	bx	lr

0800b0ec <_fini>:
 800b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ee:	bf00      	nop
 800b0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0f2:	bc08      	pop	{r3}
 800b0f4:	469e      	mov	lr, r3
 800b0f6:	4770      	bx	lr
