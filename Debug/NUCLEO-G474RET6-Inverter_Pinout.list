
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bc8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08009da8  08009da8  00019da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a080  0800a080  00020274  2**0
                  CONTENTS
  4 .ARM          00000008  0800a080  0800a080  0001a080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a088  0800a088  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a088  0800a088  0001a088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800a090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000274  0800a304  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  0800a304  00020780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a3e1  00000000  00000000  000202e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036ec  00000000  00000000  0003a6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0003ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000110f  00000000  00000000  0003f3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a3de  00000000  00000000  000404d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b460  00000000  00000000  0006a8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114d16  00000000  00000000  00085d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a54  00000000  00000000  0019aa2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001a1480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000274 	.word	0x20000274
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009d90 	.word	0x08009d90

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000278 	.word	0x20000278
 800021c:	08009d90 	.word	0x08009d90

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_dmul>:
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002fe:	bf1d      	ittte	ne
 8000300:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000304:	ea94 0f0c 	teqne	r4, ip
 8000308:	ea95 0f0c 	teqne	r5, ip
 800030c:	f000 f8de 	bleq	80004cc <__aeabi_dmul+0x1dc>
 8000310:	442c      	add	r4, r5
 8000312:	ea81 0603 	eor.w	r6, r1, r3
 8000316:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800031a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800031e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000322:	bf18      	it	ne
 8000324:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000328:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800032c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000330:	d038      	beq.n	80003a4 <__aeabi_dmul+0xb4>
 8000332:	fba0 ce02 	umull	ip, lr, r0, r2
 8000336:	f04f 0500 	mov.w	r5, #0
 800033a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800033e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000342:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000346:	f04f 0600 	mov.w	r6, #0
 800034a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800034e:	f09c 0f00 	teq	ip, #0
 8000352:	bf18      	it	ne
 8000354:	f04e 0e01 	orrne.w	lr, lr, #1
 8000358:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800035c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000360:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000364:	d204      	bcs.n	8000370 <__aeabi_dmul+0x80>
 8000366:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800036a:	416d      	adcs	r5, r5
 800036c:	eb46 0606 	adc.w	r6, r6, r6
 8000370:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000374:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000378:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800037c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000380:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000384:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000388:	bf88      	it	hi
 800038a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800038e:	d81e      	bhi.n	80003ce <__aeabi_dmul+0xde>
 8000390:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80003a8:	ea46 0101 	orr.w	r1, r6, r1
 80003ac:	ea40 0002 	orr.w	r0, r0, r2
 80003b0:	ea81 0103 	eor.w	r1, r1, r3
 80003b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003b8:	bfc2      	ittt	gt
 80003ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003c2:	bd70      	popgt	{r4, r5, r6, pc}
 80003c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003c8:	f04f 0e00 	mov.w	lr, #0
 80003cc:	3c01      	subs	r4, #1
 80003ce:	f300 80ab 	bgt.w	8000528 <__aeabi_dmul+0x238>
 80003d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003d6:	bfde      	ittt	le
 80003d8:	2000      	movle	r0, #0
 80003da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd70      	pople	{r4, r5, r6, pc}
 80003e0:	f1c4 0400 	rsb	r4, r4, #0
 80003e4:	3c20      	subs	r4, #32
 80003e6:	da35      	bge.n	8000454 <__aeabi_dmul+0x164>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc1b      	bgt.n	8000424 <__aeabi_dmul+0x134>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0520 	rsb	r5, r4, #32
 80003f4:	fa00 f305 	lsl.w	r3, r0, r5
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000400:	ea40 0002 	orr.w	r0, r0, r2
 8000404:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000408:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800040c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000410:	fa21 f604 	lsr.w	r6, r1, r4
 8000414:	eb42 0106 	adc.w	r1, r2, r6
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 040c 	rsb	r4, r4, #12
 8000428:	f1c4 0520 	rsb	r5, r4, #32
 800042c:	fa00 f304 	lsl.w	r3, r0, r4
 8000430:	fa20 f005 	lsr.w	r0, r0, r5
 8000434:	fa01 f204 	lsl.w	r2, r1, r4
 8000438:	ea40 0002 	orr.w	r0, r0, r2
 800043c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000440:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000444:	f141 0100 	adc.w	r1, r1, #0
 8000448:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800044c:	bf08      	it	eq
 800044e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000452:	bd70      	pop	{r4, r5, r6, pc}
 8000454:	f1c4 0520 	rsb	r5, r4, #32
 8000458:	fa00 f205 	lsl.w	r2, r0, r5
 800045c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000460:	fa20 f304 	lsr.w	r3, r0, r4
 8000464:	fa01 f205 	lsl.w	r2, r1, r5
 8000468:	ea43 0302 	orr.w	r3, r3, r2
 800046c:	fa21 f004 	lsr.w	r0, r1, r4
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000474:	fa21 f204 	lsr.w	r2, r1, r4
 8000478:	ea20 0002 	bic.w	r0, r0, r2
 800047c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000480:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000484:	bf08      	it	eq
 8000486:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	f094 0f00 	teq	r4, #0
 8000490:	d10f      	bne.n	80004b2 <__aeabi_dmul+0x1c2>
 8000492:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000496:	0040      	lsls	r0, r0, #1
 8000498:	eb41 0101 	adc.w	r1, r1, r1
 800049c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3c01      	subeq	r4, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1a6>
 80004a6:	ea41 0106 	orr.w	r1, r1, r6
 80004aa:	f095 0f00 	teq	r5, #0
 80004ae:	bf18      	it	ne
 80004b0:	4770      	bxne	lr
 80004b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80004b6:	0052      	lsls	r2, r2, #1
 80004b8:	eb43 0303 	adc.w	r3, r3, r3
 80004bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004c0:	bf08      	it	eq
 80004c2:	3d01      	subeq	r5, #1
 80004c4:	d0f7      	beq.n	80004b6 <__aeabi_dmul+0x1c6>
 80004c6:	ea43 0306 	orr.w	r3, r3, r6
 80004ca:	4770      	bx	lr
 80004cc:	ea94 0f0c 	teq	r4, ip
 80004d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004d4:	bf18      	it	ne
 80004d6:	ea95 0f0c 	teqne	r5, ip
 80004da:	d00c      	beq.n	80004f6 <__aeabi_dmul+0x206>
 80004dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004e0:	bf18      	it	ne
 80004e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e6:	d1d1      	bne.n	800048c <__aeabi_dmul+0x19c>
 80004e8:	ea81 0103 	eor.w	r1, r1, r3
 80004ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	bd70      	pop	{r4, r5, r6, pc}
 80004f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004fa:	bf06      	itte	eq
 80004fc:	4610      	moveq	r0, r2
 80004fe:	4619      	moveq	r1, r3
 8000500:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000504:	d019      	beq.n	800053a <__aeabi_dmul+0x24a>
 8000506:	ea94 0f0c 	teq	r4, ip
 800050a:	d102      	bne.n	8000512 <__aeabi_dmul+0x222>
 800050c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000510:	d113      	bne.n	800053a <__aeabi_dmul+0x24a>
 8000512:	ea95 0f0c 	teq	r5, ip
 8000516:	d105      	bne.n	8000524 <__aeabi_dmul+0x234>
 8000518:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800051c:	bf1c      	itt	ne
 800051e:	4610      	movne	r0, r2
 8000520:	4619      	movne	r1, r3
 8000522:	d10a      	bne.n	800053a <__aeabi_dmul+0x24a>
 8000524:	ea81 0103 	eor.w	r1, r1, r3
 8000528:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800052c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd70      	pop	{r4, r5, r6, pc}
 800053a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800053e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000542:	bd70      	pop	{r4, r5, r6, pc}

08000544 <__aeabi_drsub>:
 8000544:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e002      	b.n	8000550 <__adddf3>
 800054a:	bf00      	nop

0800054c <__aeabi_dsub>:
 800054c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000550 <__adddf3>:
 8000550:	b530      	push	{r4, r5, lr}
 8000552:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000556:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800055a:	ea94 0f05 	teq	r4, r5
 800055e:	bf08      	it	eq
 8000560:	ea90 0f02 	teqeq	r0, r2
 8000564:	bf1f      	itttt	ne
 8000566:	ea54 0c00 	orrsne.w	ip, r4, r0
 800056a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800056e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000572:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000576:	f000 80e2 	beq.w	800073e <__adddf3+0x1ee>
 800057a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800057e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000582:	bfb8      	it	lt
 8000584:	426d      	neglt	r5, r5
 8000586:	dd0c      	ble.n	80005a2 <__adddf3+0x52>
 8000588:	442c      	add	r4, r5
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	ea82 0000 	eor.w	r0, r2, r0
 8000596:	ea83 0101 	eor.w	r1, r3, r1
 800059a:	ea80 0202 	eor.w	r2, r0, r2
 800059e:	ea81 0303 	eor.w	r3, r1, r3
 80005a2:	2d36      	cmp	r5, #54	; 0x36
 80005a4:	bf88      	it	hi
 80005a6:	bd30      	pophi	{r4, r5, pc}
 80005a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005b8:	d002      	beq.n	80005c0 <__adddf3+0x70>
 80005ba:	4240      	negs	r0, r0
 80005bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005cc:	d002      	beq.n	80005d4 <__adddf3+0x84>
 80005ce:	4252      	negs	r2, r2
 80005d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005d4:	ea94 0f05 	teq	r4, r5
 80005d8:	f000 80a7 	beq.w	800072a <__adddf3+0x1da>
 80005dc:	f1a4 0401 	sub.w	r4, r4, #1
 80005e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005e4:	db0d      	blt.n	8000602 <__adddf3+0xb2>
 80005e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ea:	fa22 f205 	lsr.w	r2, r2, r5
 80005ee:	1880      	adds	r0, r0, r2
 80005f0:	f141 0100 	adc.w	r1, r1, #0
 80005f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005f8:	1880      	adds	r0, r0, r2
 80005fa:	fa43 f305 	asr.w	r3, r3, r5
 80005fe:	4159      	adcs	r1, r3
 8000600:	e00e      	b.n	8000620 <__adddf3+0xd0>
 8000602:	f1a5 0520 	sub.w	r5, r5, #32
 8000606:	f10e 0e20 	add.w	lr, lr, #32
 800060a:	2a01      	cmp	r2, #1
 800060c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000610:	bf28      	it	cs
 8000612:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000616:	fa43 f305 	asr.w	r3, r3, r5
 800061a:	18c0      	adds	r0, r0, r3
 800061c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000624:	d507      	bpl.n	8000636 <__adddf3+0xe6>
 8000626:	f04f 0e00 	mov.w	lr, #0
 800062a:	f1dc 0c00 	rsbs	ip, ip, #0
 800062e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000632:	eb6e 0101 	sbc.w	r1, lr, r1
 8000636:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800063a:	d31b      	bcc.n	8000674 <__adddf3+0x124>
 800063c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000640:	d30c      	bcc.n	800065c <__adddf3+0x10c>
 8000642:	0849      	lsrs	r1, r1, #1
 8000644:	ea5f 0030 	movs.w	r0, r0, rrx
 8000648:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800064c:	f104 0401 	add.w	r4, r4, #1
 8000650:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000654:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000658:	f080 809a 	bcs.w	8000790 <__adddf3+0x240>
 800065c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	ea41 0105 	orr.w	r1, r1, r5
 8000672:	bd30      	pop	{r4, r5, pc}
 8000674:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000678:	4140      	adcs	r0, r0
 800067a:	eb41 0101 	adc.w	r1, r1, r1
 800067e:	3c01      	subs	r4, #1
 8000680:	bf28      	it	cs
 8000682:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000686:	d2e9      	bcs.n	800065c <__adddf3+0x10c>
 8000688:	f091 0f00 	teq	r1, #0
 800068c:	bf04      	itt	eq
 800068e:	4601      	moveq	r1, r0
 8000690:	2000      	moveq	r0, #0
 8000692:	fab1 f381 	clz	r3, r1
 8000696:	bf08      	it	eq
 8000698:	3320      	addeq	r3, #32
 800069a:	f1a3 030b 	sub.w	r3, r3, #11
 800069e:	f1b3 0220 	subs.w	r2, r3, #32
 80006a2:	da0c      	bge.n	80006be <__adddf3+0x16e>
 80006a4:	320c      	adds	r2, #12
 80006a6:	dd08      	ble.n	80006ba <__adddf3+0x16a>
 80006a8:	f102 0c14 	add.w	ip, r2, #20
 80006ac:	f1c2 020c 	rsb	r2, r2, #12
 80006b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006b4:	fa21 f102 	lsr.w	r1, r1, r2
 80006b8:	e00c      	b.n	80006d4 <__adddf3+0x184>
 80006ba:	f102 0214 	add.w	r2, r2, #20
 80006be:	bfd8      	it	le
 80006c0:	f1c2 0c20 	rsble	ip, r2, #32
 80006c4:	fa01 f102 	lsl.w	r1, r1, r2
 80006c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006cc:	bfdc      	itt	le
 80006ce:	ea41 010c 	orrle.w	r1, r1, ip
 80006d2:	4090      	lslle	r0, r2
 80006d4:	1ae4      	subs	r4, r4, r3
 80006d6:	bfa2      	ittt	ge
 80006d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006dc:	4329      	orrge	r1, r5
 80006de:	bd30      	popge	{r4, r5, pc}
 80006e0:	ea6f 0404 	mvn.w	r4, r4
 80006e4:	3c1f      	subs	r4, #31
 80006e6:	da1c      	bge.n	8000722 <__adddf3+0x1d2>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc0e      	bgt.n	800070a <__adddf3+0x1ba>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0220 	rsb	r2, r4, #32
 80006f4:	fa20 f004 	lsr.w	r0, r0, r4
 80006f8:	fa01 f302 	lsl.w	r3, r1, r2
 80006fc:	ea40 0003 	orr.w	r0, r0, r3
 8000700:	fa21 f304 	lsr.w	r3, r1, r4
 8000704:	ea45 0103 	orr.w	r1, r5, r3
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f1c4 040c 	rsb	r4, r4, #12
 800070e:	f1c4 0220 	rsb	r2, r4, #32
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 f304 	lsl.w	r3, r1, r4
 800071a:	ea40 0003 	orr.w	r0, r0, r3
 800071e:	4629      	mov	r1, r5
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	fa21 f004 	lsr.w	r0, r1, r4
 8000726:	4629      	mov	r1, r5
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	f094 0f00 	teq	r4, #0
 800072e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000732:	bf06      	itte	eq
 8000734:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000738:	3401      	addeq	r4, #1
 800073a:	3d01      	subne	r5, #1
 800073c:	e74e      	b.n	80005dc <__adddf3+0x8c>
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf18      	it	ne
 8000744:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000748:	d029      	beq.n	800079e <__adddf3+0x24e>
 800074a:	ea94 0f05 	teq	r4, r5
 800074e:	bf08      	it	eq
 8000750:	ea90 0f02 	teqeq	r0, r2
 8000754:	d005      	beq.n	8000762 <__adddf3+0x212>
 8000756:	ea54 0c00 	orrs.w	ip, r4, r0
 800075a:	bf04      	itt	eq
 800075c:	4619      	moveq	r1, r3
 800075e:	4610      	moveq	r0, r2
 8000760:	bd30      	pop	{r4, r5, pc}
 8000762:	ea91 0f03 	teq	r1, r3
 8000766:	bf1e      	ittt	ne
 8000768:	2100      	movne	r1, #0
 800076a:	2000      	movne	r0, #0
 800076c:	bd30      	popne	{r4, r5, pc}
 800076e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000772:	d105      	bne.n	8000780 <__adddf3+0x230>
 8000774:	0040      	lsls	r0, r0, #1
 8000776:	4149      	adcs	r1, r1
 8000778:	bf28      	it	cs
 800077a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800077e:	bd30      	pop	{r4, r5, pc}
 8000780:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000784:	bf3c      	itt	cc
 8000786:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800078a:	bd30      	popcc	{r4, r5, pc}
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000790:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007a2:	bf1a      	itte	ne
 80007a4:	4619      	movne	r1, r3
 80007a6:	4610      	movne	r0, r2
 80007a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007ac:	bf1c      	itt	ne
 80007ae:	460b      	movne	r3, r1
 80007b0:	4602      	movne	r2, r0
 80007b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007b6:	bf06      	itte	eq
 80007b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007bc:	ea91 0f03 	teqeq	r1, r3
 80007c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007c4:	bd30      	pop	{r4, r5, pc}
 80007c6:	bf00      	nop

080007c8 <__aeabi_ui2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007dc:	f04f 0500 	mov.w	r5, #0
 80007e0:	f04f 0100 	mov.w	r1, #0
 80007e4:	e750      	b.n	8000688 <__adddf3+0x138>
 80007e6:	bf00      	nop

080007e8 <__aeabi_i2d>:
 80007e8:	f090 0f00 	teq	r0, #0
 80007ec:	bf04      	itt	eq
 80007ee:	2100      	moveq	r1, #0
 80007f0:	4770      	bxeq	lr
 80007f2:	b530      	push	{r4, r5, lr}
 80007f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000800:	bf48      	it	mi
 8000802:	4240      	negmi	r0, r0
 8000804:	f04f 0100 	mov.w	r1, #0
 8000808:	e73e      	b.n	8000688 <__adddf3+0x138>
 800080a:	bf00      	nop

0800080c <__aeabi_f2d>:
 800080c:	0042      	lsls	r2, r0, #1
 800080e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000812:	ea4f 0131 	mov.w	r1, r1, rrx
 8000816:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800081a:	bf1f      	itttt	ne
 800081c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000820:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000824:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000828:	4770      	bxne	lr
 800082a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800082e:	bf08      	it	eq
 8000830:	4770      	bxeq	lr
 8000832:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000836:	bf04      	itt	eq
 8000838:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800083c:	4770      	bxeq	lr
 800083e:	b530      	push	{r4, r5, lr}
 8000840:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000844:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000848:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800084c:	e71c      	b.n	8000688 <__adddf3+0x138>
 800084e:	bf00      	nop

08000850 <__aeabi_ul2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f04f 0500 	mov.w	r5, #0
 800085e:	e00a      	b.n	8000876 <__aeabi_l2d+0x16>

08000860 <__aeabi_l2d>:
 8000860:	ea50 0201 	orrs.w	r2, r0, r1
 8000864:	bf08      	it	eq
 8000866:	4770      	bxeq	lr
 8000868:	b530      	push	{r4, r5, lr}
 800086a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800086e:	d502      	bpl.n	8000876 <__aeabi_l2d+0x16>
 8000870:	4240      	negs	r0, r0
 8000872:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000876:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800087a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800087e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000882:	f43f aed8 	beq.w	8000636 <__adddf3+0xe6>
 8000886:	f04f 0203 	mov.w	r2, #3
 800088a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800088e:	bf18      	it	ne
 8000890:	3203      	addne	r2, #3
 8000892:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000896:	bf18      	it	ne
 8000898:	3203      	addne	r2, #3
 800089a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800089e:	f1c2 0320 	rsb	r3, r2, #32
 80008a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80008a6:	fa20 f002 	lsr.w	r0, r0, r2
 80008aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80008ae:	ea40 000e 	orr.w	r0, r0, lr
 80008b2:	fa21 f102 	lsr.w	r1, r1, r2
 80008b6:	4414      	add	r4, r2
 80008b8:	e6bd      	b.n	8000636 <__adddf3+0xe6>
 80008ba:	bf00      	nop

080008bc <__aeabi_d2iz>:
 80008bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008c4:	d215      	bcs.n	80008f2 <__aeabi_d2iz+0x36>
 80008c6:	d511      	bpl.n	80008ec <__aeabi_d2iz+0x30>
 80008c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008d0:	d912      	bls.n	80008f8 <__aeabi_d2iz+0x3c>
 80008d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008e2:	fa23 f002 	lsr.w	r0, r3, r2
 80008e6:	bf18      	it	ne
 80008e8:	4240      	negne	r0, r0
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008f6:	d105      	bne.n	8000904 <__aeabi_d2iz+0x48>
 80008f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008fc:	bf08      	it	eq
 80008fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000902:	4770      	bx	lr
 8000904:	f04f 0000 	mov.w	r0, #0
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295
 800091c:	f04f 30ff 	movne.w	r0, #4294967295
 8000920:	f000 b970 	b.w	8000c04 <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9e08      	ldr	r6, [sp, #32]
 8000942:	460d      	mov	r5, r1
 8000944:	4604      	mov	r4, r0
 8000946:	460f      	mov	r7, r1
 8000948:	2b00      	cmp	r3, #0
 800094a:	d14a      	bne.n	80009e2 <__udivmoddi4+0xa6>
 800094c:	428a      	cmp	r2, r1
 800094e:	4694      	mov	ip, r2
 8000950:	d965      	bls.n	8000a1e <__udivmoddi4+0xe2>
 8000952:	fab2 f382 	clz	r3, r2
 8000956:	b143      	cbz	r3, 800096a <__udivmoddi4+0x2e>
 8000958:	fa02 fc03 	lsl.w	ip, r2, r3
 800095c:	f1c3 0220 	rsb	r2, r3, #32
 8000960:	409f      	lsls	r7, r3
 8000962:	fa20 f202 	lsr.w	r2, r0, r2
 8000966:	4317      	orrs	r7, r2
 8000968:	409c      	lsls	r4, r3
 800096a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800096e:	fa1f f58c 	uxth.w	r5, ip
 8000972:	fbb7 f1fe 	udiv	r1, r7, lr
 8000976:	0c22      	lsrs	r2, r4, #16
 8000978:	fb0e 7711 	mls	r7, lr, r1, r7
 800097c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000980:	fb01 f005 	mul.w	r0, r1, r5
 8000984:	4290      	cmp	r0, r2
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x62>
 8000988:	eb1c 0202 	adds.w	r2, ip, r2
 800098c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000990:	f080 811c 	bcs.w	8000bcc <__udivmoddi4+0x290>
 8000994:	4290      	cmp	r0, r2
 8000996:	f240 8119 	bls.w	8000bcc <__udivmoddi4+0x290>
 800099a:	3902      	subs	r1, #2
 800099c:	4462      	add	r2, ip
 800099e:	1a12      	subs	r2, r2, r0
 80009a0:	b2a4      	uxth	r4, r4
 80009a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009ae:	fb00 f505 	mul.w	r5, r0, r5
 80009b2:	42a5      	cmp	r5, r4
 80009b4:	d90a      	bls.n	80009cc <__udivmoddi4+0x90>
 80009b6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80009be:	f080 8107 	bcs.w	8000bd0 <__udivmoddi4+0x294>
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	f240 8104 	bls.w	8000bd0 <__udivmoddi4+0x294>
 80009c8:	4464      	add	r4, ip
 80009ca:	3802      	subs	r0, #2
 80009cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009d0:	1b64      	subs	r4, r4, r5
 80009d2:	2100      	movs	r1, #0
 80009d4:	b11e      	cbz	r6, 80009de <__udivmoddi4+0xa2>
 80009d6:	40dc      	lsrs	r4, r3
 80009d8:	2300      	movs	r3, #0
 80009da:	e9c6 4300 	strd	r4, r3, [r6]
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0xbc>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	f000 80ed 	beq.w	8000bc6 <__udivmoddi4+0x28a>
 80009ec:	2100      	movs	r1, #0
 80009ee:	e9c6 0500 	strd	r0, r5, [r6]
 80009f2:	4608      	mov	r0, r1
 80009f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f8:	fab3 f183 	clz	r1, r3
 80009fc:	2900      	cmp	r1, #0
 80009fe:	d149      	bne.n	8000a94 <__udivmoddi4+0x158>
 8000a00:	42ab      	cmp	r3, r5
 8000a02:	d302      	bcc.n	8000a0a <__udivmoddi4+0xce>
 8000a04:	4282      	cmp	r2, r0
 8000a06:	f200 80f8 	bhi.w	8000bfa <__udivmoddi4+0x2be>
 8000a0a:	1a84      	subs	r4, r0, r2
 8000a0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a10:	2001      	movs	r0, #1
 8000a12:	4617      	mov	r7, r2
 8000a14:	2e00      	cmp	r6, #0
 8000a16:	d0e2      	beq.n	80009de <__udivmoddi4+0xa2>
 8000a18:	e9c6 4700 	strd	r4, r7, [r6]
 8000a1c:	e7df      	b.n	80009de <__udivmoddi4+0xa2>
 8000a1e:	b902      	cbnz	r2, 8000a22 <__udivmoddi4+0xe6>
 8000a20:	deff      	udf	#255	; 0xff
 8000a22:	fab2 f382 	clz	r3, r2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f040 8090 	bne.w	8000b4c <__udivmoddi4+0x210>
 8000a2c:	1a8a      	subs	r2, r1, r2
 8000a2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a32:	fa1f fe8c 	uxth.w	lr, ip
 8000a36:	2101      	movs	r1, #1
 8000a38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a40:	0c22      	lsrs	r2, r4, #16
 8000a42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a46:	fb0e f005 	mul.w	r0, lr, r5
 8000a4a:	4290      	cmp	r0, r2
 8000a4c:	d908      	bls.n	8000a60 <__udivmoddi4+0x124>
 8000a4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a56:	d202      	bcs.n	8000a5e <__udivmoddi4+0x122>
 8000a58:	4290      	cmp	r0, r2
 8000a5a:	f200 80cb 	bhi.w	8000bf4 <__udivmoddi4+0x2b8>
 8000a5e:	4645      	mov	r5, r8
 8000a60:	1a12      	subs	r2, r2, r0
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a68:	fb07 2210 	mls	r2, r7, r0, r2
 8000a6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a70:	fb0e fe00 	mul.w	lr, lr, r0
 8000a74:	45a6      	cmp	lr, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x14e>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a80:	d202      	bcs.n	8000a88 <__udivmoddi4+0x14c>
 8000a82:	45a6      	cmp	lr, r4
 8000a84:	f200 80bb 	bhi.w	8000bfe <__udivmoddi4+0x2c2>
 8000a88:	4610      	mov	r0, r2
 8000a8a:	eba4 040e 	sub.w	r4, r4, lr
 8000a8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a92:	e79f      	b.n	80009d4 <__udivmoddi4+0x98>
 8000a94:	f1c1 0720 	rsb	r7, r1, #32
 8000a98:	408b      	lsls	r3, r1
 8000a9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aa2:	fa05 f401 	lsl.w	r4, r5, r1
 8000aa6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aaa:	40fd      	lsrs	r5, r7
 8000aac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ab6:	fa1f fe8c 	uxth.w	lr, ip
 8000aba:	fb09 5518 	mls	r5, r9, r8, r5
 8000abe:	0c1c      	lsrs	r4, r3, #16
 8000ac0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ac4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ac8:	42a5      	cmp	r5, r4
 8000aca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ace:	fa00 f001 	lsl.w	r0, r0, r1
 8000ad2:	d90b      	bls.n	8000aec <__udivmoddi4+0x1b0>
 8000ad4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000adc:	f080 8088 	bcs.w	8000bf0 <__udivmoddi4+0x2b4>
 8000ae0:	42a5      	cmp	r5, r4
 8000ae2:	f240 8085 	bls.w	8000bf0 <__udivmoddi4+0x2b4>
 8000ae6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aea:	4464      	add	r4, ip
 8000aec:	1b64      	subs	r4, r4, r5
 8000aee:	b29d      	uxth	r5, r3
 8000af0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000af4:	fb09 4413 	mls	r4, r9, r3, r4
 8000af8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000afc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d908      	bls.n	8000b16 <__udivmoddi4+0x1da>
 8000b04:	eb1c 0404 	adds.w	r4, ip, r4
 8000b08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b0c:	d26c      	bcs.n	8000be8 <__udivmoddi4+0x2ac>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	d96a      	bls.n	8000be8 <__udivmoddi4+0x2ac>
 8000b12:	3b02      	subs	r3, #2
 8000b14:	4464      	add	r4, ip
 8000b16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b1e:	eba4 040e 	sub.w	r4, r4, lr
 8000b22:	42ac      	cmp	r4, r5
 8000b24:	46c8      	mov	r8, r9
 8000b26:	46ae      	mov	lr, r5
 8000b28:	d356      	bcc.n	8000bd8 <__udivmoddi4+0x29c>
 8000b2a:	d053      	beq.n	8000bd4 <__udivmoddi4+0x298>
 8000b2c:	b156      	cbz	r6, 8000b44 <__udivmoddi4+0x208>
 8000b2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b32:	eb64 040e 	sbc.w	r4, r4, lr
 8000b36:	fa04 f707 	lsl.w	r7, r4, r7
 8000b3a:	40ca      	lsrs	r2, r1
 8000b3c:	40cc      	lsrs	r4, r1
 8000b3e:	4317      	orrs	r7, r2
 8000b40:	e9c6 7400 	strd	r7, r4, [r6]
 8000b44:	4618      	mov	r0, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4c:	f1c3 0120 	rsb	r1, r3, #32
 8000b50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b54:	fa20 f201 	lsr.w	r2, r0, r1
 8000b58:	fa25 f101 	lsr.w	r1, r5, r1
 8000b5c:	409d      	lsls	r5, r3
 8000b5e:	432a      	orrs	r2, r5
 8000b60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b64:	fa1f fe8c 	uxth.w	lr, ip
 8000b68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b70:	0c11      	lsrs	r1, r2, #16
 8000b72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b76:	fb00 f50e 	mul.w	r5, r0, lr
 8000b7a:	428d      	cmp	r5, r1
 8000b7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x258>
 8000b82:	eb1c 0101 	adds.w	r1, ip, r1
 8000b86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b8a:	d22f      	bcs.n	8000bec <__udivmoddi4+0x2b0>
 8000b8c:	428d      	cmp	r5, r1
 8000b8e:	d92d      	bls.n	8000bec <__udivmoddi4+0x2b0>
 8000b90:	3802      	subs	r0, #2
 8000b92:	4461      	add	r1, ip
 8000b94:	1b49      	subs	r1, r1, r5
 8000b96:	b292      	uxth	r2, r2
 8000b98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ba0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ba4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ba8:	4291      	cmp	r1, r2
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x282>
 8000bac:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb4:	d216      	bcs.n	8000be4 <__udivmoddi4+0x2a8>
 8000bb6:	4291      	cmp	r1, r2
 8000bb8:	d914      	bls.n	8000be4 <__udivmoddi4+0x2a8>
 8000bba:	3d02      	subs	r5, #2
 8000bbc:	4462      	add	r2, ip
 8000bbe:	1a52      	subs	r2, r2, r1
 8000bc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bc4:	e738      	b.n	8000a38 <__udivmoddi4+0xfc>
 8000bc6:	4631      	mov	r1, r6
 8000bc8:	4630      	mov	r0, r6
 8000bca:	e708      	b.n	80009de <__udivmoddi4+0xa2>
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e6e6      	b.n	800099e <__udivmoddi4+0x62>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	e6fb      	b.n	80009cc <__udivmoddi4+0x90>
 8000bd4:	4548      	cmp	r0, r9
 8000bd6:	d2a9      	bcs.n	8000b2c <__udivmoddi4+0x1f0>
 8000bd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000be0:	3b01      	subs	r3, #1
 8000be2:	e7a3      	b.n	8000b2c <__udivmoddi4+0x1f0>
 8000be4:	4645      	mov	r5, r8
 8000be6:	e7ea      	b.n	8000bbe <__udivmoddi4+0x282>
 8000be8:	462b      	mov	r3, r5
 8000bea:	e794      	b.n	8000b16 <__udivmoddi4+0x1da>
 8000bec:	4640      	mov	r0, r8
 8000bee:	e7d1      	b.n	8000b94 <__udivmoddi4+0x258>
 8000bf0:	46d0      	mov	r8, sl
 8000bf2:	e77b      	b.n	8000aec <__udivmoddi4+0x1b0>
 8000bf4:	3d02      	subs	r5, #2
 8000bf6:	4462      	add	r2, ip
 8000bf8:	e732      	b.n	8000a60 <__udivmoddi4+0x124>
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	e70a      	b.n	8000a14 <__udivmoddi4+0xd8>
 8000bfe:	4464      	add	r4, ip
 8000c00:	3802      	subs	r0, #2
 8000c02:	e742      	b.n	8000a8a <__udivmoddi4+0x14e>

08000c04 <__aeabi_idiv0>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f007 fffe 	bl	8008c22 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c26:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c2e:	4b30      	ldr	r3, [pc, #192]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c36:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3c:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000c42:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c50:	2204      	movs	r2, #4
 8000c52:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c54:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c74:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c90:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c92:	f001 fc4f 	bl	8002534 <HAL_ADC_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000c9c:	f000 fb42 	bl	8001324 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000cac:	f002 fa6a 	bl	8003184 <HAL_ADCEx_MultiModeConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cb6:	f000 fb35 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cbe:	2306      	movs	r3, #6
 8000cc0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cc6:	237f      	movs	r3, #127	; 0x7f
 8000cc8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000cd8:	f001 fdee 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ce2:	f000 fb1f 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3730      	adds	r7, #48	; 0x30
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000290 	.word	0x20000290
 8000cf4:	21800100 	.word	0x21800100

08000cf8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f007 ff8c 	bl	8008c22 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d0a:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <MX_ADC2_Init+0xc4>)
 8000d0e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d16:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d18:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d36:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000d42:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d72:	4811      	ldr	r0, [pc, #68]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d74:	f001 fbde 	bl	8002534 <HAL_ADC_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000d7e:	f000 fad1 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_ADC2_Init+0xc8>)
 8000d84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d86:	2306      	movs	r3, #6
 8000d88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d8e:	237f      	movs	r3, #127	; 0x7f
 8000d90:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d92:	2304      	movs	r3, #4
 8000d94:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000da0:	f001 fd8a 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000daa:	f000 fabb 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200002fc 	.word	0x200002fc
 8000dbc:	50000100 	.word	0x50000100
 8000dc0:	19200040 	.word	0x19200040

08000dc4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0a4      	sub	sp, #144	; 0x90
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de0:	2254      	movs	r2, #84	; 0x54
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f007 ff1c 	bl	8008c22 <memset>
  if(adcHandle->Instance==ADC1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df2:	d174      	bne.n	8000ede <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000df4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dfa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 fc3d 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e10:	f000 fa88 	bl	8001324 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e14:	4b63      	ldr	r3, [pc, #396]	; (8000fa4 <HAL_ADC_MspInit+0x1e0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a62      	ldr	r2, [pc, #392]	; (8000fa4 <HAL_ADC_MspInit+0x1e0>)
 8000e1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e1e:	4b61      	ldr	r3, [pc, #388]	; (8000fa4 <HAL_ADC_MspInit+0x1e0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10b      	bne.n	8000e3e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e26:	4b60      	ldr	r3, [pc, #384]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a5f      	ldr	r2, [pc, #380]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b5d      	ldr	r3, [pc, #372]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b5a      	ldr	r3, [pc, #360]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a59      	ldr	r2, [pc, #356]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	623b      	str	r3, [r7, #32]
 8000e54:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b54      	ldr	r3, [pc, #336]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a53      	ldr	r2, [pc, #332]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b51      	ldr	r3, [pc, #324]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b4e      	ldr	r3, [pc, #312]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a4d      	ldr	r2, [pc, #308]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000e86:	2304      	movs	r3, #4
 8000e88:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4843      	ldr	r0, [pc, #268]	; (8000fac <HAL_ADC_MspInit+0x1e8>)
 8000e9e:	f002 fc19 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f002 fc0a 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4836      	ldr	r0, [pc, #216]	; (8000fb0 <HAL_ADC_MspInit+0x1ec>)
 8000ed8:	f002 fbfc 	bl	80036d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000edc:	e05e      	b.n	8000f9c <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a34      	ldr	r2, [pc, #208]	; (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d159      	bne.n	8000f9c <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000eee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 fbc3 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000f04:	f000 fa0e 	bl	8001324 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <HAL_ADC_MspInit+0x1e0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	4a25      	ldr	r2, [pc, #148]	; (8000fa4 <HAL_ADC_MspInit+0x1e0>)
 8000f10:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <HAL_ADC_MspInit+0x1e0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d10b      	bne.n	8000f32 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a16      	ldr	r2, [pc, #88]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000f62:	230b      	movs	r3, #11
 8000f64:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f66:	2303      	movs	r3, #3
 8000f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f76:	4619      	mov	r1, r3
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <HAL_ADC_MspInit+0x1e8>)
 8000f7a:	f002 fbab 	bl	80036d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f82:	2303      	movs	r3, #3
 8000f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f92:	4619      	mov	r1, r3
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f002 fb9c 	bl	80036d4 <HAL_GPIO_Init>
}
 8000f9c:	bf00      	nop
 8000f9e:	3790      	adds	r7, #144	; 0x90
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000368 	.word	0x20000368
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48000800 	.word	0x48000800
 8000fb0:	48000400 	.word	0x48000400
 8000fb4:	50000100 	.word	0x50000100

08000fb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	4b3f      	ldr	r3, [pc, #252]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a3e      	ldr	r2, [pc, #248]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe6:	4b39      	ldr	r3, [pc, #228]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a38      	ldr	r2, [pc, #224]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fec:	f043 0320 	orr.w	r3, r3, #32
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b36      	ldr	r3, [pc, #216]	; (80010cc <MX_GPIO_Init+0x114>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0320 	and.w	r3, r3, #32
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b33      	ldr	r3, [pc, #204]	; (80010cc <MX_GPIO_Init+0x114>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a32      	ldr	r2, [pc, #200]	; (80010cc <MX_GPIO_Init+0x114>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b30      	ldr	r3, [pc, #192]	; (80010cc <MX_GPIO_Init+0x114>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <MX_GPIO_Init+0x114>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a2c      	ldr	r2, [pc, #176]	; (80010cc <MX_GPIO_Init+0x114>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <MX_GPIO_Init+0x114>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	4b27      	ldr	r3, [pc, #156]	; (80010cc <MX_GPIO_Init+0x114>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <MX_GPIO_Init+0x114>)
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <MX_GPIO_Init+0x114>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2120      	movs	r1, #32
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f002 fcc3 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2104      	movs	r1, #4
 8001056:	481e      	ldr	r0, [pc, #120]	; (80010d0 <MX_GPIO_Init+0x118>)
 8001058:	f002 fcbe 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 800105c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001062:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4818      	ldr	r0, [pc, #96]	; (80010d4 <MX_GPIO_Init+0x11c>)
 8001074:	f002 fb2e 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001078:	2320      	movs	r3, #32
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f002 fb1f 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001096:	2304      	movs	r3, #4
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <MX_GPIO_Init+0x118>)
 80010ae:	f002 fb11 	bl	80036d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2028      	movs	r0, #40	; 0x28
 80010b8:	f002 fa24 	bl	8003504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010bc:	2028      	movs	r0, #40	; 0x28
 80010be:	f002 fa3b 	bl	8003538 <HAL_NVIC_EnableIRQ>

}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000c00 	.word	0x48000c00
 80010d4:	48000800 	.word	0x48000800

080010d8 <start_PWM>:



int PWM_state = 0;
int start_PWM()
{//Start and init the PWM to speed = 0;
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

	int speed_stopped = __HAL_TIM_GET_AUTORELOAD(&htim1)/2;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <start_PWM+0x64>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	085b      	lsrs	r3, r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
	TIM1->CCR1 = speed_stopped;
 80010e8:	4a15      	ldr	r2, [pc, #84]	; (8001140 <start_PWM+0x68>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = speed_stopped;
 80010ee:	4a14      	ldr	r2, [pc, #80]	; (8001140 <start_PWM+0x68>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6393      	str	r3, [r2, #56]	; 0x38

	if(HAL_OK == HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1))
 80010f4:	2100      	movs	r1, #0
 80010f6:	4811      	ldr	r0, [pc, #68]	; (800113c <start_PWM+0x64>)
 80010f8:	f003 fe44 	bl	8004d84 <HAL_TIM_PWM_Start>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d116      	bne.n	8001130 <start_PWM+0x58>
	{
		if(HAL_OK == HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2))
 8001102:	2104      	movs	r1, #4
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <start_PWM+0x64>)
 8001106:	f003 fe3d 	bl	8004d84 <HAL_TIM_PWM_Start>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10f      	bne.n	8001130 <start_PWM+0x58>
		{
			if(HAL_OK == HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1))
 8001110:	2100      	movs	r1, #0
 8001112:	480a      	ldr	r0, [pc, #40]	; (800113c <start_PWM+0x64>)
 8001114:	f005 f8d0 	bl	80062b8 <HAL_TIMEx_PWMN_Start>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d108      	bne.n	8001130 <start_PWM+0x58>
			{
				if(HAL_OK == HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2))
 800111e:	2104      	movs	r1, #4
 8001120:	4806      	ldr	r0, [pc, #24]	; (800113c <start_PWM+0x64>)
 8001122:	f005 f8c9 	bl	80062b8 <HAL_TIMEx_PWMN_Start>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <start_PWM+0x58>
				{
					return SUCCESS;
 800112c:	2300      	movs	r3, #0
 800112e:	e000      	b.n	8001132 <start_PWM+0x5a>
				}
			}
		}
	}
	return ERROR;
 8001130:	2301      	movs	r3, #1
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200003bc 	.word	0x200003bc
 8001140:	40012c00 	.word	0x40012c00

08001144 <set_PWM>:
	}
	return ERROR;
}

int set_PWM(int speed)
{
 8001144:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001148:	b088      	sub	sp, #32
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	if((speed>100) || (speed<-100))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b64      	cmp	r3, #100	; 0x64
 8001152:	dc03      	bgt.n	800115c <set_PWM+0x18>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800115a:	da01      	bge.n	8001160 <set_PWM+0x1c>
	{
		return ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e061      	b.n	8001224 <set_PWM+0xe0>
	}else{
		const int ccr_size = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8001160:	4b33      	ldr	r3, [pc, #204]	; (8001230 <set_PWM+0xec>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	617b      	str	r3, [r7, #20]
		int ccr_size_div_2 = ccr_size/2;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	0fda      	lsrs	r2, r3, #31
 800116c:	4413      	add	r3, r2
 800116e:	105b      	asrs	r3, r3, #1
 8001170:	613b      	str	r3, [r7, #16]
		int ccr_U_value,ccr_V_value;
		float f_speed = (float)speed/100;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001234 <set_PWM+0xf0>
 8001180:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001184:	edc7 7a03 	vstr	s15, [r7, #12]
		if(speed >0)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	dd19      	ble.n	80011c2 <set_PWM+0x7e>
		{//sens de marche horaire
			ccr_U_value = ccr_size_div_2+(f_speed*ccr_size_div_2);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b2:	ee17 3a90 	vmov	r3, s15
 80011b6:	61fb      	str	r3, [r7, #28]
			ccr_V_value = ccr_size-ccr_U_value;
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	61bb      	str	r3, [r7, #24]
 80011c0:	e029      	b.n	8001216 <set_PWM+0xd2>
		}
		else
		{//sens de marche anti_horraire
			ccr_V_value = ccr_size_div_2+(fabs(f_speed)*ccr_size_div_2);
 80011c2:	6938      	ldr	r0, [r7, #16]
 80011c4:	f7ff fb10 	bl	80007e8 <__aeabi_i2d>
 80011c8:	4604      	mov	r4, r0
 80011ca:	460d      	mov	r5, r1
 80011cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d0:	eef0 7ae7 	vabs.f32	s15, s15
 80011d4:	ee17 0a90 	vmov	r0, s15
 80011d8:	f7ff fb18 	bl	800080c <__aeabi_f2d>
 80011dc:	4680      	mov	r8, r0
 80011de:	4689      	mov	r9, r1
 80011e0:	6938      	ldr	r0, [r7, #16]
 80011e2:	f7ff fb01 	bl	80007e8 <__aeabi_i2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4640      	mov	r0, r8
 80011ec:	4649      	mov	r1, r9
 80011ee:	f7ff f87f 	bl	80002f0 <__aeabi_dmul>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4620      	mov	r0, r4
 80011f8:	4629      	mov	r1, r5
 80011fa:	f7ff f9a9 	bl	8000550 <__adddf3>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fb59 	bl	80008bc <__aeabi_d2iz>
 800120a:	4603      	mov	r3, r0
 800120c:	61bb      	str	r3, [r7, #24]
			ccr_U_value = ccr_size-ccr_V_value;
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	61fb      	str	r3, [r7, #28]
		}
		TIM1->CCR1 = ccr_U_value;
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <set_PWM+0xf4>)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = ccr_V_value;
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <set_PWM+0xf4>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6393      	str	r3, [r2, #56]	; 0x38
		return SUCCESS;
 8001222:	2300      	movs	r3, #0
	}
}
 8001224:	4618      	mov	r0, r3
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800122e:	bf00      	nop
 8001230:	200003bc 	.word	0x200003bc
 8001234:	42c80000 	.word	0x42c80000
 8001238:	40012c00 	.word	0x40012c00

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001240:	f000 ff67 	bl	8002112 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001244:	f000 f813 	bl	800126e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001248:	f7ff feb6 	bl	8000fb8 <MX_GPIO_Init>
  MX_ADC2_Init();
 800124c:	f7ff fd54 	bl	8000cf8 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001250:	f7ff fcda 	bl	8000c08 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001254:	f000 fa26 	bl	80016a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001258:	f000 faf4 	bl	8001844 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800125c:	f000 fc28 	bl	8001ab0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001260:	f000 fc72 	bl	8001b48 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8001264:	f000 fd64 	bl	8001d30 <Shell_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8001268:	f000 fda2 	bl	8001db0 <Shell_Loop>
	{
 800126c:	e7fc      	b.n	8001268 <main+0x2c>

0800126e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b094      	sub	sp, #80	; 0x50
 8001272:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	2238      	movs	r2, #56	; 0x38
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f007 fcd0 	bl	8008c22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001290:	2000      	movs	r0, #0
 8001292:	f002 fbdd 	bl	8003a50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001296:	2301      	movs	r3, #1
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800129a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a0:	2302      	movs	r3, #2
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a4:	2303      	movs	r3, #3
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80012a8:	2306      	movs	r3, #6
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80012ac:	2355      	movs	r3, #85	; 0x55
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 fc79 	bl	8003bb8 <HAL_RCC_OscConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80012cc:	f000 f82a 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d0:	230f      	movs	r3, #15
 80012d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d4:	2303      	movs	r3, #3
 80012d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2104      	movs	r1, #4
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 ff7d 	bl	80041e8 <HAL_RCC_ClockConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80012f4:	f000 f816 	bl	8001324 <Error_Handler>
  }
}
 80012f8:	bf00      	nop
 80012fa:	3750      	adds	r7, #80	; 0x50
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001312:	f000 ff17 	bl	8002144 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40001000 	.word	0x40001000

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800132c:	e7fe      	b.n	800132c <Error_Handler+0x8>
	...

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_MspInit+0x44>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_MspInit+0x44>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6613      	str	r3, [r2, #96]	; 0x60
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_MspInit+0x44>)
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_MspInit+0x44>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_MspInit+0x44>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6593      	str	r3, [r2, #88]	; 0x58
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_MspInit+0x44>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001366:	f002 fc17 	bl	8003b98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000

08001378 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001388:	4b2c      	ldr	r3, [pc, #176]	; (800143c <HAL_InitTick+0xc4>)
 800138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138c:	4a2b      	ldr	r2, [pc, #172]	; (800143c <HAL_InitTick+0xc4>)
 800138e:	f043 0310 	orr.w	r3, r3, #16
 8001392:	6593      	str	r3, [r2, #88]	; 0x58
 8001394:	4b29      	ldr	r3, [pc, #164]	; (800143c <HAL_InitTick+0xc4>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013a0:	f107 020c 	add.w	r2, r7, #12
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 f8f2 	bl	8004594 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013b0:	f003 f8c4 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 80013b4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b8:	4a21      	ldr	r2, [pc, #132]	; (8001440 <HAL_InitTick+0xc8>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	0c9b      	lsrs	r3, r3, #18
 80013c0:	3b01      	subs	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <HAL_InitTick+0xcc>)
 80013c6:	4a20      	ldr	r2, [pc, #128]	; (8001448 <HAL_InitTick+0xd0>)
 80013c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <HAL_InitTick+0xcc>)
 80013cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <HAL_InitTick+0xcc>)
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <HAL_InitTick+0xcc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_InitTick+0xcc>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80013e4:	4817      	ldr	r0, [pc, #92]	; (8001444 <HAL_InitTick+0xcc>)
 80013e6:	f003 fb9b 	bl	8004b20 <HAL_TIM_Base_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80013f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d11b      	bne.n	8001430 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013f8:	4812      	ldr	r0, [pc, #72]	; (8001444 <HAL_InitTick+0xcc>)
 80013fa:	f003 fbe9 	bl	8004bd0 <HAL_TIM_Base_Start_IT>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001404:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001408:	2b00      	cmp	r3, #0
 800140a:	d111      	bne.n	8001430 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800140c:	2036      	movs	r0, #54	; 0x36
 800140e:	f002 f893 	bl	8003538 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d808      	bhi.n	800142a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	2036      	movs	r0, #54	; 0x36
 800141e:	f002 f871 	bl	8003504 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_InitTick+0xd4>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e002      	b.n	8001430 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001434:	4618      	mov	r0, r3
 8001436:	3730      	adds	r7, #48	; 0x30
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000
 8001440:	431bde83 	.word	0x431bde83
 8001444:	2000036c 	.word	0x2000036c
 8001448:	40001000 	.word	0x40001000
 800144c:	20000210 	.word	0x20000210

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <USART2_IRQHandler+0x10>)
 80014ae:	f005 fab5 	bl	8006a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000454 	.word	0x20000454

080014bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <USART3_IRQHandler+0x10>)
 80014c2:	f005 faab 	bl	8006a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200004e4 	.word	0x200004e4

080014d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80014d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014d8:	f002 fa96 	bl	8003a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <TIM6_DAC_IRQHandler+0x10>)
 80014e6:	f003 fd5f 	bl	8004fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000036c 	.word	0x2000036c

080014f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return 1;
 80014f8:	2301      	movs	r3, #1
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_kill>:

int _kill(int pid, int sig)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800150e:	f007 fc33 	bl	8008d78 <__errno>
 8001512:	4603      	mov	r3, r0
 8001514:	2216      	movs	r2, #22
 8001516:	601a      	str	r2, [r3, #0]
  return -1;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_exit>:

void _exit (int status)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ffe7 	bl	8001504 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001536:	e7fe      	b.n	8001536 <_exit+0x12>

08001538 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	e00a      	b.n	8001560 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800154a:	f3af 8000 	nop.w
 800154e:	4601      	mov	r1, r0
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	60ba      	str	r2, [r7, #8]
 8001556:	b2ca      	uxtb	r2, r1
 8001558:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	dbf0      	blt.n	800154a <_read+0x12>
  }

  return len;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e009      	b.n	8001598 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	60ba      	str	r2, [r7, #8]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3301      	adds	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbf1      	blt.n	8001584 <_write+0x12>
  }
  return len;
 80015a0:	687b      	ldr	r3, [r7, #4]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_close>:

int _close(int file)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d2:	605a      	str	r2, [r3, #4]
  return 0;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <_isatty>:

int _isatty(int file)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800161c:	4a14      	ldr	r2, [pc, #80]	; (8001670 <_sbrk+0x5c>)
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <_sbrk+0x60>)
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <_sbrk+0x64>)
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <_sbrk+0x68>)
 8001634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	429a      	cmp	r2, r3
 8001642:	d207      	bcs.n	8001654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001644:	f007 fb98 	bl	8008d78 <__errno>
 8001648:	4603      	mov	r3, r0
 800164a:	220c      	movs	r2, #12
 800164c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	e009      	b.n	8001668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <_sbrk+0x64>)
 8001664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20020000 	.word	0x20020000
 8001674:	00000400 	.word	0x00000400
 8001678:	200003b8 	.word	0x200003b8
 800167c:	20000780 	.word	0x20000780

08001680 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <SystemInit+0x20>)
 8001686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <SystemInit+0x20>)
 800168c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b09c      	sub	sp, #112	; 0x70
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	615a      	str	r2, [r3, #20]
 80016d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2234      	movs	r2, #52	; 0x34
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f007 fa9f 	bl	8008c22 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016e4:	4b55      	ldr	r3, [pc, #340]	; (800183c <MX_TIM1_Init+0x198>)
 80016e6:	4a56      	ldr	r2, [pc, #344]	; (8001840 <MX_TIM1_Init+0x19c>)
 80016e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80016ea:	4b54      	ldr	r3, [pc, #336]	; (800183c <MX_TIM1_Init+0x198>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b52      	ldr	r3, [pc, #328]	; (800183c <MX_TIM1_Init+0x198>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80016f6:	4b51      	ldr	r3, [pc, #324]	; (800183c <MX_TIM1_Init+0x198>)
 80016f8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80016fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b4f      	ldr	r3, [pc, #316]	; (800183c <MX_TIM1_Init+0x198>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001704:	4b4d      	ldr	r3, [pc, #308]	; (800183c <MX_TIM1_Init+0x198>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800170a:	4b4c      	ldr	r3, [pc, #304]	; (800183c <MX_TIM1_Init+0x198>)
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001710:	484a      	ldr	r0, [pc, #296]	; (800183c <MX_TIM1_Init+0x198>)
 8001712:	f003 fa05 	bl	8004b20 <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800171c:	f7ff fe02 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001726:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800172a:	4619      	mov	r1, r3
 800172c:	4843      	ldr	r0, [pc, #268]	; (800183c <MX_TIM1_Init+0x198>)
 800172e:	f003 fecf 	bl	80054d0 <HAL_TIM_ConfigClockSource>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001738:	f7ff fdf4 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800173c:	483f      	ldr	r0, [pc, #252]	; (800183c <MX_TIM1_Init+0x198>)
 800173e:	f003 fabf 	bl	8004cc0 <HAL_TIM_PWM_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001748:	f7ff fdec 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001758:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800175c:	4619      	mov	r1, r3
 800175e:	4837      	ldr	r0, [pc, #220]	; (800183c <MX_TIM1_Init+0x198>)
 8001760:	f004 fe6c 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800176a:	f7ff fddb 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176e:	2360      	movs	r3, #96	; 0x60
 8001770:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 800;
 8001772:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001778:	2300      	movs	r3, #0
 800177a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800177c:	2300      	movs	r3, #0
 800177e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001780:	2304      	movs	r3, #4
 8001782:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800178c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001790:	2200      	movs	r2, #0
 8001792:	4619      	mov	r1, r3
 8001794:	4829      	ldr	r0, [pc, #164]	; (800183c <MX_TIM1_Init+0x198>)
 8001796:	f003 fd87 	bl	80052a8 <HAL_TIM_PWM_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80017a0:	f7ff fdc0 	bl	8001324 <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 80017a4:	23c8      	movs	r3, #200	; 0xc8
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ac:	2204      	movs	r2, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4822      	ldr	r0, [pc, #136]	; (800183c <MX_TIM1_Init+0x198>)
 80017b2:	f003 fd79 	bl	80052a8 <HAL_TIM_PWM_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 80017bc:	f7ff fdb2 	bl	8001324 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017cc:	2208      	movs	r2, #8
 80017ce:	4619      	mov	r1, r3
 80017d0:	481a      	ldr	r0, [pc, #104]	; (800183c <MX_TIM1_Init+0x198>)
 80017d2:	f003 fd69 	bl	80052a8 <HAL_TIM_PWM_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80017dc:	f7ff fda2 	bl	8001324 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 15;
 80017ec:	230f      	movs	r3, #15
 80017ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001806:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001810:	2300      	movs	r3, #0
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	4619      	mov	r1, r3
 800181c:	4807      	ldr	r0, [pc, #28]	; (800183c <MX_TIM1_Init+0x198>)
 800181e:	f004 fea3 	bl	8006568 <HAL_TIMEx_ConfigBreakDeadTime>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001828:	f7ff fd7c 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <MX_TIM1_Init+0x198>)
 800182e:	f000 f8d7 	bl	80019e0 <HAL_TIM_MspPostInit>

}
 8001832:	bf00      	nop
 8001834:	3770      	adds	r7, #112	; 0x70
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200003bc 	.word	0x200003bc
 8001840:	40012c00 	.word	0x40012c00

08001844 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_TIM3_Init+0x90>)
 8001864:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <MX_TIM3_Init+0x94>)
 8001866:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_TIM3_Init+0x90>)
 800186a:	2200      	movs	r2, #0
 800186c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <MX_TIM3_Init+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_TIM3_Init+0x90>)
 8001876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_TIM3_Init+0x90>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_TIM3_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4619      	mov	r1, r3
 800189e:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_TIM3_Init+0x90>)
 80018a0:	f004 fc5b 	bl	800615a <HAL_TIMEx_HallSensor_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80018aa:	f7ff fd3b 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80018ae:	2350      	movs	r3, #80	; 0x50
 80018b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <MX_TIM3_Init+0x90>)
 80018bc:	f004 fdbe 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80018c6:	f7ff fd2d 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000408 	.word	0x20000408
 80018d8:	40000400 	.word	0x40000400

080018dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_TIM_Base_MspInit+0x38>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10b      	bne.n	8001906 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_TIM_Base_MspInit+0x3c>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <HAL_TIM_Base_MspInit+0x3c>)
 80018f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018f8:	6613      	str	r3, [r2, #96]	; 0x60
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_TIM_Base_MspInit+0x3c>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40012c00 	.word	0x40012c00
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a26      	ldr	r2, [pc, #152]	; (80019d4 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d145      	bne.n	80019ca <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800193e:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6593      	str	r3, [r2, #88]	; 0x58
 800194a:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a1f      	ldr	r2, [pc, #124]	; (80019d8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001986:	2350      	movs	r3, #80	; 0x50
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001996:	2302      	movs	r3, #2
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a4:	f001 fe96 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ba:	2302      	movs	r3, #2
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80019c6:	f001 fe85 	bl	80036d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	; 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40000400 	.word	0x40000400
 80019d8:	40021000 	.word	0x40021000
 80019dc:	48000800 	.word	0x48000800

080019e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a29      	ldr	r2, [pc, #164]	; (8001aa4 <HAL_TIM_MspPostInit+0xc4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d14b      	bne.n	8001a9a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a02:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <HAL_TIM_MspPostInit+0xc8>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	4a28      	ldr	r2, [pc, #160]	; (8001aa8 <HAL_TIM_MspPostInit+0xc8>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0e:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_TIM_MspPostInit+0xc8>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_TIM_MspPostInit+0xc8>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <HAL_TIM_MspPostInit+0xc8>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_TIM_MspPostInit+0xc8>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001a32:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a44:	2306      	movs	r3, #6
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4817      	ldr	r0, [pc, #92]	; (8001aac <HAL_TIM_MspPostInit+0xcc>)
 8001a50:	f001 fe40 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001a66:	2304      	movs	r3, #4
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480e      	ldr	r0, [pc, #56]	; (8001aac <HAL_TIM_MspPostInit+0xcc>)
 8001a72:	f001 fe2f 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001a76:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a88:	2306      	movs	r3, #6
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a96:	f001 fe1d 	bl	80036d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40012c00 	.word	0x40012c00
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	48000400 	.word	0x48000400

08001ab0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001ab6:	4a23      	ldr	r2, [pc, #140]	; (8001b44 <MX_USART2_UART_Init+0x94>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001af8:	4811      	ldr	r0, [pc, #68]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001afa:	f004 fe52 	bl	80067a2 <HAL_UART_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b04:	f7ff fc0e 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b08:	2100      	movs	r1, #0
 8001b0a:	480d      	ldr	r0, [pc, #52]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001b0c:	f006 fdf5 	bl	80086fa <HAL_UARTEx_SetTxFifoThreshold>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b16:	f7ff fc05 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4808      	ldr	r0, [pc, #32]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001b1e:	f006 fe2a 	bl	8008776 <HAL_UARTEx_SetRxFifoThreshold>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b28:	f7ff fbfc 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_USART2_UART_Init+0x90>)
 8001b2e:	f006 fdab 	bl	8008688 <HAL_UARTEx_DisableFifoMode>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b38:	f7ff fbf4 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000454 	.word	0x20000454
 8001b44:	40004400 	.word	0x40004400

08001b48 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001b4e:	4a23      	ldr	r2, [pc, #140]	; (8001bdc <MX_USART3_UART_Init+0x94>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b90:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001b92:	f004 fe06 	bl	80067a2 <HAL_UART_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001b9c:	f7ff fbc2 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001ba4:	f006 fda9 	bl	80086fa <HAL_UARTEx_SetTxFifoThreshold>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001bae:	f7ff fbb9 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001bb6:	f006 fdde 	bl	8008776 <HAL_UARTEx_SetRxFifoThreshold>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001bc0:	f7ff fbb0 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001bc4:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <MX_USART3_UART_Init+0x90>)
 8001bc6:	f006 fd5f 	bl	8008688 <HAL_UARTEx_DisableFifoMode>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001bd0:	f7ff fba8 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200004e4 	.word	0x200004e4
 8001bdc:	40004800 	.word	0x40004800

08001be0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b0a0      	sub	sp, #128	; 0x80
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	2254      	movs	r2, #84	; 0x54
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f007 f80e 	bl	8008c22 <memset>
  if(uartHandle->Instance==USART2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a45      	ldr	r2, [pc, #276]	; (8001d20 <HAL_UART_MspInit+0x140>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d13f      	bne.n	8001c90 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fd31 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c28:	f7ff fb7c 	bl	8001324 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c2c:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <HAL_UART_MspInit+0x144>)
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	4a3c      	ldr	r2, [pc, #240]	; (8001d24 <HAL_UART_MspInit+0x144>)
 8001c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c36:	6593      	str	r3, [r2, #88]	; 0x58
 8001c38:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <HAL_UART_MspInit+0x144>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c44:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <HAL_UART_MspInit+0x144>)
 8001c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c48:	4a36      	ldr	r2, [pc, #216]	; (8001d24 <HAL_UART_MspInit+0x144>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c50:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <HAL_UART_MspInit+0x144>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c5c:	230c      	movs	r3, #12
 8001c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c6c:	2307      	movs	r3, #7
 8001c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7a:	f001 fd2b 	bl	80036d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2026      	movs	r0, #38	; 0x26
 8001c84:	f001 fc3e 	bl	8003504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c88:	2026      	movs	r0, #38	; 0x26
 8001c8a:	f001 fc55 	bl	8003538 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c8e:	e043      	b.n	8001d18 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <HAL_UART_MspInit+0x148>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d13e      	bne.n	8001d18 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca2:	f107 0318 	add.w	r3, r7, #24
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 fcec 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001cb2:	f7ff fb37 	bl	8001324 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_UART_MspInit+0x144>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <HAL_UART_MspInit+0x144>)
 8001cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_UART_MspInit+0x144>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_UART_MspInit+0x144>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_UART_MspInit+0x144>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_UART_MspInit+0x144>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ce6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d00:	4619      	mov	r1, r3
 8001d02:	480a      	ldr	r0, [pc, #40]	; (8001d2c <HAL_UART_MspInit+0x14c>)
 8001d04:	f001 fce6 	bl	80036d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2027      	movs	r0, #39	; 0x27
 8001d0e:	f001 fbf9 	bl	8003504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d12:	2027      	movs	r0, #39	; 0x27
 8001d14:	f001 fc10 	bl	8003538 <HAL_NVIC_EnableIRQ>
}
 8001d18:	bf00      	nop
 8001d1a:	3780      	adds	r7, #128	; 0x80
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40004400 	.word	0x40004400
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40004800 	.word	0x40004800
 8001d2c:	48000800 	.word	0x48000800

08001d30 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8001d34:	2224      	movs	r2, #36	; 0x24
 8001d36:	2100      	movs	r1, #0
 8001d38:	4816      	ldr	r0, [pc, #88]	; (8001d94 <Shell_Init+0x64>)
 8001d3a:	f006 ff72 	bl	8008c22 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8001d3e:	2240      	movs	r2, #64	; 0x40
 8001d40:	2100      	movs	r1, #0
 8001d42:	4815      	ldr	r0, [pc, #84]	; (8001d98 <Shell_Init+0x68>)
 8001d44:	f006 ff6d 	bl	8008c22 <memset>
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <Shell_Init+0x6c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8001d4e:	2240      	movs	r2, #64	; 0x40
 8001d50:	2100      	movs	r1, #0
 8001d52:	4813      	ldr	r0, [pc, #76]	; (8001da0 <Shell_Init+0x70>)
 8001d54:	f006 ff65 	bl	8008c22 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4910      	ldr	r1, [pc, #64]	; (8001d9c <Shell_Init+0x6c>)
 8001d5c:	4811      	ldr	r0, [pc, #68]	; (8001da4 <Shell_Init+0x74>)
 8001d5e:	f004 fe07 	bl	8006970 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001d62:	4811      	ldr	r0, [pc, #68]	; (8001da8 <Shell_Init+0x78>)
 8001d64:	f7fe fa66 	bl	8000234 <strlen>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	490d      	ldr	r1, [pc, #52]	; (8001da8 <Shell_Init+0x78>)
 8001d72:	480c      	ldr	r0, [pc, #48]	; (8001da4 <Shell_Init+0x74>)
 8001d74:	f004 fd65 	bl	8006842 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <Shell_Init+0x7c>)
 8001d7a:	f7fe fa5b 	bl	8000234 <strlen>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	4909      	ldr	r1, [pc, #36]	; (8001dac <Shell_Init+0x7c>)
 8001d88:	4806      	ldr	r0, [pc, #24]	; (8001da4 <Shell_Init+0x74>)
 8001d8a:	f004 fd5a 	bl	8006842 <HAL_UART_Transmit>
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000600 	.word	0x20000600
 8001d98:	200005bc 	.word	0x200005bc
 8001d9c:	20000578 	.word	0x20000578
 8001da0:	2000057c 	.word	0x2000057c
 8001da4:	20000454 	.word	0x20000454
 8001da8:	20000024 	.word	0x20000024
 8001dac:	20000004 	.word	0x20000004

08001db0 <Shell_Loop>:

void Shell_Loop(void){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 8001db6:	4b9b      	ldr	r3, [pc, #620]	; (8002024 <Shell_Loop+0x274>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d05b      	beq.n	8001e76 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8001dbe:	4b9a      	ldr	r3, [pc, #616]	; (8002028 <Shell_Loop+0x278>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d034      	beq.n	8001e30 <Shell_Loop+0x80>
 8001dc6:	2b0d      	cmp	r3, #13
 8001dc8:	d142      	bne.n	8001e50 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	2203      	movs	r2, #3
 8001dd0:	4996      	ldr	r1, [pc, #600]	; (800202c <Shell_Loop+0x27c>)
 8001dd2:	4897      	ldr	r0, [pc, #604]	; (8002030 <Shell_Loop+0x280>)
 8001dd4:	f004 fd35 	bl	8006842 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001dd8:	4b96      	ldr	r3, [pc, #600]	; (8002034 <Shell_Loop+0x284>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a96      	ldr	r2, [pc, #600]	; (8002038 <Shell_Loop+0x288>)
 8001dde:	2100      	movs	r1, #0
 8001de0:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8001de2:	4b96      	ldr	r3, [pc, #600]	; (800203c <Shell_Loop+0x28c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001de8:	4995      	ldr	r1, [pc, #596]	; (8002040 <Shell_Loop+0x290>)
 8001dea:	4893      	ldr	r0, [pc, #588]	; (8002038 <Shell_Loop+0x288>)
 8001dec:	f006 ff22 	bl	8008c34 <strtok>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a94      	ldr	r2, [pc, #592]	; (8002044 <Shell_Loop+0x294>)
 8001df4:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001df6:	e010      	b.n	8001e1a <Shell_Loop+0x6a>
				argv[argc++] = token;
 8001df8:	4b90      	ldr	r3, [pc, #576]	; (800203c <Shell_Loop+0x28c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	498f      	ldr	r1, [pc, #572]	; (800203c <Shell_Loop+0x28c>)
 8001e00:	600a      	str	r2, [r1, #0]
 8001e02:	4a90      	ldr	r2, [pc, #576]	; (8002044 <Shell_Loop+0x294>)
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	4990      	ldr	r1, [pc, #576]	; (8002048 <Shell_Loop+0x298>)
 8001e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001e0c:	498c      	ldr	r1, [pc, #560]	; (8002040 <Shell_Loop+0x290>)
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f006 ff10 	bl	8008c34 <strtok>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4a8b      	ldr	r2, [pc, #556]	; (8002044 <Shell_Loop+0x294>)
 8001e18:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001e1a:	4b8a      	ldr	r3, [pc, #552]	; (8002044 <Shell_Loop+0x294>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ea      	bne.n	8001df8 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8001e22:	4b84      	ldr	r3, [pc, #528]	; (8002034 <Shell_Loop+0x284>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001e28:	4b88      	ldr	r3, [pc, #544]	; (800204c <Shell_Loop+0x29c>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
			break;
 8001e2e:	e01f      	b.n	8001e70 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8001e30:	4b80      	ldr	r3, [pc, #512]	; (8002034 <Shell_Loop+0x284>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	497f      	ldr	r1, [pc, #508]	; (8002034 <Shell_Loop+0x284>)
 8001e38:	600a      	str	r2, [r1, #0]
 8001e3a:	4a7f      	ldr	r2, [pc, #508]	; (8002038 <Shell_Loop+0x288>)
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
 8001e44:	2204      	movs	r2, #4
 8001e46:	4982      	ldr	r1, [pc, #520]	; (8002050 <Shell_Loop+0x2a0>)
 8001e48:	4879      	ldr	r0, [pc, #484]	; (8002030 <Shell_Loop+0x280>)
 8001e4a:	f004 fcfa 	bl	8006842 <HAL_UART_Transmit>
			break;
 8001e4e:	e00f      	b.n	8001e70 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001e50:	4b78      	ldr	r3, [pc, #480]	; (8002034 <Shell_Loop+0x284>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	4977      	ldr	r1, [pc, #476]	; (8002034 <Shell_Loop+0x284>)
 8001e58:	600a      	str	r2, [r1, #0]
 8001e5a:	4a73      	ldr	r2, [pc, #460]	; (8002028 <Shell_Loop+0x278>)
 8001e5c:	7811      	ldrb	r1, [r2, #0]
 8001e5e:	4a76      	ldr	r2, [pc, #472]	; (8002038 <Shell_Loop+0x288>)
 8001e60:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	2201      	movs	r2, #1
 8001e68:	496f      	ldr	r1, [pc, #444]	; (8002028 <Shell_Loop+0x278>)
 8001e6a:	4871      	ldr	r0, [pc, #452]	; (8002030 <Shell_Loop+0x280>)
 8001e6c:	f004 fce9 	bl	8006842 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8001e70:	4b6c      	ldr	r3, [pc, #432]	; (8002024 <Shell_Loop+0x274>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8001e76:	4b75      	ldr	r3, [pc, #468]	; (800204c <Shell_Loop+0x29c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 80cd 	beq.w	800201a <Shell_Loop+0x26a>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8001e80:	4b71      	ldr	r3, [pc, #452]	; (8002048 <Shell_Loop+0x298>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4973      	ldr	r1, [pc, #460]	; (8002054 <Shell_Loop+0x2a4>)
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe f9ca 	bl	8000220 <strcmp>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d107      	bne.n	8001ea2 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	221a      	movs	r2, #26
 8001e98:	496f      	ldr	r1, [pc, #444]	; (8002058 <Shell_Loop+0x2a8>)
 8001e9a:	4865      	ldr	r0, [pc, #404]	; (8002030 <Shell_Loop+0x280>)
 8001e9c:	f004 fcd1 	bl	8006842 <HAL_UART_Transmit>
 8001ea0:	e0b1      	b.n	8002006 <Shell_Loop+0x256>
		}

		else if(strcmp(argv[0],"help")==0){
 8001ea2:	4b69      	ldr	r3, [pc, #420]	; (8002048 <Shell_Loop+0x298>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	496d      	ldr	r1, [pc, #436]	; (800205c <Shell_Loop+0x2ac>)
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe f9b9 	bl	8000220 <strcmp>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10b      	bne.n	8001ecc <Shell_Loop+0x11c>
			HAL_UART_Transmit(&huart2, help_prompt, strlen((char *)help_prompt), HAL_MAX_DELAY);
 8001eb4:	486a      	ldr	r0, [pc, #424]	; (8002060 <Shell_Loop+0x2b0>)
 8001eb6:	f7fe f9bd 	bl	8000234 <strlen>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	4967      	ldr	r1, [pc, #412]	; (8002060 <Shell_Loop+0x2b0>)
 8001ec4:	485a      	ldr	r0, [pc, #360]	; (8002030 <Shell_Loop+0x280>)
 8001ec6:	f004 fcbc 	bl	8006842 <HAL_UART_Transmit>
 8001eca:	e09c      	b.n	8002006 <Shell_Loop+0x256>
		}

		else if(strcmp(argv[0],"start")==0){
 8001ecc:	4b5e      	ldr	r3, [pc, #376]	; (8002048 <Shell_Loop+0x298>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4964      	ldr	r1, [pc, #400]	; (8002064 <Shell_Loop+0x2b4>)
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe f9a4 	bl	8000220 <strcmp>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d125      	bne.n	8001f2a <Shell_Loop+0x17a>
			int result = start_PWM();
 8001ede:	f7ff f8fb 	bl	80010d8 <start_PWM>
 8001ee2:	60f8      	str	r0, [r7, #12]
			if(result == SUCCESS)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <Shell_Loop+0x156>
			{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\npower ON \r\nSpeed set to 0");
 8001eea:	4a5f      	ldr	r2, [pc, #380]	; (8002068 <Shell_Loop+0x2b8>)
 8001eec:	2140      	movs	r1, #64	; 0x40
 8001eee:	485f      	ldr	r0, [pc, #380]	; (800206c <Shell_Loop+0x2bc>)
 8001ef0:	f006 fe20 	bl	8008b34 <sniprintf>
 8001ef4:	60b8      	str	r0, [r7, #8]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	495b      	ldr	r1, [pc, #364]	; (800206c <Shell_Loop+0x2bc>)
 8001f00:	484b      	ldr	r0, [pc, #300]	; (8002030 <Shell_Loop+0x280>)
 8001f02:	f004 fc9e 	bl	8006842 <HAL_UART_Transmit>
			}
			if(result == ERROR)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d17c      	bne.n	8002006 <Shell_Loop+0x256>
			{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\nFailed to power ON");
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <Shell_Loop+0x2c0>)
 8001f0e:	2140      	movs	r1, #64	; 0x40
 8001f10:	4856      	ldr	r0, [pc, #344]	; (800206c <Shell_Loop+0x2bc>)
 8001f12:	f006 fe0f 	bl	8008b34 <sniprintf>
 8001f16:	6078      	str	r0, [r7, #4]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f20:	4952      	ldr	r1, [pc, #328]	; (800206c <Shell_Loop+0x2bc>)
 8001f22:	4843      	ldr	r0, [pc, #268]	; (8002030 <Shell_Loop+0x280>)
 8001f24:	f004 fc8d 	bl	8006842 <HAL_UART_Transmit>
 8001f28:	e06d      	b.n	8002006 <Shell_Loop+0x256>
			}
		}

		else if(strcmp(argv[0],"stop")==0){
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <Shell_Loop+0x298>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4951      	ldr	r1, [pc, #324]	; (8002074 <Shell_Loop+0x2c4>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe f975 	bl	8000220 <strcmp>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d125      	bne.n	8001f88 <Shell_Loop+0x1d8>
			int result = start_PWM();
 8001f3c:	f7ff f8cc 	bl	80010d8 <start_PWM>
 8001f40:	61b8      	str	r0, [r7, #24]
			if(result == SUCCESS)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10d      	bne.n	8001f64 <Shell_Loop+0x1b4>
			{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\npower OFF");
 8001f48:	4a4b      	ldr	r2, [pc, #300]	; (8002078 <Shell_Loop+0x2c8>)
 8001f4a:	2140      	movs	r1, #64	; 0x40
 8001f4c:	4847      	ldr	r0, [pc, #284]	; (800206c <Shell_Loop+0x2bc>)
 8001f4e:	f006 fdf1 	bl	8008b34 <sniprintf>
 8001f52:	6178      	str	r0, [r7, #20]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5c:	4943      	ldr	r1, [pc, #268]	; (800206c <Shell_Loop+0x2bc>)
 8001f5e:	4834      	ldr	r0, [pc, #208]	; (8002030 <Shell_Loop+0x280>)
 8001f60:	f004 fc6f 	bl	8006842 <HAL_UART_Transmit>
			}
			if(result == ERROR)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d14d      	bne.n	8002006 <Shell_Loop+0x256>
			{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\nFailed to power OFF");
 8001f6a:	4a44      	ldr	r2, [pc, #272]	; (800207c <Shell_Loop+0x2cc>)
 8001f6c:	2140      	movs	r1, #64	; 0x40
 8001f6e:	483f      	ldr	r0, [pc, #252]	; (800206c <Shell_Loop+0x2bc>)
 8001f70:	f006 fde0 	bl	8008b34 <sniprintf>
 8001f74:	6138      	str	r0, [r7, #16]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	493b      	ldr	r1, [pc, #236]	; (800206c <Shell_Loop+0x2bc>)
 8001f80:	482b      	ldr	r0, [pc, #172]	; (8002030 <Shell_Loop+0x280>)
 8001f82:	f004 fc5e 	bl	8006842 <HAL_UART_Transmit>
 8001f86:	e03e      	b.n	8002006 <Shell_Loop+0x256>
			}
		}

		else if(strcmp(argv[0],"speed")==0){
 8001f88:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <Shell_Loop+0x298>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	493c      	ldr	r1, [pc, #240]	; (8002080 <Shell_Loop+0x2d0>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe f946 	bl	8000220 <strcmp>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d12e      	bne.n	8001ff8 <Shell_Loop+0x248>
			int val = atoi(argv[1]);
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <Shell_Loop+0x298>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f006 fc76 	bl	8008890 <atoi>
 8001fa4:	6278      	str	r0, [r7, #36]	; 0x24
			if((-100 <= val) && (val<= 100))
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001fac:	db15      	blt.n	8001fda <Shell_Loop+0x22a>
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	2b64      	cmp	r3, #100	; 0x64
 8001fb2:	dc12      	bgt.n	8001fda <Shell_Loop+0x22a>
			{
				set_PWM(val);
 8001fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fb6:	f7ff f8c5 	bl	8001144 <set_PWM>
				int uartTxStringLength = snprintf((char *)uartTxBuffer,UART_TX_BUFFER_SIZE, "\r\nPWM set to %03d", val);
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	4a31      	ldr	r2, [pc, #196]	; (8002084 <Shell_Loop+0x2d4>)
 8001fbe:	2140      	movs	r1, #64	; 0x40
 8001fc0:	482a      	ldr	r0, [pc, #168]	; (800206c <Shell_Loop+0x2bc>)
 8001fc2:	f006 fdb7 	bl	8008b34 <sniprintf>
 8001fc6:	6238      	str	r0, [r7, #32]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd0:	4926      	ldr	r1, [pc, #152]	; (800206c <Shell_Loop+0x2bc>)
 8001fd2:	4817      	ldr	r0, [pc, #92]	; (8002030 <Shell_Loop+0x280>)
 8001fd4:	f004 fc35 	bl	8006842 <HAL_UART_Transmit>
			{
 8001fd8:	e015      	b.n	8002006 <Shell_Loop+0x256>
			}
			else
			{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\nFailed to set PWM");
 8001fda:	4a2b      	ldr	r2, [pc, #172]	; (8002088 <Shell_Loop+0x2d8>)
 8001fdc:	2140      	movs	r1, #64	; 0x40
 8001fde:	4823      	ldr	r0, [pc, #140]	; (800206c <Shell_Loop+0x2bc>)
 8001fe0:	f006 fda8 	bl	8008b34 <sniprintf>
 8001fe4:	61f8      	str	r0, [r7, #28]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	491f      	ldr	r1, [pc, #124]	; (800206c <Shell_Loop+0x2bc>)
 8001ff0:	480f      	ldr	r0, [pc, #60]	; (8002030 <Shell_Loop+0x280>)
 8001ff2:	f004 fc26 	bl	8006842 <HAL_UART_Transmit>
 8001ff6:	e006      	b.n	8002006 <Shell_Loop+0x256>
			}
		}

		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffc:	2214      	movs	r2, #20
 8001ffe:	4923      	ldr	r1, [pc, #140]	; (800208c <Shell_Loop+0x2dc>)
 8002000:	480b      	ldr	r0, [pc, #44]	; (8002030 <Shell_Loop+0x280>)
 8002002:	f004 fc1e 	bl	8006842 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	2220      	movs	r2, #32
 800200c:	4920      	ldr	r1, [pc, #128]	; (8002090 <Shell_Loop+0x2e0>)
 800200e:	4808      	ldr	r0, [pc, #32]	; (8002030 <Shell_Loop+0x280>)
 8002010:	f004 fc17 	bl	8006842 <HAL_UART_Transmit>
		newCmdReady = 0;
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <Shell_Loop+0x29c>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
	}
}
 800201a:	bf00      	nop
 800201c:	3728      	adds	r7, #40	; 0x28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000574 	.word	0x20000574
 8002028:	20000578 	.word	0x20000578
 800202c:	200001d8 	.word	0x200001d8
 8002030:	20000454 	.word	0x20000454
 8002034:	200005fc 	.word	0x200005fc
 8002038:	200005bc 	.word	0x200005bc
 800203c:	20000624 	.word	0x20000624
 8002040:	08009da8 	.word	0x08009da8
 8002044:	20000628 	.word	0x20000628
 8002048:	20000600 	.word	0x20000600
 800204c:	2000062c 	.word	0x2000062c
 8002050:	200001dc 	.word	0x200001dc
 8002054:	08009dac 	.word	0x08009dac
 8002058:	200001f4 	.word	0x200001f4
 800205c:	08009dbc 	.word	0x08009dbc
 8002060:	200000ac 	.word	0x200000ac
 8002064:	08009dc4 	.word	0x08009dc4
 8002068:	08009dcc 	.word	0x08009dcc
 800206c:	2000057c 	.word	0x2000057c
 8002070:	08009de8 	.word	0x08009de8
 8002074:	08009e00 	.word	0x08009e00
 8002078:	08009e08 	.word	0x08009e08
 800207c:	08009e14 	.word	0x08009e14
 8002080:	08009e2c 	.word	0x08009e2c
 8002084:	08009e34 	.word	0x08009e34
 8002088:	08009e48 	.word	0x08009e48
 800208c:	200001e0 	.word	0x200001e0
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_UART_RxCpltCallback+0x20>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80020a2:	2201      	movs	r2, #1
 80020a4:	4904      	ldr	r1, [pc, #16]	; (80020b8 <HAL_UART_RxCpltCallback+0x24>)
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <HAL_UART_RxCpltCallback+0x28>)
 80020a8:	f004 fc62 	bl	8006970 <HAL_UART_Receive_IT>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000574 	.word	0x20000574
 80020b8:	20000578 	.word	0x20000578
 80020bc:	20000454 	.word	0x20000454

080020c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020c0:	480d      	ldr	r0, [pc, #52]	; (80020f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <LoopForever+0x6>)
  ldr r1, =_edata
 80020c6:	490e      	ldr	r1, [pc, #56]	; (8002100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020c8:	4a0e      	ldr	r2, [pc, #56]	; (8002104 <LoopForever+0xe>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020dc:	4c0b      	ldr	r4, [pc, #44]	; (800210c <LoopForever+0x16>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020ea:	f7ff fac9 	bl	8001680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ee:	f006 fe49 	bl	8008d84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020f2:	f7ff f8a3 	bl	800123c <main>

080020f6 <LoopForever>:

LoopForever:
    b LoopForever
 80020f6:	e7fe      	b.n	80020f6 <LoopForever>
  ldr   r0, =_estack
 80020f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002100:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8002104:	0800a090 	.word	0x0800a090
  ldr r2, =_sbss
 8002108:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 800210c:	20000780 	.word	0x20000780

08002110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002110:	e7fe      	b.n	8002110 <ADC1_2_IRQHandler>

08002112 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800211c:	2003      	movs	r0, #3
 800211e:	f001 f9e6 	bl	80034ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002122:	200f      	movs	r0, #15
 8002124:	f7ff f928 	bl	8001378 <HAL_InitTick>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	71fb      	strb	r3, [r7, #7]
 8002132:	e001      	b.n	8002138 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002134:	f7ff f8fc 	bl	8001330 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002138:	79fb      	ldrb	r3, [r7, #7]

}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_IncTick+0x1c>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_IncTick+0x20>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4413      	add	r3, r2
 8002152:	4a03      	ldr	r2, [pc, #12]	; (8002160 <HAL_IncTick+0x1c>)
 8002154:	6013      	str	r3, [r2, #0]
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	20000630 	.word	0x20000630
 8002164:	20000214 	.word	0x20000214

08002168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000630 	.word	0x20000630

08002180 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	609a      	str	r2, [r3, #8]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	609a      	str	r2, [r3, #8]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3360      	adds	r3, #96	; 0x60
 80021fa:	461a      	mov	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <LL_ADC_SetOffset+0x44>)
 800220a:	4013      	ands	r3, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	4313      	orrs	r3, r2
 8002218:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	03fff000 	.word	0x03fff000

08002230 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3360      	adds	r3, #96	; 0x60
 800223e:	461a      	mov	r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3360      	adds	r3, #96	; 0x60
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	431a      	orrs	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002286:	bf00      	nop
 8002288:	371c      	adds	r7, #28
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002292:	b480      	push	{r7}
 8002294:	b087      	sub	sp, #28
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3360      	adds	r3, #96	; 0x60
 80022a2:	461a      	mov	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022bc:	bf00      	nop
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3360      	adds	r3, #96	; 0x60
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80022f2:	bf00      	nop
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	615a      	str	r2, [r3, #20]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3330      	adds	r3, #48	; 0x30
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	4413      	add	r3, r2
 8002342:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	211f      	movs	r1, #31
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	401a      	ands	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	0e9b      	lsrs	r3, r3, #26
 800235c:	f003 011f 	and.w	r1, r3, #31
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	431a      	orrs	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002370:	bf00      	nop
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3314      	adds	r3, #20
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	0e5b      	lsrs	r3, r3, #25
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	4413      	add	r3, r2
 800239a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	0d1b      	lsrs	r3, r3, #20
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2107      	movs	r1, #7
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	401a      	ands	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	0d1b      	lsrs	r3, r3, #20
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	431a      	orrs	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023c6:	bf00      	nop
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a0f      	ldr	r2, [pc, #60]	; (8002420 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d10a      	bne.n	80023fe <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f4:	431a      	orrs	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80023fc:	e00a      	b.n	8002414 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	43db      	mvns	r3, r3
 800240c:	401a      	ands	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	407f0000 	.word	0x407f0000

08002424 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002434:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6093      	str	r3, [r2, #8]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800245c:	d101      	bne.n	8002462 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002484:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024ac:	d101      	bne.n	80024b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <LL_ADC_IsEnabled+0x18>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <LL_ADC_IsEnabled+0x1a>
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d101      	bne.n	80024fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b08      	cmp	r3, #8
 800251e:	d101      	bne.n	8002524 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e1af      	b.n	80028ae <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7fe fc31 	bl	8000dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff67 	bl	8002448 <LL_ADC_IsDeepPowerDownEnabled>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff4d 	bl	8002424 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff82 	bl	8002498 <LL_ADC_IsInternalRegulatorEnabled>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d115      	bne.n	80025c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff66 	bl	8002470 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025a4:	4b9f      	ldr	r3, [pc, #636]	; (8002824 <HAL_ADC_Init+0x2f0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	099b      	lsrs	r3, r3, #6
 80025aa:	4a9f      	ldr	r2, [pc, #636]	; (8002828 <HAL_ADC_Init+0x2f4>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	099b      	lsrs	r3, r3, #6
 80025b2:	3301      	adds	r3, #1
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025b8:	e002      	b.n	80025c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	3b01      	subs	r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f9      	bne.n	80025ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ff64 	bl	8002498 <LL_ADC_IsInternalRegulatorEnabled>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10d      	bne.n	80025f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	f043 0210 	orr.w	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e6:	f043 0201 	orr.w	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff ff75 	bl	80024e6 <LL_ADC_REG_IsConversionOngoing>
 80025fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	f040 8148 	bne.w	800289c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 8144 	bne.w	800289c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800261c:	f043 0202 	orr.w	r2, r3, #2
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff49 	bl	80024c0 <LL_ADC_IsEnabled>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d141      	bne.n	80026b8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800263c:	d004      	beq.n	8002648 <HAL_ADC_Init+0x114>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a7a      	ldr	r2, [pc, #488]	; (800282c <HAL_ADC_Init+0x2f8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d10f      	bne.n	8002668 <HAL_ADC_Init+0x134>
 8002648:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800264c:	f7ff ff38 	bl	80024c0 <LL_ADC_IsEnabled>
 8002650:	4604      	mov	r4, r0
 8002652:	4876      	ldr	r0, [pc, #472]	; (800282c <HAL_ADC_Init+0x2f8>)
 8002654:	f7ff ff34 	bl	80024c0 <LL_ADC_IsEnabled>
 8002658:	4603      	mov	r3, r0
 800265a:	4323      	orrs	r3, r4
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e012      	b.n	800268e <HAL_ADC_Init+0x15a>
 8002668:	4871      	ldr	r0, [pc, #452]	; (8002830 <HAL_ADC_Init+0x2fc>)
 800266a:	f7ff ff29 	bl	80024c0 <LL_ADC_IsEnabled>
 800266e:	4604      	mov	r4, r0
 8002670:	4870      	ldr	r0, [pc, #448]	; (8002834 <HAL_ADC_Init+0x300>)
 8002672:	f7ff ff25 	bl	80024c0 <LL_ADC_IsEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	431c      	orrs	r4, r3
 800267a:	486f      	ldr	r0, [pc, #444]	; (8002838 <HAL_ADC_Init+0x304>)
 800267c:	f7ff ff20 	bl	80024c0 <LL_ADC_IsEnabled>
 8002680:	4603      	mov	r3, r0
 8002682:	4323      	orrs	r3, r4
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf0c      	ite	eq
 8002688:	2301      	moveq	r3, #1
 800268a:	2300      	movne	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d012      	beq.n	80026b8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269a:	d004      	beq.n	80026a6 <HAL_ADC_Init+0x172>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a62      	ldr	r2, [pc, #392]	; (800282c <HAL_ADC_Init+0x2f8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_Init+0x176>
 80026a6:	4a65      	ldr	r2, [pc, #404]	; (800283c <HAL_ADC_Init+0x308>)
 80026a8:	e000      	b.n	80026ac <HAL_ADC_Init+0x178>
 80026aa:	4a65      	ldr	r2, [pc, #404]	; (8002840 <HAL_ADC_Init+0x30c>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f7ff fd64 	bl	8002180 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7f5b      	ldrb	r3, [r3, #29]
 80026bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d106      	bne.n	80026f4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	3b01      	subs	r3, #1
 80026ec:	045b      	lsls	r3, r3, #17
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d009      	beq.n	8002710 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	4b4b      	ldr	r3, [pc, #300]	; (8002844 <HAL_ADC_Init+0x310>)
 8002718:	4013      	ands	r3, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	69b9      	ldr	r1, [r7, #24]
 8002720:	430b      	orrs	r3, r1
 8002722:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fed1 	bl	80024e6 <LL_ADC_REG_IsConversionOngoing>
 8002744:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fede 	bl	800250c <LL_ADC_INJ_IsConversionOngoing>
 8002750:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d17f      	bne.n	8002858 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d17c      	bne.n	8002858 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002762:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800276a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800277a:	f023 0302 	bic.w	r3, r3, #2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	430b      	orrs	r3, r1
 8002786:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d017      	beq.n	80027c0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800279e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6911      	ldr	r1, [r2, #16]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80027be:	e013      	b.n	80027e8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d12a      	bne.n	8002848 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027fc:	f023 0304 	bic.w	r3, r3, #4
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002808:	4311      	orrs	r1, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800280e:	4311      	orrs	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002814:	430a      	orrs	r2, r1
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	611a      	str	r2, [r3, #16]
 8002822:	e019      	b.n	8002858 <HAL_ADC_Init+0x324>
 8002824:	20000000 	.word	0x20000000
 8002828:	053e2d63 	.word	0x053e2d63
 800282c:	50000100 	.word	0x50000100
 8002830:	50000400 	.word	0x50000400
 8002834:	50000500 	.word	0x50000500
 8002838:	50000600 	.word	0x50000600
 800283c:	50000300 	.word	0x50000300
 8002840:	50000700 	.word	0x50000700
 8002844:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d10c      	bne.n	800287a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f023 010f 	bic.w	r1, r3, #15
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	1e5a      	subs	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
 8002878:	e007      	b.n	800288a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 020f 	bic.w	r2, r2, #15
 8002888:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	f023 0303 	bic.w	r3, r3, #3
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	65da      	str	r2, [r3, #92]	; 0x5c
 800289a:	e007      	b.n	80028ac <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	f043 0210 	orr.w	r2, r3, #16
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	; 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd90      	pop	{r4, r7, pc}
 80028b6:	bf00      	nop

080028b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b0b6      	sub	sp, #216	; 0xd8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d102      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x24>
 80028d6:	2302      	movs	r3, #2
 80028d8:	f000 bc13 	b.w	8003102 <HAL_ADC_ConfigChannel+0x84a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fdfc 	bl	80024e6 <LL_ADC_REG_IsConversionOngoing>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f040 83f3 	bne.w	80030dc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	f7ff fd0e 	bl	8002324 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fdea 	bl	80024e6 <LL_ADC_REG_IsConversionOngoing>
 8002912:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fdf6 	bl	800250c <LL_ADC_INJ_IsConversionOngoing>
 8002920:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002924:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002928:	2b00      	cmp	r3, #0
 800292a:	f040 81d9 	bne.w	8002ce0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800292e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002932:	2b00      	cmp	r3, #0
 8002934:	f040 81d4 	bne.w	8002ce0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002940:	d10f      	bne.n	8002962 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2200      	movs	r2, #0
 800294c:	4619      	mov	r1, r3
 800294e:	f7ff fd15 	bl	800237c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fccf 	bl	80022fe <LL_ADC_SetSamplingTimeCommonConfig>
 8002960:	e00e      	b.n	8002980 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	461a      	mov	r2, r3
 8002970:	f7ff fd04 	bl	800237c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fcbf 	bl	80022fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	08db      	lsrs	r3, r3, #3
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d022      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6919      	ldr	r1, [r3, #16]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029b2:	f7ff fc19 	bl	80021e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6919      	ldr	r1, [r3, #16]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f7ff fc65 	bl	8002292 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6919      	ldr	r1, [r3, #16]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	7f1b      	ldrb	r3, [r3, #28]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d102      	bne.n	80029de <HAL_ADC_ConfigChannel+0x126>
 80029d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029dc:	e000      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x128>
 80029de:	2300      	movs	r3, #0
 80029e0:	461a      	mov	r2, r3
 80029e2:	f7ff fc71 	bl	80022c8 <LL_ADC_SetOffsetSaturation>
 80029e6:	e17b      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fc1e 	bl	8002230 <LL_ADC_GetOffsetChannel>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10a      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x15c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fc13 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 021f 	and.w	r2, r3, #31
 8002a12:	e01e      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x19a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fc08 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002a42:	2320      	movs	r3, #32
 8002a44:	e004      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d105      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x1b2>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	0e9b      	lsrs	r3, r3, #26
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	e018      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x1e4>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e004      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002a92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d106      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fbd7 	bl	800225c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fbbb 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x222>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2101      	movs	r1, #1
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fbb0 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	0e9b      	lsrs	r3, r3, #26
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	e01e      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x260>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2101      	movs	r1, #1
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fba5 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002af8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002b08:	2320      	movs	r3, #32
 8002b0a:	e004      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002b0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x278>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	e018      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x2aa>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002b54:	2320      	movs	r3, #32
 8002b56:	e004      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d106      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fb74 	bl	800225c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2102      	movs	r1, #2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fb58 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x2e8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2102      	movs	r1, #2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fb4d 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002b96:	4603      	mov	r3, r0
 8002b98:	0e9b      	lsrs	r3, r3, #26
 8002b9a:	f003 021f 	and.w	r2, r3, #31
 8002b9e:	e01e      	b.n	8002bde <HAL_ADC_ConfigChannel+0x326>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fb42 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002bbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002bc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002bce:	2320      	movs	r3, #32
 8002bd0:	e004      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002bd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x33e>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0e9b      	lsrs	r3, r3, #26
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	e016      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x36c>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002c16:	2320      	movs	r3, #32
 8002c18:	e004      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002c1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d106      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2102      	movs	r1, #2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fb13 	bl	800225c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2103      	movs	r1, #3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff faf7 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x3aa>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2103      	movs	r1, #3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff faec 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	0e9b      	lsrs	r3, r3, #26
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	e017      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x3da>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2103      	movs	r1, #3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fae1 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c7c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002c84:	2320      	movs	r3, #32
 8002c86:	e003      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d105      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x3f2>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0e9b      	lsrs	r3, r3, #26
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	e011      	b.n	8002cce <HAL_ADC_ConfigChannel+0x416>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002cc2:	2320      	movs	r3, #32
 8002cc4:	e003      	b.n	8002cce <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc8:	fab3 f383 	clz	r3, r3
 8002ccc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d106      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2103      	movs	r1, #3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fabe 	bl	800225c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fbeb 	bl	80024c0 <LL_ADC_IsEnabled>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f040 813d 	bne.w	8002f6c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6819      	ldr	r1, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f7ff fb68 	bl	80023d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4aa2      	ldr	r2, [pc, #648]	; (8002f94 <HAL_ADC_ConfigChannel+0x6dc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	f040 812e 	bne.w	8002f6c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10b      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x480>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	0e9b      	lsrs	r3, r3, #26
 8002d26:	3301      	adds	r3, #1
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	2b09      	cmp	r3, #9
 8002d2e:	bf94      	ite	ls
 8002d30:	2301      	movls	r3, #1
 8002d32:	2300      	movhi	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e019      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x4b4>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d48:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002d50:	2320      	movs	r3, #32
 8002d52:	e003      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	2b09      	cmp	r3, #9
 8002d64:	bf94      	ite	ls
 8002d66:	2301      	movls	r3, #1
 8002d68:	2300      	movhi	r3, #0
 8002d6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d079      	beq.n	8002e64 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d107      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x4d4>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	3301      	adds	r3, #1
 8002d84:	069b      	lsls	r3, r3, #26
 8002d86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d8a:	e015      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x500>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002da4:	2320      	movs	r3, #32
 8002da6:	e003      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	069b      	lsls	r3, r3, #26
 8002db4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x520>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0e9b      	lsrs	r3, r3, #26
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	e017      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x550>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002df0:	2320      	movs	r3, #32
 8002df2:	e003      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	ea42 0103 	orr.w	r1, r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10a      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x576>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	0e9b      	lsrs	r3, r3, #26
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	051b      	lsls	r3, r3, #20
 8002e2c:	e018      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x5a8>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002e46:	2320      	movs	r3, #32
 8002e48:	e003      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4c:	fab3 f383 	clz	r3, r3
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	3301      	adds	r3, #1
 8002e54:	f003 021f 	and.w	r2, r3, #31
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e60:	430b      	orrs	r3, r1
 8002e62:	e07e      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d107      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x5c8>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0e9b      	lsrs	r3, r3, #26
 8002e76:	3301      	adds	r3, #1
 8002e78:	069b      	lsls	r3, r3, #26
 8002e7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e7e:	e015      	b.n	8002eac <HAL_ADC_ConfigChannel+0x5f4>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002e98:	2320      	movs	r3, #32
 8002e9a:	e003      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	069b      	lsls	r3, r3, #26
 8002ea8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x614>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0e9b      	lsrs	r3, r3, #26
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	e017      	b.n	8002efc <HAL_ADC_ConfigChannel+0x644>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	61fb      	str	r3, [r7, #28]
  return result;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	e003      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8002efc:	ea42 0103 	orr.w	r1, r2, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10d      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x670>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	0e9b      	lsrs	r3, r3, #26
 8002f12:	3301      	adds	r3, #1
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	4613      	mov	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3b1e      	subs	r3, #30
 8002f20:	051b      	lsls	r3, r3, #20
 8002f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f26:	e01b      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x6a8>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	613b      	str	r3, [r7, #16]
  return result;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002f40:	2320      	movs	r3, #32
 8002f42:	e003      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f003 021f 	and.w	r2, r3, #31
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	3b1e      	subs	r3, #30
 8002f5a:	051b      	lsls	r3, r3, #20
 8002f5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f60:	430b      	orrs	r3, r1
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	6892      	ldr	r2, [r2, #8]
 8002f66:	4619      	mov	r1, r3
 8002f68:	f7ff fa08 	bl	800237c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_ADC_ConfigChannel+0x6e0>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80be 	beq.w	80030f6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f82:	d004      	beq.n	8002f8e <HAL_ADC_ConfigChannel+0x6d6>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <HAL_ADC_ConfigChannel+0x6e4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x6ec>
 8002f8e:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <HAL_ADC_ConfigChannel+0x6e8>)
 8002f90:	e009      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x6ee>
 8002f92:	bf00      	nop
 8002f94:	407f0000 	.word	0x407f0000
 8002f98:	80080000 	.word	0x80080000
 8002f9c:	50000100 	.word	0x50000100
 8002fa0:	50000300 	.word	0x50000300
 8002fa4:	4b59      	ldr	r3, [pc, #356]	; (800310c <HAL_ADC_ConfigChannel+0x854>)
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff f910 	bl	80021cc <LL_ADC_GetCommonPathInternalCh>
 8002fac:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a56      	ldr	r2, [pc, #344]	; (8003110 <HAL_ADC_ConfigChannel+0x858>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_ADC_ConfigChannel+0x70c>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a55      	ldr	r2, [pc, #340]	; (8003114 <HAL_ADC_ConfigChannel+0x85c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d13a      	bne.n	800303a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d134      	bne.n	800303a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd8:	d005      	beq.n	8002fe6 <HAL_ADC_ConfigChannel+0x72e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a4e      	ldr	r2, [pc, #312]	; (8003118 <HAL_ADC_ConfigChannel+0x860>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	f040 8085 	bne.w	80030f0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fee:	d004      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x742>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a49      	ldr	r2, [pc, #292]	; (800311c <HAL_ADC_ConfigChannel+0x864>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x746>
 8002ffa:	4a49      	ldr	r2, [pc, #292]	; (8003120 <HAL_ADC_ConfigChannel+0x868>)
 8002ffc:	e000      	b.n	8003000 <HAL_ADC_ConfigChannel+0x748>
 8002ffe:	4a43      	ldr	r2, [pc, #268]	; (800310c <HAL_ADC_ConfigChannel+0x854>)
 8003000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003004:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7ff f8cb 	bl	80021a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003010:	4b44      	ldr	r3, [pc, #272]	; (8003124 <HAL_ADC_ConfigChannel+0x86c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	099b      	lsrs	r3, r3, #6
 8003016:	4a44      	ldr	r2, [pc, #272]	; (8003128 <HAL_ADC_ConfigChannel+0x870>)
 8003018:	fba2 2303 	umull	r2, r3, r2, r3
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800302a:	e002      	b.n	8003032 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3b01      	subs	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f9      	bne.n	800302c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003038:	e05a      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a3b      	ldr	r2, [pc, #236]	; (800312c <HAL_ADC_ConfigChannel+0x874>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d125      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x7d8>
 8003044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d11f      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a31      	ldr	r2, [pc, #196]	; (800311c <HAL_ADC_ConfigChannel+0x864>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d104      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x7ac>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a34      	ldr	r2, [pc, #208]	; (8003130 <HAL_ADC_ConfigChannel+0x878>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d047      	beq.n	80030f4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800306c:	d004      	beq.n	8003078 <HAL_ADC_ConfigChannel+0x7c0>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a2a      	ldr	r2, [pc, #168]	; (800311c <HAL_ADC_ConfigChannel+0x864>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x7c4>
 8003078:	4a29      	ldr	r2, [pc, #164]	; (8003120 <HAL_ADC_ConfigChannel+0x868>)
 800307a:	e000      	b.n	800307e <HAL_ADC_ConfigChannel+0x7c6>
 800307c:	4a23      	ldr	r2, [pc, #140]	; (800310c <HAL_ADC_ConfigChannel+0x854>)
 800307e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003086:	4619      	mov	r1, r3
 8003088:	4610      	mov	r0, r2
 800308a:	f7ff f88c 	bl	80021a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800308e:	e031      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a27      	ldr	r2, [pc, #156]	; (8003134 <HAL_ADC_ConfigChannel+0x87c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d12d      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800309a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800309e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d127      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1c      	ldr	r2, [pc, #112]	; (800311c <HAL_ADC_ConfigChannel+0x864>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d022      	beq.n	80030f6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030b8:	d004      	beq.n	80030c4 <HAL_ADC_ConfigChannel+0x80c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a17      	ldr	r2, [pc, #92]	; (800311c <HAL_ADC_ConfigChannel+0x864>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x810>
 80030c4:	4a16      	ldr	r2, [pc, #88]	; (8003120 <HAL_ADC_ConfigChannel+0x868>)
 80030c6:	e000      	b.n	80030ca <HAL_ADC_ConfigChannel+0x812>
 80030c8:	4a10      	ldr	r2, [pc, #64]	; (800310c <HAL_ADC_ConfigChannel+0x854>)
 80030ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f7ff f866 	bl	80021a6 <LL_ADC_SetCommonPathInternalCh>
 80030da:	e00c      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80030ee:	e002      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030f0:	bf00      	nop
 80030f2:	e000      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80030fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003102:	4618      	mov	r0, r3
 8003104:	37d8      	adds	r7, #216	; 0xd8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	50000700 	.word	0x50000700
 8003110:	c3210000 	.word	0xc3210000
 8003114:	90c00010 	.word	0x90c00010
 8003118:	50000600 	.word	0x50000600
 800311c:	50000100 	.word	0x50000100
 8003120:	50000300 	.word	0x50000300
 8003124:	20000000 	.word	0x20000000
 8003128:	053e2d63 	.word	0x053e2d63
 800312c:	c7520000 	.word	0xc7520000
 8003130:	50000500 	.word	0x50000500
 8003134:	cb840000 	.word	0xcb840000

08003138 <LL_ADC_IsEnabled>:
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <LL_ADC_IsEnabled+0x18>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <LL_ADC_IsEnabled+0x1a>
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <LL_ADC_REG_IsConversionOngoing>:
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b04      	cmp	r3, #4
 8003170:	d101      	bne.n	8003176 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b0a1      	sub	sp, #132	; 0x84
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800319e:	2302      	movs	r3, #2
 80031a0:	e0e7      	b.n	8003372 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80031aa:	2300      	movs	r3, #0
 80031ac:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80031ae:	2300      	movs	r3, #0
 80031b0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ba:	d102      	bne.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031bc:	4b6f      	ldr	r3, [pc, #444]	; (800337c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	e009      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6e      	ldr	r2, [pc, #440]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d102      	bne.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80031cc:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	e001      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	f043 0220 	orr.w	r2, r3, #32
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0be      	b.n	8003372 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ffb1 	bl	800315e <LL_ADC_REG_IsConversionOngoing>
 80031fc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ffab 	bl	800315e <LL_ADC_REG_IsConversionOngoing>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 80a0 	bne.w	8003350 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 809c 	bne.w	8003350 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003220:	d004      	beq.n	800322c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a55      	ldr	r2, [pc, #340]	; (800337c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d101      	bne.n	8003230 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800322c:	4b56      	ldr	r3, [pc, #344]	; (8003388 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800322e:	e000      	b.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003230:	4b56      	ldr	r3, [pc, #344]	; (800338c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003232:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d04b      	beq.n	80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800323c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800324e:	035b      	lsls	r3, r3, #13
 8003250:	430b      	orrs	r3, r1
 8003252:	431a      	orrs	r2, r3
 8003254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003256:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003260:	d004      	beq.n	800326c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a45      	ldr	r2, [pc, #276]	; (800337c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d10f      	bne.n	800328c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800326c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003270:	f7ff ff62 	bl	8003138 <LL_ADC_IsEnabled>
 8003274:	4604      	mov	r4, r0
 8003276:	4841      	ldr	r0, [pc, #260]	; (800337c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003278:	f7ff ff5e 	bl	8003138 <LL_ADC_IsEnabled>
 800327c:	4603      	mov	r3, r0
 800327e:	4323      	orrs	r3, r4
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e012      	b.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800328c:	483c      	ldr	r0, [pc, #240]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800328e:	f7ff ff53 	bl	8003138 <LL_ADC_IsEnabled>
 8003292:	4604      	mov	r4, r0
 8003294:	483b      	ldr	r0, [pc, #236]	; (8003384 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003296:	f7ff ff4f 	bl	8003138 <LL_ADC_IsEnabled>
 800329a:	4603      	mov	r3, r0
 800329c:	431c      	orrs	r4, r3
 800329e:	483c      	ldr	r0, [pc, #240]	; (8003390 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80032a0:	f7ff ff4a 	bl	8003138 <LL_ADC_IsEnabled>
 80032a4:	4603      	mov	r3, r0
 80032a6:	4323      	orrs	r3, r4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf0c      	ite	eq
 80032ac:	2301      	moveq	r3, #1
 80032ae:	2300      	movne	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d056      	beq.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032be:	f023 030f 	bic.w	r3, r3, #15
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	6811      	ldr	r1, [r2, #0]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	6892      	ldr	r2, [r2, #8]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	431a      	orrs	r2, r3
 80032ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d2:	e047      	b.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032e8:	d004      	beq.n	80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a23      	ldr	r2, [pc, #140]	; (800337c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d10f      	bne.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80032f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032f8:	f7ff ff1e 	bl	8003138 <LL_ADC_IsEnabled>
 80032fc:	4604      	mov	r4, r0
 80032fe:	481f      	ldr	r0, [pc, #124]	; (800337c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003300:	f7ff ff1a 	bl	8003138 <LL_ADC_IsEnabled>
 8003304:	4603      	mov	r3, r0
 8003306:	4323      	orrs	r3, r4
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf0c      	ite	eq
 800330c:	2301      	moveq	r3, #1
 800330e:	2300      	movne	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e012      	b.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003314:	481a      	ldr	r0, [pc, #104]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003316:	f7ff ff0f 	bl	8003138 <LL_ADC_IsEnabled>
 800331a:	4604      	mov	r4, r0
 800331c:	4819      	ldr	r0, [pc, #100]	; (8003384 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800331e:	f7ff ff0b 	bl	8003138 <LL_ADC_IsEnabled>
 8003322:	4603      	mov	r3, r0
 8003324:	431c      	orrs	r4, r3
 8003326:	481a      	ldr	r0, [pc, #104]	; (8003390 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003328:	f7ff ff06 	bl	8003138 <LL_ADC_IsEnabled>
 800332c:	4603      	mov	r3, r0
 800332e:	4323      	orrs	r3, r4
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf0c      	ite	eq
 8003334:	2301      	moveq	r3, #1
 8003336:	2300      	movne	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d012      	beq.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800333e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003346:	f023 030f 	bic.w	r3, r3, #15
 800334a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800334c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800334e:	e009      	b.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003362:	e000      	b.n	8003366 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003364:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800336e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003372:	4618      	mov	r0, r3
 8003374:	3784      	adds	r7, #132	; 0x84
 8003376:	46bd      	mov	sp, r7
 8003378:	bd90      	pop	{r4, r7, pc}
 800337a:	bf00      	nop
 800337c:	50000100 	.word	0x50000100
 8003380:	50000400 	.word	0x50000400
 8003384:	50000500 	.word	0x50000500
 8003388:	50000300 	.word	0x50000300
 800338c:	50000700 	.word	0x50000700
 8003390:	50000600 	.word	0x50000600

08003394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c6:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	60d3      	str	r3, [r2, #12]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <__NVIC_GetPriorityGrouping+0x18>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 0307 	and.w	r3, r3, #7
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db0b      	blt.n	8003422 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4907      	ldr	r1, [pc, #28]	; (8003430 <__NVIC_EnableIRQ+0x38>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2001      	movs	r0, #1
 800341a:	fa00 f202 	lsl.w	r2, r0, r2
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000e100 	.word	0xe000e100

08003434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	2b00      	cmp	r3, #0
 8003446:	db0a      	blt.n	800345e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	490c      	ldr	r1, [pc, #48]	; (8003480 <__NVIC_SetPriority+0x4c>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	440b      	add	r3, r1
 8003458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800345c:	e00a      	b.n	8003474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4908      	ldr	r1, [pc, #32]	; (8003484 <__NVIC_SetPriority+0x50>)
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	3b04      	subs	r3, #4
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	440b      	add	r3, r1
 8003472:	761a      	strb	r2, [r3, #24]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000e100 	.word	0xe000e100
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f1c3 0307 	rsb	r3, r3, #7
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf28      	it	cs
 80034a6:	2304      	movcs	r3, #4
 80034a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d902      	bls.n	80034b8 <NVIC_EncodePriority+0x30>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3b03      	subs	r3, #3
 80034b6:	e000      	b.n	80034ba <NVIC_EncodePriority+0x32>
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	f04f 32ff 	mov.w	r2, #4294967295
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	401a      	ands	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d0:	f04f 31ff 	mov.w	r1, #4294967295
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43d9      	mvns	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	4313      	orrs	r3, r2
         );
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ff4c 	bl	8003394 <__NVIC_SetPriorityGrouping>
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003512:	f7ff ff63 	bl	80033dc <__NVIC_GetPriorityGrouping>
 8003516:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	6978      	ldr	r0, [r7, #20]
 800351e:	f7ff ffb3 	bl	8003488 <NVIC_EncodePriority>
 8003522:	4602      	mov	r2, r0
 8003524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003528:	4611      	mov	r1, r2
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff82 	bl	8003434 <__NVIC_SetPriority>
}
 8003530:	bf00      	nop
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ff56 	bl	80033f8 <__NVIC_EnableIRQ>
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d005      	beq.n	8003578 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2204      	movs	r2, #4
 8003570:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
 8003576:	e037      	b.n	80035e8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 020e 	bic.w	r2, r2, #14
 8003586:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003596:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	f003 021f 	and.w	r2, r3, #31
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	2101      	movs	r1, #1
 80035b6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ba:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035c4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00c      	beq.n	80035e8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035dc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035e6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d00d      	beq.n	800363a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2204      	movs	r2, #4
 8003622:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	e047      	b.n	80036ca <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 020e 	bic.w	r2, r2, #14
 8003648:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003668:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f003 021f 	and.w	r2, r3, #31
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2101      	movs	r1, #1
 8003678:	fa01 f202 	lsl.w	r2, r1, r2
 800367c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003686:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00c      	beq.n	80036aa <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800369e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	4798      	blx	r3
    }
  }
  return status;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80036e2:	e15a      	b.n	800399a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	fa01 f303 	lsl.w	r3, r1, r3
 80036f0:	4013      	ands	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 814c 	beq.w	8003994 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d005      	beq.n	8003714 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003710:	2b02      	cmp	r3, #2
 8003712:	d130      	bne.n	8003776 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	2203      	movs	r2, #3
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800374a:	2201      	movs	r2, #1
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 0201 	and.w	r2, r3, #1
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	2b03      	cmp	r3, #3
 8003780:	d017      	beq.n	80037b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	2203      	movs	r2, #3
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d123      	bne.n	8003806 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	08da      	lsrs	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3208      	adds	r2, #8
 80037c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	220f      	movs	r2, #15
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	08da      	lsrs	r2, r3, #3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3208      	adds	r2, #8
 8003800:	6939      	ldr	r1, [r7, #16]
 8003802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	2203      	movs	r2, #3
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 0203 	and.w	r2, r3, #3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80a6 	beq.w	8003994 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003848:	4b5b      	ldr	r3, [pc, #364]	; (80039b8 <HAL_GPIO_Init+0x2e4>)
 800384a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384c:	4a5a      	ldr	r2, [pc, #360]	; (80039b8 <HAL_GPIO_Init+0x2e4>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	6613      	str	r3, [r2, #96]	; 0x60
 8003854:	4b58      	ldr	r3, [pc, #352]	; (80039b8 <HAL_GPIO_Init+0x2e4>)
 8003856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003860:	4a56      	ldr	r2, [pc, #344]	; (80039bc <HAL_GPIO_Init+0x2e8>)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	089b      	lsrs	r3, r3, #2
 8003866:	3302      	adds	r3, #2
 8003868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	220f      	movs	r2, #15
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800388a:	d01f      	beq.n	80038cc <HAL_GPIO_Init+0x1f8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a4c      	ldr	r2, [pc, #304]	; (80039c0 <HAL_GPIO_Init+0x2ec>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d019      	beq.n	80038c8 <HAL_GPIO_Init+0x1f4>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a4b      	ldr	r2, [pc, #300]	; (80039c4 <HAL_GPIO_Init+0x2f0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <HAL_GPIO_Init+0x1f0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a4a      	ldr	r2, [pc, #296]	; (80039c8 <HAL_GPIO_Init+0x2f4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00d      	beq.n	80038c0 <HAL_GPIO_Init+0x1ec>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a49      	ldr	r2, [pc, #292]	; (80039cc <HAL_GPIO_Init+0x2f8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d007      	beq.n	80038bc <HAL_GPIO_Init+0x1e8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a48      	ldr	r2, [pc, #288]	; (80039d0 <HAL_GPIO_Init+0x2fc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <HAL_GPIO_Init+0x1e4>
 80038b4:	2305      	movs	r3, #5
 80038b6:	e00a      	b.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038b8:	2306      	movs	r3, #6
 80038ba:	e008      	b.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038bc:	2304      	movs	r3, #4
 80038be:	e006      	b.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038c0:	2303      	movs	r3, #3
 80038c2:	e004      	b.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e002      	b.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038cc:	2300      	movs	r3, #0
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	f002 0203 	and.w	r2, r2, #3
 80038d4:	0092      	lsls	r2, r2, #2
 80038d6:	4093      	lsls	r3, r2
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038de:	4937      	ldr	r1, [pc, #220]	; (80039bc <HAL_GPIO_Init+0x2e8>)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	089b      	lsrs	r3, r3, #2
 80038e4:	3302      	adds	r3, #2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038ec:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <HAL_GPIO_Init+0x300>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003910:	4a30      	ldr	r2, [pc, #192]	; (80039d4 <HAL_GPIO_Init+0x300>)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003916:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <HAL_GPIO_Init+0x300>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	43db      	mvns	r3, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4013      	ands	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800393a:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <HAL_GPIO_Init+0x300>)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003940:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_GPIO_Init+0x300>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	43db      	mvns	r3, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003964:	4a1b      	ldr	r2, [pc, #108]	; (80039d4 <HAL_GPIO_Init+0x300>)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800396a:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <HAL_GPIO_Init+0x300>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	43db      	mvns	r3, r3
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800398e:	4a11      	ldr	r2, [pc, #68]	; (80039d4 <HAL_GPIO_Init+0x300>)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3301      	adds	r3, #1
 8003998:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f47f ae9d 	bne.w	80036e4 <HAL_GPIO_Init+0x10>
  }
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40010000 	.word	0x40010000
 80039c0:	48000400 	.word	0x48000400
 80039c4:	48000800 	.word	0x48000800
 80039c8:	48000c00 	.word	0x48000c00
 80039cc:	48001000 	.word	0x48001000
 80039d0:	48001400 	.word	0x48001400
 80039d4:	40010400 	.word	0x40010400

080039d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
 80039e4:	4613      	mov	r3, r2
 80039e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039e8:	787b      	ldrb	r3, [r7, #1]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039f4:	e002      	b.n	80039fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039f6:	887a      	ldrh	r2, [r7, #2]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d006      	beq.n	8003a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a1e:	4a05      	ldr	r2, [pc, #20]	; (8003a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f806 	bl	8003a38 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40010400 	.word	0x40010400

08003a38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d141      	bne.n	8003ae2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a5e:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6a:	d131      	bne.n	8003ad0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a6c:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a72:	4a46      	ldr	r2, [pc, #280]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a7c:	4b43      	ldr	r3, [pc, #268]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a84:	4a41      	ldr	r2, [pc, #260]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a8c:	4b40      	ldr	r3, [pc, #256]	; (8003b90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2232      	movs	r2, #50	; 0x32
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	4a3f      	ldr	r2, [pc, #252]	; (8003b94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	0c9b      	lsrs	r3, r3, #18
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aa2:	e002      	b.n	8003aaa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aaa:	4b38      	ldr	r3, [pc, #224]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab6:	d102      	bne.n	8003abe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f2      	bne.n	8003aa4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003abe:	4b33      	ldr	r3, [pc, #204]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aca:	d158      	bne.n	8003b7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e057      	b.n	8003b80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ad0:	4b2e      	ldr	r3, [pc, #184]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ad6:	4a2d      	ldr	r2, [pc, #180]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003adc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ae0:	e04d      	b.n	8003b7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae8:	d141      	bne.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aea:	4b28      	ldr	r3, [pc, #160]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af6:	d131      	bne.n	8003b5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003afe:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b08:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b10:	4a1e      	ldr	r2, [pc, #120]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b18:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2232      	movs	r2, #50	; 0x32
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	0c9b      	lsrs	r3, r3, #18
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b2e:	e002      	b.n	8003b36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b36:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b42:	d102      	bne.n	8003b4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f2      	bne.n	8003b30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b56:	d112      	bne.n	8003b7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e011      	b.n	8003b80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b62:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b6c:	e007      	b.n	8003b7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b6e:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b76:	4a05      	ldr	r2, [pc, #20]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	40007000 	.word	0x40007000
 8003b90:	20000000 	.word	0x20000000
 8003b94:	431bde83 	.word	0x431bde83

08003b98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba6:	6093      	str	r3, [r2, #8]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40007000 	.word	0x40007000

08003bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e306      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d075      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd6:	4b97      	ldr	r3, [pc, #604]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003be0:	4b94      	ldr	r3, [pc, #592]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	d102      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x3e>
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d002      	beq.n	8003bfc <HAL_RCC_OscConfig+0x44>
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d10b      	bne.n	8003c14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	4b8d      	ldr	r3, [pc, #564]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d05b      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x108>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d157      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e2e1      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1c:	d106      	bne.n	8003c2c <HAL_RCC_OscConfig+0x74>
 8003c1e:	4b85      	ldr	r3, [pc, #532]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a84      	ldr	r2, [pc, #528]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e01d      	b.n	8003c68 <HAL_RCC_OscConfig+0xb0>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x98>
 8003c36:	4b7f      	ldr	r3, [pc, #508]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a7e      	ldr	r2, [pc, #504]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b7c      	ldr	r3, [pc, #496]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a7b      	ldr	r2, [pc, #492]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e00b      	b.n	8003c68 <HAL_RCC_OscConfig+0xb0>
 8003c50:	4b78      	ldr	r3, [pc, #480]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a77      	ldr	r2, [pc, #476]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	4b75      	ldr	r3, [pc, #468]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a74      	ldr	r2, [pc, #464]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d013      	beq.n	8003c98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe fa7a 	bl	8002168 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fe fa76 	bl	8002168 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e2a6      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c8a:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0xc0>
 8003c96:	e014      	b.n	8003cc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fe fa66 	bl	8002168 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca0:	f7fe fa62 	bl	8002168 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	; 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e292      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cb2:	4b60      	ldr	r3, [pc, #384]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xe8>
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d075      	beq.n	8003dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cce:	4b59      	ldr	r3, [pc, #356]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd8:	4b56      	ldr	r3, [pc, #344]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	d102      	bne.n	8003cee <HAL_RCC_OscConfig+0x136>
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d002      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x13c>
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d11f      	bne.n	8003d34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf4:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_OscConfig+0x154>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e265      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0c:	4b49      	ldr	r3, [pc, #292]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	4946      	ldr	r1, [pc, #280]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d20:	4b45      	ldr	r3, [pc, #276]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fd fb27 	bl	8001378 <HAL_InitTick>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d043      	beq.n	8003db8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e251      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d023      	beq.n	8003d84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d3c:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3c      	ldr	r2, [pc, #240]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fe fa0e 	bl	8002168 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d50:	f7fe fa0a 	bl	8002168 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e23a      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d62:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6e:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	061b      	lsls	r3, r3, #24
 8003d7c:	492d      	ldr	r1, [pc, #180]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]
 8003d82:	e01a      	b.n	8003dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d84:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2a      	ldr	r2, [pc, #168]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003d8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe f9ea 	bl	8002168 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d98:	f7fe f9e6 	bl	8002168 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e216      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003daa:	4b22      	ldr	r3, [pc, #136]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x1e0>
 8003db6:	e000      	b.n	8003dba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003db8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d041      	beq.n	8003e4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01c      	beq.n	8003e08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dce:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd4:	4a17      	ldr	r2, [pc, #92]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fe f9c3 	bl	8002168 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de6:	f7fe f9bf 	bl	8002168 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e1ef      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0ef      	beq.n	8003de6 <HAL_RCC_OscConfig+0x22e>
 8003e06:	e020      	b.n	8003e4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e18:	f7fe f9a6 	bl	8002168 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e1e:	e00d      	b.n	8003e3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e20:	f7fe f9a2 	bl	8002168 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d906      	bls.n	8003e3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e1d2      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
 8003e38:	20000210 	.word	0x20000210
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e3c:	4b8c      	ldr	r3, [pc, #560]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1ea      	bne.n	8003e20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80a6 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e5c:	4b84      	ldr	r3, [pc, #528]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_OscConfig+0x2b4>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <HAL_RCC_OscConfig+0x2b6>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e72:	4b7f      	ldr	r3, [pc, #508]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	4a7e      	ldr	r2, [pc, #504]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e7e:	4b7c      	ldr	r3, [pc, #496]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e8e:	4b79      	ldr	r3, [pc, #484]	; (8004074 <HAL_RCC_OscConfig+0x4bc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d118      	bne.n	8003ecc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e9a:	4b76      	ldr	r3, [pc, #472]	; (8004074 <HAL_RCC_OscConfig+0x4bc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a75      	ldr	r2, [pc, #468]	; (8004074 <HAL_RCC_OscConfig+0x4bc>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea6:	f7fe f95f 	bl	8002168 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eae:	f7fe f95b 	bl	8002168 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e18b      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec0:	4b6c      	ldr	r3, [pc, #432]	; (8004074 <HAL_RCC_OscConfig+0x4bc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d108      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x32e>
 8003ed4:	4b66      	ldr	r3, [pc, #408]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	4a65      	ldr	r2, [pc, #404]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ee4:	e024      	b.n	8003f30 <HAL_RCC_OscConfig+0x378>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b05      	cmp	r3, #5
 8003eec:	d110      	bne.n	8003f10 <HAL_RCC_OscConfig+0x358>
 8003eee:	4b60      	ldr	r3, [pc, #384]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	4a5e      	ldr	r2, [pc, #376]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003ef6:	f043 0304 	orr.w	r3, r3, #4
 8003efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003efe:	4b5c      	ldr	r3, [pc, #368]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	4a5a      	ldr	r2, [pc, #360]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f0e:	e00f      	b.n	8003f30 <HAL_RCC_OscConfig+0x378>
 8003f10:	4b57      	ldr	r3, [pc, #348]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	4a56      	ldr	r2, [pc, #344]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f20:	4b53      	ldr	r3, [pc, #332]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f26:	4a52      	ldr	r2, [pc, #328]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003f28:	f023 0304 	bic.w	r3, r3, #4
 8003f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d016      	beq.n	8003f66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7fe f916 	bl	8002168 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f40:	f7fe f912 	bl	8002168 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e140      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f56:	4b46      	ldr	r3, [pc, #280]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ed      	beq.n	8003f40 <HAL_RCC_OscConfig+0x388>
 8003f64:	e015      	b.n	8003f92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f66:	f7fe f8ff 	bl	8002168 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6e:	f7fe f8fb 	bl	8002168 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e129      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f84:	4b3a      	ldr	r3, [pc, #232]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1ed      	bne.n	8003f6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f92:	7ffb      	ldrb	r3, [r7, #31]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d105      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f98:	4b35      	ldr	r3, [pc, #212]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	4a34      	ldr	r2, [pc, #208]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d03c      	beq.n	800402a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01c      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fb8:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fbe:	4a2c      	ldr	r2, [pc, #176]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fe f8ce 	bl	8002168 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fd0:	f7fe f8ca 	bl	8002168 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e0fa      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fe2:	4b23      	ldr	r3, [pc, #140]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0ef      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x418>
 8003ff0:	e01b      	b.n	800402a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ff2:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003ff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ff8:	4a1d      	ldr	r2, [pc, #116]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004002:	f7fe f8b1 	bl	8002168 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800400a:	f7fe f8ad 	bl	8002168 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e0dd      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800401c:	4b14      	ldr	r3, [pc, #80]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 800401e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ef      	bne.n	800400a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80d1 	beq.w	80041d6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004034:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b0c      	cmp	r3, #12
 800403e:	f000 808b 	beq.w	8004158 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d15e      	bne.n	8004108 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a08      	ldr	r2, [pc, #32]	; (8004070 <HAL_RCC_OscConfig+0x4b8>)
 8004050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fe f887 	bl	8002168 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405c:	e00c      	b.n	8004078 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405e:	f7fe f883 	bl	8002168 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d905      	bls.n	8004078 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e0b3      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
 8004070:	40021000 	.word	0x40021000
 8004074:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004078:	4b59      	ldr	r3, [pc, #356]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ec      	bne.n	800405e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004084:	4b56      	ldr	r3, [pc, #344]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	4b56      	ldr	r3, [pc, #344]	; (80041e4 <HAL_RCC_OscConfig+0x62c>)
 800408a:	4013      	ands	r3, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6a11      	ldr	r1, [r2, #32]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004094:	3a01      	subs	r2, #1
 8004096:	0112      	lsls	r2, r2, #4
 8004098:	4311      	orrs	r1, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800409e:	0212      	lsls	r2, r2, #8
 80040a0:	4311      	orrs	r1, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040a6:	0852      	lsrs	r2, r2, #1
 80040a8:	3a01      	subs	r2, #1
 80040aa:	0552      	lsls	r2, r2, #21
 80040ac:	4311      	orrs	r1, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040b2:	0852      	lsrs	r2, r2, #1
 80040b4:	3a01      	subs	r2, #1
 80040b6:	0652      	lsls	r2, r2, #25
 80040b8:	4311      	orrs	r1, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040be:	06d2      	lsls	r2, r2, #27
 80040c0:	430a      	orrs	r2, r1
 80040c2:	4947      	ldr	r1, [pc, #284]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c8:	4b45      	ldr	r3, [pc, #276]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a44      	ldr	r2, [pc, #272]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 80040ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040d4:	4b42      	ldr	r3, [pc, #264]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a41      	ldr	r2, [pc, #260]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 80040da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fe f842 	bl	8002168 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fe f83e 	bl	8002168 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e06e      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fa:	4b39      	ldr	r3, [pc, #228]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCC_OscConfig+0x530>
 8004106:	e066      	b.n	80041d6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004108:	4b35      	ldr	r3, [pc, #212]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a34      	ldr	r2, [pc, #208]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 800410e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004112:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004114:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4a31      	ldr	r2, [pc, #196]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 800411a:	f023 0303 	bic.w	r3, r3, #3
 800411e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004120:	4b2f      	ldr	r3, [pc, #188]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	4a2e      	ldr	r2, [pc, #184]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 8004126:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800412a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fe f81a 	bl	8002168 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7fe f816 	bl	8002168 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e046      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800414a:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x580>
 8004156:	e03e      	b.n	80041d6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e039      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004164:	4b1e      	ldr	r3, [pc, #120]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f003 0203 	and.w	r2, r3, #3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	429a      	cmp	r2, r3
 8004176:	d12c      	bne.n	80041d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	3b01      	subs	r3, #1
 8004184:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d123      	bne.n	80041d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004196:	429a      	cmp	r2, r3
 8004198:	d11b      	bne.n	80041d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d113      	bne.n	80041d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	3b01      	subs	r3, #1
 80041b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d109      	bne.n	80041d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	3b01      	subs	r3, #1
 80041cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d001      	beq.n	80041d6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3720      	adds	r7, #32
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40021000 	.word	0x40021000
 80041e4:	019f800c 	.word	0x019f800c

080041e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e11e      	b.n	800443e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004200:	4b91      	ldr	r3, [pc, #580]	; (8004448 <HAL_RCC_ClockConfig+0x260>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d910      	bls.n	8004230 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b8e      	ldr	r3, [pc, #568]	; (8004448 <HAL_RCC_ClockConfig+0x260>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 020f 	bic.w	r2, r3, #15
 8004216:	498c      	ldr	r1, [pc, #560]	; (8004448 <HAL_RCC_ClockConfig+0x260>)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b8a      	ldr	r3, [pc, #552]	; (8004448 <HAL_RCC_ClockConfig+0x260>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e106      	b.n	800443e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d073      	beq.n	8004324 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b03      	cmp	r3, #3
 8004242:	d129      	bne.n	8004298 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004244:	4b81      	ldr	r3, [pc, #516]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0f4      	b.n	800443e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004254:	f000 f9d0 	bl	80045f8 <RCC_GetSysClockFreqFromPLLSource>
 8004258:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4a7c      	ldr	r2, [pc, #496]	; (8004450 <HAL_RCC_ClockConfig+0x268>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d93f      	bls.n	80042e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004262:	4b7a      	ldr	r3, [pc, #488]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004276:	2b00      	cmp	r3, #0
 8004278:	d033      	beq.n	80042e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800427e:	2b00      	cmp	r3, #0
 8004280:	d12f      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004282:	4b72      	ldr	r3, [pc, #456]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800428a:	4a70      	ldr	r2, [pc, #448]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 800428c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004290:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004292:	2380      	movs	r3, #128	; 0x80
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e024      	b.n	80042e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d107      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042a0:	4b6a      	ldr	r3, [pc, #424]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0c6      	b.n	800443e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b0:	4b66      	ldr	r3, [pc, #408]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0be      	b.n	800443e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80042c0:	f000 f8ce 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4a61      	ldr	r2, [pc, #388]	; (8004450 <HAL_RCC_ClockConfig+0x268>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d909      	bls.n	80042e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042ce:	4b5f      	ldr	r3, [pc, #380]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d6:	4a5d      	ldr	r2, [pc, #372]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 80042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042e2:	4b5a      	ldr	r3, [pc, #360]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f023 0203 	bic.w	r2, r3, #3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4957      	ldr	r1, [pc, #348]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f4:	f7fd ff38 	bl	8002168 <HAL_GetTick>
 80042f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	e00a      	b.n	8004312 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042fc:	f7fd ff34 	bl	8002168 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	; 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e095      	b.n	800443e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004312:	4b4e      	ldr	r3, [pc, #312]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 020c 	and.w	r2, r3, #12
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	429a      	cmp	r2, r3
 8004322:	d1eb      	bne.n	80042fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d023      	beq.n	8004378 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800433c:	4b43      	ldr	r3, [pc, #268]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4a42      	ldr	r2, [pc, #264]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 8004342:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004346:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004354:	4b3d      	ldr	r3, [pc, #244]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800435c:	4a3b      	ldr	r2, [pc, #236]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 800435e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004362:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4b39      	ldr	r3, [pc, #228]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4936      	ldr	r1, [pc, #216]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
 8004376:	e008      	b.n	800438a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b80      	cmp	r3, #128	; 0x80
 800437c:	d105      	bne.n	800438a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800437e:	4b33      	ldr	r3, [pc, #204]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	4a32      	ldr	r2, [pc, #200]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 8004384:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004388:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800438a:	4b2f      	ldr	r3, [pc, #188]	; (8004448 <HAL_RCC_ClockConfig+0x260>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d21d      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004398:	4b2b      	ldr	r3, [pc, #172]	; (8004448 <HAL_RCC_ClockConfig+0x260>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f023 020f 	bic.w	r2, r3, #15
 80043a0:	4929      	ldr	r1, [pc, #164]	; (8004448 <HAL_RCC_ClockConfig+0x260>)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043a8:	f7fd fede 	bl	8002168 <HAL_GetTick>
 80043ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b0:	f7fd feda 	bl	8002168 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e03b      	b.n	800443e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_RCC_ClockConfig+0x260>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d1ed      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e0:	4b1a      	ldr	r3, [pc, #104]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4917      	ldr	r1, [pc, #92]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	490f      	ldr	r1, [pc, #60]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 800440e:	4313      	orrs	r3, r2
 8004410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004412:	f000 f825 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8004416:	4602      	mov	r2, r0
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <HAL_RCC_ClockConfig+0x264>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	490c      	ldr	r1, [pc, #48]	; (8004454 <HAL_RCC_ClockConfig+0x26c>)
 8004424:	5ccb      	ldrb	r3, [r1, r3]
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <HAL_RCC_ClockConfig+0x270>)
 8004430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <HAL_RCC_ClockConfig+0x274>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc ff9e 	bl	8001378 <HAL_InitTick>
 800443c:	4603      	mov	r3, r0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40022000 	.word	0x40022000
 800444c:	40021000 	.word	0x40021000
 8004450:	04c4b400 	.word	0x04c4b400
 8004454:	08009e5c 	.word	0x08009e5c
 8004458:	20000000 	.word	0x20000000
 800445c:	20000210 	.word	0x20000210

08004460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004466:	4b2c      	ldr	r3, [pc, #176]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b04      	cmp	r3, #4
 8004470:	d102      	bne.n	8004478 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004472:	4b2a      	ldr	r3, [pc, #168]	; (800451c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	e047      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004478:	4b27      	ldr	r3, [pc, #156]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb8>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 030c 	and.w	r3, r3, #12
 8004480:	2b08      	cmp	r3, #8
 8004482:	d102      	bne.n	800448a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004484:	4b26      	ldr	r3, [pc, #152]	; (8004520 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	e03e      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800448a:	4b23      	ldr	r3, [pc, #140]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb8>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b0c      	cmp	r3, #12
 8004494:	d136      	bne.n	8004504 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004496:	4b20      	ldr	r3, [pc, #128]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044a0:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	3301      	adds	r3, #1
 80044ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d10c      	bne.n	80044ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044b4:	4a1a      	ldr	r2, [pc, #104]	; (8004520 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044bc:	4a16      	ldr	r2, [pc, #88]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044be:	68d2      	ldr	r2, [r2, #12]
 80044c0:	0a12      	lsrs	r2, r2, #8
 80044c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	617b      	str	r3, [r7, #20]
      break;
 80044cc:	e00c      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044ce:	4a13      	ldr	r2, [pc, #76]	; (800451c <HAL_RCC_GetSysClockFreq+0xbc>)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d6:	4a10      	ldr	r2, [pc, #64]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044d8:	68d2      	ldr	r2, [r2, #12]
 80044da:	0a12      	lsrs	r2, r2, #8
 80044dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044e0:	fb02 f303 	mul.w	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]
      break;
 80044e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	0e5b      	lsrs	r3, r3, #25
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	3301      	adds	r3, #1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	e001      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004508:	693b      	ldr	r3, [r7, #16]
}
 800450a:	4618      	mov	r0, r3
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000
 800451c:	00f42400 	.word	0x00f42400
 8004520:	016e3600 	.word	0x016e3600

08004524 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HAL_RCC_GetHCLKFreq+0x14>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000000 	.word	0x20000000

0800453c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004540:	f7ff fff0 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4904      	ldr	r1, [pc, #16]	; (8004564 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40021000 	.word	0x40021000
 8004564:	08009e6c 	.word	0x08009e6c

08004568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800456c:	f7ff ffda 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004570:	4602      	mov	r2, r0
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	0adb      	lsrs	r3, r3, #11
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	4904      	ldr	r1, [pc, #16]	; (8004590 <HAL_RCC_GetPCLK2Freq+0x28>)
 800457e:	5ccb      	ldrb	r3, [r1, r3]
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004588:	4618      	mov	r0, r3
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	08009e6c 	.word	0x08009e6c

08004594 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	220f      	movs	r2, #15
 80045a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80045a4:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_RCC_GetClockConfig+0x5c>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0203 	and.w	r2, r3, #3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80045b0:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <HAL_RCC_GetClockConfig+0x5c>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80045bc:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <HAL_RCC_GetClockConfig+0x5c>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80045c8:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_RCC_GetClockConfig+0x5c>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	08db      	lsrs	r3, r3, #3
 80045ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80045d6:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <HAL_RCC_GetClockConfig+0x60>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 020f 	and.w	r2, r3, #15
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	601a      	str	r2, [r3, #0]
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40022000 	.word	0x40022000

080045f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045fe:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	3301      	adds	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d10c      	bne.n	8004636 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800461c:	4a17      	ldr	r2, [pc, #92]	; (800467c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	4a14      	ldr	r2, [pc, #80]	; (8004678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004626:	68d2      	ldr	r2, [r2, #12]
 8004628:	0a12      	lsrs	r2, r2, #8
 800462a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800462e:	fb02 f303 	mul.w	r3, r2, r3
 8004632:	617b      	str	r3, [r7, #20]
    break;
 8004634:	e00c      	b.n	8004650 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004636:	4a12      	ldr	r2, [pc, #72]	; (8004680 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	fbb2 f3f3 	udiv	r3, r2, r3
 800463e:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004640:	68d2      	ldr	r2, [r2, #12]
 8004642:	0a12      	lsrs	r2, r2, #8
 8004644:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004648:	fb02 f303 	mul.w	r3, r2, r3
 800464c:	617b      	str	r3, [r7, #20]
    break;
 800464e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	0e5b      	lsrs	r3, r3, #25
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	3301      	adds	r3, #1
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800466a:	687b      	ldr	r3, [r7, #4]
}
 800466c:	4618      	mov	r0, r3
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40021000 	.word	0x40021000
 800467c:	016e3600 	.word	0x016e3600
 8004680:	00f42400 	.word	0x00f42400

08004684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800468c:	2300      	movs	r3, #0
 800468e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004690:	2300      	movs	r3, #0
 8004692:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8098 	beq.w	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a2:	2300      	movs	r3, #0
 80046a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a6:	4b43      	ldr	r3, [pc, #268]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10d      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	4b40      	ldr	r3, [pc, #256]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	4a3f      	ldr	r2, [pc, #252]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046bc:	6593      	str	r3, [r2, #88]	; 0x58
 80046be:	4b3d      	ldr	r3, [pc, #244]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ca:	2301      	movs	r3, #1
 80046cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ce:	4b3a      	ldr	r3, [pc, #232]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a39      	ldr	r2, [pc, #228]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046da:	f7fd fd45 	bl	8002168 <HAL_GetTick>
 80046de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046e0:	e009      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e2:	f7fd fd41 	bl	8002168 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d902      	bls.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	74fb      	strb	r3, [r7, #19]
        break;
 80046f4:	e005      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046f6:	4b30      	ldr	r3, [pc, #192]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0ef      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d159      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004708:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004712:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d01e      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	429a      	cmp	r2, r3
 8004722:	d019      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004724:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004730:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004736:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004740:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	4a1b      	ldr	r2, [pc, #108]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004750:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004762:	f7fd fd01 	bl	8002168 <HAL_GetTick>
 8004766:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004768:	e00b      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7fd fcfd 	bl	8002168 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f241 3288 	movw	r2, #5000	; 0x1388
 8004778:	4293      	cmp	r3, r2
 800477a:	d902      	bls.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	74fb      	strb	r3, [r7, #19]
            break;
 8004780:	e006      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004782:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ec      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004790:	7cfb      	ldrb	r3, [r7, #19]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004796:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a4:	4903      	ldr	r1, [pc, #12]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047ac:	e008      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	74bb      	strb	r3, [r7, #18]
 80047b2:	e005      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047c0:	7c7b      	ldrb	r3, [r7, #17]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d105      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c6:	4ba7      	ldr	r3, [pc, #668]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ca:	4aa6      	ldr	r2, [pc, #664]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047de:	4ba1      	ldr	r3, [pc, #644]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f023 0203 	bic.w	r2, r3, #3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	499d      	ldr	r1, [pc, #628]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004800:	4b98      	ldr	r3, [pc, #608]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004806:	f023 020c 	bic.w	r2, r3, #12
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	4995      	ldr	r1, [pc, #596]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004822:	4b90      	ldr	r3, [pc, #576]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	498c      	ldr	r1, [pc, #560]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004844:	4b87      	ldr	r3, [pc, #540]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	4984      	ldr	r1, [pc, #528]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004866:	4b7f      	ldr	r3, [pc, #508]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	497b      	ldr	r1, [pc, #492]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004888:	4b76      	ldr	r3, [pc, #472]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	4973      	ldr	r1, [pc, #460]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048aa:	4b6e      	ldr	r3, [pc, #440]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	496a      	ldr	r1, [pc, #424]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048cc:	4b65      	ldr	r3, [pc, #404]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	4962      	ldr	r1, [pc, #392]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ee:	4b5d      	ldr	r3, [pc, #372]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	4959      	ldr	r1, [pc, #356]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004910:	4b54      	ldr	r3, [pc, #336]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004916:	f023 0203 	bic.w	r2, r3, #3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	4951      	ldr	r1, [pc, #324]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004932:	4b4c      	ldr	r3, [pc, #304]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	4948      	ldr	r1, [pc, #288]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004950:	2b00      	cmp	r3, #0
 8004952:	d015      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004954:	4b43      	ldr	r3, [pc, #268]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	4940      	ldr	r1, [pc, #256]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004972:	d105      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004974:	4b3b      	ldr	r3, [pc, #236]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4a3a      	ldr	r2, [pc, #232]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800497e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004988:	2b00      	cmp	r3, #0
 800498a:	d015      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800498c:	4b35      	ldr	r3, [pc, #212]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	4932      	ldr	r1, [pc, #200]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049aa:	d105      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ac:	4b2d      	ldr	r3, [pc, #180]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4a2c      	ldr	r2, [pc, #176]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d015      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049c4:	4b27      	ldr	r3, [pc, #156]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	4924      	ldr	r1, [pc, #144]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049e2:	d105      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e4:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4a1e      	ldr	r2, [pc, #120]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d015      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049fc:	4b19      	ldr	r3, [pc, #100]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	4916      	ldr	r1, [pc, #88]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a1a:	d105      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a10      	ldr	r2, [pc, #64]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a26:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d019      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	4908      	ldr	r1, [pc, #32]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a52:	d109      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a54:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4a02      	ldr	r2, [pc, #8]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a5e:	60d3      	str	r3, [r2, #12]
 8004a60:	e002      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004a62:	bf00      	nop
 8004a64:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d015      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a74:	4b29      	ldr	r3, [pc, #164]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a82:	4926      	ldr	r1, [pc, #152]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a92:	d105      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a94:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4a20      	ldr	r2, [pc, #128]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d015      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004aac:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aba:	4918      	ldr	r1, [pc, #96]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aca:	d105      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004acc:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4a12      	ldr	r2, [pc, #72]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d015      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af2:	490a      	ldr	r1, [pc, #40]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b02:	d105      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4a04      	ldr	r2, [pc, #16]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b10:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000

08004b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e049      	b.n	8004bc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc fec8 	bl	80018dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f000 fdf4 	bl	800574c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d001      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e054      	b.n	8004c92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d022      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c12:	d01d      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a22      	ldr	r2, [pc, #136]	; (8004ca4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d018      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a21      	ldr	r2, [pc, #132]	; (8004ca8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d013      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1f      	ldr	r2, [pc, #124]	; (8004cac <HAL_TIM_Base_Start_IT+0xdc>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00e      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d009      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1b      	ldr	r2, [pc, #108]	; (8004cb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d115      	bne.n	8004c7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	4b19      	ldr	r3, [pc, #100]	; (8004cbc <HAL_TIM_Base_Start_IT+0xec>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b06      	cmp	r3, #6
 8004c60:	d015      	beq.n	8004c8e <HAL_TIM_Base_Start_IT+0xbe>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c68:	d011      	beq.n	8004c8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0201 	orr.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7a:	e008      	b.n	8004c8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e000      	b.n	8004c90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40012c00 	.word	0x40012c00
 8004ca4:	40000400 	.word	0x40000400
 8004ca8:	40000800 	.word	0x40000800
 8004cac:	40000c00 	.word	0x40000c00
 8004cb0:	40013400 	.word	0x40013400
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40015000 	.word	0x40015000
 8004cbc:	00010007 	.word	0x00010007

08004cc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e049      	b.n	8004d66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f841 	bl	8004d6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	f000 fd24 	bl	800574c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <HAL_TIM_PWM_Start+0x24>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	e03c      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d109      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0x3e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	bf14      	ite	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	2300      	moveq	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	e02f      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d109      	bne.n	8004ddc <HAL_TIM_PWM_Start+0x58>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e022      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d109      	bne.n	8004df6 <HAL_TIM_PWM_Start+0x72>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	bf14      	ite	ne
 8004dee:	2301      	movne	r3, #1
 8004df0:	2300      	moveq	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	e015      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d109      	bne.n	8004e10 <HAL_TIM_PWM_Start+0x8c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e008      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	bf14      	ite	ne
 8004e1c:	2301      	movne	r3, #1
 8004e1e:	2300      	moveq	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e0a6      	b.n	8004f78 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_PWM_Start+0xb6>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e38:	e023      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d104      	bne.n	8004e4a <HAL_TIM_PWM_Start+0xc6>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e48:	e01b      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_PWM_Start+0xd6>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e58:	e013      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b0c      	cmp	r3, #12
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_PWM_Start+0xe6>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e68:	e00b      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_PWM_Start+0xf6>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e78:	e003      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2201      	movs	r2, #1
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f001 f940 	bl	8006110 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <HAL_TIM_PWM_Start+0x1fc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d018      	beq.n	8004ecc <HAL_TIM_PWM_Start+0x148>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a39      	ldr	r2, [pc, #228]	; (8004f84 <HAL_TIM_PWM_Start+0x200>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <HAL_TIM_PWM_Start+0x148>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a37      	ldr	r2, [pc, #220]	; (8004f88 <HAL_TIM_PWM_Start+0x204>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00e      	beq.n	8004ecc <HAL_TIM_PWM_Start+0x148>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a36      	ldr	r2, [pc, #216]	; (8004f8c <HAL_TIM_PWM_Start+0x208>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <HAL_TIM_PWM_Start+0x148>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a34      	ldr	r2, [pc, #208]	; (8004f90 <HAL_TIM_PWM_Start+0x20c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <HAL_TIM_PWM_Start+0x148>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a33      	ldr	r2, [pc, #204]	; (8004f94 <HAL_TIM_PWM_Start+0x210>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d101      	bne.n	8004ed0 <HAL_TIM_PWM_Start+0x14c>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <HAL_TIM_PWM_Start+0x14e>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ee4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <HAL_TIM_PWM_Start+0x1fc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d022      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x1b2>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef8:	d01d      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x1b2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a26      	ldr	r2, [pc, #152]	; (8004f98 <HAL_TIM_PWM_Start+0x214>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d018      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x1b2>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <HAL_TIM_PWM_Start+0x218>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x1b2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a23      	ldr	r2, [pc, #140]	; (8004fa0 <HAL_TIM_PWM_Start+0x21c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00e      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x1b2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a19      	ldr	r2, [pc, #100]	; (8004f84 <HAL_TIM_PWM_Start+0x200>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d009      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x1b2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <HAL_TIM_PWM_Start+0x204>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x1b2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a18      	ldr	r2, [pc, #96]	; (8004f94 <HAL_TIM_PWM_Start+0x210>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d115      	bne.n	8004f62 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <HAL_TIM_PWM_Start+0x220>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b06      	cmp	r3, #6
 8004f46:	d015      	beq.n	8004f74 <HAL_TIM_PWM_Start+0x1f0>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4e:	d011      	beq.n	8004f74 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f60:	e008      	b.n	8004f74 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	e000      	b.n	8004f76 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40013400 	.word	0x40013400
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800
 8004f94:	40015000 	.word	0x40015000
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40000800 	.word	0x40000800
 8004fa0:	40000c00 	.word	0x40000c00
 8004fa4:	00010007 	.word	0x00010007

08004fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d122      	bne.n	8005004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d11b      	bne.n	8005004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0202 	mvn.w	r2, #2
 8004fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fb90 	bl	8005710 <HAL_TIM_IC_CaptureCallback>
 8004ff0:	e005      	b.n	8004ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fb82 	bl	80056fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fb93 	bl	8005724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b04      	cmp	r3, #4
 8005010:	d122      	bne.n	8005058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b04      	cmp	r3, #4
 800501e:	d11b      	bne.n	8005058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0204 	mvn.w	r2, #4
 8005028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fb66 	bl	8005710 <HAL_TIM_IC_CaptureCallback>
 8005044:	e005      	b.n	8005052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fb58 	bl	80056fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fb69 	bl	8005724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b08      	cmp	r3, #8
 8005064:	d122      	bne.n	80050ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b08      	cmp	r3, #8
 8005072:	d11b      	bne.n	80050ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0208 	mvn.w	r2, #8
 800507c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2204      	movs	r2, #4
 8005082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fb3c 	bl	8005710 <HAL_TIM_IC_CaptureCallback>
 8005098:	e005      	b.n	80050a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fb2e 	bl	80056fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fb3f 	bl	8005724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d122      	bne.n	8005100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d11b      	bne.n	8005100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0210 	mvn.w	r2, #16
 80050d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2208      	movs	r2, #8
 80050d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fb12 	bl	8005710 <HAL_TIM_IC_CaptureCallback>
 80050ec:	e005      	b.n	80050fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fb04 	bl	80056fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fb15 	bl	8005724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b01      	cmp	r3, #1
 800510c:	d10e      	bne.n	800512c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b01      	cmp	r3, #1
 800511a:	d107      	bne.n	800512c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0201 	mvn.w	r2, #1
 8005124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fc f8ea 	bl	8001300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	2b80      	cmp	r3, #128	; 0x80
 8005138:	d10e      	bne.n	8005158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b80      	cmp	r3, #128	; 0x80
 8005146:	d107      	bne.n	8005158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 fac4 	bl	80066e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005166:	d10e      	bne.n	8005186 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005172:	2b80      	cmp	r3, #128	; 0x80
 8005174:	d107      	bne.n	8005186 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800517e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f001 fab7 	bl	80066f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b40      	cmp	r3, #64	; 0x40
 8005192:	d10e      	bne.n	80051b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519e:	2b40      	cmp	r3, #64	; 0x40
 80051a0:	d107      	bne.n	80051b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fac3 	bl	8005738 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d10e      	bne.n	80051de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d107      	bne.n	80051de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f06f 0220 	mvn.w	r2, #32
 80051d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f001 fa77 	bl	80066cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ec:	d10f      	bne.n	800520e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051fc:	d107      	bne.n	800520e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f001 fa7d 	bl	8006708 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800521c:	d10f      	bne.n	800523e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800522c:	d107      	bne.n	800523e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f001 fa6f 	bl	800671c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800524c:	d10f      	bne.n	800526e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800525c:	d107      	bne.n	800526e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f001 fa61 	bl	8006730 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005278:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800527c:	d10f      	bne.n	800529e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005288:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800528c:	d107      	bne.n	800529e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f001 fa53 	bl	8006744 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800529e:	bf00      	nop
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e0ff      	b.n	80054c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b14      	cmp	r3, #20
 80052d2:	f200 80f0 	bhi.w	80054b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052d6:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	08005331 	.word	0x08005331
 80052e0:	080054b7 	.word	0x080054b7
 80052e4:	080054b7 	.word	0x080054b7
 80052e8:	080054b7 	.word	0x080054b7
 80052ec:	08005371 	.word	0x08005371
 80052f0:	080054b7 	.word	0x080054b7
 80052f4:	080054b7 	.word	0x080054b7
 80052f8:	080054b7 	.word	0x080054b7
 80052fc:	080053b3 	.word	0x080053b3
 8005300:	080054b7 	.word	0x080054b7
 8005304:	080054b7 	.word	0x080054b7
 8005308:	080054b7 	.word	0x080054b7
 800530c:	080053f3 	.word	0x080053f3
 8005310:	080054b7 	.word	0x080054b7
 8005314:	080054b7 	.word	0x080054b7
 8005318:	080054b7 	.word	0x080054b7
 800531c:	08005435 	.word	0x08005435
 8005320:	080054b7 	.word	0x080054b7
 8005324:	080054b7 	.word	0x080054b7
 8005328:	080054b7 	.word	0x080054b7
 800532c:	08005475 	.word	0x08005475
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fab0 	bl	800589c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0208 	orr.w	r2, r2, #8
 800534a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0204 	bic.w	r2, r2, #4
 800535a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6999      	ldr	r1, [r3, #24]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	619a      	str	r2, [r3, #24]
      break;
 800536e:	e0a5      	b.n	80054bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fb2a 	bl	80059d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800538a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6999      	ldr	r1, [r3, #24]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	021a      	lsls	r2, r3, #8
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	619a      	str	r2, [r3, #24]
      break;
 80053b0:	e084      	b.n	80054bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fb9d 	bl	8005af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0208 	orr.w	r2, r2, #8
 80053cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0204 	bic.w	r2, r2, #4
 80053dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69d9      	ldr	r1, [r3, #28]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	61da      	str	r2, [r3, #28]
      break;
 80053f0:	e064      	b.n	80054bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fc0f 	bl	8005c1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800540c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69d9      	ldr	r1, [r3, #28]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	021a      	lsls	r2, r3, #8
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	61da      	str	r2, [r3, #28]
      break;
 8005432:	e043      	b.n	80054bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fc82 	bl	8005d44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0208 	orr.w	r2, r2, #8
 800544e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0204 	bic.w	r2, r2, #4
 800545e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005472:	e023      	b.n	80054bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fccc 	bl	8005e18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800548e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	021a      	lsls	r2, r3, #8
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054b4:	e002      	b.n	80054bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	75fb      	strb	r3, [r7, #23]
      break;
 80054ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop

080054d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_TIM_ConfigClockSource+0x1c>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e0f6      	b.n	80056da <HAL_TIM_ConfigClockSource+0x20a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800550a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800550e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a6f      	ldr	r2, [pc, #444]	; (80056e4 <HAL_TIM_ConfigClockSource+0x214>)
 8005526:	4293      	cmp	r3, r2
 8005528:	f000 80c1 	beq.w	80056ae <HAL_TIM_ConfigClockSource+0x1de>
 800552c:	4a6d      	ldr	r2, [pc, #436]	; (80056e4 <HAL_TIM_ConfigClockSource+0x214>)
 800552e:	4293      	cmp	r3, r2
 8005530:	f200 80c6 	bhi.w	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005534:	4a6c      	ldr	r2, [pc, #432]	; (80056e8 <HAL_TIM_ConfigClockSource+0x218>)
 8005536:	4293      	cmp	r3, r2
 8005538:	f000 80b9 	beq.w	80056ae <HAL_TIM_ConfigClockSource+0x1de>
 800553c:	4a6a      	ldr	r2, [pc, #424]	; (80056e8 <HAL_TIM_ConfigClockSource+0x218>)
 800553e:	4293      	cmp	r3, r2
 8005540:	f200 80be 	bhi.w	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005544:	4a69      	ldr	r2, [pc, #420]	; (80056ec <HAL_TIM_ConfigClockSource+0x21c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	f000 80b1 	beq.w	80056ae <HAL_TIM_ConfigClockSource+0x1de>
 800554c:	4a67      	ldr	r2, [pc, #412]	; (80056ec <HAL_TIM_ConfigClockSource+0x21c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	f200 80b6 	bhi.w	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005554:	4a66      	ldr	r2, [pc, #408]	; (80056f0 <HAL_TIM_ConfigClockSource+0x220>)
 8005556:	4293      	cmp	r3, r2
 8005558:	f000 80a9 	beq.w	80056ae <HAL_TIM_ConfigClockSource+0x1de>
 800555c:	4a64      	ldr	r2, [pc, #400]	; (80056f0 <HAL_TIM_ConfigClockSource+0x220>)
 800555e:	4293      	cmp	r3, r2
 8005560:	f200 80ae 	bhi.w	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005564:	4a63      	ldr	r2, [pc, #396]	; (80056f4 <HAL_TIM_ConfigClockSource+0x224>)
 8005566:	4293      	cmp	r3, r2
 8005568:	f000 80a1 	beq.w	80056ae <HAL_TIM_ConfigClockSource+0x1de>
 800556c:	4a61      	ldr	r2, [pc, #388]	; (80056f4 <HAL_TIM_ConfigClockSource+0x224>)
 800556e:	4293      	cmp	r3, r2
 8005570:	f200 80a6 	bhi.w	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005574:	4a60      	ldr	r2, [pc, #384]	; (80056f8 <HAL_TIM_ConfigClockSource+0x228>)
 8005576:	4293      	cmp	r3, r2
 8005578:	f000 8099 	beq.w	80056ae <HAL_TIM_ConfigClockSource+0x1de>
 800557c:	4a5e      	ldr	r2, [pc, #376]	; (80056f8 <HAL_TIM_ConfigClockSource+0x228>)
 800557e:	4293      	cmp	r3, r2
 8005580:	f200 809e 	bhi.w	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005584:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005588:	f000 8091 	beq.w	80056ae <HAL_TIM_ConfigClockSource+0x1de>
 800558c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005590:	f200 8096 	bhi.w	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005598:	f000 8089 	beq.w	80056ae <HAL_TIM_ConfigClockSource+0x1de>
 800559c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a0:	f200 808e 	bhi.w	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a8:	d03e      	beq.n	8005628 <HAL_TIM_ConfigClockSource+0x158>
 80055aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ae:	f200 8087 	bhi.w	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b6:	f000 8086 	beq.w	80056c6 <HAL_TIM_ConfigClockSource+0x1f6>
 80055ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055be:	d87f      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055c0:	2b70      	cmp	r3, #112	; 0x70
 80055c2:	d01a      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x12a>
 80055c4:	2b70      	cmp	r3, #112	; 0x70
 80055c6:	d87b      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055c8:	2b60      	cmp	r3, #96	; 0x60
 80055ca:	d050      	beq.n	800566e <HAL_TIM_ConfigClockSource+0x19e>
 80055cc:	2b60      	cmp	r3, #96	; 0x60
 80055ce:	d877      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055d0:	2b50      	cmp	r3, #80	; 0x50
 80055d2:	d03c      	beq.n	800564e <HAL_TIM_ConfigClockSource+0x17e>
 80055d4:	2b50      	cmp	r3, #80	; 0x50
 80055d6:	d873      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d058      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x1be>
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d86f      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055e0:	2b30      	cmp	r3, #48	; 0x30
 80055e2:	d064      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x1de>
 80055e4:	2b30      	cmp	r3, #48	; 0x30
 80055e6:	d86b      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d060      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x1de>
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	d867      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d05c      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x1de>
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d05a      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x1de>
 80055f8:	e062      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6818      	ldr	r0, [r3, #0]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	6899      	ldr	r1, [r3, #8]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f000 fd61 	bl	80060d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800561c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	609a      	str	r2, [r3, #8]
      break;
 8005626:	e04f      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6818      	ldr	r0, [r3, #0]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	6899      	ldr	r1, [r3, #8]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f000 fd4a 	bl	80060d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800564a:	609a      	str	r2, [r3, #8]
      break;
 800564c:	e03c      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6859      	ldr	r1, [r3, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	461a      	mov	r2, r3
 800565c:	f000 fcbc 	bl	8005fd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2150      	movs	r1, #80	; 0x50
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fd15 	bl	8006096 <TIM_ITRx_SetConfig>
      break;
 800566c:	e02c      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6859      	ldr	r1, [r3, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	461a      	mov	r2, r3
 800567c:	f000 fcdb 	bl	8006036 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2160      	movs	r1, #96	; 0x60
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fd05 	bl	8006096 <TIM_ITRx_SetConfig>
      break;
 800568c:	e01c      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6859      	ldr	r1, [r3, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	461a      	mov	r2, r3
 800569c:	f000 fc9c 	bl	8005fd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2140      	movs	r1, #64	; 0x40
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fcf5 	bl	8006096 <TIM_ITRx_SetConfig>
      break;
 80056ac:	e00c      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f000 fcec 	bl	8006096 <TIM_ITRx_SetConfig>
      break;
 80056be:	e003      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
      break;
 80056c4:	e000      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80056c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	00100070 	.word	0x00100070
 80056e8:	00100060 	.word	0x00100060
 80056ec:	00100050 	.word	0x00100050
 80056f0:	00100040 	.word	0x00100040
 80056f4:	00100030 	.word	0x00100030
 80056f8:	00100020 	.word	0x00100020

080056fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a46      	ldr	r2, [pc, #280]	; (8005878 <TIM_Base_SetConfig+0x12c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d017      	beq.n	8005794 <TIM_Base_SetConfig+0x48>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576a:	d013      	beq.n	8005794 <TIM_Base_SetConfig+0x48>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a43      	ldr	r2, [pc, #268]	; (800587c <TIM_Base_SetConfig+0x130>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00f      	beq.n	8005794 <TIM_Base_SetConfig+0x48>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a42      	ldr	r2, [pc, #264]	; (8005880 <TIM_Base_SetConfig+0x134>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00b      	beq.n	8005794 <TIM_Base_SetConfig+0x48>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a41      	ldr	r2, [pc, #260]	; (8005884 <TIM_Base_SetConfig+0x138>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d007      	beq.n	8005794 <TIM_Base_SetConfig+0x48>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a40      	ldr	r2, [pc, #256]	; (8005888 <TIM_Base_SetConfig+0x13c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d003      	beq.n	8005794 <TIM_Base_SetConfig+0x48>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a3f      	ldr	r2, [pc, #252]	; (800588c <TIM_Base_SetConfig+0x140>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d108      	bne.n	80057a6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a33      	ldr	r2, [pc, #204]	; (8005878 <TIM_Base_SetConfig+0x12c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d023      	beq.n	80057f6 <TIM_Base_SetConfig+0xaa>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b4:	d01f      	beq.n	80057f6 <TIM_Base_SetConfig+0xaa>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a30      	ldr	r2, [pc, #192]	; (800587c <TIM_Base_SetConfig+0x130>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d01b      	beq.n	80057f6 <TIM_Base_SetConfig+0xaa>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a2f      	ldr	r2, [pc, #188]	; (8005880 <TIM_Base_SetConfig+0x134>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d017      	beq.n	80057f6 <TIM_Base_SetConfig+0xaa>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a2e      	ldr	r2, [pc, #184]	; (8005884 <TIM_Base_SetConfig+0x138>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d013      	beq.n	80057f6 <TIM_Base_SetConfig+0xaa>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a2d      	ldr	r2, [pc, #180]	; (8005888 <TIM_Base_SetConfig+0x13c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00f      	beq.n	80057f6 <TIM_Base_SetConfig+0xaa>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a2d      	ldr	r2, [pc, #180]	; (8005890 <TIM_Base_SetConfig+0x144>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00b      	beq.n	80057f6 <TIM_Base_SetConfig+0xaa>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a2c      	ldr	r2, [pc, #176]	; (8005894 <TIM_Base_SetConfig+0x148>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d007      	beq.n	80057f6 <TIM_Base_SetConfig+0xaa>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a2b      	ldr	r2, [pc, #172]	; (8005898 <TIM_Base_SetConfig+0x14c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d003      	beq.n	80057f6 <TIM_Base_SetConfig+0xaa>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a26      	ldr	r2, [pc, #152]	; (800588c <TIM_Base_SetConfig+0x140>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d108      	bne.n	8005808 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a12      	ldr	r2, [pc, #72]	; (8005878 <TIM_Base_SetConfig+0x12c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d013      	beq.n	800585c <TIM_Base_SetConfig+0x110>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a14      	ldr	r2, [pc, #80]	; (8005888 <TIM_Base_SetConfig+0x13c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00f      	beq.n	800585c <TIM_Base_SetConfig+0x110>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a14      	ldr	r2, [pc, #80]	; (8005890 <TIM_Base_SetConfig+0x144>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00b      	beq.n	800585c <TIM_Base_SetConfig+0x110>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a13      	ldr	r2, [pc, #76]	; (8005894 <TIM_Base_SetConfig+0x148>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d007      	beq.n	800585c <TIM_Base_SetConfig+0x110>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a12      	ldr	r2, [pc, #72]	; (8005898 <TIM_Base_SetConfig+0x14c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <TIM_Base_SetConfig+0x110>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a0d      	ldr	r2, [pc, #52]	; (800588c <TIM_Base_SetConfig+0x140>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d103      	bne.n	8005864 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	615a      	str	r2, [r3, #20]
}
 800586a:	bf00      	nop
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40000400 	.word	0x40000400
 8005880:	40000800 	.word	0x40000800
 8005884:	40000c00 	.word	0x40000c00
 8005888:	40013400 	.word	0x40013400
 800588c:	40015000 	.word	0x40015000
 8005890:	40014000 	.word	0x40014000
 8005894:	40014400 	.word	0x40014400
 8005898:	40014800 	.word	0x40014800

0800589c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f023 0201 	bic.w	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f023 0302 	bic.w	r3, r3, #2
 80058e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a30      	ldr	r2, [pc, #192]	; (80059b8 <TIM_OC1_SetConfig+0x11c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <TIM_OC1_SetConfig+0x88>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a2f      	ldr	r2, [pc, #188]	; (80059bc <TIM_OC1_SetConfig+0x120>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d00f      	beq.n	8005924 <TIM_OC1_SetConfig+0x88>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a2e      	ldr	r2, [pc, #184]	; (80059c0 <TIM_OC1_SetConfig+0x124>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00b      	beq.n	8005924 <TIM_OC1_SetConfig+0x88>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a2d      	ldr	r2, [pc, #180]	; (80059c4 <TIM_OC1_SetConfig+0x128>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d007      	beq.n	8005924 <TIM_OC1_SetConfig+0x88>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a2c      	ldr	r2, [pc, #176]	; (80059c8 <TIM_OC1_SetConfig+0x12c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_OC1_SetConfig+0x88>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a2b      	ldr	r2, [pc, #172]	; (80059cc <TIM_OC1_SetConfig+0x130>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d10c      	bne.n	800593e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0308 	bic.w	r3, r3, #8
 800592a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f023 0304 	bic.w	r3, r3, #4
 800593c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <TIM_OC1_SetConfig+0x11c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <TIM_OC1_SetConfig+0xd2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <TIM_OC1_SetConfig+0x120>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00f      	beq.n	800596e <TIM_OC1_SetConfig+0xd2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <TIM_OC1_SetConfig+0x124>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_OC1_SetConfig+0xd2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a1a      	ldr	r2, [pc, #104]	; (80059c4 <TIM_OC1_SetConfig+0x128>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <TIM_OC1_SetConfig+0xd2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a19      	ldr	r2, [pc, #100]	; (80059c8 <TIM_OC1_SetConfig+0x12c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_OC1_SetConfig+0xd2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a18      	ldr	r2, [pc, #96]	; (80059cc <TIM_OC1_SetConfig+0x130>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d111      	bne.n	8005992 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800597c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	621a      	str	r2, [r3, #32]
}
 80059ac:	bf00      	nop
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	40012c00 	.word	0x40012c00
 80059bc:	40013400 	.word	0x40013400
 80059c0:	40014000 	.word	0x40014000
 80059c4:	40014400 	.word	0x40014400
 80059c8:	40014800 	.word	0x40014800
 80059cc:	40015000 	.word	0x40015000

080059d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0210 	bic.w	r2, r3, #16
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f023 0320 	bic.w	r3, r3, #32
 8005a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a2c      	ldr	r2, [pc, #176]	; (8005ae0 <TIM_OC2_SetConfig+0x110>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d007      	beq.n	8005a44 <TIM_OC2_SetConfig+0x74>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a2b      	ldr	r2, [pc, #172]	; (8005ae4 <TIM_OC2_SetConfig+0x114>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_OC2_SetConfig+0x74>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ae8 <TIM_OC2_SetConfig+0x118>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d10d      	bne.n	8005a60 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <TIM_OC2_SetConfig+0x110>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d013      	beq.n	8005a90 <TIM_OC2_SetConfig+0xc0>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <TIM_OC2_SetConfig+0x114>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00f      	beq.n	8005a90 <TIM_OC2_SetConfig+0xc0>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a1e      	ldr	r2, [pc, #120]	; (8005aec <TIM_OC2_SetConfig+0x11c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00b      	beq.n	8005a90 <TIM_OC2_SetConfig+0xc0>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <TIM_OC2_SetConfig+0x120>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d007      	beq.n	8005a90 <TIM_OC2_SetConfig+0xc0>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <TIM_OC2_SetConfig+0x124>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <TIM_OC2_SetConfig+0xc0>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <TIM_OC2_SetConfig+0x118>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d113      	bne.n	8005ab8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40012c00 	.word	0x40012c00
 8005ae4:	40013400 	.word	0x40013400
 8005ae8:	40015000 	.word	0x40015000
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40014400 	.word	0x40014400
 8005af4:	40014800 	.word	0x40014800

08005af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0303 	bic.w	r3, r3, #3
 8005b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a2b      	ldr	r2, [pc, #172]	; (8005c04 <TIM_OC3_SetConfig+0x10c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <TIM_OC3_SetConfig+0x72>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2a      	ldr	r2, [pc, #168]	; (8005c08 <TIM_OC3_SetConfig+0x110>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_OC3_SetConfig+0x72>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a29      	ldr	r2, [pc, #164]	; (8005c0c <TIM_OC3_SetConfig+0x114>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d10d      	bne.n	8005b86 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a1e      	ldr	r2, [pc, #120]	; (8005c04 <TIM_OC3_SetConfig+0x10c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <TIM_OC3_SetConfig+0xbe>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a1d      	ldr	r2, [pc, #116]	; (8005c08 <TIM_OC3_SetConfig+0x110>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00f      	beq.n	8005bb6 <TIM_OC3_SetConfig+0xbe>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a1d      	ldr	r2, [pc, #116]	; (8005c10 <TIM_OC3_SetConfig+0x118>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00b      	beq.n	8005bb6 <TIM_OC3_SetConfig+0xbe>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <TIM_OC3_SetConfig+0x11c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d007      	beq.n	8005bb6 <TIM_OC3_SetConfig+0xbe>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1b      	ldr	r2, [pc, #108]	; (8005c18 <TIM_OC3_SetConfig+0x120>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_OC3_SetConfig+0xbe>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a16      	ldr	r2, [pc, #88]	; (8005c0c <TIM_OC3_SetConfig+0x114>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d113      	bne.n	8005bde <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	621a      	str	r2, [r3, #32]
}
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40013400 	.word	0x40013400
 8005c0c:	40015000 	.word	0x40015000
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40014400 	.word	0x40014400
 8005c18:	40014800 	.word	0x40014800

08005c1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	031b      	lsls	r3, r3, #12
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a2c      	ldr	r2, [pc, #176]	; (8005d2c <TIM_OC4_SetConfig+0x110>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d007      	beq.n	8005c90 <TIM_OC4_SetConfig+0x74>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a2b      	ldr	r2, [pc, #172]	; (8005d30 <TIM_OC4_SetConfig+0x114>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_OC4_SetConfig+0x74>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a2a      	ldr	r2, [pc, #168]	; (8005d34 <TIM_OC4_SetConfig+0x118>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d10d      	bne.n	8005cac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	031b      	lsls	r3, r3, #12
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005caa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a1f      	ldr	r2, [pc, #124]	; (8005d2c <TIM_OC4_SetConfig+0x110>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <TIM_OC4_SetConfig+0xc0>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a1e      	ldr	r2, [pc, #120]	; (8005d30 <TIM_OC4_SetConfig+0x114>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00f      	beq.n	8005cdc <TIM_OC4_SetConfig+0xc0>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a1e      	ldr	r2, [pc, #120]	; (8005d38 <TIM_OC4_SetConfig+0x11c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <TIM_OC4_SetConfig+0xc0>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <TIM_OC4_SetConfig+0x120>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d007      	beq.n	8005cdc <TIM_OC4_SetConfig+0xc0>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <TIM_OC4_SetConfig+0x124>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_OC4_SetConfig+0xc0>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a17      	ldr	r2, [pc, #92]	; (8005d34 <TIM_OC4_SetConfig+0x118>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d113      	bne.n	8005d04 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ce2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	019b      	lsls	r3, r3, #6
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	019b      	lsls	r3, r3, #6
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40013400 	.word	0x40013400
 8005d34:	40015000 	.word	0x40015000
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40014400 	.word	0x40014400
 8005d40:	40014800 	.word	0x40014800

08005d44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	041b      	lsls	r3, r3, #16
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a19      	ldr	r2, [pc, #100]	; (8005e00 <TIM_OC5_SetConfig+0xbc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d013      	beq.n	8005dc6 <TIM_OC5_SetConfig+0x82>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <TIM_OC5_SetConfig+0xc0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00f      	beq.n	8005dc6 <TIM_OC5_SetConfig+0x82>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <TIM_OC5_SetConfig+0xc4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00b      	beq.n	8005dc6 <TIM_OC5_SetConfig+0x82>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a16      	ldr	r2, [pc, #88]	; (8005e0c <TIM_OC5_SetConfig+0xc8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d007      	beq.n	8005dc6 <TIM_OC5_SetConfig+0x82>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a15      	ldr	r2, [pc, #84]	; (8005e10 <TIM_OC5_SetConfig+0xcc>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d003      	beq.n	8005dc6 <TIM_OC5_SetConfig+0x82>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a14      	ldr	r2, [pc, #80]	; (8005e14 <TIM_OC5_SetConfig+0xd0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d109      	bne.n	8005dda <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	621a      	str	r2, [r3, #32]
}
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40013400 	.word	0x40013400
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40014400 	.word	0x40014400
 8005e10:	40014800 	.word	0x40014800
 8005e14:	40015000 	.word	0x40015000

08005e18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	021b      	lsls	r3, r3, #8
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	051b      	lsls	r3, r3, #20
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a1a      	ldr	r2, [pc, #104]	; (8005ed8 <TIM_OC6_SetConfig+0xc0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d013      	beq.n	8005e9c <TIM_OC6_SetConfig+0x84>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a19      	ldr	r2, [pc, #100]	; (8005edc <TIM_OC6_SetConfig+0xc4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00f      	beq.n	8005e9c <TIM_OC6_SetConfig+0x84>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a18      	ldr	r2, [pc, #96]	; (8005ee0 <TIM_OC6_SetConfig+0xc8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00b      	beq.n	8005e9c <TIM_OC6_SetConfig+0x84>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a17      	ldr	r2, [pc, #92]	; (8005ee4 <TIM_OC6_SetConfig+0xcc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d007      	beq.n	8005e9c <TIM_OC6_SetConfig+0x84>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a16      	ldr	r2, [pc, #88]	; (8005ee8 <TIM_OC6_SetConfig+0xd0>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_OC6_SetConfig+0x84>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a15      	ldr	r2, [pc, #84]	; (8005eec <TIM_OC6_SetConfig+0xd4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d109      	bne.n	8005eb0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	029b      	lsls	r3, r3, #10
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40012c00 	.word	0x40012c00
 8005edc:	40013400 	.word	0x40013400
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	40014400 	.word	0x40014400
 8005ee8:	40014800 	.word	0x40014800
 8005eec:	40015000 	.word	0x40015000

08005ef0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f023 0201 	bic.w	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a28      	ldr	r2, [pc, #160]	; (8005fbc <TIM_TI1_SetConfig+0xcc>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d01b      	beq.n	8005f56 <TIM_TI1_SetConfig+0x66>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f24:	d017      	beq.n	8005f56 <TIM_TI1_SetConfig+0x66>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4a25      	ldr	r2, [pc, #148]	; (8005fc0 <TIM_TI1_SetConfig+0xd0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d013      	beq.n	8005f56 <TIM_TI1_SetConfig+0x66>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a24      	ldr	r2, [pc, #144]	; (8005fc4 <TIM_TI1_SetConfig+0xd4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00f      	beq.n	8005f56 <TIM_TI1_SetConfig+0x66>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a23      	ldr	r2, [pc, #140]	; (8005fc8 <TIM_TI1_SetConfig+0xd8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00b      	beq.n	8005f56 <TIM_TI1_SetConfig+0x66>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4a22      	ldr	r2, [pc, #136]	; (8005fcc <TIM_TI1_SetConfig+0xdc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d007      	beq.n	8005f56 <TIM_TI1_SetConfig+0x66>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4a21      	ldr	r2, [pc, #132]	; (8005fd0 <TIM_TI1_SetConfig+0xe0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d003      	beq.n	8005f56 <TIM_TI1_SetConfig+0x66>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4a20      	ldr	r2, [pc, #128]	; (8005fd4 <TIM_TI1_SetConfig+0xe4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d101      	bne.n	8005f5a <TIM_TI1_SetConfig+0x6a>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <TIM_TI1_SetConfig+0x6c>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d008      	beq.n	8005f72 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	e003      	b.n	8005f7a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f043 0301 	orr.w	r3, r3, #1
 8005f78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f023 030a 	bic.w	r3, r3, #10
 8005f94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f003 030a 	and.w	r3, r3, #10
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	40012c00 	.word	0x40012c00
 8005fc0:	40000400 	.word	0x40000400
 8005fc4:	40000800 	.word	0x40000800
 8005fc8:	40000c00 	.word	0x40000c00
 8005fcc:	40013400 	.word	0x40013400
 8005fd0:	40014000 	.word	0x40014000
 8005fd4:	40015000 	.word	0x40015000

08005fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	f023 0201 	bic.w	r2, r3, #1
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f023 030a 	bic.w	r3, r3, #10
 8006014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006036:	b480      	push	{r7}
 8006038:	b087      	sub	sp, #28
 800603a:	af00      	add	r7, sp, #0
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f023 0210 	bic.w	r2, r3, #16
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	031b      	lsls	r3, r3, #12
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006072:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	621a      	str	r2, [r3, #32]
}
 800608a:	bf00      	nop
 800608c:	371c      	adds	r7, #28
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f043 0307 	orr.w	r3, r3, #7
 80060bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	609a      	str	r2, [r3, #8]
}
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	021a      	lsls	r2, r3, #8
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	bf00      	nop
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 031f 	and.w	r3, r3, #31
 8006122:	2201      	movs	r2, #1
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1a      	ldr	r2, [r3, #32]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	43db      	mvns	r3, r3
 8006132:	401a      	ands	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a1a      	ldr	r2, [r3, #32]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f003 031f 	and.w	r3, r3, #31
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	fa01 f303 	lsl.w	r3, r1, r3
 8006148:	431a      	orrs	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b08a      	sub	sp, #40	; 0x28
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e0a0      	b.n	80062b0 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fb fbca 	bl	800191c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f7ff fad6 	bl	800574c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	6819      	ldr	r1, [r3, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2203      	movs	r2, #3
 80061ae:	f7ff fe9f 	bl	8005ef0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 020c 	bic.w	r2, r2, #12
 80061c0:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6999      	ldr	r1, [r3, #24]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061e2:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006206:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006216:	f023 0307 	bic.w	r3, r3, #7
 800621a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0204 	orr.w	r2, r2, #4
 800622a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800622c:	2300      	movs	r3, #0
 800622e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006230:	2300      	movs	r3, #0
 8006232:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006234:	2370      	movs	r3, #112	; 0x70
 8006236:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006238:	2300      	movs	r3, #0
 800623a:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800623c:	2300      	movs	r3, #0
 800623e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f107 020c 	add.w	r2, r7, #12
 8006252:	4611      	mov	r1, r2
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fbbb 	bl	80059d0 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800627c:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3728      	adds	r7, #40	; 0x28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d109      	bne.n	80062dc <HAL_TIMEx_PWMN_Start+0x24>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	bf14      	ite	ne
 80062d4:	2301      	movne	r3, #1
 80062d6:	2300      	moveq	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	e022      	b.n	8006322 <HAL_TIMEx_PWMN_Start+0x6a>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d109      	bne.n	80062f6 <HAL_TIMEx_PWMN_Start+0x3e>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	bf14      	ite	ne
 80062ee:	2301      	movne	r3, #1
 80062f0:	2300      	moveq	r3, #0
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	e015      	b.n	8006322 <HAL_TIMEx_PWMN_Start+0x6a>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d109      	bne.n	8006310 <HAL_TIMEx_PWMN_Start+0x58>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b01      	cmp	r3, #1
 8006306:	bf14      	ite	ne
 8006308:	2301      	movne	r3, #1
 800630a:	2300      	moveq	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	e008      	b.n	8006322 <HAL_TIMEx_PWMN_Start+0x6a>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	bf14      	ite	ne
 800631c:	2301      	movne	r3, #1
 800631e:	2300      	moveq	r3, #0
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e073      	b.n	8006412 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d104      	bne.n	800633a <HAL_TIMEx_PWMN_Start+0x82>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006338:	e013      	b.n	8006362 <HAL_TIMEx_PWMN_Start+0xaa>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b04      	cmp	r3, #4
 800633e:	d104      	bne.n	800634a <HAL_TIMEx_PWMN_Start+0x92>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006348:	e00b      	b.n	8006362 <HAL_TIMEx_PWMN_Start+0xaa>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b08      	cmp	r3, #8
 800634e:	d104      	bne.n	800635a <HAL_TIMEx_PWMN_Start+0xa2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006358:	e003      	b.n	8006362 <HAL_TIMEx_PWMN_Start+0xaa>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2202      	movs	r2, #2
 800635e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2204      	movs	r2, #4
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	4618      	mov	r0, r3
 800636c:	f000 f9f4 	bl	8006758 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800637e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a25      	ldr	r2, [pc, #148]	; (800641c <HAL_TIMEx_PWMN_Start+0x164>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d022      	beq.n	80063d0 <HAL_TIMEx_PWMN_Start+0x118>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006392:	d01d      	beq.n	80063d0 <HAL_TIMEx_PWMN_Start+0x118>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a21      	ldr	r2, [pc, #132]	; (8006420 <HAL_TIMEx_PWMN_Start+0x168>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d018      	beq.n	80063d0 <HAL_TIMEx_PWMN_Start+0x118>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a20      	ldr	r2, [pc, #128]	; (8006424 <HAL_TIMEx_PWMN_Start+0x16c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d013      	beq.n	80063d0 <HAL_TIMEx_PWMN_Start+0x118>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1e      	ldr	r2, [pc, #120]	; (8006428 <HAL_TIMEx_PWMN_Start+0x170>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00e      	beq.n	80063d0 <HAL_TIMEx_PWMN_Start+0x118>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1d      	ldr	r2, [pc, #116]	; (800642c <HAL_TIMEx_PWMN_Start+0x174>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d009      	beq.n	80063d0 <HAL_TIMEx_PWMN_Start+0x118>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1b      	ldr	r2, [pc, #108]	; (8006430 <HAL_TIMEx_PWMN_Start+0x178>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d004      	beq.n	80063d0 <HAL_TIMEx_PWMN_Start+0x118>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1a      	ldr	r2, [pc, #104]	; (8006434 <HAL_TIMEx_PWMN_Start+0x17c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d115      	bne.n	80063fc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	4b18      	ldr	r3, [pc, #96]	; (8006438 <HAL_TIMEx_PWMN_Start+0x180>)
 80063d8:	4013      	ands	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b06      	cmp	r3, #6
 80063e0:	d015      	beq.n	800640e <HAL_TIMEx_PWMN_Start+0x156>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e8:	d011      	beq.n	800640e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f042 0201 	orr.w	r2, r2, #1
 80063f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063fa:	e008      	b.n	800640e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0201 	orr.w	r2, r2, #1
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	e000      	b.n	8006410 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800640e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40012c00 	.word	0x40012c00
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40000c00 	.word	0x40000c00
 800642c:	40013400 	.word	0x40013400
 8006430:	40014000 	.word	0x40014000
 8006434:	40015000 	.word	0x40015000
 8006438:	00010007 	.word	0x00010007

0800643c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006450:	2302      	movs	r3, #2
 8006452:	e074      	b.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a34      	ldr	r2, [pc, #208]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a33      	ldr	r2, [pc, #204]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d004      	beq.n	8006492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a31      	ldr	r2, [pc, #196]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d108      	bne.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006498:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a21      	ldr	r2, [pc, #132]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d022      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d4:	d01d      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1f      	ldr	r2, [pc, #124]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d018      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1d      	ldr	r2, [pc, #116]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d013      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1c      	ldr	r2, [pc, #112]	; (8006560 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00e      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a15      	ldr	r2, [pc, #84]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d009      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a18      	ldr	r2, [pc, #96]	; (8006564 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d004      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a11      	ldr	r2, [pc, #68]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d10c      	bne.n	800652c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4313      	orrs	r3, r2
 8006522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40013400 	.word	0x40013400
 8006554:	40015000 	.word	0x40015000
 8006558:	40000400 	.word	0x40000400
 800655c:	40000800 	.word	0x40000800
 8006560:	40000c00 	.word	0x40000c00
 8006564:	40014000 	.word	0x40014000

08006568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006580:	2302      	movs	r3, #2
 8006582:	e096      	b.n	80066b2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a2f      	ldr	r2, [pc, #188]	; (80066c0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d009      	beq.n	800661c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a2d      	ldr	r2, [pc, #180]	; (80066c4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d004      	beq.n	800661c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a2c      	ldr	r2, [pc, #176]	; (80066c8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d106      	bne.n	800662a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a24      	ldr	r2, [pc, #144]	; (80066c0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d009      	beq.n	8006648 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a22      	ldr	r2, [pc, #136]	; (80066c4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a21      	ldr	r2, [pc, #132]	; (80066c8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d12b      	bne.n	80066a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	051b      	lsls	r3, r3, #20
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a11      	ldr	r2, [pc, #68]	; (80066c0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d009      	beq.n	8006692 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a10      	ldr	r2, [pc, #64]	; (80066c4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d004      	beq.n	8006692 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a0e      	ldr	r2, [pc, #56]	; (80066c8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d106      	bne.n	80066a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40012c00 	.word	0x40012c00
 80066c4:	40013400 	.word	0x40013400
 80066c8:	40015000 	.word	0x40015000

080066cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f003 031f 	and.w	r3, r3, #31
 800676a:	2204      	movs	r2, #4
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a1a      	ldr	r2, [r3, #32]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	43db      	mvns	r3, r3
 800677a:	401a      	ands	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a1a      	ldr	r2, [r3, #32]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	fa01 f303 	lsl.w	r3, r1, r3
 8006790:	431a      	orrs	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	621a      	str	r2, [r3, #32]
}
 8006796:	bf00      	nop
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e042      	b.n	800683a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d106      	bne.n	80067cc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7fb fa0a 	bl	8001be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2224      	movs	r2, #36	; 0x24
 80067d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0201 	bic.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fc51 	bl	800708c <UART_SetConfig>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e022      	b.n	800683a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 ff41 	bl	8007684 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006810:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006820:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0201 	orr.w	r2, r2, #1
 8006830:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 ffc8 	bl	80077c8 <UART_CheckIdleState>
 8006838:	4603      	mov	r3, r0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b08a      	sub	sp, #40	; 0x28
 8006846:	af02      	add	r7, sp, #8
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	4613      	mov	r3, r2
 8006850:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006858:	2b20      	cmp	r3, #32
 800685a:	f040 8083 	bne.w	8006964 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_UART_Transmit+0x28>
 8006864:	88fb      	ldrh	r3, [r7, #6]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e07b      	b.n	8006966 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_UART_Transmit+0x3a>
 8006878:	2302      	movs	r3, #2
 800687a:	e074      	b.n	8006966 <HAL_UART_Transmit+0x124>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2221      	movs	r2, #33	; 0x21
 8006890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006894:	f7fb fc68 	bl	8002168 <HAL_GetTick>
 8006898:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	88fa      	ldrh	r2, [r7, #6]
 800689e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	88fa      	ldrh	r2, [r7, #6]
 80068a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b2:	d108      	bne.n	80068c6 <HAL_UART_Transmit+0x84>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	e003      	b.n	80068ce <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80068d6:	e02c      	b.n	8006932 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2200      	movs	r2, #0
 80068e0:	2180      	movs	r1, #128	; 0x80
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 ffbb 	bl	800785e <UART_WaitOnFlagUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e039      	b.n	8006966 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10b      	bne.n	8006910 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006906:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	3302      	adds	r3, #2
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	e007      	b.n	8006920 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	781a      	ldrb	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	3301      	adds	r3, #1
 800691e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1cc      	bne.n	80068d8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2200      	movs	r2, #0
 8006946:	2140      	movs	r1, #64	; 0x40
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 ff88 	bl	800785e <UART_WaitOnFlagUntilTimeout>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e006      	b.n	8006966 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	e000      	b.n	8006966 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006964:	2302      	movs	r3, #2
  }
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	; 0x28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006984:	2b20      	cmp	r3, #32
 8006986:	d142      	bne.n	8006a0e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <HAL_UART_Receive_IT+0x24>
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e03b      	b.n	8006a10 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d101      	bne.n	80069a6 <HAL_UART_Receive_IT+0x36>
 80069a2:	2302      	movs	r3, #2
 80069a4:	e034      	b.n	8006a10 <HAL_UART_Receive_IT+0xa0>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <HAL_UART_Receive_IT+0xa8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d01f      	beq.n	80069fe <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d018      	beq.n	80069fe <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	613b      	str	r3, [r7, #16]
   return(result);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	623b      	str	r3, [r7, #32]
 80069ec:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	69f9      	ldr	r1, [r7, #28]
 80069f0:	6a3a      	ldr	r2, [r7, #32]
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e6      	bne.n	80069cc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	461a      	mov	r2, r3
 8006a02:	68b9      	ldr	r1, [r7, #8]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fff3 	bl	80079f0 <UART_Start_Receive_IT>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	e000      	b.n	8006a10 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006a0e:	2302      	movs	r3, #2
  }
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3728      	adds	r7, #40	; 0x28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40008000 	.word	0x40008000

08006a1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b0ba      	sub	sp, #232	; 0xe8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a46:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d11b      	bne.n	8006a90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d015      	beq.n	8006a90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d105      	bne.n	8006a7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d009      	beq.n	8006a90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 82d6 	beq.w	8007032 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
      }
      return;
 8006a8e:	e2d0      	b.n	8007032 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 811f 	beq.w	8006cd8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a9e:	4b8b      	ldr	r3, [pc, #556]	; (8006ccc <HAL_UART_IRQHandler+0x2b0>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006aa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006aaa:	4b89      	ldr	r3, [pc, #548]	; (8006cd0 <HAL_UART_IRQHandler+0x2b4>)
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 8112 	beq.w	8006cd8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d011      	beq.n	8006ae4 <HAL_UART_IRQHandler+0xc8>
 8006ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ada:	f043 0201 	orr.w	r2, r3, #1
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d011      	beq.n	8006b14 <HAL_UART_IRQHandler+0xf8>
 8006af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2202      	movs	r2, #2
 8006b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0a:	f043 0204 	orr.w	r2, r3, #4
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d011      	beq.n	8006b44 <HAL_UART_IRQHandler+0x128>
 8006b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00b      	beq.n	8006b44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2204      	movs	r2, #4
 8006b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b3a:	f043 0202 	orr.w	r2, r3, #2
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b48:	f003 0308 	and.w	r3, r3, #8
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d017      	beq.n	8006b80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b54:	f003 0320 	and.w	r3, r3, #32
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b60:	4b5a      	ldr	r3, [pc, #360]	; (8006ccc <HAL_UART_IRQHandler+0x2b0>)
 8006b62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2208      	movs	r2, #8
 8006b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b76:	f043 0208 	orr.w	r2, r3, #8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d012      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x196>
 8006b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00c      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ba0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ba8:	f043 0220 	orr.w	r2, r3, #32
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 823c 	beq.w	8007036 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d013      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d105      	bne.n	8006be2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d007      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c06:	2b40      	cmp	r3, #64	; 0x40
 8006c08:	d005      	beq.n	8006c16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d04f      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f001 f814 	bl	8007c44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	2b40      	cmp	r3, #64	; 0x40
 8006c28:	d141      	bne.n	8006cae <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3308      	adds	r3, #8
 8006c52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1d9      	bne.n	8006c2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d013      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c82:	4a14      	ldr	r2, [pc, #80]	; (8006cd4 <HAL_UART_IRQHandler+0x2b8>)
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fc fcbb 	bl	8003606 <HAL_DMA_Abort_IT>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d017      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca4:	e00f      	b.n	8006cc6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f9da 	bl	8007060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cac:	e00b      	b.n	8006cc6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f9d6 	bl	8007060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb4:	e007      	b.n	8006cc6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f9d2 	bl	8007060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006cc4:	e1b7      	b.n	8007036 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc6:	bf00      	nop
    return;
 8006cc8:	e1b5      	b.n	8007036 <HAL_UART_IRQHandler+0x61a>
 8006cca:	bf00      	nop
 8006ccc:	10000001 	.word	0x10000001
 8006cd0:	04000120 	.word	0x04000120
 8006cd4:	08007d11 	.word	0x08007d11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	f040 814a 	bne.w	8006f76 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce6:	f003 0310 	and.w	r3, r3, #16
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 8143 	beq.w	8006f76 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf4:	f003 0310 	and.w	r3, r3, #16
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 813c 	beq.w	8006f76 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2210      	movs	r2, #16
 8006d04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	f040 80b5 	bne.w	8006e80 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 8187 	beq.w	800703a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d36:	429a      	cmp	r2, r3
 8006d38:	f080 817f 	bcs.w	800703a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0320 	and.w	r3, r3, #32
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f040 8086 	bne.w	8006e64 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1da      	bne.n	8006d58 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3308      	adds	r3, #8
 8006da8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006db4:	f023 0301 	bic.w	r3, r3, #1
 8006db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006dca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e1      	bne.n	8006da2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3308      	adds	r3, #8
 8006de4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e3      	bne.n	8006dde <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e34:	f023 0310 	bic.w	r3, r3, #16
 8006e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e46:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e4      	bne.n	8006e24 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fc fb78 	bl	8003554 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f8fb 	bl	8007074 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e7e:	e0dc      	b.n	800703a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 80ce 	beq.w	800703e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006ea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80c9 	beq.w	800703e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ebc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ece:	647b      	str	r3, [r7, #68]	; 0x44
 8006ed0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e4      	bne.n	8006eac <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3308      	adds	r3, #8
 8006f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f0a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e1      	bne.n	8006ee2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0310 	bic.w	r3, r3, #16
 8006f46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f54:	61fb      	str	r3, [r7, #28]
 8006f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	69b9      	ldr	r1, [r7, #24]
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	e841 2300 	strex	r3, r2, [r1]
 8006f60:	617b      	str	r3, [r7, #20]
   return(result);
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e4      	bne.n	8006f32 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f880 	bl	8007074 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f74:	e063      	b.n	800703e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00e      	beq.n	8006fa0 <HAL_UART_IRQHandler+0x584>
 8006f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d008      	beq.n	8006fa0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f001 fb57 	bl	800864c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f9e:	e051      	b.n	8007044 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d014      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d105      	bne.n	8006fc4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d03a      	beq.n	8007042 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
    }
    return;
 8006fd4:	e035      	b.n	8007042 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d009      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x5da>
 8006fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fea4 	bl	8007d3c <UART_EndTransmit_IT>
    return;
 8006ff4:	e026      	b.n	8007044 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d009      	beq.n	8007016 <HAL_UART_IRQHandler+0x5fa>
 8007002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007006:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 fb30 	bl	8008674 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007014:	e016      	b.n	8007044 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800701a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d010      	beq.n	8007044 <HAL_UART_IRQHandler+0x628>
 8007022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007026:	2b00      	cmp	r3, #0
 8007028:	da0c      	bge.n	8007044 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 fb18 	bl	8008660 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007030:	e008      	b.n	8007044 <HAL_UART_IRQHandler+0x628>
      return;
 8007032:	bf00      	nop
 8007034:	e006      	b.n	8007044 <HAL_UART_IRQHandler+0x628>
    return;
 8007036:	bf00      	nop
 8007038:	e004      	b.n	8007044 <HAL_UART_IRQHandler+0x628>
      return;
 800703a:	bf00      	nop
 800703c:	e002      	b.n	8007044 <HAL_UART_IRQHandler+0x628>
      return;
 800703e:	bf00      	nop
 8007040:	e000      	b.n	8007044 <HAL_UART_IRQHandler+0x628>
    return;
 8007042:	bf00      	nop
  }
}
 8007044:	37e8      	adds	r7, #232	; 0xe8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop

0800704c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800708c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007090:	b08c      	sub	sp, #48	; 0x30
 8007092:	af00      	add	r7, sp, #0
 8007094:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	431a      	orrs	r2, r3
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	431a      	orrs	r2, r3
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4baa      	ldr	r3, [pc, #680]	; (8007364 <UART_SetConfig+0x2d8>)
 80070bc:	4013      	ands	r3, r2
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	6812      	ldr	r2, [r2, #0]
 80070c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070c4:	430b      	orrs	r3, r1
 80070c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a9f      	ldr	r2, [pc, #636]	; (8007368 <UART_SetConfig+0x2dc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d004      	beq.n	80070f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f4:	4313      	orrs	r3, r2
 80070f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007102:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	6812      	ldr	r2, [r2, #0]
 800710a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800710c:	430b      	orrs	r3, r1
 800710e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	f023 010f 	bic.w	r1, r3, #15
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a90      	ldr	r2, [pc, #576]	; (800736c <UART_SetConfig+0x2e0>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d125      	bne.n	800717c <UART_SetConfig+0xf0>
 8007130:	4b8f      	ldr	r3, [pc, #572]	; (8007370 <UART_SetConfig+0x2e4>)
 8007132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	2b03      	cmp	r3, #3
 800713c:	d81a      	bhi.n	8007174 <UART_SetConfig+0xe8>
 800713e:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <UART_SetConfig+0xb8>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007155 	.word	0x08007155
 8007148:	08007165 	.word	0x08007165
 800714c:	0800715d 	.word	0x0800715d
 8007150:	0800716d 	.word	0x0800716d
 8007154:	2301      	movs	r3, #1
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715a:	e116      	b.n	800738a <UART_SetConfig+0x2fe>
 800715c:	2302      	movs	r3, #2
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007162:	e112      	b.n	800738a <UART_SetConfig+0x2fe>
 8007164:	2304      	movs	r3, #4
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716a:	e10e      	b.n	800738a <UART_SetConfig+0x2fe>
 800716c:	2308      	movs	r3, #8
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007172:	e10a      	b.n	800738a <UART_SetConfig+0x2fe>
 8007174:	2310      	movs	r3, #16
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717a:	e106      	b.n	800738a <UART_SetConfig+0x2fe>
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a7c      	ldr	r2, [pc, #496]	; (8007374 <UART_SetConfig+0x2e8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d138      	bne.n	80071f8 <UART_SetConfig+0x16c>
 8007186:	4b7a      	ldr	r3, [pc, #488]	; (8007370 <UART_SetConfig+0x2e4>)
 8007188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718c:	f003 030c 	and.w	r3, r3, #12
 8007190:	2b0c      	cmp	r3, #12
 8007192:	d82d      	bhi.n	80071f0 <UART_SetConfig+0x164>
 8007194:	a201      	add	r2, pc, #4	; (adr r2, 800719c <UART_SetConfig+0x110>)
 8007196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719a:	bf00      	nop
 800719c:	080071d1 	.word	0x080071d1
 80071a0:	080071f1 	.word	0x080071f1
 80071a4:	080071f1 	.word	0x080071f1
 80071a8:	080071f1 	.word	0x080071f1
 80071ac:	080071e1 	.word	0x080071e1
 80071b0:	080071f1 	.word	0x080071f1
 80071b4:	080071f1 	.word	0x080071f1
 80071b8:	080071f1 	.word	0x080071f1
 80071bc:	080071d9 	.word	0x080071d9
 80071c0:	080071f1 	.word	0x080071f1
 80071c4:	080071f1 	.word	0x080071f1
 80071c8:	080071f1 	.word	0x080071f1
 80071cc:	080071e9 	.word	0x080071e9
 80071d0:	2300      	movs	r3, #0
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d6:	e0d8      	b.n	800738a <UART_SetConfig+0x2fe>
 80071d8:	2302      	movs	r3, #2
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071de:	e0d4      	b.n	800738a <UART_SetConfig+0x2fe>
 80071e0:	2304      	movs	r3, #4
 80071e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071e6:	e0d0      	b.n	800738a <UART_SetConfig+0x2fe>
 80071e8:	2308      	movs	r3, #8
 80071ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ee:	e0cc      	b.n	800738a <UART_SetConfig+0x2fe>
 80071f0:	2310      	movs	r3, #16
 80071f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071f6:	e0c8      	b.n	800738a <UART_SetConfig+0x2fe>
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a5e      	ldr	r2, [pc, #376]	; (8007378 <UART_SetConfig+0x2ec>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d125      	bne.n	800724e <UART_SetConfig+0x1c2>
 8007202:	4b5b      	ldr	r3, [pc, #364]	; (8007370 <UART_SetConfig+0x2e4>)
 8007204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007208:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800720c:	2b30      	cmp	r3, #48	; 0x30
 800720e:	d016      	beq.n	800723e <UART_SetConfig+0x1b2>
 8007210:	2b30      	cmp	r3, #48	; 0x30
 8007212:	d818      	bhi.n	8007246 <UART_SetConfig+0x1ba>
 8007214:	2b20      	cmp	r3, #32
 8007216:	d00a      	beq.n	800722e <UART_SetConfig+0x1a2>
 8007218:	2b20      	cmp	r3, #32
 800721a:	d814      	bhi.n	8007246 <UART_SetConfig+0x1ba>
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <UART_SetConfig+0x19a>
 8007220:	2b10      	cmp	r3, #16
 8007222:	d008      	beq.n	8007236 <UART_SetConfig+0x1aa>
 8007224:	e00f      	b.n	8007246 <UART_SetConfig+0x1ba>
 8007226:	2300      	movs	r3, #0
 8007228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800722c:	e0ad      	b.n	800738a <UART_SetConfig+0x2fe>
 800722e:	2302      	movs	r3, #2
 8007230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007234:	e0a9      	b.n	800738a <UART_SetConfig+0x2fe>
 8007236:	2304      	movs	r3, #4
 8007238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800723c:	e0a5      	b.n	800738a <UART_SetConfig+0x2fe>
 800723e:	2308      	movs	r3, #8
 8007240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007244:	e0a1      	b.n	800738a <UART_SetConfig+0x2fe>
 8007246:	2310      	movs	r3, #16
 8007248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800724c:	e09d      	b.n	800738a <UART_SetConfig+0x2fe>
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a4a      	ldr	r2, [pc, #296]	; (800737c <UART_SetConfig+0x2f0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d125      	bne.n	80072a4 <UART_SetConfig+0x218>
 8007258:	4b45      	ldr	r3, [pc, #276]	; (8007370 <UART_SetConfig+0x2e4>)
 800725a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007262:	2bc0      	cmp	r3, #192	; 0xc0
 8007264:	d016      	beq.n	8007294 <UART_SetConfig+0x208>
 8007266:	2bc0      	cmp	r3, #192	; 0xc0
 8007268:	d818      	bhi.n	800729c <UART_SetConfig+0x210>
 800726a:	2b80      	cmp	r3, #128	; 0x80
 800726c:	d00a      	beq.n	8007284 <UART_SetConfig+0x1f8>
 800726e:	2b80      	cmp	r3, #128	; 0x80
 8007270:	d814      	bhi.n	800729c <UART_SetConfig+0x210>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <UART_SetConfig+0x1f0>
 8007276:	2b40      	cmp	r3, #64	; 0x40
 8007278:	d008      	beq.n	800728c <UART_SetConfig+0x200>
 800727a:	e00f      	b.n	800729c <UART_SetConfig+0x210>
 800727c:	2300      	movs	r3, #0
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007282:	e082      	b.n	800738a <UART_SetConfig+0x2fe>
 8007284:	2302      	movs	r3, #2
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800728a:	e07e      	b.n	800738a <UART_SetConfig+0x2fe>
 800728c:	2304      	movs	r3, #4
 800728e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007292:	e07a      	b.n	800738a <UART_SetConfig+0x2fe>
 8007294:	2308      	movs	r3, #8
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800729a:	e076      	b.n	800738a <UART_SetConfig+0x2fe>
 800729c:	2310      	movs	r3, #16
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072a2:	e072      	b.n	800738a <UART_SetConfig+0x2fe>
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a35      	ldr	r2, [pc, #212]	; (8007380 <UART_SetConfig+0x2f4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d12a      	bne.n	8007304 <UART_SetConfig+0x278>
 80072ae:	4b30      	ldr	r3, [pc, #192]	; (8007370 <UART_SetConfig+0x2e4>)
 80072b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072bc:	d01a      	beq.n	80072f4 <UART_SetConfig+0x268>
 80072be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072c2:	d81b      	bhi.n	80072fc <UART_SetConfig+0x270>
 80072c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c8:	d00c      	beq.n	80072e4 <UART_SetConfig+0x258>
 80072ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ce:	d815      	bhi.n	80072fc <UART_SetConfig+0x270>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <UART_SetConfig+0x250>
 80072d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d8:	d008      	beq.n	80072ec <UART_SetConfig+0x260>
 80072da:	e00f      	b.n	80072fc <UART_SetConfig+0x270>
 80072dc:	2300      	movs	r3, #0
 80072de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e2:	e052      	b.n	800738a <UART_SetConfig+0x2fe>
 80072e4:	2302      	movs	r3, #2
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ea:	e04e      	b.n	800738a <UART_SetConfig+0x2fe>
 80072ec:	2304      	movs	r3, #4
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f2:	e04a      	b.n	800738a <UART_SetConfig+0x2fe>
 80072f4:	2308      	movs	r3, #8
 80072f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072fa:	e046      	b.n	800738a <UART_SetConfig+0x2fe>
 80072fc:	2310      	movs	r3, #16
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007302:	e042      	b.n	800738a <UART_SetConfig+0x2fe>
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a17      	ldr	r2, [pc, #92]	; (8007368 <UART_SetConfig+0x2dc>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d13a      	bne.n	8007384 <UART_SetConfig+0x2f8>
 800730e:	4b18      	ldr	r3, [pc, #96]	; (8007370 <UART_SetConfig+0x2e4>)
 8007310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007314:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007318:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800731c:	d01a      	beq.n	8007354 <UART_SetConfig+0x2c8>
 800731e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007322:	d81b      	bhi.n	800735c <UART_SetConfig+0x2d0>
 8007324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007328:	d00c      	beq.n	8007344 <UART_SetConfig+0x2b8>
 800732a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800732e:	d815      	bhi.n	800735c <UART_SetConfig+0x2d0>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <UART_SetConfig+0x2b0>
 8007334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007338:	d008      	beq.n	800734c <UART_SetConfig+0x2c0>
 800733a:	e00f      	b.n	800735c <UART_SetConfig+0x2d0>
 800733c:	2300      	movs	r3, #0
 800733e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007342:	e022      	b.n	800738a <UART_SetConfig+0x2fe>
 8007344:	2302      	movs	r3, #2
 8007346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800734a:	e01e      	b.n	800738a <UART_SetConfig+0x2fe>
 800734c:	2304      	movs	r3, #4
 800734e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007352:	e01a      	b.n	800738a <UART_SetConfig+0x2fe>
 8007354:	2308      	movs	r3, #8
 8007356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800735a:	e016      	b.n	800738a <UART_SetConfig+0x2fe>
 800735c:	2310      	movs	r3, #16
 800735e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007362:	e012      	b.n	800738a <UART_SetConfig+0x2fe>
 8007364:	cfff69f3 	.word	0xcfff69f3
 8007368:	40008000 	.word	0x40008000
 800736c:	40013800 	.word	0x40013800
 8007370:	40021000 	.word	0x40021000
 8007374:	40004400 	.word	0x40004400
 8007378:	40004800 	.word	0x40004800
 800737c:	40004c00 	.word	0x40004c00
 8007380:	40005000 	.word	0x40005000
 8007384:	2310      	movs	r3, #16
 8007386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4aae      	ldr	r2, [pc, #696]	; (8007648 <UART_SetConfig+0x5bc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	f040 8097 	bne.w	80074c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007396:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800739a:	2b08      	cmp	r3, #8
 800739c:	d823      	bhi.n	80073e6 <UART_SetConfig+0x35a>
 800739e:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <UART_SetConfig+0x318>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	080073c9 	.word	0x080073c9
 80073a8:	080073e7 	.word	0x080073e7
 80073ac:	080073d1 	.word	0x080073d1
 80073b0:	080073e7 	.word	0x080073e7
 80073b4:	080073d7 	.word	0x080073d7
 80073b8:	080073e7 	.word	0x080073e7
 80073bc:	080073e7 	.word	0x080073e7
 80073c0:	080073e7 	.word	0x080073e7
 80073c4:	080073df 	.word	0x080073df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c8:	f7fd f8b8 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 80073cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073ce:	e010      	b.n	80073f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073d0:	4b9e      	ldr	r3, [pc, #632]	; (800764c <UART_SetConfig+0x5c0>)
 80073d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073d4:	e00d      	b.n	80073f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073d6:	f7fd f843 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 80073da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073dc:	e009      	b.n	80073f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073e4:	e005      	b.n	80073f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8130 	beq.w	800765a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	4a94      	ldr	r2, [pc, #592]	; (8007650 <UART_SetConfig+0x5c4>)
 8007400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007404:	461a      	mov	r2, r3
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	fbb3 f3f2 	udiv	r3, r3, r2
 800740c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	4613      	mov	r3, r2
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	4413      	add	r3, r2
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	429a      	cmp	r2, r3
 800741c:	d305      	bcc.n	800742a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	429a      	cmp	r2, r3
 8007428:	d903      	bls.n	8007432 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007430:	e113      	b.n	800765a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	2200      	movs	r2, #0
 8007436:	60bb      	str	r3, [r7, #8]
 8007438:	60fa      	str	r2, [r7, #12]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	4a84      	ldr	r2, [pc, #528]	; (8007650 <UART_SetConfig+0x5c4>)
 8007440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007444:	b29b      	uxth	r3, r3
 8007446:	2200      	movs	r2, #0
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007454:	f7f9 fa5a 	bl	800090c <__aeabi_uldivmod>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4610      	mov	r0, r2
 800745e:	4619      	mov	r1, r3
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	f04f 0300 	mov.w	r3, #0
 8007468:	020b      	lsls	r3, r1, #8
 800746a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800746e:	0202      	lsls	r2, r0, #8
 8007470:	6979      	ldr	r1, [r7, #20]
 8007472:	6849      	ldr	r1, [r1, #4]
 8007474:	0849      	lsrs	r1, r1, #1
 8007476:	2000      	movs	r0, #0
 8007478:	460c      	mov	r4, r1
 800747a:	4605      	mov	r5, r0
 800747c:	eb12 0804 	adds.w	r8, r2, r4
 8007480:	eb43 0905 	adc.w	r9, r3, r5
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	469a      	mov	sl, r3
 800748c:	4693      	mov	fp, r2
 800748e:	4652      	mov	r2, sl
 8007490:	465b      	mov	r3, fp
 8007492:	4640      	mov	r0, r8
 8007494:	4649      	mov	r1, r9
 8007496:	f7f9 fa39 	bl	800090c <__aeabi_uldivmod>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4613      	mov	r3, r2
 80074a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074a8:	d308      	bcc.n	80074bc <UART_SetConfig+0x430>
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074b0:	d204      	bcs.n	80074bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6a3a      	ldr	r2, [r7, #32]
 80074b8:	60da      	str	r2, [r3, #12]
 80074ba:	e0ce      	b.n	800765a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074c2:	e0ca      	b.n	800765a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074cc:	d166      	bne.n	800759c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80074ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074d2:	2b08      	cmp	r3, #8
 80074d4:	d827      	bhi.n	8007526 <UART_SetConfig+0x49a>
 80074d6:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <UART_SetConfig+0x450>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	08007501 	.word	0x08007501
 80074e0:	08007509 	.word	0x08007509
 80074e4:	08007511 	.word	0x08007511
 80074e8:	08007527 	.word	0x08007527
 80074ec:	08007517 	.word	0x08007517
 80074f0:	08007527 	.word	0x08007527
 80074f4:	08007527 	.word	0x08007527
 80074f8:	08007527 	.word	0x08007527
 80074fc:	0800751f 	.word	0x0800751f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007500:	f7fd f81c 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8007504:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007506:	e014      	b.n	8007532 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007508:	f7fd f82e 	bl	8004568 <HAL_RCC_GetPCLK2Freq>
 800750c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800750e:	e010      	b.n	8007532 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007510:	4b4e      	ldr	r3, [pc, #312]	; (800764c <UART_SetConfig+0x5c0>)
 8007512:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007514:	e00d      	b.n	8007532 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007516:	f7fc ffa3 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 800751a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800751c:	e009      	b.n	8007532 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800751e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007522:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007524:	e005      	b.n	8007532 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8090 	beq.w	800765a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	4a44      	ldr	r2, [pc, #272]	; (8007650 <UART_SetConfig+0x5c4>)
 8007540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007544:	461a      	mov	r2, r3
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	fbb3 f3f2 	udiv	r3, r3, r2
 800754c:	005a      	lsls	r2, r3, #1
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	085b      	lsrs	r3, r3, #1
 8007554:	441a      	add	r2, r3
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	fbb2 f3f3 	udiv	r3, r2, r3
 800755e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	2b0f      	cmp	r3, #15
 8007564:	d916      	bls.n	8007594 <UART_SetConfig+0x508>
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800756c:	d212      	bcs.n	8007594 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	b29b      	uxth	r3, r3
 8007572:	f023 030f 	bic.w	r3, r3, #15
 8007576:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	085b      	lsrs	r3, r3, #1
 800757c:	b29b      	uxth	r3, r3
 800757e:	f003 0307 	and.w	r3, r3, #7
 8007582:	b29a      	uxth	r2, r3
 8007584:	8bfb      	ldrh	r3, [r7, #30]
 8007586:	4313      	orrs	r3, r2
 8007588:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	8bfa      	ldrh	r2, [r7, #30]
 8007590:	60da      	str	r2, [r3, #12]
 8007592:	e062      	b.n	800765a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800759a:	e05e      	b.n	800765a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800759c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d828      	bhi.n	80075f6 <UART_SetConfig+0x56a>
 80075a4:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <UART_SetConfig+0x520>)
 80075a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075aa:	bf00      	nop
 80075ac:	080075d1 	.word	0x080075d1
 80075b0:	080075d9 	.word	0x080075d9
 80075b4:	080075e1 	.word	0x080075e1
 80075b8:	080075f7 	.word	0x080075f7
 80075bc:	080075e7 	.word	0x080075e7
 80075c0:	080075f7 	.word	0x080075f7
 80075c4:	080075f7 	.word	0x080075f7
 80075c8:	080075f7 	.word	0x080075f7
 80075cc:	080075ef 	.word	0x080075ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075d0:	f7fc ffb4 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 80075d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075d6:	e014      	b.n	8007602 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075d8:	f7fc ffc6 	bl	8004568 <HAL_RCC_GetPCLK2Freq>
 80075dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075de:	e010      	b.n	8007602 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075e0:	4b1a      	ldr	r3, [pc, #104]	; (800764c <UART_SetConfig+0x5c0>)
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075e4:	e00d      	b.n	8007602 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075e6:	f7fc ff3b 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 80075ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075ec:	e009      	b.n	8007602 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075f4:	e005      	b.n	8007602 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007600:	bf00      	nop
    }

    if (pclk != 0U)
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d028      	beq.n	800765a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	4a10      	ldr	r2, [pc, #64]	; (8007650 <UART_SetConfig+0x5c4>)
 800760e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007612:	461a      	mov	r2, r3
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	fbb3 f2f2 	udiv	r2, r3, r2
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	085b      	lsrs	r3, r3, #1
 8007620:	441a      	add	r2, r3
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	fbb2 f3f3 	udiv	r3, r2, r3
 800762a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	2b0f      	cmp	r3, #15
 8007630:	d910      	bls.n	8007654 <UART_SetConfig+0x5c8>
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007638:	d20c      	bcs.n	8007654 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	b29a      	uxth	r2, r3
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60da      	str	r2, [r3, #12]
 8007644:	e009      	b.n	800765a <UART_SetConfig+0x5ce>
 8007646:	bf00      	nop
 8007648:	40008000 	.word	0x40008000
 800764c:	00f42400 	.word	0x00f42400
 8007650:	08009e74 	.word	0x08009e74
      }
      else
      {
        ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2201      	movs	r2, #1
 800765e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2201      	movs	r2, #1
 8007666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2200      	movs	r2, #0
 800766e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2200      	movs	r2, #0
 8007674:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007676:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800767a:	4618      	mov	r0, r3
 800767c:	3730      	adds	r7, #48	; 0x30
 800767e:	46bd      	mov	sp, r7
 8007680:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00a      	beq.n	80076ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00a      	beq.n	80076f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	430a      	orrs	r2, r1
 8007712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007718:	f003 0310 	and.w	r3, r3, #16
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00a      	beq.n	8007736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	2b00      	cmp	r3, #0
 8007762:	d01a      	beq.n	800779a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800777e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007782:	d10a      	bne.n	800779a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	605a      	str	r2, [r3, #4]
  }
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077d8:	f7fa fcc6 	bl	8002168 <HAL_GetTick>
 80077dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0308 	and.w	r3, r3, #8
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d10e      	bne.n	800780a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f82f 	bl	800785e <UART_WaitOnFlagUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e025      	b.n	8007856 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b04      	cmp	r3, #4
 8007816:	d10e      	bne.n	8007836 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f819 	bl	800785e <UART_WaitOnFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e00f      	b.n	8007856 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b09c      	sub	sp, #112	; 0x70
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	603b      	str	r3, [r7, #0]
 800786a:	4613      	mov	r3, r2
 800786c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800786e:	e0a9      	b.n	80079c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007876:	f000 80a5 	beq.w	80079c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800787a:	f7fa fc75 	bl	8002168 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007886:	429a      	cmp	r2, r3
 8007888:	d302      	bcc.n	8007890 <UART_WaitOnFlagUntilTimeout+0x32>
 800788a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800788c:	2b00      	cmp	r3, #0
 800788e:	d140      	bne.n	8007912 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800789e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078a4:	667b      	str	r3, [r7, #100]	; 0x64
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e6      	bne.n	8007890 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3308      	adds	r3, #8
 80078c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d4:	f023 0301 	bic.w	r3, r3, #1
 80078d8:	663b      	str	r3, [r7, #96]	; 0x60
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3308      	adds	r3, #8
 80078e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80078e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e5      	bne.n	80078c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2220      	movs	r2, #32
 8007902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e069      	b.n	80079e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b00      	cmp	r3, #0
 800791e:	d051      	beq.n	80079c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800792a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800792e:	d149      	bne.n	80079c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007938:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800794e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007958:	637b      	str	r3, [r7, #52]	; 0x34
 800795a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800795e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e6      	bne.n	800793a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3308      	adds	r3, #8
 8007972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	613b      	str	r3, [r7, #16]
   return(result);
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f023 0301 	bic.w	r3, r3, #1
 8007982:	66bb      	str	r3, [r7, #104]	; 0x68
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3308      	adds	r3, #8
 800798a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800798c:	623a      	str	r2, [r7, #32]
 800798e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	69f9      	ldr	r1, [r7, #28]
 8007992:	6a3a      	ldr	r2, [r7, #32]
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	61bb      	str	r3, [r7, #24]
   return(result);
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e5      	bne.n	800796c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2220      	movs	r2, #32
 80079ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e010      	b.n	80079e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	69da      	ldr	r2, [r3, #28]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	4013      	ands	r3, r2
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	bf0c      	ite	eq
 80079d4:	2301      	moveq	r3, #1
 80079d6:	2300      	movne	r3, #0
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	429a      	cmp	r2, r3
 80079e0:	f43f af46 	beq.w	8007870 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3770      	adds	r7, #112	; 0x70
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b0a3      	sub	sp, #140	; 0x8c
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	88fa      	ldrh	r2, [r7, #6]
 8007a08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	88fa      	ldrh	r2, [r7, #6]
 8007a10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a22:	d10e      	bne.n	8007a42 <UART_Start_Receive_IT+0x52>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d105      	bne.n	8007a38 <UART_Start_Receive_IT+0x48>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a36:	e02d      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	22ff      	movs	r2, #255	; 0xff
 8007a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a40:	e028      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10d      	bne.n	8007a66 <UART_Start_Receive_IT+0x76>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d104      	bne.n	8007a5c <UART_Start_Receive_IT+0x6c>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	22ff      	movs	r2, #255	; 0xff
 8007a56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a5a:	e01b      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	227f      	movs	r2, #127	; 0x7f
 8007a60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a64:	e016      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a6e:	d10d      	bne.n	8007a8c <UART_Start_Receive_IT+0x9c>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <UART_Start_Receive_IT+0x92>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	227f      	movs	r2, #127	; 0x7f
 8007a7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a80:	e008      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	223f      	movs	r2, #63	; 0x3f
 8007a86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a8a:	e003      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2222      	movs	r2, #34	; 0x22
 8007aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ab6:	f043 0301 	orr.w	r3, r3, #1
 8007aba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007ac8:	673a      	str	r2, [r7, #112]	; 0x70
 8007aca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007ace:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e3      	bne.n	8007aa4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ae4:	d153      	bne.n	8007b8e <UART_Start_Receive_IT+0x19e>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007aec:	88fa      	ldrh	r2, [r7, #6]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d34d      	bcc.n	8007b8e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afa:	d107      	bne.n	8007b0c <UART_Start_Receive_IT+0x11c>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d103      	bne.n	8007b0c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4a4b      	ldr	r2, [pc, #300]	; (8007c34 <UART_Start_Receive_IT+0x244>)
 8007b08:	671a      	str	r2, [r3, #112]	; 0x70
 8007b0a:	e002      	b.n	8007b12 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4a4a      	ldr	r2, [pc, #296]	; (8007c38 <UART_Start_Receive_IT+0x248>)
 8007b10:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d01a      	beq.n	8007b58 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b46:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e4      	bne.n	8007b22 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b62:	e853 3f00 	ldrex	r3, [r3]
 8007b66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3308      	adds	r3, #8
 8007b76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b78:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b7a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b80:	e841 2300 	strex	r3, r2, [r1]
 8007b84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e5      	bne.n	8007b58 <UART_Start_Receive_IT+0x168>
 8007b8c:	e04a      	b.n	8007c24 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b96:	d107      	bne.n	8007ba8 <UART_Start_Receive_IT+0x1b8>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d103      	bne.n	8007ba8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4a26      	ldr	r2, [pc, #152]	; (8007c3c <UART_Start_Receive_IT+0x24c>)
 8007ba4:	671a      	str	r2, [r3, #112]	; 0x70
 8007ba6:	e002      	b.n	8007bae <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4a25      	ldr	r2, [pc, #148]	; (8007c40 <UART_Start_Receive_IT+0x250>)
 8007bac:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d019      	beq.n	8007bf2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007bd2:	677b      	str	r3, [r7, #116]	; 0x74
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e6      	bne.n	8007bbe <UART_Start_Receive_IT+0x1ce>
 8007bf0:	e018      	b.n	8007c24 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	f043 0320 	orr.w	r3, r3, #32
 8007c06:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c10:	623b      	str	r3, [r7, #32]
 8007c12:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	69f9      	ldr	r1, [r7, #28]
 8007c16:	6a3a      	ldr	r2, [r7, #32]
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e6      	bne.n	8007bf2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	378c      	adds	r7, #140	; 0x8c
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	0800834d 	.word	0x0800834d
 8007c38:	08008055 	.word	0x08008055
 8007c3c:	08007ef3 	.word	0x08007ef3
 8007c40:	08007d93 	.word	0x08007d93

08007c44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b095      	sub	sp, #84	; 0x54
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8007c6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c72:	e841 2300 	strex	r3, r2, [r1]
 8007c76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1e6      	bne.n	8007c4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3308      	adds	r3, #8
 8007c84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	e853 3f00 	ldrex	r3, [r3]
 8007c8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c94:	f023 0301 	bic.w	r3, r3, #1
 8007c98:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e3      	bne.n	8007c7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d118      	bne.n	8007cf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f023 0310 	bic.w	r3, r3, #16
 8007cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cdc:	61bb      	str	r3, [r7, #24]
 8007cde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6979      	ldr	r1, [r7, #20]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e6      	bne.n	8007cbe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007d04:	bf00      	nop
 8007d06:	3754      	adds	r7, #84	; 0x54
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f7ff f996 	bl	8007060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d34:	bf00      	nop
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d58:	61fb      	str	r3, [r7, #28]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	61bb      	str	r3, [r7, #24]
 8007d64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6979      	ldr	r1, [r7, #20]
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e6      	bne.n	8007d44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff f961 	bl	800704c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d8a:	bf00      	nop
 8007d8c:	3720      	adds	r7, #32
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b096      	sub	sp, #88	; 0x58
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007da0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007daa:	2b22      	cmp	r3, #34	; 0x22
 8007dac:	f040 8095 	bne.w	8007eda <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007dba:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007dbe:	b2d9      	uxtb	r1, r3
 8007dc0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dca:	400a      	ands	r2, r1
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	3b01      	subs	r3, #1
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d178      	bne.n	8007eea <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e0c:	653b      	str	r3, [r7, #80]	; 0x50
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e16:	647b      	str	r3, [r7, #68]	; 0x44
 8007e18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e6      	bne.n	8007df8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3308      	adds	r3, #8
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	623b      	str	r3, [r7, #32]
   return(result);
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	f023 0301 	bic.w	r3, r3, #1
 8007e40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3308      	adds	r3, #8
 8007e48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e4a:	633a      	str	r2, [r7, #48]	; 0x30
 8007e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e5      	bne.n	8007e2a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d12e      	bne.n	8007ed2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 0310 	bic.w	r3, r3, #16
 8007e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e98:	61fb      	str	r3, [r7, #28]
 8007e9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	69b9      	ldr	r1, [r7, #24]
 8007e9e:	69fa      	ldr	r2, [r7, #28]
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e6      	bne.n	8007e7a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	f003 0310 	and.w	r3, r3, #16
 8007eb6:	2b10      	cmp	r3, #16
 8007eb8:	d103      	bne.n	8007ec2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2210      	movs	r2, #16
 8007ec0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7ff f8d2 	bl	8007074 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ed0:	e00b      	b.n	8007eea <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7fa f8de 	bl	8002094 <HAL_UART_RxCpltCallback>
}
 8007ed8:	e007      	b.n	8007eea <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	699a      	ldr	r2, [r3, #24]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0208 	orr.w	r2, r2, #8
 8007ee8:	619a      	str	r2, [r3, #24]
}
 8007eea:	bf00      	nop
 8007eec:	3758      	adds	r7, #88	; 0x58
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b096      	sub	sp, #88	; 0x58
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0a:	2b22      	cmp	r3, #34	; 0x22
 8007f0c:	f040 8095 	bne.w	800803a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f20:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007f24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f28:	4013      	ands	r3, r2
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f2e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f34:	1c9a      	adds	r2, r3, #2
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	3b01      	subs	r3, #1
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d178      	bne.n	800804a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f76:	643b      	str	r3, [r7, #64]	; 0x40
 8007f78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1e6      	bne.n	8007f58 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3308      	adds	r3, #8
 8007f90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	f023 0301 	bic.w	r3, r3, #1
 8007fa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e5      	bne.n	8007f8a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d12e      	bne.n	8008032 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f023 0310 	bic.w	r3, r3, #16
 8007fee:	647b      	str	r3, [r7, #68]	; 0x44
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ff8:	61bb      	str	r3, [r7, #24]
 8007ffa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffc:	6979      	ldr	r1, [r7, #20]
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	e841 2300 	strex	r3, r2, [r1]
 8008004:	613b      	str	r3, [r7, #16]
   return(result);
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e6      	bne.n	8007fda <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	f003 0310 	and.w	r3, r3, #16
 8008016:	2b10      	cmp	r3, #16
 8008018:	d103      	bne.n	8008022 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2210      	movs	r2, #16
 8008020:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff f822 	bl	8007074 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008030:	e00b      	b.n	800804a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7fa f82e 	bl	8002094 <HAL_UART_RxCpltCallback>
}
 8008038:	e007      	b.n	800804a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	699a      	ldr	r2, [r3, #24]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0208 	orr.w	r2, r2, #8
 8008048:	619a      	str	r2, [r3, #24]
}
 800804a:	bf00      	nop
 800804c:	3758      	adds	r7, #88	; 0x58
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b0a6      	sub	sp, #152	; 0x98
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008062:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808a:	2b22      	cmp	r3, #34	; 0x22
 800808c:	f040 814f 	bne.w	800832e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008096:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800809a:	e0f6      	b.n	800828a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080a6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80080aa:	b2d9      	uxtb	r1, r3
 80080ac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080b6:	400a      	ands	r2, r1
 80080b8:	b2d2      	uxtb	r2, r2
 80080ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	3b01      	subs	r3, #1
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d053      	beq.n	8008196 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d011      	beq.n	800811e <UART_RxISR_8BIT_FIFOEN+0xca>
 80080fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00b      	beq.n	800811e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2201      	movs	r2, #1
 800810c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008114:	f043 0201 	orr.w	r2, r3, #1
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800811e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d011      	beq.n	800814e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800812a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00b      	beq.n	800814e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2202      	movs	r2, #2
 800813c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008144:	f043 0204 	orr.w	r2, r3, #4
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800814e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008152:	f003 0304 	and.w	r3, r3, #4
 8008156:	2b00      	cmp	r3, #0
 8008158:	d011      	beq.n	800817e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800815a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00b      	beq.n	800817e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2204      	movs	r2, #4
 800816c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008174:	f043 0202 	orr.w	r2, r3, #2
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008184:	2b00      	cmp	r3, #0
 8008186:	d006      	beq.n	8008196 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7fe ff69 	bl	8007060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800819c:	b29b      	uxth	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d173      	bne.n	800828a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80081b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80081c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80081c6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80081ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80081cc:	e841 2300 	strex	r3, r2, [r1]
 80081d0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80081d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1e4      	bne.n	80081a2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3308      	adds	r3, #8
 80081de:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e2:	e853 3f00 	ldrex	r3, [r3]
 80081e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80081e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081ee:	f023 0301 	bic.w	r3, r3, #1
 80081f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3308      	adds	r3, #8
 80081fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80081fc:	657a      	str	r2, [r7, #84]	; 0x54
 80081fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008200:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008202:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008204:	e841 2300 	strex	r3, r2, [r1]
 8008208:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800820a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1e3      	bne.n	80081d8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2220      	movs	r2, #32
 8008214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008222:	2b01      	cmp	r3, #1
 8008224:	d12e      	bne.n	8008284 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	f023 0310 	bic.w	r3, r3, #16
 8008240:	67bb      	str	r3, [r7, #120]	; 0x78
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800824a:	643b      	str	r3, [r7, #64]	; 0x40
 800824c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e6      	bne.n	800822c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	f003 0310 	and.w	r3, r3, #16
 8008268:	2b10      	cmp	r3, #16
 800826a:	d103      	bne.n	8008274 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2210      	movs	r2, #16
 8008272:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7fe fef9 	bl	8007074 <HAL_UARTEx_RxEventCallback>
 8008282:	e002      	b.n	800828a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7f9 ff05 	bl	8002094 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800828a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800828e:	2b00      	cmp	r3, #0
 8008290:	d006      	beq.n	80082a0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008292:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b00      	cmp	r3, #0
 800829c:	f47f aefe 	bne.w	800809c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80082aa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d045      	beq.n	800833e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80082b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80082bc:	429a      	cmp	r2, r3
 80082be:	d23e      	bcs.n	800833e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3308      	adds	r3, #8
 80082c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	e853 3f00 	ldrex	r3, [r3]
 80082ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d6:	673b      	str	r3, [r7, #112]	; 0x70
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3308      	adds	r3, #8
 80082de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80082e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082e8:	e841 2300 	strex	r3, r2, [r1]
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e5      	bne.n	80082c0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a14      	ldr	r2, [pc, #80]	; (8008348 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80082f8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	e853 3f00 	ldrex	r3, [r3]
 8008306:	60bb      	str	r3, [r7, #8]
   return(result);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f043 0320 	orr.w	r3, r3, #32
 800830e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	461a      	mov	r2, r3
 8008316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008318:	61bb      	str	r3, [r7, #24]
 800831a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	6979      	ldr	r1, [r7, #20]
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	613b      	str	r3, [r7, #16]
   return(result);
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e6      	bne.n	80082fa <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800832c:	e007      	b.n	800833e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	699a      	ldr	r2, [r3, #24]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f042 0208 	orr.w	r2, r2, #8
 800833c:	619a      	str	r2, [r3, #24]
}
 800833e:	bf00      	nop
 8008340:	3798      	adds	r7, #152	; 0x98
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	08007d93 	.word	0x08007d93

0800834c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b0a8      	sub	sp, #160	; 0xa0
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800835a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008382:	2b22      	cmp	r3, #34	; 0x22
 8008384:	f040 8153 	bne.w	800862e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800838e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008392:	e0fa      	b.n	800858a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80083a6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80083aa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80083ae:	4013      	ands	r3, r2
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083bc:	1c9a      	adds	r2, r3, #2
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	3b01      	subs	r3, #1
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083e2:	f003 0307 	and.w	r3, r3, #7
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d053      	beq.n	8008492 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d011      	beq.n	800841a <UART_RxISR_16BIT_FIFOEN+0xce>
 80083f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00b      	beq.n	800841a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2201      	movs	r2, #1
 8008408:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008410:	f043 0201 	orr.w	r2, r3, #1
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800841a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800841e:	f003 0302 	and.w	r3, r3, #2
 8008422:	2b00      	cmp	r3, #0
 8008424:	d011      	beq.n	800844a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00b      	beq.n	800844a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2202      	movs	r2, #2
 8008438:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008440:	f043 0204 	orr.w	r2, r3, #4
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800844a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800844e:	f003 0304 	and.w	r3, r3, #4
 8008452:	2b00      	cmp	r3, #0
 8008454:	d011      	beq.n	800847a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008456:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00b      	beq.n	800847a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2204      	movs	r2, #4
 8008468:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008470:	f043 0202 	orr.w	r2, r3, #2
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d006      	beq.n	8008492 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7fe fdeb 	bl	8007060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d175      	bne.n	800858a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084a6:	e853 3f00 	ldrex	r3, [r3]
 80084aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084c2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084c8:	e841 2300 	strex	r3, r2, [r1]
 80084cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e4      	bne.n	800849e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3308      	adds	r3, #8
 80084da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084ea:	f023 0301 	bic.w	r3, r3, #1
 80084ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3308      	adds	r3, #8
 80084f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80084fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008502:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008504:	e841 2300 	strex	r3, r2, [r1]
 8008508:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800850a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e1      	bne.n	80084d4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2220      	movs	r2, #32
 8008514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008522:	2b01      	cmp	r3, #1
 8008524:	d12e      	bne.n	8008584 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800853a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853c:	f023 0310 	bic.w	r3, r3, #16
 8008540:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800854a:	647b      	str	r3, [r7, #68]	; 0x44
 800854c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008552:	e841 2300 	strex	r3, r2, [r1]
 8008556:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1e6      	bne.n	800852c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	f003 0310 	and.w	r3, r3, #16
 8008568:	2b10      	cmp	r3, #16
 800856a:	d103      	bne.n	8008574 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2210      	movs	r2, #16
 8008572:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7fe fd79 	bl	8007074 <HAL_UARTEx_RxEventCallback>
 8008582:	e002      	b.n	800858a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f7f9 fd85 	bl	8002094 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800858a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800858e:	2b00      	cmp	r3, #0
 8008590:	d006      	beq.n	80085a0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008592:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b00      	cmp	r3, #0
 800859c:	f47f aefa 	bne.w	8008394 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085a6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80085aa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d045      	beq.n	800863e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80085b8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80085bc:	429a      	cmp	r2, r3
 80085be:	d23e      	bcs.n	800863e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3308      	adds	r3, #8
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	e853 3f00 	ldrex	r3, [r3]
 80085ce:	623b      	str	r3, [r7, #32]
   return(result);
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085d6:	677b      	str	r3, [r7, #116]	; 0x74
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3308      	adds	r3, #8
 80085de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80085e0:	633a      	str	r2, [r7, #48]	; 0x30
 80085e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085e8:	e841 2300 	strex	r3, r2, [r1]
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e5      	bne.n	80085c0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a14      	ldr	r2, [pc, #80]	; (8008648 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80085f8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	e853 3f00 	ldrex	r3, [r3]
 8008606:	60fb      	str	r3, [r7, #12]
   return(result);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f043 0320 	orr.w	r3, r3, #32
 800860e:	673b      	str	r3, [r7, #112]	; 0x70
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	461a      	mov	r2, r3
 8008616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008618:	61fb      	str	r3, [r7, #28]
 800861a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861c:	69b9      	ldr	r1, [r7, #24]
 800861e:	69fa      	ldr	r2, [r7, #28]
 8008620:	e841 2300 	strex	r3, r2, [r1]
 8008624:	617b      	str	r3, [r7, #20]
   return(result);
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e6      	bne.n	80085fa <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800862c:	e007      	b.n	800863e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	699a      	ldr	r2, [r3, #24]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f042 0208 	orr.w	r2, r2, #8
 800863c:	619a      	str	r2, [r3, #24]
}
 800863e:	bf00      	nop
 8008640:	37a0      	adds	r7, #160	; 0xa0
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	08007ef3 	.word	0x08007ef3

0800864c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008696:	2b01      	cmp	r3, #1
 8008698:	d101      	bne.n	800869e <HAL_UARTEx_DisableFifoMode+0x16>
 800869a:	2302      	movs	r3, #2
 800869c:	e027      	b.n	80086ee <HAL_UARTEx_DisableFifoMode+0x66>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2224      	movs	r2, #36	; 0x24
 80086aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f022 0201 	bic.w	r2, r2, #1
 80086c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2220      	movs	r2, #32
 80086e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800870a:	2b01      	cmp	r3, #1
 800870c:	d101      	bne.n	8008712 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800870e:	2302      	movs	r3, #2
 8008710:	e02d      	b.n	800876e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2224      	movs	r2, #36	; 0x24
 800871e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 0201 	bic.w	r2, r2, #1
 8008738:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f850 	bl	80087f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2220      	movs	r2, #32
 8008760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800878a:	2302      	movs	r3, #2
 800878c:	e02d      	b.n	80087ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2224      	movs	r2, #36	; 0x24
 800879a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0201 	bic.w	r2, r2, #1
 80087b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f812 	bl	80087f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2220      	movs	r2, #32
 80087dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008800:	2b00      	cmp	r3, #0
 8008802:	d108      	bne.n	8008816 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008814:	e031      	b.n	800887a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008816:	2308      	movs	r3, #8
 8008818:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800881a:	2308      	movs	r3, #8
 800881c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	0e5b      	lsrs	r3, r3, #25
 8008826:	b2db      	uxtb	r3, r3
 8008828:	f003 0307 	and.w	r3, r3, #7
 800882c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	0f5b      	lsrs	r3, r3, #29
 8008836:	b2db      	uxtb	r3, r3
 8008838:	f003 0307 	and.w	r3, r3, #7
 800883c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	7b3a      	ldrb	r2, [r7, #12]
 8008842:	4911      	ldr	r1, [pc, #68]	; (8008888 <UARTEx_SetNbDataToProcess+0x94>)
 8008844:	5c8a      	ldrb	r2, [r1, r2]
 8008846:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800884a:	7b3a      	ldrb	r2, [r7, #12]
 800884c:	490f      	ldr	r1, [pc, #60]	; (800888c <UARTEx_SetNbDataToProcess+0x98>)
 800884e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008850:	fb93 f3f2 	sdiv	r3, r3, r2
 8008854:	b29a      	uxth	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	7b7a      	ldrb	r2, [r7, #13]
 8008860:	4909      	ldr	r1, [pc, #36]	; (8008888 <UARTEx_SetNbDataToProcess+0x94>)
 8008862:	5c8a      	ldrb	r2, [r1, r2]
 8008864:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008868:	7b7a      	ldrb	r2, [r7, #13]
 800886a:	4908      	ldr	r1, [pc, #32]	; (800888c <UARTEx_SetNbDataToProcess+0x98>)
 800886c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800886e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008872:	b29a      	uxth	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800887a:	bf00      	nop
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	08009e8c 	.word	0x08009e8c
 800888c:	08009e94 	.word	0x08009e94

08008890 <atoi>:
 8008890:	220a      	movs	r2, #10
 8008892:	2100      	movs	r1, #0
 8008894:	f000 b882 	b.w	800899c <strtol>

08008898 <_strtol_l.constprop.0>:
 8008898:	2b01      	cmp	r3, #1
 800889a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800889e:	d001      	beq.n	80088a4 <_strtol_l.constprop.0+0xc>
 80088a0:	2b24      	cmp	r3, #36	; 0x24
 80088a2:	d906      	bls.n	80088b2 <_strtol_l.constprop.0+0x1a>
 80088a4:	f000 fa68 	bl	8008d78 <__errno>
 80088a8:	2316      	movs	r3, #22
 80088aa:	6003      	str	r3, [r0, #0]
 80088ac:	2000      	movs	r0, #0
 80088ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008998 <_strtol_l.constprop.0+0x100>
 80088b6:	460d      	mov	r5, r1
 80088b8:	462e      	mov	r6, r5
 80088ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088be:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80088c2:	f017 0708 	ands.w	r7, r7, #8
 80088c6:	d1f7      	bne.n	80088b8 <_strtol_l.constprop.0+0x20>
 80088c8:	2c2d      	cmp	r4, #45	; 0x2d
 80088ca:	d132      	bne.n	8008932 <_strtol_l.constprop.0+0x9a>
 80088cc:	782c      	ldrb	r4, [r5, #0]
 80088ce:	2701      	movs	r7, #1
 80088d0:	1cb5      	adds	r5, r6, #2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d05b      	beq.n	800898e <_strtol_l.constprop.0+0xf6>
 80088d6:	2b10      	cmp	r3, #16
 80088d8:	d109      	bne.n	80088ee <_strtol_l.constprop.0+0x56>
 80088da:	2c30      	cmp	r4, #48	; 0x30
 80088dc:	d107      	bne.n	80088ee <_strtol_l.constprop.0+0x56>
 80088de:	782c      	ldrb	r4, [r5, #0]
 80088e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80088e4:	2c58      	cmp	r4, #88	; 0x58
 80088e6:	d14d      	bne.n	8008984 <_strtol_l.constprop.0+0xec>
 80088e8:	786c      	ldrb	r4, [r5, #1]
 80088ea:	2310      	movs	r3, #16
 80088ec:	3502      	adds	r5, #2
 80088ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80088f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80088f6:	f04f 0e00 	mov.w	lr, #0
 80088fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80088fe:	4676      	mov	r6, lr
 8008900:	fb03 8a19 	mls	sl, r3, r9, r8
 8008904:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008908:	f1bc 0f09 	cmp.w	ip, #9
 800890c:	d816      	bhi.n	800893c <_strtol_l.constprop.0+0xa4>
 800890e:	4664      	mov	r4, ip
 8008910:	42a3      	cmp	r3, r4
 8008912:	dd24      	ble.n	800895e <_strtol_l.constprop.0+0xc6>
 8008914:	f1be 3fff 	cmp.w	lr, #4294967295
 8008918:	d008      	beq.n	800892c <_strtol_l.constprop.0+0x94>
 800891a:	45b1      	cmp	r9, r6
 800891c:	d31c      	bcc.n	8008958 <_strtol_l.constprop.0+0xc0>
 800891e:	d101      	bne.n	8008924 <_strtol_l.constprop.0+0x8c>
 8008920:	45a2      	cmp	sl, r4
 8008922:	db19      	blt.n	8008958 <_strtol_l.constprop.0+0xc0>
 8008924:	fb06 4603 	mla	r6, r6, r3, r4
 8008928:	f04f 0e01 	mov.w	lr, #1
 800892c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008930:	e7e8      	b.n	8008904 <_strtol_l.constprop.0+0x6c>
 8008932:	2c2b      	cmp	r4, #43	; 0x2b
 8008934:	bf04      	itt	eq
 8008936:	782c      	ldrbeq	r4, [r5, #0]
 8008938:	1cb5      	addeq	r5, r6, #2
 800893a:	e7ca      	b.n	80088d2 <_strtol_l.constprop.0+0x3a>
 800893c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008940:	f1bc 0f19 	cmp.w	ip, #25
 8008944:	d801      	bhi.n	800894a <_strtol_l.constprop.0+0xb2>
 8008946:	3c37      	subs	r4, #55	; 0x37
 8008948:	e7e2      	b.n	8008910 <_strtol_l.constprop.0+0x78>
 800894a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800894e:	f1bc 0f19 	cmp.w	ip, #25
 8008952:	d804      	bhi.n	800895e <_strtol_l.constprop.0+0xc6>
 8008954:	3c57      	subs	r4, #87	; 0x57
 8008956:	e7db      	b.n	8008910 <_strtol_l.constprop.0+0x78>
 8008958:	f04f 3eff 	mov.w	lr, #4294967295
 800895c:	e7e6      	b.n	800892c <_strtol_l.constprop.0+0x94>
 800895e:	f1be 3fff 	cmp.w	lr, #4294967295
 8008962:	d105      	bne.n	8008970 <_strtol_l.constprop.0+0xd8>
 8008964:	2322      	movs	r3, #34	; 0x22
 8008966:	6003      	str	r3, [r0, #0]
 8008968:	4646      	mov	r6, r8
 800896a:	b942      	cbnz	r2, 800897e <_strtol_l.constprop.0+0xe6>
 800896c:	4630      	mov	r0, r6
 800896e:	e79e      	b.n	80088ae <_strtol_l.constprop.0+0x16>
 8008970:	b107      	cbz	r7, 8008974 <_strtol_l.constprop.0+0xdc>
 8008972:	4276      	negs	r6, r6
 8008974:	2a00      	cmp	r2, #0
 8008976:	d0f9      	beq.n	800896c <_strtol_l.constprop.0+0xd4>
 8008978:	f1be 0f00 	cmp.w	lr, #0
 800897c:	d000      	beq.n	8008980 <_strtol_l.constprop.0+0xe8>
 800897e:	1e69      	subs	r1, r5, #1
 8008980:	6011      	str	r1, [r2, #0]
 8008982:	e7f3      	b.n	800896c <_strtol_l.constprop.0+0xd4>
 8008984:	2430      	movs	r4, #48	; 0x30
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1b1      	bne.n	80088ee <_strtol_l.constprop.0+0x56>
 800898a:	2308      	movs	r3, #8
 800898c:	e7af      	b.n	80088ee <_strtol_l.constprop.0+0x56>
 800898e:	2c30      	cmp	r4, #48	; 0x30
 8008990:	d0a5      	beq.n	80088de <_strtol_l.constprop.0+0x46>
 8008992:	230a      	movs	r3, #10
 8008994:	e7ab      	b.n	80088ee <_strtol_l.constprop.0+0x56>
 8008996:	bf00      	nop
 8008998:	08009e9d 	.word	0x08009e9d

0800899c <strtol>:
 800899c:	4613      	mov	r3, r2
 800899e:	460a      	mov	r2, r1
 80089a0:	4601      	mov	r1, r0
 80089a2:	4802      	ldr	r0, [pc, #8]	; (80089ac <strtol+0x10>)
 80089a4:	6800      	ldr	r0, [r0, #0]
 80089a6:	f7ff bf77 	b.w	8008898 <_strtol_l.constprop.0>
 80089aa:	bf00      	nop
 80089ac:	20000270 	.word	0x20000270

080089b0 <std>:
 80089b0:	2300      	movs	r3, #0
 80089b2:	b510      	push	{r4, lr}
 80089b4:	4604      	mov	r4, r0
 80089b6:	e9c0 3300 	strd	r3, r3, [r0]
 80089ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089be:	6083      	str	r3, [r0, #8]
 80089c0:	8181      	strh	r1, [r0, #12]
 80089c2:	6643      	str	r3, [r0, #100]	; 0x64
 80089c4:	81c2      	strh	r2, [r0, #14]
 80089c6:	6183      	str	r3, [r0, #24]
 80089c8:	4619      	mov	r1, r3
 80089ca:	2208      	movs	r2, #8
 80089cc:	305c      	adds	r0, #92	; 0x5c
 80089ce:	f000 f928 	bl	8008c22 <memset>
 80089d2:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <std+0x58>)
 80089d4:	6263      	str	r3, [r4, #36]	; 0x24
 80089d6:	4b0d      	ldr	r3, [pc, #52]	; (8008a0c <std+0x5c>)
 80089d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80089da:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <std+0x60>)
 80089dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089de:	4b0d      	ldr	r3, [pc, #52]	; (8008a14 <std+0x64>)
 80089e0:	6323      	str	r3, [r4, #48]	; 0x30
 80089e2:	4b0d      	ldr	r3, [pc, #52]	; (8008a18 <std+0x68>)
 80089e4:	6224      	str	r4, [r4, #32]
 80089e6:	429c      	cmp	r4, r3
 80089e8:	d006      	beq.n	80089f8 <std+0x48>
 80089ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80089ee:	4294      	cmp	r4, r2
 80089f0:	d002      	beq.n	80089f8 <std+0x48>
 80089f2:	33d0      	adds	r3, #208	; 0xd0
 80089f4:	429c      	cmp	r4, r3
 80089f6:	d105      	bne.n	8008a04 <std+0x54>
 80089f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a00:	f000 b9e4 	b.w	8008dcc <__retarget_lock_init_recursive>
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	bf00      	nop
 8008a08:	08008b9d 	.word	0x08008b9d
 8008a0c:	08008bbf 	.word	0x08008bbf
 8008a10:	08008bf7 	.word	0x08008bf7
 8008a14:	08008c1b 	.word	0x08008c1b
 8008a18:	20000634 	.word	0x20000634

08008a1c <stdio_exit_handler>:
 8008a1c:	4a02      	ldr	r2, [pc, #8]	; (8008a28 <stdio_exit_handler+0xc>)
 8008a1e:	4903      	ldr	r1, [pc, #12]	; (8008a2c <stdio_exit_handler+0x10>)
 8008a20:	4803      	ldr	r0, [pc, #12]	; (8008a30 <stdio_exit_handler+0x14>)
 8008a22:	f000 b869 	b.w	8008af8 <_fwalk_sglue>
 8008a26:	bf00      	nop
 8008a28:	20000218 	.word	0x20000218
 8008a2c:	080096ed 	.word	0x080096ed
 8008a30:	20000224 	.word	0x20000224

08008a34 <cleanup_stdio>:
 8008a34:	6841      	ldr	r1, [r0, #4]
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <cleanup_stdio+0x34>)
 8008a38:	4299      	cmp	r1, r3
 8008a3a:	b510      	push	{r4, lr}
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	d001      	beq.n	8008a44 <cleanup_stdio+0x10>
 8008a40:	f000 fe54 	bl	80096ec <_fflush_r>
 8008a44:	68a1      	ldr	r1, [r4, #8]
 8008a46:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <cleanup_stdio+0x38>)
 8008a48:	4299      	cmp	r1, r3
 8008a4a:	d002      	beq.n	8008a52 <cleanup_stdio+0x1e>
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f000 fe4d 	bl	80096ec <_fflush_r>
 8008a52:	68e1      	ldr	r1, [r4, #12]
 8008a54:	4b06      	ldr	r3, [pc, #24]	; (8008a70 <cleanup_stdio+0x3c>)
 8008a56:	4299      	cmp	r1, r3
 8008a58:	d004      	beq.n	8008a64 <cleanup_stdio+0x30>
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a60:	f000 be44 	b.w	80096ec <_fflush_r>
 8008a64:	bd10      	pop	{r4, pc}
 8008a66:	bf00      	nop
 8008a68:	20000634 	.word	0x20000634
 8008a6c:	2000069c 	.word	0x2000069c
 8008a70:	20000704 	.word	0x20000704

08008a74 <global_stdio_init.part.0>:
 8008a74:	b510      	push	{r4, lr}
 8008a76:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <global_stdio_init.part.0+0x30>)
 8008a78:	4c0b      	ldr	r4, [pc, #44]	; (8008aa8 <global_stdio_init.part.0+0x34>)
 8008a7a:	4a0c      	ldr	r2, [pc, #48]	; (8008aac <global_stdio_init.part.0+0x38>)
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	4620      	mov	r0, r4
 8008a80:	2200      	movs	r2, #0
 8008a82:	2104      	movs	r1, #4
 8008a84:	f7ff ff94 	bl	80089b0 <std>
 8008a88:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	2109      	movs	r1, #9
 8008a90:	f7ff ff8e 	bl	80089b0 <std>
 8008a94:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008a98:	2202      	movs	r2, #2
 8008a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a9e:	2112      	movs	r1, #18
 8008aa0:	f7ff bf86 	b.w	80089b0 <std>
 8008aa4:	2000076c 	.word	0x2000076c
 8008aa8:	20000634 	.word	0x20000634
 8008aac:	08008a1d 	.word	0x08008a1d

08008ab0 <__sfp_lock_acquire>:
 8008ab0:	4801      	ldr	r0, [pc, #4]	; (8008ab8 <__sfp_lock_acquire+0x8>)
 8008ab2:	f000 b98c 	b.w	8008dce <__retarget_lock_acquire_recursive>
 8008ab6:	bf00      	nop
 8008ab8:	20000775 	.word	0x20000775

08008abc <__sfp_lock_release>:
 8008abc:	4801      	ldr	r0, [pc, #4]	; (8008ac4 <__sfp_lock_release+0x8>)
 8008abe:	f000 b987 	b.w	8008dd0 <__retarget_lock_release_recursive>
 8008ac2:	bf00      	nop
 8008ac4:	20000775 	.word	0x20000775

08008ac8 <__sinit>:
 8008ac8:	b510      	push	{r4, lr}
 8008aca:	4604      	mov	r4, r0
 8008acc:	f7ff fff0 	bl	8008ab0 <__sfp_lock_acquire>
 8008ad0:	6a23      	ldr	r3, [r4, #32]
 8008ad2:	b11b      	cbz	r3, 8008adc <__sinit+0x14>
 8008ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad8:	f7ff bff0 	b.w	8008abc <__sfp_lock_release>
 8008adc:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <__sinit+0x28>)
 8008ade:	6223      	str	r3, [r4, #32]
 8008ae0:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <__sinit+0x2c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1f5      	bne.n	8008ad4 <__sinit+0xc>
 8008ae8:	f7ff ffc4 	bl	8008a74 <global_stdio_init.part.0>
 8008aec:	e7f2      	b.n	8008ad4 <__sinit+0xc>
 8008aee:	bf00      	nop
 8008af0:	08008a35 	.word	0x08008a35
 8008af4:	2000076c 	.word	0x2000076c

08008af8 <_fwalk_sglue>:
 8008af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008afc:	4607      	mov	r7, r0
 8008afe:	4688      	mov	r8, r1
 8008b00:	4614      	mov	r4, r2
 8008b02:	2600      	movs	r6, #0
 8008b04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b08:	f1b9 0901 	subs.w	r9, r9, #1
 8008b0c:	d505      	bpl.n	8008b1a <_fwalk_sglue+0x22>
 8008b0e:	6824      	ldr	r4, [r4, #0]
 8008b10:	2c00      	cmp	r4, #0
 8008b12:	d1f7      	bne.n	8008b04 <_fwalk_sglue+0xc>
 8008b14:	4630      	mov	r0, r6
 8008b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b1a:	89ab      	ldrh	r3, [r5, #12]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d907      	bls.n	8008b30 <_fwalk_sglue+0x38>
 8008b20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b24:	3301      	adds	r3, #1
 8008b26:	d003      	beq.n	8008b30 <_fwalk_sglue+0x38>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	47c0      	blx	r8
 8008b2e:	4306      	orrs	r6, r0
 8008b30:	3568      	adds	r5, #104	; 0x68
 8008b32:	e7e9      	b.n	8008b08 <_fwalk_sglue+0x10>

08008b34 <sniprintf>:
 8008b34:	b40c      	push	{r2, r3}
 8008b36:	b530      	push	{r4, r5, lr}
 8008b38:	4b17      	ldr	r3, [pc, #92]	; (8008b98 <sniprintf+0x64>)
 8008b3a:	1e0c      	subs	r4, r1, #0
 8008b3c:	681d      	ldr	r5, [r3, #0]
 8008b3e:	b09d      	sub	sp, #116	; 0x74
 8008b40:	da08      	bge.n	8008b54 <sniprintf+0x20>
 8008b42:	238b      	movs	r3, #139	; 0x8b
 8008b44:	602b      	str	r3, [r5, #0]
 8008b46:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4a:	b01d      	add	sp, #116	; 0x74
 8008b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b50:	b002      	add	sp, #8
 8008b52:	4770      	bx	lr
 8008b54:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b5c:	bf14      	ite	ne
 8008b5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b62:	4623      	moveq	r3, r4
 8008b64:	9304      	str	r3, [sp, #16]
 8008b66:	9307      	str	r3, [sp, #28]
 8008b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b6c:	9002      	str	r0, [sp, #8]
 8008b6e:	9006      	str	r0, [sp, #24]
 8008b70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b76:	ab21      	add	r3, sp, #132	; 0x84
 8008b78:	a902      	add	r1, sp, #8
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	f000 faa1 	bl	80090c4 <_svfiprintf_r>
 8008b82:	1c43      	adds	r3, r0, #1
 8008b84:	bfbc      	itt	lt
 8008b86:	238b      	movlt	r3, #139	; 0x8b
 8008b88:	602b      	strlt	r3, [r5, #0]
 8008b8a:	2c00      	cmp	r4, #0
 8008b8c:	d0dd      	beq.n	8008b4a <sniprintf+0x16>
 8008b8e:	9b02      	ldr	r3, [sp, #8]
 8008b90:	2200      	movs	r2, #0
 8008b92:	701a      	strb	r2, [r3, #0]
 8008b94:	e7d9      	b.n	8008b4a <sniprintf+0x16>
 8008b96:	bf00      	nop
 8008b98:	20000270 	.word	0x20000270

08008b9c <__sread>:
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba4:	f000 f8c4 	bl	8008d30 <_read_r>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	bfab      	itete	ge
 8008bac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bae:	89a3      	ldrhlt	r3, [r4, #12]
 8008bb0:	181b      	addge	r3, r3, r0
 8008bb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bb6:	bfac      	ite	ge
 8008bb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bba:	81a3      	strhlt	r3, [r4, #12]
 8008bbc:	bd10      	pop	{r4, pc}

08008bbe <__swrite>:
 8008bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc2:	461f      	mov	r7, r3
 8008bc4:	898b      	ldrh	r3, [r1, #12]
 8008bc6:	05db      	lsls	r3, r3, #23
 8008bc8:	4605      	mov	r5, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	4616      	mov	r6, r2
 8008bce:	d505      	bpl.n	8008bdc <__swrite+0x1e>
 8008bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f000 f898 	bl	8008d0c <_lseek_r>
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008be6:	81a3      	strh	r3, [r4, #12]
 8008be8:	4632      	mov	r2, r6
 8008bea:	463b      	mov	r3, r7
 8008bec:	4628      	mov	r0, r5
 8008bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf2:	f000 b8af 	b.w	8008d54 <_write_r>

08008bf6 <__sseek>:
 8008bf6:	b510      	push	{r4, lr}
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bfe:	f000 f885 	bl	8008d0c <_lseek_r>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	89a3      	ldrh	r3, [r4, #12]
 8008c06:	bf15      	itete	ne
 8008c08:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c12:	81a3      	strheq	r3, [r4, #12]
 8008c14:	bf18      	it	ne
 8008c16:	81a3      	strhne	r3, [r4, #12]
 8008c18:	bd10      	pop	{r4, pc}

08008c1a <__sclose>:
 8008c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c1e:	f000 b865 	b.w	8008cec <_close_r>

08008c22 <memset>:
 8008c22:	4402      	add	r2, r0
 8008c24:	4603      	mov	r3, r0
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d100      	bne.n	8008c2c <memset+0xa>
 8008c2a:	4770      	bx	lr
 8008c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8008c30:	e7f9      	b.n	8008c26 <memset+0x4>
	...

08008c34 <strtok>:
 8008c34:	4b16      	ldr	r3, [pc, #88]	; (8008c90 <strtok+0x5c>)
 8008c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c38:	681e      	ldr	r6, [r3, #0]
 8008c3a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	b9fc      	cbnz	r4, 8008c80 <strtok+0x4c>
 8008c40:	2050      	movs	r0, #80	; 0x50
 8008c42:	9101      	str	r1, [sp, #4]
 8008c44:	f000 f930 	bl	8008ea8 <malloc>
 8008c48:	9901      	ldr	r1, [sp, #4]
 8008c4a:	6470      	str	r0, [r6, #68]	; 0x44
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	b920      	cbnz	r0, 8008c5a <strtok+0x26>
 8008c50:	4b10      	ldr	r3, [pc, #64]	; (8008c94 <strtok+0x60>)
 8008c52:	4811      	ldr	r0, [pc, #68]	; (8008c98 <strtok+0x64>)
 8008c54:	215b      	movs	r1, #91	; 0x5b
 8008c56:	f000 f8bd 	bl	8008dd4 <__assert_func>
 8008c5a:	e9c0 4400 	strd	r4, r4, [r0]
 8008c5e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008c62:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008c66:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008c6a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008c6e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008c72:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008c76:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008c7a:	6184      	str	r4, [r0, #24]
 8008c7c:	7704      	strb	r4, [r0, #28]
 8008c7e:	6244      	str	r4, [r0, #36]	; 0x24
 8008c80:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8008c82:	2301      	movs	r3, #1
 8008c84:	4628      	mov	r0, r5
 8008c86:	b002      	add	sp, #8
 8008c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c8c:	f000 b806 	b.w	8008c9c <__strtok_r>
 8008c90:	20000270 	.word	0x20000270
 8008c94:	08009f9d 	.word	0x08009f9d
 8008c98:	08009fb4 	.word	0x08009fb4

08008c9c <__strtok_r>:
 8008c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c9e:	b908      	cbnz	r0, 8008ca4 <__strtok_r+0x8>
 8008ca0:	6810      	ldr	r0, [r2, #0]
 8008ca2:	b188      	cbz	r0, 8008cc8 <__strtok_r+0x2c>
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008cac:	460f      	mov	r7, r1
 8008cae:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008cb2:	b91e      	cbnz	r6, 8008cbc <__strtok_r+0x20>
 8008cb4:	b965      	cbnz	r5, 8008cd0 <__strtok_r+0x34>
 8008cb6:	6015      	str	r5, [r2, #0]
 8008cb8:	4628      	mov	r0, r5
 8008cba:	e005      	b.n	8008cc8 <__strtok_r+0x2c>
 8008cbc:	42b5      	cmp	r5, r6
 8008cbe:	d1f6      	bne.n	8008cae <__strtok_r+0x12>
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1f0      	bne.n	8008ca6 <__strtok_r+0xa>
 8008cc4:	6014      	str	r4, [r2, #0]
 8008cc6:	7003      	strb	r3, [r0, #0]
 8008cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cca:	461c      	mov	r4, r3
 8008ccc:	e00c      	b.n	8008ce8 <__strtok_r+0x4c>
 8008cce:	b915      	cbnz	r5, 8008cd6 <__strtok_r+0x3a>
 8008cd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008cd4:	460e      	mov	r6, r1
 8008cd6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008cda:	42ab      	cmp	r3, r5
 8008cdc:	d1f7      	bne.n	8008cce <__strtok_r+0x32>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0f3      	beq.n	8008cca <__strtok_r+0x2e>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008ce8:	6014      	str	r4, [r2, #0]
 8008cea:	e7ed      	b.n	8008cc8 <__strtok_r+0x2c>

08008cec <_close_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d06      	ldr	r5, [pc, #24]	; (8008d08 <_close_r+0x1c>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	f7f8 fc57 	bl	80015aa <_close>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_close_r+0x1a>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_close_r+0x1a>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	20000770 	.word	0x20000770

08008d0c <_lseek_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d07      	ldr	r5, [pc, #28]	; (8008d2c <_lseek_r+0x20>)
 8008d10:	4604      	mov	r4, r0
 8008d12:	4608      	mov	r0, r1
 8008d14:	4611      	mov	r1, r2
 8008d16:	2200      	movs	r2, #0
 8008d18:	602a      	str	r2, [r5, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f7f8 fc6c 	bl	80015f8 <_lseek>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_lseek_r+0x1e>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_lseek_r+0x1e>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	20000770 	.word	0x20000770

08008d30 <_read_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4d07      	ldr	r5, [pc, #28]	; (8008d50 <_read_r+0x20>)
 8008d34:	4604      	mov	r4, r0
 8008d36:	4608      	mov	r0, r1
 8008d38:	4611      	mov	r1, r2
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	602a      	str	r2, [r5, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f7f8 fbfa 	bl	8001538 <_read>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_read_r+0x1e>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_read_r+0x1e>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	20000770 	.word	0x20000770

08008d54 <_write_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d07      	ldr	r5, [pc, #28]	; (8008d74 <_write_r+0x20>)
 8008d58:	4604      	mov	r4, r0
 8008d5a:	4608      	mov	r0, r1
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	2200      	movs	r2, #0
 8008d60:	602a      	str	r2, [r5, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	f7f8 fc05 	bl	8001572 <_write>
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	d102      	bne.n	8008d72 <_write_r+0x1e>
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	b103      	cbz	r3, 8008d72 <_write_r+0x1e>
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	bd38      	pop	{r3, r4, r5, pc}
 8008d74:	20000770 	.word	0x20000770

08008d78 <__errno>:
 8008d78:	4b01      	ldr	r3, [pc, #4]	; (8008d80 <__errno+0x8>)
 8008d7a:	6818      	ldr	r0, [r3, #0]
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	20000270 	.word	0x20000270

08008d84 <__libc_init_array>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	4d0d      	ldr	r5, [pc, #52]	; (8008dbc <__libc_init_array+0x38>)
 8008d88:	4c0d      	ldr	r4, [pc, #52]	; (8008dc0 <__libc_init_array+0x3c>)
 8008d8a:	1b64      	subs	r4, r4, r5
 8008d8c:	10a4      	asrs	r4, r4, #2
 8008d8e:	2600      	movs	r6, #0
 8008d90:	42a6      	cmp	r6, r4
 8008d92:	d109      	bne.n	8008da8 <__libc_init_array+0x24>
 8008d94:	4d0b      	ldr	r5, [pc, #44]	; (8008dc4 <__libc_init_array+0x40>)
 8008d96:	4c0c      	ldr	r4, [pc, #48]	; (8008dc8 <__libc_init_array+0x44>)
 8008d98:	f000 fffa 	bl	8009d90 <_init>
 8008d9c:	1b64      	subs	r4, r4, r5
 8008d9e:	10a4      	asrs	r4, r4, #2
 8008da0:	2600      	movs	r6, #0
 8008da2:	42a6      	cmp	r6, r4
 8008da4:	d105      	bne.n	8008db2 <__libc_init_array+0x2e>
 8008da6:	bd70      	pop	{r4, r5, r6, pc}
 8008da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dac:	4798      	blx	r3
 8008dae:	3601      	adds	r6, #1
 8008db0:	e7ee      	b.n	8008d90 <__libc_init_array+0xc>
 8008db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db6:	4798      	blx	r3
 8008db8:	3601      	adds	r6, #1
 8008dba:	e7f2      	b.n	8008da2 <__libc_init_array+0x1e>
 8008dbc:	0800a088 	.word	0x0800a088
 8008dc0:	0800a088 	.word	0x0800a088
 8008dc4:	0800a088 	.word	0x0800a088
 8008dc8:	0800a08c 	.word	0x0800a08c

08008dcc <__retarget_lock_init_recursive>:
 8008dcc:	4770      	bx	lr

08008dce <__retarget_lock_acquire_recursive>:
 8008dce:	4770      	bx	lr

08008dd0 <__retarget_lock_release_recursive>:
 8008dd0:	4770      	bx	lr
	...

08008dd4 <__assert_func>:
 8008dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dd6:	4614      	mov	r4, r2
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <__assert_func+0x2c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4605      	mov	r5, r0
 8008de0:	68d8      	ldr	r0, [r3, #12]
 8008de2:	b14c      	cbz	r4, 8008df8 <__assert_func+0x24>
 8008de4:	4b07      	ldr	r3, [pc, #28]	; (8008e04 <__assert_func+0x30>)
 8008de6:	9100      	str	r1, [sp, #0]
 8008de8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dec:	4906      	ldr	r1, [pc, #24]	; (8008e08 <__assert_func+0x34>)
 8008dee:	462b      	mov	r3, r5
 8008df0:	f000 fca4 	bl	800973c <fiprintf>
 8008df4:	f000 fcec 	bl	80097d0 <abort>
 8008df8:	4b04      	ldr	r3, [pc, #16]	; (8008e0c <__assert_func+0x38>)
 8008dfa:	461c      	mov	r4, r3
 8008dfc:	e7f3      	b.n	8008de6 <__assert_func+0x12>
 8008dfe:	bf00      	nop
 8008e00:	20000270 	.word	0x20000270
 8008e04:	0800a00e 	.word	0x0800a00e
 8008e08:	0800a01b 	.word	0x0800a01b
 8008e0c:	0800a049 	.word	0x0800a049

08008e10 <_free_r>:
 8008e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e12:	2900      	cmp	r1, #0
 8008e14:	d044      	beq.n	8008ea0 <_free_r+0x90>
 8008e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e1a:	9001      	str	r0, [sp, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f1a1 0404 	sub.w	r4, r1, #4
 8008e22:	bfb8      	it	lt
 8008e24:	18e4      	addlt	r4, r4, r3
 8008e26:	f000 f8e7 	bl	8008ff8 <__malloc_lock>
 8008e2a:	4a1e      	ldr	r2, [pc, #120]	; (8008ea4 <_free_r+0x94>)
 8008e2c:	9801      	ldr	r0, [sp, #4]
 8008e2e:	6813      	ldr	r3, [r2, #0]
 8008e30:	b933      	cbnz	r3, 8008e40 <_free_r+0x30>
 8008e32:	6063      	str	r3, [r4, #4]
 8008e34:	6014      	str	r4, [r2, #0]
 8008e36:	b003      	add	sp, #12
 8008e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e3c:	f000 b8e2 	b.w	8009004 <__malloc_unlock>
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	d908      	bls.n	8008e56 <_free_r+0x46>
 8008e44:	6825      	ldr	r5, [r4, #0]
 8008e46:	1961      	adds	r1, r4, r5
 8008e48:	428b      	cmp	r3, r1
 8008e4a:	bf01      	itttt	eq
 8008e4c:	6819      	ldreq	r1, [r3, #0]
 8008e4e:	685b      	ldreq	r3, [r3, #4]
 8008e50:	1949      	addeq	r1, r1, r5
 8008e52:	6021      	streq	r1, [r4, #0]
 8008e54:	e7ed      	b.n	8008e32 <_free_r+0x22>
 8008e56:	461a      	mov	r2, r3
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	b10b      	cbz	r3, 8008e60 <_free_r+0x50>
 8008e5c:	42a3      	cmp	r3, r4
 8008e5e:	d9fa      	bls.n	8008e56 <_free_r+0x46>
 8008e60:	6811      	ldr	r1, [r2, #0]
 8008e62:	1855      	adds	r5, r2, r1
 8008e64:	42a5      	cmp	r5, r4
 8008e66:	d10b      	bne.n	8008e80 <_free_r+0x70>
 8008e68:	6824      	ldr	r4, [r4, #0]
 8008e6a:	4421      	add	r1, r4
 8008e6c:	1854      	adds	r4, r2, r1
 8008e6e:	42a3      	cmp	r3, r4
 8008e70:	6011      	str	r1, [r2, #0]
 8008e72:	d1e0      	bne.n	8008e36 <_free_r+0x26>
 8008e74:	681c      	ldr	r4, [r3, #0]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	6053      	str	r3, [r2, #4]
 8008e7a:	440c      	add	r4, r1
 8008e7c:	6014      	str	r4, [r2, #0]
 8008e7e:	e7da      	b.n	8008e36 <_free_r+0x26>
 8008e80:	d902      	bls.n	8008e88 <_free_r+0x78>
 8008e82:	230c      	movs	r3, #12
 8008e84:	6003      	str	r3, [r0, #0]
 8008e86:	e7d6      	b.n	8008e36 <_free_r+0x26>
 8008e88:	6825      	ldr	r5, [r4, #0]
 8008e8a:	1961      	adds	r1, r4, r5
 8008e8c:	428b      	cmp	r3, r1
 8008e8e:	bf04      	itt	eq
 8008e90:	6819      	ldreq	r1, [r3, #0]
 8008e92:	685b      	ldreq	r3, [r3, #4]
 8008e94:	6063      	str	r3, [r4, #4]
 8008e96:	bf04      	itt	eq
 8008e98:	1949      	addeq	r1, r1, r5
 8008e9a:	6021      	streq	r1, [r4, #0]
 8008e9c:	6054      	str	r4, [r2, #4]
 8008e9e:	e7ca      	b.n	8008e36 <_free_r+0x26>
 8008ea0:	b003      	add	sp, #12
 8008ea2:	bd30      	pop	{r4, r5, pc}
 8008ea4:	20000778 	.word	0x20000778

08008ea8 <malloc>:
 8008ea8:	4b02      	ldr	r3, [pc, #8]	; (8008eb4 <malloc+0xc>)
 8008eaa:	4601      	mov	r1, r0
 8008eac:	6818      	ldr	r0, [r3, #0]
 8008eae:	f000 b823 	b.w	8008ef8 <_malloc_r>
 8008eb2:	bf00      	nop
 8008eb4:	20000270 	.word	0x20000270

08008eb8 <sbrk_aligned>:
 8008eb8:	b570      	push	{r4, r5, r6, lr}
 8008eba:	4e0e      	ldr	r6, [pc, #56]	; (8008ef4 <sbrk_aligned+0x3c>)
 8008ebc:	460c      	mov	r4, r1
 8008ebe:	6831      	ldr	r1, [r6, #0]
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	b911      	cbnz	r1, 8008eca <sbrk_aligned+0x12>
 8008ec4:	f000 fc66 	bl	8009794 <_sbrk_r>
 8008ec8:	6030      	str	r0, [r6, #0]
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4628      	mov	r0, r5
 8008ece:	f000 fc61 	bl	8009794 <_sbrk_r>
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	d00a      	beq.n	8008eec <sbrk_aligned+0x34>
 8008ed6:	1cc4      	adds	r4, r0, #3
 8008ed8:	f024 0403 	bic.w	r4, r4, #3
 8008edc:	42a0      	cmp	r0, r4
 8008ede:	d007      	beq.n	8008ef0 <sbrk_aligned+0x38>
 8008ee0:	1a21      	subs	r1, r4, r0
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f000 fc56 	bl	8009794 <_sbrk_r>
 8008ee8:	3001      	adds	r0, #1
 8008eea:	d101      	bne.n	8008ef0 <sbrk_aligned+0x38>
 8008eec:	f04f 34ff 	mov.w	r4, #4294967295
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	2000077c 	.word	0x2000077c

08008ef8 <_malloc_r>:
 8008ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008efc:	1ccd      	adds	r5, r1, #3
 8008efe:	f025 0503 	bic.w	r5, r5, #3
 8008f02:	3508      	adds	r5, #8
 8008f04:	2d0c      	cmp	r5, #12
 8008f06:	bf38      	it	cc
 8008f08:	250c      	movcc	r5, #12
 8008f0a:	2d00      	cmp	r5, #0
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	db01      	blt.n	8008f14 <_malloc_r+0x1c>
 8008f10:	42a9      	cmp	r1, r5
 8008f12:	d905      	bls.n	8008f20 <_malloc_r+0x28>
 8008f14:	230c      	movs	r3, #12
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	2600      	movs	r6, #0
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ff4 <_malloc_r+0xfc>
 8008f24:	f000 f868 	bl	8008ff8 <__malloc_lock>
 8008f28:	f8d8 3000 	ldr.w	r3, [r8]
 8008f2c:	461c      	mov	r4, r3
 8008f2e:	bb5c      	cbnz	r4, 8008f88 <_malloc_r+0x90>
 8008f30:	4629      	mov	r1, r5
 8008f32:	4638      	mov	r0, r7
 8008f34:	f7ff ffc0 	bl	8008eb8 <sbrk_aligned>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	d155      	bne.n	8008fea <_malloc_r+0xf2>
 8008f3e:	f8d8 4000 	ldr.w	r4, [r8]
 8008f42:	4626      	mov	r6, r4
 8008f44:	2e00      	cmp	r6, #0
 8008f46:	d145      	bne.n	8008fd4 <_malloc_r+0xdc>
 8008f48:	2c00      	cmp	r4, #0
 8008f4a:	d048      	beq.n	8008fde <_malloc_r+0xe6>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	4631      	mov	r1, r6
 8008f50:	4638      	mov	r0, r7
 8008f52:	eb04 0903 	add.w	r9, r4, r3
 8008f56:	f000 fc1d 	bl	8009794 <_sbrk_r>
 8008f5a:	4581      	cmp	r9, r0
 8008f5c:	d13f      	bne.n	8008fde <_malloc_r+0xe6>
 8008f5e:	6821      	ldr	r1, [r4, #0]
 8008f60:	1a6d      	subs	r5, r5, r1
 8008f62:	4629      	mov	r1, r5
 8008f64:	4638      	mov	r0, r7
 8008f66:	f7ff ffa7 	bl	8008eb8 <sbrk_aligned>
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d037      	beq.n	8008fde <_malloc_r+0xe6>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	442b      	add	r3, r5
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	f8d8 3000 	ldr.w	r3, [r8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d038      	beq.n	8008fee <_malloc_r+0xf6>
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	42a2      	cmp	r2, r4
 8008f80:	d12b      	bne.n	8008fda <_malloc_r+0xe2>
 8008f82:	2200      	movs	r2, #0
 8008f84:	605a      	str	r2, [r3, #4]
 8008f86:	e00f      	b.n	8008fa8 <_malloc_r+0xb0>
 8008f88:	6822      	ldr	r2, [r4, #0]
 8008f8a:	1b52      	subs	r2, r2, r5
 8008f8c:	d41f      	bmi.n	8008fce <_malloc_r+0xd6>
 8008f8e:	2a0b      	cmp	r2, #11
 8008f90:	d917      	bls.n	8008fc2 <_malloc_r+0xca>
 8008f92:	1961      	adds	r1, r4, r5
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	6025      	str	r5, [r4, #0]
 8008f98:	bf18      	it	ne
 8008f9a:	6059      	strne	r1, [r3, #4]
 8008f9c:	6863      	ldr	r3, [r4, #4]
 8008f9e:	bf08      	it	eq
 8008fa0:	f8c8 1000 	streq.w	r1, [r8]
 8008fa4:	5162      	str	r2, [r4, r5]
 8008fa6:	604b      	str	r3, [r1, #4]
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f104 060b 	add.w	r6, r4, #11
 8008fae:	f000 f829 	bl	8009004 <__malloc_unlock>
 8008fb2:	f026 0607 	bic.w	r6, r6, #7
 8008fb6:	1d23      	adds	r3, r4, #4
 8008fb8:	1af2      	subs	r2, r6, r3
 8008fba:	d0ae      	beq.n	8008f1a <_malloc_r+0x22>
 8008fbc:	1b9b      	subs	r3, r3, r6
 8008fbe:	50a3      	str	r3, [r4, r2]
 8008fc0:	e7ab      	b.n	8008f1a <_malloc_r+0x22>
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	6862      	ldr	r2, [r4, #4]
 8008fc6:	d1dd      	bne.n	8008f84 <_malloc_r+0x8c>
 8008fc8:	f8c8 2000 	str.w	r2, [r8]
 8008fcc:	e7ec      	b.n	8008fa8 <_malloc_r+0xb0>
 8008fce:	4623      	mov	r3, r4
 8008fd0:	6864      	ldr	r4, [r4, #4]
 8008fd2:	e7ac      	b.n	8008f2e <_malloc_r+0x36>
 8008fd4:	4634      	mov	r4, r6
 8008fd6:	6876      	ldr	r6, [r6, #4]
 8008fd8:	e7b4      	b.n	8008f44 <_malloc_r+0x4c>
 8008fda:	4613      	mov	r3, r2
 8008fdc:	e7cc      	b.n	8008f78 <_malloc_r+0x80>
 8008fde:	230c      	movs	r3, #12
 8008fe0:	603b      	str	r3, [r7, #0]
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	f000 f80e 	bl	8009004 <__malloc_unlock>
 8008fe8:	e797      	b.n	8008f1a <_malloc_r+0x22>
 8008fea:	6025      	str	r5, [r4, #0]
 8008fec:	e7dc      	b.n	8008fa8 <_malloc_r+0xb0>
 8008fee:	605b      	str	r3, [r3, #4]
 8008ff0:	deff      	udf	#255	; 0xff
 8008ff2:	bf00      	nop
 8008ff4:	20000778 	.word	0x20000778

08008ff8 <__malloc_lock>:
 8008ff8:	4801      	ldr	r0, [pc, #4]	; (8009000 <__malloc_lock+0x8>)
 8008ffa:	f7ff bee8 	b.w	8008dce <__retarget_lock_acquire_recursive>
 8008ffe:	bf00      	nop
 8009000:	20000774 	.word	0x20000774

08009004 <__malloc_unlock>:
 8009004:	4801      	ldr	r0, [pc, #4]	; (800900c <__malloc_unlock+0x8>)
 8009006:	f7ff bee3 	b.w	8008dd0 <__retarget_lock_release_recursive>
 800900a:	bf00      	nop
 800900c:	20000774 	.word	0x20000774

08009010 <__ssputs_r>:
 8009010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009014:	688e      	ldr	r6, [r1, #8]
 8009016:	461f      	mov	r7, r3
 8009018:	42be      	cmp	r6, r7
 800901a:	680b      	ldr	r3, [r1, #0]
 800901c:	4682      	mov	sl, r0
 800901e:	460c      	mov	r4, r1
 8009020:	4690      	mov	r8, r2
 8009022:	d82c      	bhi.n	800907e <__ssputs_r+0x6e>
 8009024:	898a      	ldrh	r2, [r1, #12]
 8009026:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800902a:	d026      	beq.n	800907a <__ssputs_r+0x6a>
 800902c:	6965      	ldr	r5, [r4, #20]
 800902e:	6909      	ldr	r1, [r1, #16]
 8009030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009034:	eba3 0901 	sub.w	r9, r3, r1
 8009038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800903c:	1c7b      	adds	r3, r7, #1
 800903e:	444b      	add	r3, r9
 8009040:	106d      	asrs	r5, r5, #1
 8009042:	429d      	cmp	r5, r3
 8009044:	bf38      	it	cc
 8009046:	461d      	movcc	r5, r3
 8009048:	0553      	lsls	r3, r2, #21
 800904a:	d527      	bpl.n	800909c <__ssputs_r+0x8c>
 800904c:	4629      	mov	r1, r5
 800904e:	f7ff ff53 	bl	8008ef8 <_malloc_r>
 8009052:	4606      	mov	r6, r0
 8009054:	b360      	cbz	r0, 80090b0 <__ssputs_r+0xa0>
 8009056:	6921      	ldr	r1, [r4, #16]
 8009058:	464a      	mov	r2, r9
 800905a:	f000 fbab 	bl	80097b4 <memcpy>
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009068:	81a3      	strh	r3, [r4, #12]
 800906a:	6126      	str	r6, [r4, #16]
 800906c:	6165      	str	r5, [r4, #20]
 800906e:	444e      	add	r6, r9
 8009070:	eba5 0509 	sub.w	r5, r5, r9
 8009074:	6026      	str	r6, [r4, #0]
 8009076:	60a5      	str	r5, [r4, #8]
 8009078:	463e      	mov	r6, r7
 800907a:	42be      	cmp	r6, r7
 800907c:	d900      	bls.n	8009080 <__ssputs_r+0x70>
 800907e:	463e      	mov	r6, r7
 8009080:	6820      	ldr	r0, [r4, #0]
 8009082:	4632      	mov	r2, r6
 8009084:	4641      	mov	r1, r8
 8009086:	f000 fb6b 	bl	8009760 <memmove>
 800908a:	68a3      	ldr	r3, [r4, #8]
 800908c:	1b9b      	subs	r3, r3, r6
 800908e:	60a3      	str	r3, [r4, #8]
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	4433      	add	r3, r6
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	2000      	movs	r0, #0
 8009098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800909c:	462a      	mov	r2, r5
 800909e:	f000 fb9e 	bl	80097de <_realloc_r>
 80090a2:	4606      	mov	r6, r0
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d1e0      	bne.n	800906a <__ssputs_r+0x5a>
 80090a8:	6921      	ldr	r1, [r4, #16]
 80090aa:	4650      	mov	r0, sl
 80090ac:	f7ff feb0 	bl	8008e10 <_free_r>
 80090b0:	230c      	movs	r3, #12
 80090b2:	f8ca 3000 	str.w	r3, [sl]
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090bc:	81a3      	strh	r3, [r4, #12]
 80090be:	f04f 30ff 	mov.w	r0, #4294967295
 80090c2:	e7e9      	b.n	8009098 <__ssputs_r+0x88>

080090c4 <_svfiprintf_r>:
 80090c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	4698      	mov	r8, r3
 80090ca:	898b      	ldrh	r3, [r1, #12]
 80090cc:	061b      	lsls	r3, r3, #24
 80090ce:	b09d      	sub	sp, #116	; 0x74
 80090d0:	4607      	mov	r7, r0
 80090d2:	460d      	mov	r5, r1
 80090d4:	4614      	mov	r4, r2
 80090d6:	d50e      	bpl.n	80090f6 <_svfiprintf_r+0x32>
 80090d8:	690b      	ldr	r3, [r1, #16]
 80090da:	b963      	cbnz	r3, 80090f6 <_svfiprintf_r+0x32>
 80090dc:	2140      	movs	r1, #64	; 0x40
 80090de:	f7ff ff0b 	bl	8008ef8 <_malloc_r>
 80090e2:	6028      	str	r0, [r5, #0]
 80090e4:	6128      	str	r0, [r5, #16]
 80090e6:	b920      	cbnz	r0, 80090f2 <_svfiprintf_r+0x2e>
 80090e8:	230c      	movs	r3, #12
 80090ea:	603b      	str	r3, [r7, #0]
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295
 80090f0:	e0d0      	b.n	8009294 <_svfiprintf_r+0x1d0>
 80090f2:	2340      	movs	r3, #64	; 0x40
 80090f4:	616b      	str	r3, [r5, #20]
 80090f6:	2300      	movs	r3, #0
 80090f8:	9309      	str	r3, [sp, #36]	; 0x24
 80090fa:	2320      	movs	r3, #32
 80090fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009100:	f8cd 800c 	str.w	r8, [sp, #12]
 8009104:	2330      	movs	r3, #48	; 0x30
 8009106:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80092ac <_svfiprintf_r+0x1e8>
 800910a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800910e:	f04f 0901 	mov.w	r9, #1
 8009112:	4623      	mov	r3, r4
 8009114:	469a      	mov	sl, r3
 8009116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800911a:	b10a      	cbz	r2, 8009120 <_svfiprintf_r+0x5c>
 800911c:	2a25      	cmp	r2, #37	; 0x25
 800911e:	d1f9      	bne.n	8009114 <_svfiprintf_r+0x50>
 8009120:	ebba 0b04 	subs.w	fp, sl, r4
 8009124:	d00b      	beq.n	800913e <_svfiprintf_r+0x7a>
 8009126:	465b      	mov	r3, fp
 8009128:	4622      	mov	r2, r4
 800912a:	4629      	mov	r1, r5
 800912c:	4638      	mov	r0, r7
 800912e:	f7ff ff6f 	bl	8009010 <__ssputs_r>
 8009132:	3001      	adds	r0, #1
 8009134:	f000 80a9 	beq.w	800928a <_svfiprintf_r+0x1c6>
 8009138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800913a:	445a      	add	r2, fp
 800913c:	9209      	str	r2, [sp, #36]	; 0x24
 800913e:	f89a 3000 	ldrb.w	r3, [sl]
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 80a1 	beq.w	800928a <_svfiprintf_r+0x1c6>
 8009148:	2300      	movs	r3, #0
 800914a:	f04f 32ff 	mov.w	r2, #4294967295
 800914e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009152:	f10a 0a01 	add.w	sl, sl, #1
 8009156:	9304      	str	r3, [sp, #16]
 8009158:	9307      	str	r3, [sp, #28]
 800915a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800915e:	931a      	str	r3, [sp, #104]	; 0x68
 8009160:	4654      	mov	r4, sl
 8009162:	2205      	movs	r2, #5
 8009164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009168:	4850      	ldr	r0, [pc, #320]	; (80092ac <_svfiprintf_r+0x1e8>)
 800916a:	f7f7 f871 	bl	8000250 <memchr>
 800916e:	9a04      	ldr	r2, [sp, #16]
 8009170:	b9d8      	cbnz	r0, 80091aa <_svfiprintf_r+0xe6>
 8009172:	06d0      	lsls	r0, r2, #27
 8009174:	bf44      	itt	mi
 8009176:	2320      	movmi	r3, #32
 8009178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800917c:	0711      	lsls	r1, r2, #28
 800917e:	bf44      	itt	mi
 8009180:	232b      	movmi	r3, #43	; 0x2b
 8009182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009186:	f89a 3000 	ldrb.w	r3, [sl]
 800918a:	2b2a      	cmp	r3, #42	; 0x2a
 800918c:	d015      	beq.n	80091ba <_svfiprintf_r+0xf6>
 800918e:	9a07      	ldr	r2, [sp, #28]
 8009190:	4654      	mov	r4, sl
 8009192:	2000      	movs	r0, #0
 8009194:	f04f 0c0a 	mov.w	ip, #10
 8009198:	4621      	mov	r1, r4
 800919a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800919e:	3b30      	subs	r3, #48	; 0x30
 80091a0:	2b09      	cmp	r3, #9
 80091a2:	d94d      	bls.n	8009240 <_svfiprintf_r+0x17c>
 80091a4:	b1b0      	cbz	r0, 80091d4 <_svfiprintf_r+0x110>
 80091a6:	9207      	str	r2, [sp, #28]
 80091a8:	e014      	b.n	80091d4 <_svfiprintf_r+0x110>
 80091aa:	eba0 0308 	sub.w	r3, r0, r8
 80091ae:	fa09 f303 	lsl.w	r3, r9, r3
 80091b2:	4313      	orrs	r3, r2
 80091b4:	9304      	str	r3, [sp, #16]
 80091b6:	46a2      	mov	sl, r4
 80091b8:	e7d2      	b.n	8009160 <_svfiprintf_r+0x9c>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	1d19      	adds	r1, r3, #4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	9103      	str	r1, [sp, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bfbb      	ittet	lt
 80091c6:	425b      	neglt	r3, r3
 80091c8:	f042 0202 	orrlt.w	r2, r2, #2
 80091cc:	9307      	strge	r3, [sp, #28]
 80091ce:	9307      	strlt	r3, [sp, #28]
 80091d0:	bfb8      	it	lt
 80091d2:	9204      	strlt	r2, [sp, #16]
 80091d4:	7823      	ldrb	r3, [r4, #0]
 80091d6:	2b2e      	cmp	r3, #46	; 0x2e
 80091d8:	d10c      	bne.n	80091f4 <_svfiprintf_r+0x130>
 80091da:	7863      	ldrb	r3, [r4, #1]
 80091dc:	2b2a      	cmp	r3, #42	; 0x2a
 80091de:	d134      	bne.n	800924a <_svfiprintf_r+0x186>
 80091e0:	9b03      	ldr	r3, [sp, #12]
 80091e2:	1d1a      	adds	r2, r3, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	9203      	str	r2, [sp, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bfb8      	it	lt
 80091ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80091f0:	3402      	adds	r4, #2
 80091f2:	9305      	str	r3, [sp, #20]
 80091f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80092bc <_svfiprintf_r+0x1f8>
 80091f8:	7821      	ldrb	r1, [r4, #0]
 80091fa:	2203      	movs	r2, #3
 80091fc:	4650      	mov	r0, sl
 80091fe:	f7f7 f827 	bl	8000250 <memchr>
 8009202:	b138      	cbz	r0, 8009214 <_svfiprintf_r+0x150>
 8009204:	9b04      	ldr	r3, [sp, #16]
 8009206:	eba0 000a 	sub.w	r0, r0, sl
 800920a:	2240      	movs	r2, #64	; 0x40
 800920c:	4082      	lsls	r2, r0
 800920e:	4313      	orrs	r3, r2
 8009210:	3401      	adds	r4, #1
 8009212:	9304      	str	r3, [sp, #16]
 8009214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009218:	4825      	ldr	r0, [pc, #148]	; (80092b0 <_svfiprintf_r+0x1ec>)
 800921a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800921e:	2206      	movs	r2, #6
 8009220:	f7f7 f816 	bl	8000250 <memchr>
 8009224:	2800      	cmp	r0, #0
 8009226:	d038      	beq.n	800929a <_svfiprintf_r+0x1d6>
 8009228:	4b22      	ldr	r3, [pc, #136]	; (80092b4 <_svfiprintf_r+0x1f0>)
 800922a:	bb1b      	cbnz	r3, 8009274 <_svfiprintf_r+0x1b0>
 800922c:	9b03      	ldr	r3, [sp, #12]
 800922e:	3307      	adds	r3, #7
 8009230:	f023 0307 	bic.w	r3, r3, #7
 8009234:	3308      	adds	r3, #8
 8009236:	9303      	str	r3, [sp, #12]
 8009238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923a:	4433      	add	r3, r6
 800923c:	9309      	str	r3, [sp, #36]	; 0x24
 800923e:	e768      	b.n	8009112 <_svfiprintf_r+0x4e>
 8009240:	fb0c 3202 	mla	r2, ip, r2, r3
 8009244:	460c      	mov	r4, r1
 8009246:	2001      	movs	r0, #1
 8009248:	e7a6      	b.n	8009198 <_svfiprintf_r+0xd4>
 800924a:	2300      	movs	r3, #0
 800924c:	3401      	adds	r4, #1
 800924e:	9305      	str	r3, [sp, #20]
 8009250:	4619      	mov	r1, r3
 8009252:	f04f 0c0a 	mov.w	ip, #10
 8009256:	4620      	mov	r0, r4
 8009258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800925c:	3a30      	subs	r2, #48	; 0x30
 800925e:	2a09      	cmp	r2, #9
 8009260:	d903      	bls.n	800926a <_svfiprintf_r+0x1a6>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0c6      	beq.n	80091f4 <_svfiprintf_r+0x130>
 8009266:	9105      	str	r1, [sp, #20]
 8009268:	e7c4      	b.n	80091f4 <_svfiprintf_r+0x130>
 800926a:	fb0c 2101 	mla	r1, ip, r1, r2
 800926e:	4604      	mov	r4, r0
 8009270:	2301      	movs	r3, #1
 8009272:	e7f0      	b.n	8009256 <_svfiprintf_r+0x192>
 8009274:	ab03      	add	r3, sp, #12
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	462a      	mov	r2, r5
 800927a:	4b0f      	ldr	r3, [pc, #60]	; (80092b8 <_svfiprintf_r+0x1f4>)
 800927c:	a904      	add	r1, sp, #16
 800927e:	4638      	mov	r0, r7
 8009280:	f3af 8000 	nop.w
 8009284:	1c42      	adds	r2, r0, #1
 8009286:	4606      	mov	r6, r0
 8009288:	d1d6      	bne.n	8009238 <_svfiprintf_r+0x174>
 800928a:	89ab      	ldrh	r3, [r5, #12]
 800928c:	065b      	lsls	r3, r3, #25
 800928e:	f53f af2d 	bmi.w	80090ec <_svfiprintf_r+0x28>
 8009292:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009294:	b01d      	add	sp, #116	; 0x74
 8009296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929a:	ab03      	add	r3, sp, #12
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	462a      	mov	r2, r5
 80092a0:	4b05      	ldr	r3, [pc, #20]	; (80092b8 <_svfiprintf_r+0x1f4>)
 80092a2:	a904      	add	r1, sp, #16
 80092a4:	4638      	mov	r0, r7
 80092a6:	f000 f879 	bl	800939c <_printf_i>
 80092aa:	e7eb      	b.n	8009284 <_svfiprintf_r+0x1c0>
 80092ac:	0800a04a 	.word	0x0800a04a
 80092b0:	0800a054 	.word	0x0800a054
 80092b4:	00000000 	.word	0x00000000
 80092b8:	08009011 	.word	0x08009011
 80092bc:	0800a050 	.word	0x0800a050

080092c0 <_printf_common>:
 80092c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c4:	4616      	mov	r6, r2
 80092c6:	4699      	mov	r9, r3
 80092c8:	688a      	ldr	r2, [r1, #8]
 80092ca:	690b      	ldr	r3, [r1, #16]
 80092cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092d0:	4293      	cmp	r3, r2
 80092d2:	bfb8      	it	lt
 80092d4:	4613      	movlt	r3, r2
 80092d6:	6033      	str	r3, [r6, #0]
 80092d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092dc:	4607      	mov	r7, r0
 80092de:	460c      	mov	r4, r1
 80092e0:	b10a      	cbz	r2, 80092e6 <_printf_common+0x26>
 80092e2:	3301      	adds	r3, #1
 80092e4:	6033      	str	r3, [r6, #0]
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	0699      	lsls	r1, r3, #26
 80092ea:	bf42      	ittt	mi
 80092ec:	6833      	ldrmi	r3, [r6, #0]
 80092ee:	3302      	addmi	r3, #2
 80092f0:	6033      	strmi	r3, [r6, #0]
 80092f2:	6825      	ldr	r5, [r4, #0]
 80092f4:	f015 0506 	ands.w	r5, r5, #6
 80092f8:	d106      	bne.n	8009308 <_printf_common+0x48>
 80092fa:	f104 0a19 	add.w	sl, r4, #25
 80092fe:	68e3      	ldr	r3, [r4, #12]
 8009300:	6832      	ldr	r2, [r6, #0]
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	42ab      	cmp	r3, r5
 8009306:	dc26      	bgt.n	8009356 <_printf_common+0x96>
 8009308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800930c:	1e13      	subs	r3, r2, #0
 800930e:	6822      	ldr	r2, [r4, #0]
 8009310:	bf18      	it	ne
 8009312:	2301      	movne	r3, #1
 8009314:	0692      	lsls	r2, r2, #26
 8009316:	d42b      	bmi.n	8009370 <_printf_common+0xb0>
 8009318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800931c:	4649      	mov	r1, r9
 800931e:	4638      	mov	r0, r7
 8009320:	47c0      	blx	r8
 8009322:	3001      	adds	r0, #1
 8009324:	d01e      	beq.n	8009364 <_printf_common+0xa4>
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	6922      	ldr	r2, [r4, #16]
 800932a:	f003 0306 	and.w	r3, r3, #6
 800932e:	2b04      	cmp	r3, #4
 8009330:	bf02      	ittt	eq
 8009332:	68e5      	ldreq	r5, [r4, #12]
 8009334:	6833      	ldreq	r3, [r6, #0]
 8009336:	1aed      	subeq	r5, r5, r3
 8009338:	68a3      	ldr	r3, [r4, #8]
 800933a:	bf0c      	ite	eq
 800933c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009340:	2500      	movne	r5, #0
 8009342:	4293      	cmp	r3, r2
 8009344:	bfc4      	itt	gt
 8009346:	1a9b      	subgt	r3, r3, r2
 8009348:	18ed      	addgt	r5, r5, r3
 800934a:	2600      	movs	r6, #0
 800934c:	341a      	adds	r4, #26
 800934e:	42b5      	cmp	r5, r6
 8009350:	d11a      	bne.n	8009388 <_printf_common+0xc8>
 8009352:	2000      	movs	r0, #0
 8009354:	e008      	b.n	8009368 <_printf_common+0xa8>
 8009356:	2301      	movs	r3, #1
 8009358:	4652      	mov	r2, sl
 800935a:	4649      	mov	r1, r9
 800935c:	4638      	mov	r0, r7
 800935e:	47c0      	blx	r8
 8009360:	3001      	adds	r0, #1
 8009362:	d103      	bne.n	800936c <_printf_common+0xac>
 8009364:	f04f 30ff 	mov.w	r0, #4294967295
 8009368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936c:	3501      	adds	r5, #1
 800936e:	e7c6      	b.n	80092fe <_printf_common+0x3e>
 8009370:	18e1      	adds	r1, r4, r3
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	2030      	movs	r0, #48	; 0x30
 8009376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800937a:	4422      	add	r2, r4
 800937c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009384:	3302      	adds	r3, #2
 8009386:	e7c7      	b.n	8009318 <_printf_common+0x58>
 8009388:	2301      	movs	r3, #1
 800938a:	4622      	mov	r2, r4
 800938c:	4649      	mov	r1, r9
 800938e:	4638      	mov	r0, r7
 8009390:	47c0      	blx	r8
 8009392:	3001      	adds	r0, #1
 8009394:	d0e6      	beq.n	8009364 <_printf_common+0xa4>
 8009396:	3601      	adds	r6, #1
 8009398:	e7d9      	b.n	800934e <_printf_common+0x8e>
	...

0800939c <_printf_i>:
 800939c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093a0:	7e0f      	ldrb	r7, [r1, #24]
 80093a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093a4:	2f78      	cmp	r7, #120	; 0x78
 80093a6:	4691      	mov	r9, r2
 80093a8:	4680      	mov	r8, r0
 80093aa:	460c      	mov	r4, r1
 80093ac:	469a      	mov	sl, r3
 80093ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093b2:	d807      	bhi.n	80093c4 <_printf_i+0x28>
 80093b4:	2f62      	cmp	r7, #98	; 0x62
 80093b6:	d80a      	bhi.n	80093ce <_printf_i+0x32>
 80093b8:	2f00      	cmp	r7, #0
 80093ba:	f000 80d4 	beq.w	8009566 <_printf_i+0x1ca>
 80093be:	2f58      	cmp	r7, #88	; 0x58
 80093c0:	f000 80c0 	beq.w	8009544 <_printf_i+0x1a8>
 80093c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093cc:	e03a      	b.n	8009444 <_printf_i+0xa8>
 80093ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093d2:	2b15      	cmp	r3, #21
 80093d4:	d8f6      	bhi.n	80093c4 <_printf_i+0x28>
 80093d6:	a101      	add	r1, pc, #4	; (adr r1, 80093dc <_printf_i+0x40>)
 80093d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093dc:	08009435 	.word	0x08009435
 80093e0:	08009449 	.word	0x08009449
 80093e4:	080093c5 	.word	0x080093c5
 80093e8:	080093c5 	.word	0x080093c5
 80093ec:	080093c5 	.word	0x080093c5
 80093f0:	080093c5 	.word	0x080093c5
 80093f4:	08009449 	.word	0x08009449
 80093f8:	080093c5 	.word	0x080093c5
 80093fc:	080093c5 	.word	0x080093c5
 8009400:	080093c5 	.word	0x080093c5
 8009404:	080093c5 	.word	0x080093c5
 8009408:	0800954d 	.word	0x0800954d
 800940c:	08009475 	.word	0x08009475
 8009410:	08009507 	.word	0x08009507
 8009414:	080093c5 	.word	0x080093c5
 8009418:	080093c5 	.word	0x080093c5
 800941c:	0800956f 	.word	0x0800956f
 8009420:	080093c5 	.word	0x080093c5
 8009424:	08009475 	.word	0x08009475
 8009428:	080093c5 	.word	0x080093c5
 800942c:	080093c5 	.word	0x080093c5
 8009430:	0800950f 	.word	0x0800950f
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	1d1a      	adds	r2, r3, #4
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	602a      	str	r2, [r5, #0]
 800943c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009444:	2301      	movs	r3, #1
 8009446:	e09f      	b.n	8009588 <_printf_i+0x1ec>
 8009448:	6820      	ldr	r0, [r4, #0]
 800944a:	682b      	ldr	r3, [r5, #0]
 800944c:	0607      	lsls	r7, r0, #24
 800944e:	f103 0104 	add.w	r1, r3, #4
 8009452:	6029      	str	r1, [r5, #0]
 8009454:	d501      	bpl.n	800945a <_printf_i+0xbe>
 8009456:	681e      	ldr	r6, [r3, #0]
 8009458:	e003      	b.n	8009462 <_printf_i+0xc6>
 800945a:	0646      	lsls	r6, r0, #25
 800945c:	d5fb      	bpl.n	8009456 <_printf_i+0xba>
 800945e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009462:	2e00      	cmp	r6, #0
 8009464:	da03      	bge.n	800946e <_printf_i+0xd2>
 8009466:	232d      	movs	r3, #45	; 0x2d
 8009468:	4276      	negs	r6, r6
 800946a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800946e:	485a      	ldr	r0, [pc, #360]	; (80095d8 <_printf_i+0x23c>)
 8009470:	230a      	movs	r3, #10
 8009472:	e012      	b.n	800949a <_printf_i+0xfe>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	6820      	ldr	r0, [r4, #0]
 8009478:	1d19      	adds	r1, r3, #4
 800947a:	6029      	str	r1, [r5, #0]
 800947c:	0605      	lsls	r5, r0, #24
 800947e:	d501      	bpl.n	8009484 <_printf_i+0xe8>
 8009480:	681e      	ldr	r6, [r3, #0]
 8009482:	e002      	b.n	800948a <_printf_i+0xee>
 8009484:	0641      	lsls	r1, r0, #25
 8009486:	d5fb      	bpl.n	8009480 <_printf_i+0xe4>
 8009488:	881e      	ldrh	r6, [r3, #0]
 800948a:	4853      	ldr	r0, [pc, #332]	; (80095d8 <_printf_i+0x23c>)
 800948c:	2f6f      	cmp	r7, #111	; 0x6f
 800948e:	bf0c      	ite	eq
 8009490:	2308      	moveq	r3, #8
 8009492:	230a      	movne	r3, #10
 8009494:	2100      	movs	r1, #0
 8009496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800949a:	6865      	ldr	r5, [r4, #4]
 800949c:	60a5      	str	r5, [r4, #8]
 800949e:	2d00      	cmp	r5, #0
 80094a0:	bfa2      	ittt	ge
 80094a2:	6821      	ldrge	r1, [r4, #0]
 80094a4:	f021 0104 	bicge.w	r1, r1, #4
 80094a8:	6021      	strge	r1, [r4, #0]
 80094aa:	b90e      	cbnz	r6, 80094b0 <_printf_i+0x114>
 80094ac:	2d00      	cmp	r5, #0
 80094ae:	d04b      	beq.n	8009548 <_printf_i+0x1ac>
 80094b0:	4615      	mov	r5, r2
 80094b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80094b6:	fb03 6711 	mls	r7, r3, r1, r6
 80094ba:	5dc7      	ldrb	r7, [r0, r7]
 80094bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094c0:	4637      	mov	r7, r6
 80094c2:	42bb      	cmp	r3, r7
 80094c4:	460e      	mov	r6, r1
 80094c6:	d9f4      	bls.n	80094b2 <_printf_i+0x116>
 80094c8:	2b08      	cmp	r3, #8
 80094ca:	d10b      	bne.n	80094e4 <_printf_i+0x148>
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	07de      	lsls	r6, r3, #31
 80094d0:	d508      	bpl.n	80094e4 <_printf_i+0x148>
 80094d2:	6923      	ldr	r3, [r4, #16]
 80094d4:	6861      	ldr	r1, [r4, #4]
 80094d6:	4299      	cmp	r1, r3
 80094d8:	bfde      	ittt	le
 80094da:	2330      	movle	r3, #48	; 0x30
 80094dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094e4:	1b52      	subs	r2, r2, r5
 80094e6:	6122      	str	r2, [r4, #16]
 80094e8:	f8cd a000 	str.w	sl, [sp]
 80094ec:	464b      	mov	r3, r9
 80094ee:	aa03      	add	r2, sp, #12
 80094f0:	4621      	mov	r1, r4
 80094f2:	4640      	mov	r0, r8
 80094f4:	f7ff fee4 	bl	80092c0 <_printf_common>
 80094f8:	3001      	adds	r0, #1
 80094fa:	d14a      	bne.n	8009592 <_printf_i+0x1f6>
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009500:	b004      	add	sp, #16
 8009502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	f043 0320 	orr.w	r3, r3, #32
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	4833      	ldr	r0, [pc, #204]	; (80095dc <_printf_i+0x240>)
 8009510:	2778      	movs	r7, #120	; 0x78
 8009512:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	6829      	ldr	r1, [r5, #0]
 800951a:	061f      	lsls	r7, r3, #24
 800951c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009520:	d402      	bmi.n	8009528 <_printf_i+0x18c>
 8009522:	065f      	lsls	r7, r3, #25
 8009524:	bf48      	it	mi
 8009526:	b2b6      	uxthmi	r6, r6
 8009528:	07df      	lsls	r7, r3, #31
 800952a:	bf48      	it	mi
 800952c:	f043 0320 	orrmi.w	r3, r3, #32
 8009530:	6029      	str	r1, [r5, #0]
 8009532:	bf48      	it	mi
 8009534:	6023      	strmi	r3, [r4, #0]
 8009536:	b91e      	cbnz	r6, 8009540 <_printf_i+0x1a4>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	f023 0320 	bic.w	r3, r3, #32
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	2310      	movs	r3, #16
 8009542:	e7a7      	b.n	8009494 <_printf_i+0xf8>
 8009544:	4824      	ldr	r0, [pc, #144]	; (80095d8 <_printf_i+0x23c>)
 8009546:	e7e4      	b.n	8009512 <_printf_i+0x176>
 8009548:	4615      	mov	r5, r2
 800954a:	e7bd      	b.n	80094c8 <_printf_i+0x12c>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	6826      	ldr	r6, [r4, #0]
 8009550:	6961      	ldr	r1, [r4, #20]
 8009552:	1d18      	adds	r0, r3, #4
 8009554:	6028      	str	r0, [r5, #0]
 8009556:	0635      	lsls	r5, r6, #24
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	d501      	bpl.n	8009560 <_printf_i+0x1c4>
 800955c:	6019      	str	r1, [r3, #0]
 800955e:	e002      	b.n	8009566 <_printf_i+0x1ca>
 8009560:	0670      	lsls	r0, r6, #25
 8009562:	d5fb      	bpl.n	800955c <_printf_i+0x1c0>
 8009564:	8019      	strh	r1, [r3, #0]
 8009566:	2300      	movs	r3, #0
 8009568:	6123      	str	r3, [r4, #16]
 800956a:	4615      	mov	r5, r2
 800956c:	e7bc      	b.n	80094e8 <_printf_i+0x14c>
 800956e:	682b      	ldr	r3, [r5, #0]
 8009570:	1d1a      	adds	r2, r3, #4
 8009572:	602a      	str	r2, [r5, #0]
 8009574:	681d      	ldr	r5, [r3, #0]
 8009576:	6862      	ldr	r2, [r4, #4]
 8009578:	2100      	movs	r1, #0
 800957a:	4628      	mov	r0, r5
 800957c:	f7f6 fe68 	bl	8000250 <memchr>
 8009580:	b108      	cbz	r0, 8009586 <_printf_i+0x1ea>
 8009582:	1b40      	subs	r0, r0, r5
 8009584:	6060      	str	r0, [r4, #4]
 8009586:	6863      	ldr	r3, [r4, #4]
 8009588:	6123      	str	r3, [r4, #16]
 800958a:	2300      	movs	r3, #0
 800958c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009590:	e7aa      	b.n	80094e8 <_printf_i+0x14c>
 8009592:	6923      	ldr	r3, [r4, #16]
 8009594:	462a      	mov	r2, r5
 8009596:	4649      	mov	r1, r9
 8009598:	4640      	mov	r0, r8
 800959a:	47d0      	blx	sl
 800959c:	3001      	adds	r0, #1
 800959e:	d0ad      	beq.n	80094fc <_printf_i+0x160>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	079b      	lsls	r3, r3, #30
 80095a4:	d413      	bmi.n	80095ce <_printf_i+0x232>
 80095a6:	68e0      	ldr	r0, [r4, #12]
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	4298      	cmp	r0, r3
 80095ac:	bfb8      	it	lt
 80095ae:	4618      	movlt	r0, r3
 80095b0:	e7a6      	b.n	8009500 <_printf_i+0x164>
 80095b2:	2301      	movs	r3, #1
 80095b4:	4632      	mov	r2, r6
 80095b6:	4649      	mov	r1, r9
 80095b8:	4640      	mov	r0, r8
 80095ba:	47d0      	blx	sl
 80095bc:	3001      	adds	r0, #1
 80095be:	d09d      	beq.n	80094fc <_printf_i+0x160>
 80095c0:	3501      	adds	r5, #1
 80095c2:	68e3      	ldr	r3, [r4, #12]
 80095c4:	9903      	ldr	r1, [sp, #12]
 80095c6:	1a5b      	subs	r3, r3, r1
 80095c8:	42ab      	cmp	r3, r5
 80095ca:	dcf2      	bgt.n	80095b2 <_printf_i+0x216>
 80095cc:	e7eb      	b.n	80095a6 <_printf_i+0x20a>
 80095ce:	2500      	movs	r5, #0
 80095d0:	f104 0619 	add.w	r6, r4, #25
 80095d4:	e7f5      	b.n	80095c2 <_printf_i+0x226>
 80095d6:	bf00      	nop
 80095d8:	0800a05b 	.word	0x0800a05b
 80095dc:	0800a06c 	.word	0x0800a06c

080095e0 <__sflush_r>:
 80095e0:	898a      	ldrh	r2, [r1, #12]
 80095e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e6:	4605      	mov	r5, r0
 80095e8:	0710      	lsls	r0, r2, #28
 80095ea:	460c      	mov	r4, r1
 80095ec:	d458      	bmi.n	80096a0 <__sflush_r+0xc0>
 80095ee:	684b      	ldr	r3, [r1, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	dc05      	bgt.n	8009600 <__sflush_r+0x20>
 80095f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	dc02      	bgt.n	8009600 <__sflush_r+0x20>
 80095fa:	2000      	movs	r0, #0
 80095fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009602:	2e00      	cmp	r6, #0
 8009604:	d0f9      	beq.n	80095fa <__sflush_r+0x1a>
 8009606:	2300      	movs	r3, #0
 8009608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800960c:	682f      	ldr	r7, [r5, #0]
 800960e:	6a21      	ldr	r1, [r4, #32]
 8009610:	602b      	str	r3, [r5, #0]
 8009612:	d032      	beq.n	800967a <__sflush_r+0x9a>
 8009614:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	075a      	lsls	r2, r3, #29
 800961a:	d505      	bpl.n	8009628 <__sflush_r+0x48>
 800961c:	6863      	ldr	r3, [r4, #4]
 800961e:	1ac0      	subs	r0, r0, r3
 8009620:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009622:	b10b      	cbz	r3, 8009628 <__sflush_r+0x48>
 8009624:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009626:	1ac0      	subs	r0, r0, r3
 8009628:	2300      	movs	r3, #0
 800962a:	4602      	mov	r2, r0
 800962c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800962e:	6a21      	ldr	r1, [r4, #32]
 8009630:	4628      	mov	r0, r5
 8009632:	47b0      	blx	r6
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	89a3      	ldrh	r3, [r4, #12]
 8009638:	d106      	bne.n	8009648 <__sflush_r+0x68>
 800963a:	6829      	ldr	r1, [r5, #0]
 800963c:	291d      	cmp	r1, #29
 800963e:	d82b      	bhi.n	8009698 <__sflush_r+0xb8>
 8009640:	4a29      	ldr	r2, [pc, #164]	; (80096e8 <__sflush_r+0x108>)
 8009642:	410a      	asrs	r2, r1
 8009644:	07d6      	lsls	r6, r2, #31
 8009646:	d427      	bmi.n	8009698 <__sflush_r+0xb8>
 8009648:	2200      	movs	r2, #0
 800964a:	6062      	str	r2, [r4, #4]
 800964c:	04d9      	lsls	r1, r3, #19
 800964e:	6922      	ldr	r2, [r4, #16]
 8009650:	6022      	str	r2, [r4, #0]
 8009652:	d504      	bpl.n	800965e <__sflush_r+0x7e>
 8009654:	1c42      	adds	r2, r0, #1
 8009656:	d101      	bne.n	800965c <__sflush_r+0x7c>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	b903      	cbnz	r3, 800965e <__sflush_r+0x7e>
 800965c:	6560      	str	r0, [r4, #84]	; 0x54
 800965e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009660:	602f      	str	r7, [r5, #0]
 8009662:	2900      	cmp	r1, #0
 8009664:	d0c9      	beq.n	80095fa <__sflush_r+0x1a>
 8009666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800966a:	4299      	cmp	r1, r3
 800966c:	d002      	beq.n	8009674 <__sflush_r+0x94>
 800966e:	4628      	mov	r0, r5
 8009670:	f7ff fbce 	bl	8008e10 <_free_r>
 8009674:	2000      	movs	r0, #0
 8009676:	6360      	str	r0, [r4, #52]	; 0x34
 8009678:	e7c0      	b.n	80095fc <__sflush_r+0x1c>
 800967a:	2301      	movs	r3, #1
 800967c:	4628      	mov	r0, r5
 800967e:	47b0      	blx	r6
 8009680:	1c41      	adds	r1, r0, #1
 8009682:	d1c8      	bne.n	8009616 <__sflush_r+0x36>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d0c5      	beq.n	8009616 <__sflush_r+0x36>
 800968a:	2b1d      	cmp	r3, #29
 800968c:	d001      	beq.n	8009692 <__sflush_r+0xb2>
 800968e:	2b16      	cmp	r3, #22
 8009690:	d101      	bne.n	8009696 <__sflush_r+0xb6>
 8009692:	602f      	str	r7, [r5, #0]
 8009694:	e7b1      	b.n	80095fa <__sflush_r+0x1a>
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800969c:	81a3      	strh	r3, [r4, #12]
 800969e:	e7ad      	b.n	80095fc <__sflush_r+0x1c>
 80096a0:	690f      	ldr	r7, [r1, #16]
 80096a2:	2f00      	cmp	r7, #0
 80096a4:	d0a9      	beq.n	80095fa <__sflush_r+0x1a>
 80096a6:	0793      	lsls	r3, r2, #30
 80096a8:	680e      	ldr	r6, [r1, #0]
 80096aa:	bf08      	it	eq
 80096ac:	694b      	ldreq	r3, [r1, #20]
 80096ae:	600f      	str	r7, [r1, #0]
 80096b0:	bf18      	it	ne
 80096b2:	2300      	movne	r3, #0
 80096b4:	eba6 0807 	sub.w	r8, r6, r7
 80096b8:	608b      	str	r3, [r1, #8]
 80096ba:	f1b8 0f00 	cmp.w	r8, #0
 80096be:	dd9c      	ble.n	80095fa <__sflush_r+0x1a>
 80096c0:	6a21      	ldr	r1, [r4, #32]
 80096c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096c4:	4643      	mov	r3, r8
 80096c6:	463a      	mov	r2, r7
 80096c8:	4628      	mov	r0, r5
 80096ca:	47b0      	blx	r6
 80096cc:	2800      	cmp	r0, #0
 80096ce:	dc06      	bgt.n	80096de <__sflush_r+0xfe>
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096d6:	81a3      	strh	r3, [r4, #12]
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	e78e      	b.n	80095fc <__sflush_r+0x1c>
 80096de:	4407      	add	r7, r0
 80096e0:	eba8 0800 	sub.w	r8, r8, r0
 80096e4:	e7e9      	b.n	80096ba <__sflush_r+0xda>
 80096e6:	bf00      	nop
 80096e8:	dfbffffe 	.word	0xdfbffffe

080096ec <_fflush_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	690b      	ldr	r3, [r1, #16]
 80096f0:	4605      	mov	r5, r0
 80096f2:	460c      	mov	r4, r1
 80096f4:	b913      	cbnz	r3, 80096fc <_fflush_r+0x10>
 80096f6:	2500      	movs	r5, #0
 80096f8:	4628      	mov	r0, r5
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	b118      	cbz	r0, 8009706 <_fflush_r+0x1a>
 80096fe:	6a03      	ldr	r3, [r0, #32]
 8009700:	b90b      	cbnz	r3, 8009706 <_fflush_r+0x1a>
 8009702:	f7ff f9e1 	bl	8008ac8 <__sinit>
 8009706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0f3      	beq.n	80096f6 <_fflush_r+0xa>
 800970e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009710:	07d0      	lsls	r0, r2, #31
 8009712:	d404      	bmi.n	800971e <_fflush_r+0x32>
 8009714:	0599      	lsls	r1, r3, #22
 8009716:	d402      	bmi.n	800971e <_fflush_r+0x32>
 8009718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800971a:	f7ff fb58 	bl	8008dce <__retarget_lock_acquire_recursive>
 800971e:	4628      	mov	r0, r5
 8009720:	4621      	mov	r1, r4
 8009722:	f7ff ff5d 	bl	80095e0 <__sflush_r>
 8009726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009728:	07da      	lsls	r2, r3, #31
 800972a:	4605      	mov	r5, r0
 800972c:	d4e4      	bmi.n	80096f8 <_fflush_r+0xc>
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	059b      	lsls	r3, r3, #22
 8009732:	d4e1      	bmi.n	80096f8 <_fflush_r+0xc>
 8009734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009736:	f7ff fb4b 	bl	8008dd0 <__retarget_lock_release_recursive>
 800973a:	e7dd      	b.n	80096f8 <_fflush_r+0xc>

0800973c <fiprintf>:
 800973c:	b40e      	push	{r1, r2, r3}
 800973e:	b503      	push	{r0, r1, lr}
 8009740:	4601      	mov	r1, r0
 8009742:	ab03      	add	r3, sp, #12
 8009744:	4805      	ldr	r0, [pc, #20]	; (800975c <fiprintf+0x20>)
 8009746:	f853 2b04 	ldr.w	r2, [r3], #4
 800974a:	6800      	ldr	r0, [r0, #0]
 800974c:	9301      	str	r3, [sp, #4]
 800974e:	f000 f89f 	bl	8009890 <_vfiprintf_r>
 8009752:	b002      	add	sp, #8
 8009754:	f85d eb04 	ldr.w	lr, [sp], #4
 8009758:	b003      	add	sp, #12
 800975a:	4770      	bx	lr
 800975c:	20000270 	.word	0x20000270

08009760 <memmove>:
 8009760:	4288      	cmp	r0, r1
 8009762:	b510      	push	{r4, lr}
 8009764:	eb01 0402 	add.w	r4, r1, r2
 8009768:	d902      	bls.n	8009770 <memmove+0x10>
 800976a:	4284      	cmp	r4, r0
 800976c:	4623      	mov	r3, r4
 800976e:	d807      	bhi.n	8009780 <memmove+0x20>
 8009770:	1e43      	subs	r3, r0, #1
 8009772:	42a1      	cmp	r1, r4
 8009774:	d008      	beq.n	8009788 <memmove+0x28>
 8009776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800977a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800977e:	e7f8      	b.n	8009772 <memmove+0x12>
 8009780:	4402      	add	r2, r0
 8009782:	4601      	mov	r1, r0
 8009784:	428a      	cmp	r2, r1
 8009786:	d100      	bne.n	800978a <memmove+0x2a>
 8009788:	bd10      	pop	{r4, pc}
 800978a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800978e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009792:	e7f7      	b.n	8009784 <memmove+0x24>

08009794 <_sbrk_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	4d06      	ldr	r5, [pc, #24]	; (80097b0 <_sbrk_r+0x1c>)
 8009798:	2300      	movs	r3, #0
 800979a:	4604      	mov	r4, r0
 800979c:	4608      	mov	r0, r1
 800979e:	602b      	str	r3, [r5, #0]
 80097a0:	f7f7 ff38 	bl	8001614 <_sbrk>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d102      	bne.n	80097ae <_sbrk_r+0x1a>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	b103      	cbz	r3, 80097ae <_sbrk_r+0x1a>
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	bd38      	pop	{r3, r4, r5, pc}
 80097b0:	20000770 	.word	0x20000770

080097b4 <memcpy>:
 80097b4:	440a      	add	r2, r1
 80097b6:	4291      	cmp	r1, r2
 80097b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80097bc:	d100      	bne.n	80097c0 <memcpy+0xc>
 80097be:	4770      	bx	lr
 80097c0:	b510      	push	{r4, lr}
 80097c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ca:	4291      	cmp	r1, r2
 80097cc:	d1f9      	bne.n	80097c2 <memcpy+0xe>
 80097ce:	bd10      	pop	{r4, pc}

080097d0 <abort>:
 80097d0:	b508      	push	{r3, lr}
 80097d2:	2006      	movs	r0, #6
 80097d4:	f000 fa34 	bl	8009c40 <raise>
 80097d8:	2001      	movs	r0, #1
 80097da:	f7f7 fea3 	bl	8001524 <_exit>

080097de <_realloc_r>:
 80097de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e2:	4680      	mov	r8, r0
 80097e4:	4614      	mov	r4, r2
 80097e6:	460e      	mov	r6, r1
 80097e8:	b921      	cbnz	r1, 80097f4 <_realloc_r+0x16>
 80097ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ee:	4611      	mov	r1, r2
 80097f0:	f7ff bb82 	b.w	8008ef8 <_malloc_r>
 80097f4:	b92a      	cbnz	r2, 8009802 <_realloc_r+0x24>
 80097f6:	f7ff fb0b 	bl	8008e10 <_free_r>
 80097fa:	4625      	mov	r5, r4
 80097fc:	4628      	mov	r0, r5
 80097fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009802:	f000 fa39 	bl	8009c78 <_malloc_usable_size_r>
 8009806:	4284      	cmp	r4, r0
 8009808:	4607      	mov	r7, r0
 800980a:	d802      	bhi.n	8009812 <_realloc_r+0x34>
 800980c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009810:	d812      	bhi.n	8009838 <_realloc_r+0x5a>
 8009812:	4621      	mov	r1, r4
 8009814:	4640      	mov	r0, r8
 8009816:	f7ff fb6f 	bl	8008ef8 <_malloc_r>
 800981a:	4605      	mov	r5, r0
 800981c:	2800      	cmp	r0, #0
 800981e:	d0ed      	beq.n	80097fc <_realloc_r+0x1e>
 8009820:	42bc      	cmp	r4, r7
 8009822:	4622      	mov	r2, r4
 8009824:	4631      	mov	r1, r6
 8009826:	bf28      	it	cs
 8009828:	463a      	movcs	r2, r7
 800982a:	f7ff ffc3 	bl	80097b4 <memcpy>
 800982e:	4631      	mov	r1, r6
 8009830:	4640      	mov	r0, r8
 8009832:	f7ff faed 	bl	8008e10 <_free_r>
 8009836:	e7e1      	b.n	80097fc <_realloc_r+0x1e>
 8009838:	4635      	mov	r5, r6
 800983a:	e7df      	b.n	80097fc <_realloc_r+0x1e>

0800983c <__sfputc_r>:
 800983c:	6893      	ldr	r3, [r2, #8]
 800983e:	3b01      	subs	r3, #1
 8009840:	2b00      	cmp	r3, #0
 8009842:	b410      	push	{r4}
 8009844:	6093      	str	r3, [r2, #8]
 8009846:	da08      	bge.n	800985a <__sfputc_r+0x1e>
 8009848:	6994      	ldr	r4, [r2, #24]
 800984a:	42a3      	cmp	r3, r4
 800984c:	db01      	blt.n	8009852 <__sfputc_r+0x16>
 800984e:	290a      	cmp	r1, #10
 8009850:	d103      	bne.n	800985a <__sfputc_r+0x1e>
 8009852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009856:	f000 b935 	b.w	8009ac4 <__swbuf_r>
 800985a:	6813      	ldr	r3, [r2, #0]
 800985c:	1c58      	adds	r0, r3, #1
 800985e:	6010      	str	r0, [r2, #0]
 8009860:	7019      	strb	r1, [r3, #0]
 8009862:	4608      	mov	r0, r1
 8009864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009868:	4770      	bx	lr

0800986a <__sfputs_r>:
 800986a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986c:	4606      	mov	r6, r0
 800986e:	460f      	mov	r7, r1
 8009870:	4614      	mov	r4, r2
 8009872:	18d5      	adds	r5, r2, r3
 8009874:	42ac      	cmp	r4, r5
 8009876:	d101      	bne.n	800987c <__sfputs_r+0x12>
 8009878:	2000      	movs	r0, #0
 800987a:	e007      	b.n	800988c <__sfputs_r+0x22>
 800987c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009880:	463a      	mov	r2, r7
 8009882:	4630      	mov	r0, r6
 8009884:	f7ff ffda 	bl	800983c <__sfputc_r>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d1f3      	bne.n	8009874 <__sfputs_r+0xa>
 800988c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009890 <_vfiprintf_r>:
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	460d      	mov	r5, r1
 8009896:	b09d      	sub	sp, #116	; 0x74
 8009898:	4614      	mov	r4, r2
 800989a:	4698      	mov	r8, r3
 800989c:	4606      	mov	r6, r0
 800989e:	b118      	cbz	r0, 80098a8 <_vfiprintf_r+0x18>
 80098a0:	6a03      	ldr	r3, [r0, #32]
 80098a2:	b90b      	cbnz	r3, 80098a8 <_vfiprintf_r+0x18>
 80098a4:	f7ff f910 	bl	8008ac8 <__sinit>
 80098a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098aa:	07d9      	lsls	r1, r3, #31
 80098ac:	d405      	bmi.n	80098ba <_vfiprintf_r+0x2a>
 80098ae:	89ab      	ldrh	r3, [r5, #12]
 80098b0:	059a      	lsls	r2, r3, #22
 80098b2:	d402      	bmi.n	80098ba <_vfiprintf_r+0x2a>
 80098b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098b6:	f7ff fa8a 	bl	8008dce <__retarget_lock_acquire_recursive>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	071b      	lsls	r3, r3, #28
 80098be:	d501      	bpl.n	80098c4 <_vfiprintf_r+0x34>
 80098c0:	692b      	ldr	r3, [r5, #16]
 80098c2:	b99b      	cbnz	r3, 80098ec <_vfiprintf_r+0x5c>
 80098c4:	4629      	mov	r1, r5
 80098c6:	4630      	mov	r0, r6
 80098c8:	f000 f93a 	bl	8009b40 <__swsetup_r>
 80098cc:	b170      	cbz	r0, 80098ec <_vfiprintf_r+0x5c>
 80098ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098d0:	07dc      	lsls	r4, r3, #31
 80098d2:	d504      	bpl.n	80098de <_vfiprintf_r+0x4e>
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	b01d      	add	sp, #116	; 0x74
 80098da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098de:	89ab      	ldrh	r3, [r5, #12]
 80098e0:	0598      	lsls	r0, r3, #22
 80098e2:	d4f7      	bmi.n	80098d4 <_vfiprintf_r+0x44>
 80098e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098e6:	f7ff fa73 	bl	8008dd0 <__retarget_lock_release_recursive>
 80098ea:	e7f3      	b.n	80098d4 <_vfiprintf_r+0x44>
 80098ec:	2300      	movs	r3, #0
 80098ee:	9309      	str	r3, [sp, #36]	; 0x24
 80098f0:	2320      	movs	r3, #32
 80098f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80098fa:	2330      	movs	r3, #48	; 0x30
 80098fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009ab0 <_vfiprintf_r+0x220>
 8009900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009904:	f04f 0901 	mov.w	r9, #1
 8009908:	4623      	mov	r3, r4
 800990a:	469a      	mov	sl, r3
 800990c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009910:	b10a      	cbz	r2, 8009916 <_vfiprintf_r+0x86>
 8009912:	2a25      	cmp	r2, #37	; 0x25
 8009914:	d1f9      	bne.n	800990a <_vfiprintf_r+0x7a>
 8009916:	ebba 0b04 	subs.w	fp, sl, r4
 800991a:	d00b      	beq.n	8009934 <_vfiprintf_r+0xa4>
 800991c:	465b      	mov	r3, fp
 800991e:	4622      	mov	r2, r4
 8009920:	4629      	mov	r1, r5
 8009922:	4630      	mov	r0, r6
 8009924:	f7ff ffa1 	bl	800986a <__sfputs_r>
 8009928:	3001      	adds	r0, #1
 800992a:	f000 80a9 	beq.w	8009a80 <_vfiprintf_r+0x1f0>
 800992e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009930:	445a      	add	r2, fp
 8009932:	9209      	str	r2, [sp, #36]	; 0x24
 8009934:	f89a 3000 	ldrb.w	r3, [sl]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 80a1 	beq.w	8009a80 <_vfiprintf_r+0x1f0>
 800993e:	2300      	movs	r3, #0
 8009940:	f04f 32ff 	mov.w	r2, #4294967295
 8009944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009948:	f10a 0a01 	add.w	sl, sl, #1
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	9307      	str	r3, [sp, #28]
 8009950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009954:	931a      	str	r3, [sp, #104]	; 0x68
 8009956:	4654      	mov	r4, sl
 8009958:	2205      	movs	r2, #5
 800995a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995e:	4854      	ldr	r0, [pc, #336]	; (8009ab0 <_vfiprintf_r+0x220>)
 8009960:	f7f6 fc76 	bl	8000250 <memchr>
 8009964:	9a04      	ldr	r2, [sp, #16]
 8009966:	b9d8      	cbnz	r0, 80099a0 <_vfiprintf_r+0x110>
 8009968:	06d1      	lsls	r1, r2, #27
 800996a:	bf44      	itt	mi
 800996c:	2320      	movmi	r3, #32
 800996e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009972:	0713      	lsls	r3, r2, #28
 8009974:	bf44      	itt	mi
 8009976:	232b      	movmi	r3, #43	; 0x2b
 8009978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997c:	f89a 3000 	ldrb.w	r3, [sl]
 8009980:	2b2a      	cmp	r3, #42	; 0x2a
 8009982:	d015      	beq.n	80099b0 <_vfiprintf_r+0x120>
 8009984:	9a07      	ldr	r2, [sp, #28]
 8009986:	4654      	mov	r4, sl
 8009988:	2000      	movs	r0, #0
 800998a:	f04f 0c0a 	mov.w	ip, #10
 800998e:	4621      	mov	r1, r4
 8009990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009994:	3b30      	subs	r3, #48	; 0x30
 8009996:	2b09      	cmp	r3, #9
 8009998:	d94d      	bls.n	8009a36 <_vfiprintf_r+0x1a6>
 800999a:	b1b0      	cbz	r0, 80099ca <_vfiprintf_r+0x13a>
 800999c:	9207      	str	r2, [sp, #28]
 800999e:	e014      	b.n	80099ca <_vfiprintf_r+0x13a>
 80099a0:	eba0 0308 	sub.w	r3, r0, r8
 80099a4:	fa09 f303 	lsl.w	r3, r9, r3
 80099a8:	4313      	orrs	r3, r2
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	46a2      	mov	sl, r4
 80099ae:	e7d2      	b.n	8009956 <_vfiprintf_r+0xc6>
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	1d19      	adds	r1, r3, #4
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	9103      	str	r1, [sp, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bfbb      	ittet	lt
 80099bc:	425b      	neglt	r3, r3
 80099be:	f042 0202 	orrlt.w	r2, r2, #2
 80099c2:	9307      	strge	r3, [sp, #28]
 80099c4:	9307      	strlt	r3, [sp, #28]
 80099c6:	bfb8      	it	lt
 80099c8:	9204      	strlt	r2, [sp, #16]
 80099ca:	7823      	ldrb	r3, [r4, #0]
 80099cc:	2b2e      	cmp	r3, #46	; 0x2e
 80099ce:	d10c      	bne.n	80099ea <_vfiprintf_r+0x15a>
 80099d0:	7863      	ldrb	r3, [r4, #1]
 80099d2:	2b2a      	cmp	r3, #42	; 0x2a
 80099d4:	d134      	bne.n	8009a40 <_vfiprintf_r+0x1b0>
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	1d1a      	adds	r2, r3, #4
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	9203      	str	r2, [sp, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	bfb8      	it	lt
 80099e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80099e6:	3402      	adds	r4, #2
 80099e8:	9305      	str	r3, [sp, #20]
 80099ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009ac0 <_vfiprintf_r+0x230>
 80099ee:	7821      	ldrb	r1, [r4, #0]
 80099f0:	2203      	movs	r2, #3
 80099f2:	4650      	mov	r0, sl
 80099f4:	f7f6 fc2c 	bl	8000250 <memchr>
 80099f8:	b138      	cbz	r0, 8009a0a <_vfiprintf_r+0x17a>
 80099fa:	9b04      	ldr	r3, [sp, #16]
 80099fc:	eba0 000a 	sub.w	r0, r0, sl
 8009a00:	2240      	movs	r2, #64	; 0x40
 8009a02:	4082      	lsls	r2, r0
 8009a04:	4313      	orrs	r3, r2
 8009a06:	3401      	adds	r4, #1
 8009a08:	9304      	str	r3, [sp, #16]
 8009a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a0e:	4829      	ldr	r0, [pc, #164]	; (8009ab4 <_vfiprintf_r+0x224>)
 8009a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a14:	2206      	movs	r2, #6
 8009a16:	f7f6 fc1b 	bl	8000250 <memchr>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d03f      	beq.n	8009a9e <_vfiprintf_r+0x20e>
 8009a1e:	4b26      	ldr	r3, [pc, #152]	; (8009ab8 <_vfiprintf_r+0x228>)
 8009a20:	bb1b      	cbnz	r3, 8009a6a <_vfiprintf_r+0x1da>
 8009a22:	9b03      	ldr	r3, [sp, #12]
 8009a24:	3307      	adds	r3, #7
 8009a26:	f023 0307 	bic.w	r3, r3, #7
 8009a2a:	3308      	adds	r3, #8
 8009a2c:	9303      	str	r3, [sp, #12]
 8009a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a30:	443b      	add	r3, r7
 8009a32:	9309      	str	r3, [sp, #36]	; 0x24
 8009a34:	e768      	b.n	8009908 <_vfiprintf_r+0x78>
 8009a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	2001      	movs	r0, #1
 8009a3e:	e7a6      	b.n	800998e <_vfiprintf_r+0xfe>
 8009a40:	2300      	movs	r3, #0
 8009a42:	3401      	adds	r4, #1
 8009a44:	9305      	str	r3, [sp, #20]
 8009a46:	4619      	mov	r1, r3
 8009a48:	f04f 0c0a 	mov.w	ip, #10
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a52:	3a30      	subs	r2, #48	; 0x30
 8009a54:	2a09      	cmp	r2, #9
 8009a56:	d903      	bls.n	8009a60 <_vfiprintf_r+0x1d0>
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d0c6      	beq.n	80099ea <_vfiprintf_r+0x15a>
 8009a5c:	9105      	str	r1, [sp, #20]
 8009a5e:	e7c4      	b.n	80099ea <_vfiprintf_r+0x15a>
 8009a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a64:	4604      	mov	r4, r0
 8009a66:	2301      	movs	r3, #1
 8009a68:	e7f0      	b.n	8009a4c <_vfiprintf_r+0x1bc>
 8009a6a:	ab03      	add	r3, sp, #12
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	462a      	mov	r2, r5
 8009a70:	4b12      	ldr	r3, [pc, #72]	; (8009abc <_vfiprintf_r+0x22c>)
 8009a72:	a904      	add	r1, sp, #16
 8009a74:	4630      	mov	r0, r6
 8009a76:	f3af 8000 	nop.w
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	1c78      	adds	r0, r7, #1
 8009a7e:	d1d6      	bne.n	8009a2e <_vfiprintf_r+0x19e>
 8009a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a82:	07d9      	lsls	r1, r3, #31
 8009a84:	d405      	bmi.n	8009a92 <_vfiprintf_r+0x202>
 8009a86:	89ab      	ldrh	r3, [r5, #12]
 8009a88:	059a      	lsls	r2, r3, #22
 8009a8a:	d402      	bmi.n	8009a92 <_vfiprintf_r+0x202>
 8009a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a8e:	f7ff f99f 	bl	8008dd0 <__retarget_lock_release_recursive>
 8009a92:	89ab      	ldrh	r3, [r5, #12]
 8009a94:	065b      	lsls	r3, r3, #25
 8009a96:	f53f af1d 	bmi.w	80098d4 <_vfiprintf_r+0x44>
 8009a9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9c:	e71c      	b.n	80098d8 <_vfiprintf_r+0x48>
 8009a9e:	ab03      	add	r3, sp, #12
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	462a      	mov	r2, r5
 8009aa4:	4b05      	ldr	r3, [pc, #20]	; (8009abc <_vfiprintf_r+0x22c>)
 8009aa6:	a904      	add	r1, sp, #16
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f7ff fc77 	bl	800939c <_printf_i>
 8009aae:	e7e4      	b.n	8009a7a <_vfiprintf_r+0x1ea>
 8009ab0:	0800a04a 	.word	0x0800a04a
 8009ab4:	0800a054 	.word	0x0800a054
 8009ab8:	00000000 	.word	0x00000000
 8009abc:	0800986b 	.word	0x0800986b
 8009ac0:	0800a050 	.word	0x0800a050

08009ac4 <__swbuf_r>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	460e      	mov	r6, r1
 8009ac8:	4614      	mov	r4, r2
 8009aca:	4605      	mov	r5, r0
 8009acc:	b118      	cbz	r0, 8009ad6 <__swbuf_r+0x12>
 8009ace:	6a03      	ldr	r3, [r0, #32]
 8009ad0:	b90b      	cbnz	r3, 8009ad6 <__swbuf_r+0x12>
 8009ad2:	f7fe fff9 	bl	8008ac8 <__sinit>
 8009ad6:	69a3      	ldr	r3, [r4, #24]
 8009ad8:	60a3      	str	r3, [r4, #8]
 8009ada:	89a3      	ldrh	r3, [r4, #12]
 8009adc:	071a      	lsls	r2, r3, #28
 8009ade:	d525      	bpl.n	8009b2c <__swbuf_r+0x68>
 8009ae0:	6923      	ldr	r3, [r4, #16]
 8009ae2:	b31b      	cbz	r3, 8009b2c <__swbuf_r+0x68>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	6922      	ldr	r2, [r4, #16]
 8009ae8:	1a98      	subs	r0, r3, r2
 8009aea:	6963      	ldr	r3, [r4, #20]
 8009aec:	b2f6      	uxtb	r6, r6
 8009aee:	4283      	cmp	r3, r0
 8009af0:	4637      	mov	r7, r6
 8009af2:	dc04      	bgt.n	8009afe <__swbuf_r+0x3a>
 8009af4:	4621      	mov	r1, r4
 8009af6:	4628      	mov	r0, r5
 8009af8:	f7ff fdf8 	bl	80096ec <_fflush_r>
 8009afc:	b9e0      	cbnz	r0, 8009b38 <__swbuf_r+0x74>
 8009afe:	68a3      	ldr	r3, [r4, #8]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	60a3      	str	r3, [r4, #8]
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	6022      	str	r2, [r4, #0]
 8009b0a:	701e      	strb	r6, [r3, #0]
 8009b0c:	6962      	ldr	r2, [r4, #20]
 8009b0e:	1c43      	adds	r3, r0, #1
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d004      	beq.n	8009b1e <__swbuf_r+0x5a>
 8009b14:	89a3      	ldrh	r3, [r4, #12]
 8009b16:	07db      	lsls	r3, r3, #31
 8009b18:	d506      	bpl.n	8009b28 <__swbuf_r+0x64>
 8009b1a:	2e0a      	cmp	r6, #10
 8009b1c:	d104      	bne.n	8009b28 <__swbuf_r+0x64>
 8009b1e:	4621      	mov	r1, r4
 8009b20:	4628      	mov	r0, r5
 8009b22:	f7ff fde3 	bl	80096ec <_fflush_r>
 8009b26:	b938      	cbnz	r0, 8009b38 <__swbuf_r+0x74>
 8009b28:	4638      	mov	r0, r7
 8009b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f000 f806 	bl	8009b40 <__swsetup_r>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d0d5      	beq.n	8009ae4 <__swbuf_r+0x20>
 8009b38:	f04f 37ff 	mov.w	r7, #4294967295
 8009b3c:	e7f4      	b.n	8009b28 <__swbuf_r+0x64>
	...

08009b40 <__swsetup_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4b2a      	ldr	r3, [pc, #168]	; (8009bec <__swsetup_r+0xac>)
 8009b44:	4605      	mov	r5, r0
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	460c      	mov	r4, r1
 8009b4a:	b118      	cbz	r0, 8009b54 <__swsetup_r+0x14>
 8009b4c:	6a03      	ldr	r3, [r0, #32]
 8009b4e:	b90b      	cbnz	r3, 8009b54 <__swsetup_r+0x14>
 8009b50:	f7fe ffba 	bl	8008ac8 <__sinit>
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b5a:	0718      	lsls	r0, r3, #28
 8009b5c:	d422      	bmi.n	8009ba4 <__swsetup_r+0x64>
 8009b5e:	06d9      	lsls	r1, r3, #27
 8009b60:	d407      	bmi.n	8009b72 <__swsetup_r+0x32>
 8009b62:	2309      	movs	r3, #9
 8009b64:	602b      	str	r3, [r5, #0]
 8009b66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b6a:	81a3      	strh	r3, [r4, #12]
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	e034      	b.n	8009bdc <__swsetup_r+0x9c>
 8009b72:	0758      	lsls	r0, r3, #29
 8009b74:	d512      	bpl.n	8009b9c <__swsetup_r+0x5c>
 8009b76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b78:	b141      	cbz	r1, 8009b8c <__swsetup_r+0x4c>
 8009b7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b7e:	4299      	cmp	r1, r3
 8009b80:	d002      	beq.n	8009b88 <__swsetup_r+0x48>
 8009b82:	4628      	mov	r0, r5
 8009b84:	f7ff f944 	bl	8008e10 <_free_r>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	6363      	str	r3, [r4, #52]	; 0x34
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b92:	81a3      	strh	r3, [r4, #12]
 8009b94:	2300      	movs	r3, #0
 8009b96:	6063      	str	r3, [r4, #4]
 8009b98:	6923      	ldr	r3, [r4, #16]
 8009b9a:	6023      	str	r3, [r4, #0]
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	f043 0308 	orr.w	r3, r3, #8
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	6923      	ldr	r3, [r4, #16]
 8009ba6:	b94b      	cbnz	r3, 8009bbc <__swsetup_r+0x7c>
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bb2:	d003      	beq.n	8009bbc <__swsetup_r+0x7c>
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f000 f88c 	bl	8009cd4 <__smakebuf_r>
 8009bbc:	89a0      	ldrh	r0, [r4, #12]
 8009bbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bc2:	f010 0301 	ands.w	r3, r0, #1
 8009bc6:	d00a      	beq.n	8009bde <__swsetup_r+0x9e>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60a3      	str	r3, [r4, #8]
 8009bcc:	6963      	ldr	r3, [r4, #20]
 8009bce:	425b      	negs	r3, r3
 8009bd0:	61a3      	str	r3, [r4, #24]
 8009bd2:	6923      	ldr	r3, [r4, #16]
 8009bd4:	b943      	cbnz	r3, 8009be8 <__swsetup_r+0xa8>
 8009bd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bda:	d1c4      	bne.n	8009b66 <__swsetup_r+0x26>
 8009bdc:	bd38      	pop	{r3, r4, r5, pc}
 8009bde:	0781      	lsls	r1, r0, #30
 8009be0:	bf58      	it	pl
 8009be2:	6963      	ldrpl	r3, [r4, #20]
 8009be4:	60a3      	str	r3, [r4, #8]
 8009be6:	e7f4      	b.n	8009bd2 <__swsetup_r+0x92>
 8009be8:	2000      	movs	r0, #0
 8009bea:	e7f7      	b.n	8009bdc <__swsetup_r+0x9c>
 8009bec:	20000270 	.word	0x20000270

08009bf0 <_raise_r>:
 8009bf0:	291f      	cmp	r1, #31
 8009bf2:	b538      	push	{r3, r4, r5, lr}
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	460d      	mov	r5, r1
 8009bf8:	d904      	bls.n	8009c04 <_raise_r+0x14>
 8009bfa:	2316      	movs	r3, #22
 8009bfc:	6003      	str	r3, [r0, #0]
 8009bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009c06:	b112      	cbz	r2, 8009c0e <_raise_r+0x1e>
 8009c08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c0c:	b94b      	cbnz	r3, 8009c22 <_raise_r+0x32>
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f000 f830 	bl	8009c74 <_getpid_r>
 8009c14:	462a      	mov	r2, r5
 8009c16:	4601      	mov	r1, r0
 8009c18:	4620      	mov	r0, r4
 8009c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c1e:	f000 b817 	b.w	8009c50 <_kill_r>
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d00a      	beq.n	8009c3c <_raise_r+0x4c>
 8009c26:	1c59      	adds	r1, r3, #1
 8009c28:	d103      	bne.n	8009c32 <_raise_r+0x42>
 8009c2a:	2316      	movs	r3, #22
 8009c2c:	6003      	str	r3, [r0, #0]
 8009c2e:	2001      	movs	r0, #1
 8009c30:	e7e7      	b.n	8009c02 <_raise_r+0x12>
 8009c32:	2400      	movs	r4, #0
 8009c34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c38:	4628      	mov	r0, r5
 8009c3a:	4798      	blx	r3
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	e7e0      	b.n	8009c02 <_raise_r+0x12>

08009c40 <raise>:
 8009c40:	4b02      	ldr	r3, [pc, #8]	; (8009c4c <raise+0xc>)
 8009c42:	4601      	mov	r1, r0
 8009c44:	6818      	ldr	r0, [r3, #0]
 8009c46:	f7ff bfd3 	b.w	8009bf0 <_raise_r>
 8009c4a:	bf00      	nop
 8009c4c:	20000270 	.word	0x20000270

08009c50 <_kill_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4d07      	ldr	r5, [pc, #28]	; (8009c70 <_kill_r+0x20>)
 8009c54:	2300      	movs	r3, #0
 8009c56:	4604      	mov	r4, r0
 8009c58:	4608      	mov	r0, r1
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	602b      	str	r3, [r5, #0]
 8009c5e:	f7f7 fc51 	bl	8001504 <_kill>
 8009c62:	1c43      	adds	r3, r0, #1
 8009c64:	d102      	bne.n	8009c6c <_kill_r+0x1c>
 8009c66:	682b      	ldr	r3, [r5, #0]
 8009c68:	b103      	cbz	r3, 8009c6c <_kill_r+0x1c>
 8009c6a:	6023      	str	r3, [r4, #0]
 8009c6c:	bd38      	pop	{r3, r4, r5, pc}
 8009c6e:	bf00      	nop
 8009c70:	20000770 	.word	0x20000770

08009c74 <_getpid_r>:
 8009c74:	f7f7 bc3e 	b.w	80014f4 <_getpid>

08009c78 <_malloc_usable_size_r>:
 8009c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c7c:	1f18      	subs	r0, r3, #4
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	bfbc      	itt	lt
 8009c82:	580b      	ldrlt	r3, [r1, r0]
 8009c84:	18c0      	addlt	r0, r0, r3
 8009c86:	4770      	bx	lr

08009c88 <__swhatbuf_r>:
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c90:	2900      	cmp	r1, #0
 8009c92:	b096      	sub	sp, #88	; 0x58
 8009c94:	4615      	mov	r5, r2
 8009c96:	461e      	mov	r6, r3
 8009c98:	da0d      	bge.n	8009cb6 <__swhatbuf_r+0x2e>
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009ca0:	f04f 0100 	mov.w	r1, #0
 8009ca4:	bf0c      	ite	eq
 8009ca6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009caa:	2340      	movne	r3, #64	; 0x40
 8009cac:	2000      	movs	r0, #0
 8009cae:	6031      	str	r1, [r6, #0]
 8009cb0:	602b      	str	r3, [r5, #0]
 8009cb2:	b016      	add	sp, #88	; 0x58
 8009cb4:	bd70      	pop	{r4, r5, r6, pc}
 8009cb6:	466a      	mov	r2, sp
 8009cb8:	f000 f848 	bl	8009d4c <_fstat_r>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	dbec      	blt.n	8009c9a <__swhatbuf_r+0x12>
 8009cc0:	9901      	ldr	r1, [sp, #4]
 8009cc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009cc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009cca:	4259      	negs	r1, r3
 8009ccc:	4159      	adcs	r1, r3
 8009cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cd2:	e7eb      	b.n	8009cac <__swhatbuf_r+0x24>

08009cd4 <__smakebuf_r>:
 8009cd4:	898b      	ldrh	r3, [r1, #12]
 8009cd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cd8:	079d      	lsls	r5, r3, #30
 8009cda:	4606      	mov	r6, r0
 8009cdc:	460c      	mov	r4, r1
 8009cde:	d507      	bpl.n	8009cf0 <__smakebuf_r+0x1c>
 8009ce0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	6123      	str	r3, [r4, #16]
 8009ce8:	2301      	movs	r3, #1
 8009cea:	6163      	str	r3, [r4, #20]
 8009cec:	b002      	add	sp, #8
 8009cee:	bd70      	pop	{r4, r5, r6, pc}
 8009cf0:	ab01      	add	r3, sp, #4
 8009cf2:	466a      	mov	r2, sp
 8009cf4:	f7ff ffc8 	bl	8009c88 <__swhatbuf_r>
 8009cf8:	9900      	ldr	r1, [sp, #0]
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f7ff f8fb 	bl	8008ef8 <_malloc_r>
 8009d02:	b948      	cbnz	r0, 8009d18 <__smakebuf_r+0x44>
 8009d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d08:	059a      	lsls	r2, r3, #22
 8009d0a:	d4ef      	bmi.n	8009cec <__smakebuf_r+0x18>
 8009d0c:	f023 0303 	bic.w	r3, r3, #3
 8009d10:	f043 0302 	orr.w	r3, r3, #2
 8009d14:	81a3      	strh	r3, [r4, #12]
 8009d16:	e7e3      	b.n	8009ce0 <__smakebuf_r+0xc>
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	6020      	str	r0, [r4, #0]
 8009d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	9b00      	ldr	r3, [sp, #0]
 8009d24:	6163      	str	r3, [r4, #20]
 8009d26:	9b01      	ldr	r3, [sp, #4]
 8009d28:	6120      	str	r0, [r4, #16]
 8009d2a:	b15b      	cbz	r3, 8009d44 <__smakebuf_r+0x70>
 8009d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d30:	4630      	mov	r0, r6
 8009d32:	f000 f81d 	bl	8009d70 <_isatty_r>
 8009d36:	b128      	cbz	r0, 8009d44 <__smakebuf_r+0x70>
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	f023 0303 	bic.w	r3, r3, #3
 8009d3e:	f043 0301 	orr.w	r3, r3, #1
 8009d42:	81a3      	strh	r3, [r4, #12]
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	431d      	orrs	r5, r3
 8009d48:	81a5      	strh	r5, [r4, #12]
 8009d4a:	e7cf      	b.n	8009cec <__smakebuf_r+0x18>

08009d4c <_fstat_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4d07      	ldr	r5, [pc, #28]	; (8009d6c <_fstat_r+0x20>)
 8009d50:	2300      	movs	r3, #0
 8009d52:	4604      	mov	r4, r0
 8009d54:	4608      	mov	r0, r1
 8009d56:	4611      	mov	r1, r2
 8009d58:	602b      	str	r3, [r5, #0]
 8009d5a:	f7f7 fc32 	bl	80015c2 <_fstat>
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	d102      	bne.n	8009d68 <_fstat_r+0x1c>
 8009d62:	682b      	ldr	r3, [r5, #0]
 8009d64:	b103      	cbz	r3, 8009d68 <_fstat_r+0x1c>
 8009d66:	6023      	str	r3, [r4, #0]
 8009d68:	bd38      	pop	{r3, r4, r5, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20000770 	.word	0x20000770

08009d70 <_isatty_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4d06      	ldr	r5, [pc, #24]	; (8009d8c <_isatty_r+0x1c>)
 8009d74:	2300      	movs	r3, #0
 8009d76:	4604      	mov	r4, r0
 8009d78:	4608      	mov	r0, r1
 8009d7a:	602b      	str	r3, [r5, #0]
 8009d7c:	f7f7 fc31 	bl	80015e2 <_isatty>
 8009d80:	1c43      	adds	r3, r0, #1
 8009d82:	d102      	bne.n	8009d8a <_isatty_r+0x1a>
 8009d84:	682b      	ldr	r3, [r5, #0]
 8009d86:	b103      	cbz	r3, 8009d8a <_isatty_r+0x1a>
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	bd38      	pop	{r3, r4, r5, pc}
 8009d8c:	20000770 	.word	0x20000770

08009d90 <_init>:
 8009d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d92:	bf00      	nop
 8009d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d96:	bc08      	pop	{r3}
 8009d98:	469e      	mov	lr, r3
 8009d9a:	4770      	bx	lr

08009d9c <_fini>:
 8009d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9e:	bf00      	nop
 8009da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da2:	bc08      	pop	{r3}
 8009da4:	469e      	mov	lr, r3
 8009da6:	4770      	bx	lr
