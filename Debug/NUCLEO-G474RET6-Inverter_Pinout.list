
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eb4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800a094  0800a094  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a36c  0800a36c  00020274  2**0
                  CONTENTS
  4 .ARM          00000008  0800a36c  0800a36c  0001a36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a374  0800a374  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a374  0800a374  0001a374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a378  0800a378  0001a378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800a37c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000274  0800a5f0  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  0800a5f0  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a460  00000000  00000000  000202e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003730  00000000  00000000  0003a747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001620  00000000  00000000  0003de78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111c  00000000  00000000  0003f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a418  00000000  00000000  000405b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b4e5  00000000  00000000  0006a9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114d98  00000000  00000000  00085eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a94  00000000  00000000  0019ac4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001a16e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000274 	.word	0x20000274
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a07c 	.word	0x0800a07c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000278 	.word	0x20000278
 800021c:	0800a07c 	.word	0x0800a07c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_dmul>:
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002fe:	bf1d      	ittte	ne
 8000300:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000304:	ea94 0f0c 	teqne	r4, ip
 8000308:	ea95 0f0c 	teqne	r5, ip
 800030c:	f000 f8de 	bleq	80004cc <__aeabi_dmul+0x1dc>
 8000310:	442c      	add	r4, r5
 8000312:	ea81 0603 	eor.w	r6, r1, r3
 8000316:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800031a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800031e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000322:	bf18      	it	ne
 8000324:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000328:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800032c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000330:	d038      	beq.n	80003a4 <__aeabi_dmul+0xb4>
 8000332:	fba0 ce02 	umull	ip, lr, r0, r2
 8000336:	f04f 0500 	mov.w	r5, #0
 800033a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800033e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000342:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000346:	f04f 0600 	mov.w	r6, #0
 800034a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800034e:	f09c 0f00 	teq	ip, #0
 8000352:	bf18      	it	ne
 8000354:	f04e 0e01 	orrne.w	lr, lr, #1
 8000358:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800035c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000360:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000364:	d204      	bcs.n	8000370 <__aeabi_dmul+0x80>
 8000366:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800036a:	416d      	adcs	r5, r5
 800036c:	eb46 0606 	adc.w	r6, r6, r6
 8000370:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000374:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000378:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800037c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000380:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000384:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000388:	bf88      	it	hi
 800038a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800038e:	d81e      	bhi.n	80003ce <__aeabi_dmul+0xde>
 8000390:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80003a8:	ea46 0101 	orr.w	r1, r6, r1
 80003ac:	ea40 0002 	orr.w	r0, r0, r2
 80003b0:	ea81 0103 	eor.w	r1, r1, r3
 80003b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003b8:	bfc2      	ittt	gt
 80003ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003c2:	bd70      	popgt	{r4, r5, r6, pc}
 80003c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003c8:	f04f 0e00 	mov.w	lr, #0
 80003cc:	3c01      	subs	r4, #1
 80003ce:	f300 80ab 	bgt.w	8000528 <__aeabi_dmul+0x238>
 80003d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003d6:	bfde      	ittt	le
 80003d8:	2000      	movle	r0, #0
 80003da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd70      	pople	{r4, r5, r6, pc}
 80003e0:	f1c4 0400 	rsb	r4, r4, #0
 80003e4:	3c20      	subs	r4, #32
 80003e6:	da35      	bge.n	8000454 <__aeabi_dmul+0x164>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc1b      	bgt.n	8000424 <__aeabi_dmul+0x134>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0520 	rsb	r5, r4, #32
 80003f4:	fa00 f305 	lsl.w	r3, r0, r5
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000400:	ea40 0002 	orr.w	r0, r0, r2
 8000404:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000408:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800040c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000410:	fa21 f604 	lsr.w	r6, r1, r4
 8000414:	eb42 0106 	adc.w	r1, r2, r6
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 040c 	rsb	r4, r4, #12
 8000428:	f1c4 0520 	rsb	r5, r4, #32
 800042c:	fa00 f304 	lsl.w	r3, r0, r4
 8000430:	fa20 f005 	lsr.w	r0, r0, r5
 8000434:	fa01 f204 	lsl.w	r2, r1, r4
 8000438:	ea40 0002 	orr.w	r0, r0, r2
 800043c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000440:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000444:	f141 0100 	adc.w	r1, r1, #0
 8000448:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800044c:	bf08      	it	eq
 800044e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000452:	bd70      	pop	{r4, r5, r6, pc}
 8000454:	f1c4 0520 	rsb	r5, r4, #32
 8000458:	fa00 f205 	lsl.w	r2, r0, r5
 800045c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000460:	fa20 f304 	lsr.w	r3, r0, r4
 8000464:	fa01 f205 	lsl.w	r2, r1, r5
 8000468:	ea43 0302 	orr.w	r3, r3, r2
 800046c:	fa21 f004 	lsr.w	r0, r1, r4
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000474:	fa21 f204 	lsr.w	r2, r1, r4
 8000478:	ea20 0002 	bic.w	r0, r0, r2
 800047c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000480:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000484:	bf08      	it	eq
 8000486:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	f094 0f00 	teq	r4, #0
 8000490:	d10f      	bne.n	80004b2 <__aeabi_dmul+0x1c2>
 8000492:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000496:	0040      	lsls	r0, r0, #1
 8000498:	eb41 0101 	adc.w	r1, r1, r1
 800049c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3c01      	subeq	r4, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1a6>
 80004a6:	ea41 0106 	orr.w	r1, r1, r6
 80004aa:	f095 0f00 	teq	r5, #0
 80004ae:	bf18      	it	ne
 80004b0:	4770      	bxne	lr
 80004b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80004b6:	0052      	lsls	r2, r2, #1
 80004b8:	eb43 0303 	adc.w	r3, r3, r3
 80004bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004c0:	bf08      	it	eq
 80004c2:	3d01      	subeq	r5, #1
 80004c4:	d0f7      	beq.n	80004b6 <__aeabi_dmul+0x1c6>
 80004c6:	ea43 0306 	orr.w	r3, r3, r6
 80004ca:	4770      	bx	lr
 80004cc:	ea94 0f0c 	teq	r4, ip
 80004d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004d4:	bf18      	it	ne
 80004d6:	ea95 0f0c 	teqne	r5, ip
 80004da:	d00c      	beq.n	80004f6 <__aeabi_dmul+0x206>
 80004dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004e0:	bf18      	it	ne
 80004e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e6:	d1d1      	bne.n	800048c <__aeabi_dmul+0x19c>
 80004e8:	ea81 0103 	eor.w	r1, r1, r3
 80004ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	bd70      	pop	{r4, r5, r6, pc}
 80004f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004fa:	bf06      	itte	eq
 80004fc:	4610      	moveq	r0, r2
 80004fe:	4619      	moveq	r1, r3
 8000500:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000504:	d019      	beq.n	800053a <__aeabi_dmul+0x24a>
 8000506:	ea94 0f0c 	teq	r4, ip
 800050a:	d102      	bne.n	8000512 <__aeabi_dmul+0x222>
 800050c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000510:	d113      	bne.n	800053a <__aeabi_dmul+0x24a>
 8000512:	ea95 0f0c 	teq	r5, ip
 8000516:	d105      	bne.n	8000524 <__aeabi_dmul+0x234>
 8000518:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800051c:	bf1c      	itt	ne
 800051e:	4610      	movne	r0, r2
 8000520:	4619      	movne	r1, r3
 8000522:	d10a      	bne.n	800053a <__aeabi_dmul+0x24a>
 8000524:	ea81 0103 	eor.w	r1, r1, r3
 8000528:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800052c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd70      	pop	{r4, r5, r6, pc}
 800053a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800053e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000542:	bd70      	pop	{r4, r5, r6, pc}

08000544 <__aeabi_drsub>:
 8000544:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e002      	b.n	8000550 <__adddf3>
 800054a:	bf00      	nop

0800054c <__aeabi_dsub>:
 800054c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000550 <__adddf3>:
 8000550:	b530      	push	{r4, r5, lr}
 8000552:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000556:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800055a:	ea94 0f05 	teq	r4, r5
 800055e:	bf08      	it	eq
 8000560:	ea90 0f02 	teqeq	r0, r2
 8000564:	bf1f      	itttt	ne
 8000566:	ea54 0c00 	orrsne.w	ip, r4, r0
 800056a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800056e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000572:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000576:	f000 80e2 	beq.w	800073e <__adddf3+0x1ee>
 800057a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800057e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000582:	bfb8      	it	lt
 8000584:	426d      	neglt	r5, r5
 8000586:	dd0c      	ble.n	80005a2 <__adddf3+0x52>
 8000588:	442c      	add	r4, r5
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	ea82 0000 	eor.w	r0, r2, r0
 8000596:	ea83 0101 	eor.w	r1, r3, r1
 800059a:	ea80 0202 	eor.w	r2, r0, r2
 800059e:	ea81 0303 	eor.w	r3, r1, r3
 80005a2:	2d36      	cmp	r5, #54	; 0x36
 80005a4:	bf88      	it	hi
 80005a6:	bd30      	pophi	{r4, r5, pc}
 80005a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005b8:	d002      	beq.n	80005c0 <__adddf3+0x70>
 80005ba:	4240      	negs	r0, r0
 80005bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005cc:	d002      	beq.n	80005d4 <__adddf3+0x84>
 80005ce:	4252      	negs	r2, r2
 80005d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005d4:	ea94 0f05 	teq	r4, r5
 80005d8:	f000 80a7 	beq.w	800072a <__adddf3+0x1da>
 80005dc:	f1a4 0401 	sub.w	r4, r4, #1
 80005e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005e4:	db0d      	blt.n	8000602 <__adddf3+0xb2>
 80005e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ea:	fa22 f205 	lsr.w	r2, r2, r5
 80005ee:	1880      	adds	r0, r0, r2
 80005f0:	f141 0100 	adc.w	r1, r1, #0
 80005f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005f8:	1880      	adds	r0, r0, r2
 80005fa:	fa43 f305 	asr.w	r3, r3, r5
 80005fe:	4159      	adcs	r1, r3
 8000600:	e00e      	b.n	8000620 <__adddf3+0xd0>
 8000602:	f1a5 0520 	sub.w	r5, r5, #32
 8000606:	f10e 0e20 	add.w	lr, lr, #32
 800060a:	2a01      	cmp	r2, #1
 800060c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000610:	bf28      	it	cs
 8000612:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000616:	fa43 f305 	asr.w	r3, r3, r5
 800061a:	18c0      	adds	r0, r0, r3
 800061c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000624:	d507      	bpl.n	8000636 <__adddf3+0xe6>
 8000626:	f04f 0e00 	mov.w	lr, #0
 800062a:	f1dc 0c00 	rsbs	ip, ip, #0
 800062e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000632:	eb6e 0101 	sbc.w	r1, lr, r1
 8000636:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800063a:	d31b      	bcc.n	8000674 <__adddf3+0x124>
 800063c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000640:	d30c      	bcc.n	800065c <__adddf3+0x10c>
 8000642:	0849      	lsrs	r1, r1, #1
 8000644:	ea5f 0030 	movs.w	r0, r0, rrx
 8000648:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800064c:	f104 0401 	add.w	r4, r4, #1
 8000650:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000654:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000658:	f080 809a 	bcs.w	8000790 <__adddf3+0x240>
 800065c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	ea41 0105 	orr.w	r1, r1, r5
 8000672:	bd30      	pop	{r4, r5, pc}
 8000674:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000678:	4140      	adcs	r0, r0
 800067a:	eb41 0101 	adc.w	r1, r1, r1
 800067e:	3c01      	subs	r4, #1
 8000680:	bf28      	it	cs
 8000682:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000686:	d2e9      	bcs.n	800065c <__adddf3+0x10c>
 8000688:	f091 0f00 	teq	r1, #0
 800068c:	bf04      	itt	eq
 800068e:	4601      	moveq	r1, r0
 8000690:	2000      	moveq	r0, #0
 8000692:	fab1 f381 	clz	r3, r1
 8000696:	bf08      	it	eq
 8000698:	3320      	addeq	r3, #32
 800069a:	f1a3 030b 	sub.w	r3, r3, #11
 800069e:	f1b3 0220 	subs.w	r2, r3, #32
 80006a2:	da0c      	bge.n	80006be <__adddf3+0x16e>
 80006a4:	320c      	adds	r2, #12
 80006a6:	dd08      	ble.n	80006ba <__adddf3+0x16a>
 80006a8:	f102 0c14 	add.w	ip, r2, #20
 80006ac:	f1c2 020c 	rsb	r2, r2, #12
 80006b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006b4:	fa21 f102 	lsr.w	r1, r1, r2
 80006b8:	e00c      	b.n	80006d4 <__adddf3+0x184>
 80006ba:	f102 0214 	add.w	r2, r2, #20
 80006be:	bfd8      	it	le
 80006c0:	f1c2 0c20 	rsble	ip, r2, #32
 80006c4:	fa01 f102 	lsl.w	r1, r1, r2
 80006c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006cc:	bfdc      	itt	le
 80006ce:	ea41 010c 	orrle.w	r1, r1, ip
 80006d2:	4090      	lslle	r0, r2
 80006d4:	1ae4      	subs	r4, r4, r3
 80006d6:	bfa2      	ittt	ge
 80006d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006dc:	4329      	orrge	r1, r5
 80006de:	bd30      	popge	{r4, r5, pc}
 80006e0:	ea6f 0404 	mvn.w	r4, r4
 80006e4:	3c1f      	subs	r4, #31
 80006e6:	da1c      	bge.n	8000722 <__adddf3+0x1d2>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc0e      	bgt.n	800070a <__adddf3+0x1ba>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0220 	rsb	r2, r4, #32
 80006f4:	fa20 f004 	lsr.w	r0, r0, r4
 80006f8:	fa01 f302 	lsl.w	r3, r1, r2
 80006fc:	ea40 0003 	orr.w	r0, r0, r3
 8000700:	fa21 f304 	lsr.w	r3, r1, r4
 8000704:	ea45 0103 	orr.w	r1, r5, r3
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f1c4 040c 	rsb	r4, r4, #12
 800070e:	f1c4 0220 	rsb	r2, r4, #32
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 f304 	lsl.w	r3, r1, r4
 800071a:	ea40 0003 	orr.w	r0, r0, r3
 800071e:	4629      	mov	r1, r5
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	fa21 f004 	lsr.w	r0, r1, r4
 8000726:	4629      	mov	r1, r5
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	f094 0f00 	teq	r4, #0
 800072e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000732:	bf06      	itte	eq
 8000734:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000738:	3401      	addeq	r4, #1
 800073a:	3d01      	subne	r5, #1
 800073c:	e74e      	b.n	80005dc <__adddf3+0x8c>
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf18      	it	ne
 8000744:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000748:	d029      	beq.n	800079e <__adddf3+0x24e>
 800074a:	ea94 0f05 	teq	r4, r5
 800074e:	bf08      	it	eq
 8000750:	ea90 0f02 	teqeq	r0, r2
 8000754:	d005      	beq.n	8000762 <__adddf3+0x212>
 8000756:	ea54 0c00 	orrs.w	ip, r4, r0
 800075a:	bf04      	itt	eq
 800075c:	4619      	moveq	r1, r3
 800075e:	4610      	moveq	r0, r2
 8000760:	bd30      	pop	{r4, r5, pc}
 8000762:	ea91 0f03 	teq	r1, r3
 8000766:	bf1e      	ittt	ne
 8000768:	2100      	movne	r1, #0
 800076a:	2000      	movne	r0, #0
 800076c:	bd30      	popne	{r4, r5, pc}
 800076e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000772:	d105      	bne.n	8000780 <__adddf3+0x230>
 8000774:	0040      	lsls	r0, r0, #1
 8000776:	4149      	adcs	r1, r1
 8000778:	bf28      	it	cs
 800077a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800077e:	bd30      	pop	{r4, r5, pc}
 8000780:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000784:	bf3c      	itt	cc
 8000786:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800078a:	bd30      	popcc	{r4, r5, pc}
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000790:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007a2:	bf1a      	itte	ne
 80007a4:	4619      	movne	r1, r3
 80007a6:	4610      	movne	r0, r2
 80007a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007ac:	bf1c      	itt	ne
 80007ae:	460b      	movne	r3, r1
 80007b0:	4602      	movne	r2, r0
 80007b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007b6:	bf06      	itte	eq
 80007b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007bc:	ea91 0f03 	teqeq	r1, r3
 80007c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007c4:	bd30      	pop	{r4, r5, pc}
 80007c6:	bf00      	nop

080007c8 <__aeabi_ui2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007dc:	f04f 0500 	mov.w	r5, #0
 80007e0:	f04f 0100 	mov.w	r1, #0
 80007e4:	e750      	b.n	8000688 <__adddf3+0x138>
 80007e6:	bf00      	nop

080007e8 <__aeabi_i2d>:
 80007e8:	f090 0f00 	teq	r0, #0
 80007ec:	bf04      	itt	eq
 80007ee:	2100      	moveq	r1, #0
 80007f0:	4770      	bxeq	lr
 80007f2:	b530      	push	{r4, r5, lr}
 80007f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000800:	bf48      	it	mi
 8000802:	4240      	negmi	r0, r0
 8000804:	f04f 0100 	mov.w	r1, #0
 8000808:	e73e      	b.n	8000688 <__adddf3+0x138>
 800080a:	bf00      	nop

0800080c <__aeabi_f2d>:
 800080c:	0042      	lsls	r2, r0, #1
 800080e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000812:	ea4f 0131 	mov.w	r1, r1, rrx
 8000816:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800081a:	bf1f      	itttt	ne
 800081c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000820:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000824:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000828:	4770      	bxne	lr
 800082a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800082e:	bf08      	it	eq
 8000830:	4770      	bxeq	lr
 8000832:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000836:	bf04      	itt	eq
 8000838:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800083c:	4770      	bxeq	lr
 800083e:	b530      	push	{r4, r5, lr}
 8000840:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000844:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000848:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800084c:	e71c      	b.n	8000688 <__adddf3+0x138>
 800084e:	bf00      	nop

08000850 <__aeabi_ul2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f04f 0500 	mov.w	r5, #0
 800085e:	e00a      	b.n	8000876 <__aeabi_l2d+0x16>

08000860 <__aeabi_l2d>:
 8000860:	ea50 0201 	orrs.w	r2, r0, r1
 8000864:	bf08      	it	eq
 8000866:	4770      	bxeq	lr
 8000868:	b530      	push	{r4, r5, lr}
 800086a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800086e:	d502      	bpl.n	8000876 <__aeabi_l2d+0x16>
 8000870:	4240      	negs	r0, r0
 8000872:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000876:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800087a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800087e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000882:	f43f aed8 	beq.w	8000636 <__adddf3+0xe6>
 8000886:	f04f 0203 	mov.w	r2, #3
 800088a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800088e:	bf18      	it	ne
 8000890:	3203      	addne	r2, #3
 8000892:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000896:	bf18      	it	ne
 8000898:	3203      	addne	r2, #3
 800089a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800089e:	f1c2 0320 	rsb	r3, r2, #32
 80008a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80008a6:	fa20 f002 	lsr.w	r0, r0, r2
 80008aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80008ae:	ea40 000e 	orr.w	r0, r0, lr
 80008b2:	fa21 f102 	lsr.w	r1, r1, r2
 80008b6:	4414      	add	r4, r2
 80008b8:	e6bd      	b.n	8000636 <__adddf3+0xe6>
 80008ba:	bf00      	nop

080008bc <__aeabi_d2iz>:
 80008bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008c4:	d215      	bcs.n	80008f2 <__aeabi_d2iz+0x36>
 80008c6:	d511      	bpl.n	80008ec <__aeabi_d2iz+0x30>
 80008c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008d0:	d912      	bls.n	80008f8 <__aeabi_d2iz+0x3c>
 80008d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008e2:	fa23 f002 	lsr.w	r0, r3, r2
 80008e6:	bf18      	it	ne
 80008e8:	4240      	negne	r0, r0
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008f6:	d105      	bne.n	8000904 <__aeabi_d2iz+0x48>
 80008f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008fc:	bf08      	it	eq
 80008fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000902:	4770      	bx	lr
 8000904:	f04f 0000 	mov.w	r0, #0
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295
 800091c:	f04f 30ff 	movne.w	r0, #4294967295
 8000920:	f000 b970 	b.w	8000c04 <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9e08      	ldr	r6, [sp, #32]
 8000942:	460d      	mov	r5, r1
 8000944:	4604      	mov	r4, r0
 8000946:	460f      	mov	r7, r1
 8000948:	2b00      	cmp	r3, #0
 800094a:	d14a      	bne.n	80009e2 <__udivmoddi4+0xa6>
 800094c:	428a      	cmp	r2, r1
 800094e:	4694      	mov	ip, r2
 8000950:	d965      	bls.n	8000a1e <__udivmoddi4+0xe2>
 8000952:	fab2 f382 	clz	r3, r2
 8000956:	b143      	cbz	r3, 800096a <__udivmoddi4+0x2e>
 8000958:	fa02 fc03 	lsl.w	ip, r2, r3
 800095c:	f1c3 0220 	rsb	r2, r3, #32
 8000960:	409f      	lsls	r7, r3
 8000962:	fa20 f202 	lsr.w	r2, r0, r2
 8000966:	4317      	orrs	r7, r2
 8000968:	409c      	lsls	r4, r3
 800096a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800096e:	fa1f f58c 	uxth.w	r5, ip
 8000972:	fbb7 f1fe 	udiv	r1, r7, lr
 8000976:	0c22      	lsrs	r2, r4, #16
 8000978:	fb0e 7711 	mls	r7, lr, r1, r7
 800097c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000980:	fb01 f005 	mul.w	r0, r1, r5
 8000984:	4290      	cmp	r0, r2
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x62>
 8000988:	eb1c 0202 	adds.w	r2, ip, r2
 800098c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000990:	f080 811c 	bcs.w	8000bcc <__udivmoddi4+0x290>
 8000994:	4290      	cmp	r0, r2
 8000996:	f240 8119 	bls.w	8000bcc <__udivmoddi4+0x290>
 800099a:	3902      	subs	r1, #2
 800099c:	4462      	add	r2, ip
 800099e:	1a12      	subs	r2, r2, r0
 80009a0:	b2a4      	uxth	r4, r4
 80009a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009ae:	fb00 f505 	mul.w	r5, r0, r5
 80009b2:	42a5      	cmp	r5, r4
 80009b4:	d90a      	bls.n	80009cc <__udivmoddi4+0x90>
 80009b6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80009be:	f080 8107 	bcs.w	8000bd0 <__udivmoddi4+0x294>
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	f240 8104 	bls.w	8000bd0 <__udivmoddi4+0x294>
 80009c8:	4464      	add	r4, ip
 80009ca:	3802      	subs	r0, #2
 80009cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009d0:	1b64      	subs	r4, r4, r5
 80009d2:	2100      	movs	r1, #0
 80009d4:	b11e      	cbz	r6, 80009de <__udivmoddi4+0xa2>
 80009d6:	40dc      	lsrs	r4, r3
 80009d8:	2300      	movs	r3, #0
 80009da:	e9c6 4300 	strd	r4, r3, [r6]
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0xbc>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	f000 80ed 	beq.w	8000bc6 <__udivmoddi4+0x28a>
 80009ec:	2100      	movs	r1, #0
 80009ee:	e9c6 0500 	strd	r0, r5, [r6]
 80009f2:	4608      	mov	r0, r1
 80009f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f8:	fab3 f183 	clz	r1, r3
 80009fc:	2900      	cmp	r1, #0
 80009fe:	d149      	bne.n	8000a94 <__udivmoddi4+0x158>
 8000a00:	42ab      	cmp	r3, r5
 8000a02:	d302      	bcc.n	8000a0a <__udivmoddi4+0xce>
 8000a04:	4282      	cmp	r2, r0
 8000a06:	f200 80f8 	bhi.w	8000bfa <__udivmoddi4+0x2be>
 8000a0a:	1a84      	subs	r4, r0, r2
 8000a0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a10:	2001      	movs	r0, #1
 8000a12:	4617      	mov	r7, r2
 8000a14:	2e00      	cmp	r6, #0
 8000a16:	d0e2      	beq.n	80009de <__udivmoddi4+0xa2>
 8000a18:	e9c6 4700 	strd	r4, r7, [r6]
 8000a1c:	e7df      	b.n	80009de <__udivmoddi4+0xa2>
 8000a1e:	b902      	cbnz	r2, 8000a22 <__udivmoddi4+0xe6>
 8000a20:	deff      	udf	#255	; 0xff
 8000a22:	fab2 f382 	clz	r3, r2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f040 8090 	bne.w	8000b4c <__udivmoddi4+0x210>
 8000a2c:	1a8a      	subs	r2, r1, r2
 8000a2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a32:	fa1f fe8c 	uxth.w	lr, ip
 8000a36:	2101      	movs	r1, #1
 8000a38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a40:	0c22      	lsrs	r2, r4, #16
 8000a42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a46:	fb0e f005 	mul.w	r0, lr, r5
 8000a4a:	4290      	cmp	r0, r2
 8000a4c:	d908      	bls.n	8000a60 <__udivmoddi4+0x124>
 8000a4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a56:	d202      	bcs.n	8000a5e <__udivmoddi4+0x122>
 8000a58:	4290      	cmp	r0, r2
 8000a5a:	f200 80cb 	bhi.w	8000bf4 <__udivmoddi4+0x2b8>
 8000a5e:	4645      	mov	r5, r8
 8000a60:	1a12      	subs	r2, r2, r0
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a68:	fb07 2210 	mls	r2, r7, r0, r2
 8000a6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a70:	fb0e fe00 	mul.w	lr, lr, r0
 8000a74:	45a6      	cmp	lr, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x14e>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a80:	d202      	bcs.n	8000a88 <__udivmoddi4+0x14c>
 8000a82:	45a6      	cmp	lr, r4
 8000a84:	f200 80bb 	bhi.w	8000bfe <__udivmoddi4+0x2c2>
 8000a88:	4610      	mov	r0, r2
 8000a8a:	eba4 040e 	sub.w	r4, r4, lr
 8000a8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a92:	e79f      	b.n	80009d4 <__udivmoddi4+0x98>
 8000a94:	f1c1 0720 	rsb	r7, r1, #32
 8000a98:	408b      	lsls	r3, r1
 8000a9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aa2:	fa05 f401 	lsl.w	r4, r5, r1
 8000aa6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aaa:	40fd      	lsrs	r5, r7
 8000aac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ab6:	fa1f fe8c 	uxth.w	lr, ip
 8000aba:	fb09 5518 	mls	r5, r9, r8, r5
 8000abe:	0c1c      	lsrs	r4, r3, #16
 8000ac0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ac4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ac8:	42a5      	cmp	r5, r4
 8000aca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ace:	fa00 f001 	lsl.w	r0, r0, r1
 8000ad2:	d90b      	bls.n	8000aec <__udivmoddi4+0x1b0>
 8000ad4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000adc:	f080 8088 	bcs.w	8000bf0 <__udivmoddi4+0x2b4>
 8000ae0:	42a5      	cmp	r5, r4
 8000ae2:	f240 8085 	bls.w	8000bf0 <__udivmoddi4+0x2b4>
 8000ae6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aea:	4464      	add	r4, ip
 8000aec:	1b64      	subs	r4, r4, r5
 8000aee:	b29d      	uxth	r5, r3
 8000af0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000af4:	fb09 4413 	mls	r4, r9, r3, r4
 8000af8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000afc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d908      	bls.n	8000b16 <__udivmoddi4+0x1da>
 8000b04:	eb1c 0404 	adds.w	r4, ip, r4
 8000b08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b0c:	d26c      	bcs.n	8000be8 <__udivmoddi4+0x2ac>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	d96a      	bls.n	8000be8 <__udivmoddi4+0x2ac>
 8000b12:	3b02      	subs	r3, #2
 8000b14:	4464      	add	r4, ip
 8000b16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b1e:	eba4 040e 	sub.w	r4, r4, lr
 8000b22:	42ac      	cmp	r4, r5
 8000b24:	46c8      	mov	r8, r9
 8000b26:	46ae      	mov	lr, r5
 8000b28:	d356      	bcc.n	8000bd8 <__udivmoddi4+0x29c>
 8000b2a:	d053      	beq.n	8000bd4 <__udivmoddi4+0x298>
 8000b2c:	b156      	cbz	r6, 8000b44 <__udivmoddi4+0x208>
 8000b2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b32:	eb64 040e 	sbc.w	r4, r4, lr
 8000b36:	fa04 f707 	lsl.w	r7, r4, r7
 8000b3a:	40ca      	lsrs	r2, r1
 8000b3c:	40cc      	lsrs	r4, r1
 8000b3e:	4317      	orrs	r7, r2
 8000b40:	e9c6 7400 	strd	r7, r4, [r6]
 8000b44:	4618      	mov	r0, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4c:	f1c3 0120 	rsb	r1, r3, #32
 8000b50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b54:	fa20 f201 	lsr.w	r2, r0, r1
 8000b58:	fa25 f101 	lsr.w	r1, r5, r1
 8000b5c:	409d      	lsls	r5, r3
 8000b5e:	432a      	orrs	r2, r5
 8000b60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b64:	fa1f fe8c 	uxth.w	lr, ip
 8000b68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b70:	0c11      	lsrs	r1, r2, #16
 8000b72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b76:	fb00 f50e 	mul.w	r5, r0, lr
 8000b7a:	428d      	cmp	r5, r1
 8000b7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x258>
 8000b82:	eb1c 0101 	adds.w	r1, ip, r1
 8000b86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b8a:	d22f      	bcs.n	8000bec <__udivmoddi4+0x2b0>
 8000b8c:	428d      	cmp	r5, r1
 8000b8e:	d92d      	bls.n	8000bec <__udivmoddi4+0x2b0>
 8000b90:	3802      	subs	r0, #2
 8000b92:	4461      	add	r1, ip
 8000b94:	1b49      	subs	r1, r1, r5
 8000b96:	b292      	uxth	r2, r2
 8000b98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ba0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ba4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ba8:	4291      	cmp	r1, r2
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x282>
 8000bac:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb4:	d216      	bcs.n	8000be4 <__udivmoddi4+0x2a8>
 8000bb6:	4291      	cmp	r1, r2
 8000bb8:	d914      	bls.n	8000be4 <__udivmoddi4+0x2a8>
 8000bba:	3d02      	subs	r5, #2
 8000bbc:	4462      	add	r2, ip
 8000bbe:	1a52      	subs	r2, r2, r1
 8000bc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bc4:	e738      	b.n	8000a38 <__udivmoddi4+0xfc>
 8000bc6:	4631      	mov	r1, r6
 8000bc8:	4630      	mov	r0, r6
 8000bca:	e708      	b.n	80009de <__udivmoddi4+0xa2>
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e6e6      	b.n	800099e <__udivmoddi4+0x62>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	e6fb      	b.n	80009cc <__udivmoddi4+0x90>
 8000bd4:	4548      	cmp	r0, r9
 8000bd6:	d2a9      	bcs.n	8000b2c <__udivmoddi4+0x1f0>
 8000bd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000be0:	3b01      	subs	r3, #1
 8000be2:	e7a3      	b.n	8000b2c <__udivmoddi4+0x1f0>
 8000be4:	4645      	mov	r5, r8
 8000be6:	e7ea      	b.n	8000bbe <__udivmoddi4+0x282>
 8000be8:	462b      	mov	r3, r5
 8000bea:	e794      	b.n	8000b16 <__udivmoddi4+0x1da>
 8000bec:	4640      	mov	r0, r8
 8000bee:	e7d1      	b.n	8000b94 <__udivmoddi4+0x258>
 8000bf0:	46d0      	mov	r8, sl
 8000bf2:	e77b      	b.n	8000aec <__udivmoddi4+0x1b0>
 8000bf4:	3d02      	subs	r5, #2
 8000bf6:	4462      	add	r2, ip
 8000bf8:	e732      	b.n	8000a60 <__udivmoddi4+0x124>
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	e70a      	b.n	8000a14 <__udivmoddi4+0xd8>
 8000bfe:	4464      	add	r4, ip
 8000c00:	3802      	subs	r0, #2
 8000c02:	e742      	b.n	8000a8a <__udivmoddi4+0x14e>

08000c04 <__aeabi_idiv0>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f008 f974 	bl	8008f0e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c26:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c2e:	4b30      	ldr	r3, [pc, #192]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c36:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3c:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000c42:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c50:	2204      	movs	r2, #4
 8000c52:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c54:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c74:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c90:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000c92:	f001 fccb 	bl	800262c <HAL_ADC_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000c9c:	f000 fbbc 	bl	8001418 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000cac:	f002 fae6 	bl	800327c <HAL_ADCEx_MultiModeConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cb6:	f000 fbaf 	bl	8001418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_ADC1_Init+0xec>)
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cbe:	2306      	movs	r3, #6
 8000cc0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cc6:	237f      	movs	r3, #127	; 0x7f
 8000cc8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_ADC1_Init+0xe8>)
 8000cd8:	f001 fe6a 	bl	80029b0 <HAL_ADC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ce2:	f000 fb99 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3730      	adds	r7, #48	; 0x30
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000290 	.word	0x20000290
 8000cf4:	21800100 	.word	0x21800100

08000cf8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f008 f902 	bl	8008f0e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d0a:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <MX_ADC2_Init+0xc4>)
 8000d0e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d16:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d18:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d36:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000d42:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d72:	4811      	ldr	r0, [pc, #68]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000d74:	f001 fc5a 	bl	800262c <HAL_ADC_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000d7e:	f000 fb4b 	bl	8001418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_ADC2_Init+0xc8>)
 8000d84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d86:	2306      	movs	r3, #6
 8000d88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d8e:	237f      	movs	r3, #127	; 0x7f
 8000d90:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d92:	2304      	movs	r3, #4
 8000d94:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <MX_ADC2_Init+0xc0>)
 8000da0:	f001 fe06 	bl	80029b0 <HAL_ADC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000daa:	f000 fb35 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200002fc 	.word	0x200002fc
 8000dbc:	50000100 	.word	0x50000100
 8000dc0:	19200040 	.word	0x19200040

08000dc4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0a4      	sub	sp, #144	; 0x90
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de0:	2254      	movs	r2, #84	; 0x54
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f008 f892 	bl	8008f0e <memset>
  if(adcHandle->Instance==ADC1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df2:	d174      	bne.n	8000ede <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000df4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dfa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 fcb9 	bl	800477c <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e10:	f000 fb02 	bl	8001418 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e14:	4b63      	ldr	r3, [pc, #396]	; (8000fa4 <HAL_ADC_MspInit+0x1e0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a62      	ldr	r2, [pc, #392]	; (8000fa4 <HAL_ADC_MspInit+0x1e0>)
 8000e1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e1e:	4b61      	ldr	r3, [pc, #388]	; (8000fa4 <HAL_ADC_MspInit+0x1e0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10b      	bne.n	8000e3e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e26:	4b60      	ldr	r3, [pc, #384]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a5f      	ldr	r2, [pc, #380]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b5d      	ldr	r3, [pc, #372]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b5a      	ldr	r3, [pc, #360]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a59      	ldr	r2, [pc, #356]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	623b      	str	r3, [r7, #32]
 8000e54:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b54      	ldr	r3, [pc, #336]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a53      	ldr	r2, [pc, #332]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b51      	ldr	r3, [pc, #324]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b4e      	ldr	r3, [pc, #312]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a4d      	ldr	r2, [pc, #308]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000e86:	2304      	movs	r3, #4
 8000e88:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4843      	ldr	r0, [pc, #268]	; (8000fac <HAL_ADC_MspInit+0x1e8>)
 8000e9e:	f002 fc95 	bl	80037cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f002 fc86 	bl	80037cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4836      	ldr	r0, [pc, #216]	; (8000fb0 <HAL_ADC_MspInit+0x1ec>)
 8000ed8:	f002 fc78 	bl	80037cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000edc:	e05e      	b.n	8000f9c <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a34      	ldr	r2, [pc, #208]	; (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d159      	bne.n	8000f9c <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000eee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 fc3f 	bl	800477c <HAL_RCCEx_PeriphCLKConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000f04:	f000 fa88 	bl	8001418 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <HAL_ADC_MspInit+0x1e0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	4a25      	ldr	r2, [pc, #148]	; (8000fa4 <HAL_ADC_MspInit+0x1e0>)
 8000f10:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <HAL_ADC_MspInit+0x1e0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d10b      	bne.n	8000f32 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a16      	ldr	r2, [pc, #88]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_ADC_MspInit+0x1e4>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000f62:	230b      	movs	r3, #11
 8000f64:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f66:	2303      	movs	r3, #3
 8000f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f76:	4619      	mov	r1, r3
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <HAL_ADC_MspInit+0x1e8>)
 8000f7a:	f002 fc27 	bl	80037cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f82:	2303      	movs	r3, #3
 8000f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f92:	4619      	mov	r1, r3
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f002 fc18 	bl	80037cc <HAL_GPIO_Init>
}
 8000f9c:	bf00      	nop
 8000f9e:	3790      	adds	r7, #144	; 0x90
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000368 	.word	0x20000368
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48000800 	.word	0x48000800
 8000fb0:	48000400 	.word	0x48000400
 8000fb4:	50000100 	.word	0x50000100

08000fb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	4b3f      	ldr	r3, [pc, #252]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a3e      	ldr	r2, [pc, #248]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe6:	4b39      	ldr	r3, [pc, #228]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a38      	ldr	r2, [pc, #224]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fec:	f043 0320 	orr.w	r3, r3, #32
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b36      	ldr	r3, [pc, #216]	; (80010cc <MX_GPIO_Init+0x114>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0320 	and.w	r3, r3, #32
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b33      	ldr	r3, [pc, #204]	; (80010cc <MX_GPIO_Init+0x114>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a32      	ldr	r2, [pc, #200]	; (80010cc <MX_GPIO_Init+0x114>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b30      	ldr	r3, [pc, #192]	; (80010cc <MX_GPIO_Init+0x114>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <MX_GPIO_Init+0x114>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a2c      	ldr	r2, [pc, #176]	; (80010cc <MX_GPIO_Init+0x114>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <MX_GPIO_Init+0x114>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	4b27      	ldr	r3, [pc, #156]	; (80010cc <MX_GPIO_Init+0x114>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <MX_GPIO_Init+0x114>)
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <MX_GPIO_Init+0x114>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2120      	movs	r1, #32
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f002 fd3f 	bl	8003ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2104      	movs	r1, #4
 8001056:	481e      	ldr	r0, [pc, #120]	; (80010d0 <MX_GPIO_Init+0x118>)
 8001058:	f002 fd3a 	bl	8003ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 800105c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001062:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4818      	ldr	r0, [pc, #96]	; (80010d4 <MX_GPIO_Init+0x11c>)
 8001074:	f002 fbaa 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001078:	2320      	movs	r3, #32
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f002 fb9b 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001096:	2304      	movs	r3, #4
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <MX_GPIO_Init+0x118>)
 80010ae:	f002 fb8d 	bl	80037cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2028      	movs	r0, #40	; 0x28
 80010b8:	f002 faa0 	bl	80035fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010bc:	2028      	movs	r0, #40	; 0x28
 80010be:	f002 fab7 	bl	8003630 <HAL_NVIC_EnableIRQ>

}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000c00 	.word	0x48000c00
 80010d4:	48000800 	.word	0x48000800

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010de:	f001 f894 	bl	800220a <HAL_Init>

  /* USER CODE BEGIN Init */
  uint32_t lastTick = HAL_GetTick();//initialize current tick time
 80010e2:	f001 f8bd 	bl	8002260 <HAL_GetTick>
 80010e6:	60f8      	str	r0, [r7, #12]
  motor_params_t motor;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e8:	f000 f821 	bl	800112e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ec:	f7ff ff64 	bl	8000fb8 <MX_GPIO_Init>
  MX_ADC2_Init();
 80010f0:	f7ff fe02 	bl	8000cf8 <MX_ADC2_Init>
  MX_ADC1_Init();
 80010f4:	f7ff fd88 	bl	8000c08 <MX_ADC1_Init>
  MX_TIM1_Init();
 80010f8:	f000 fb4e 	bl	8001798 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010fc:	f000 fc1c 	bl	8001938 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001100:	f000 fd50 	bl	8001ba4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001104:	f000 fd9a 	bl	8001c3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8001108:	f000 fe8c 	bl	8001e24 <Shell_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//use stm32 tick time to enter the function every N Ms
        if ((HAL_GetTick() - lastTick) >= MOTOR_SPEED_UPDATE_RATE)
 800110c:	f001 f8a8 	bl	8002260 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b31      	cmp	r3, #49	; 0x31
 8001118:	d904      	bls.n	8001124 <main+0x4c>
        {
    		motor_speed_control_loop();
 800111a:	f000 f859 	bl	80011d0 <motor_speed_control_loop>
            lastTick = HAL_GetTick();
 800111e:	f001 f89f 	bl	8002260 <HAL_GetTick>
 8001122:	60f8      	str	r0, [r7, #12]
        }

		mesure_loop();
 8001124:	f000 f84c 	bl	80011c0 <mesure_loop>
		Shell_Loop();
 8001128:	f000 febc 	bl	8001ea4 <Shell_Loop>
	{
 800112c:	e7ee      	b.n	800110c <main+0x34>

0800112e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b094      	sub	sp, #80	; 0x50
 8001132:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	2238      	movs	r2, #56	; 0x38
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f007 fee6 	bl	8008f0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001150:	2000      	movs	r0, #0
 8001152:	f002 fcf9 	bl	8003b48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001156:	2301      	movs	r3, #1
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800115a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001164:	2303      	movs	r3, #3
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001168:	2306      	movs	r3, #6
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800116c:	2355      	movs	r3, #85	; 0x55
 800116e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001178:	2302      	movs	r3, #2
 800117a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	4618      	mov	r0, r3
 8001182:	f002 fd95 	bl	8003cb0 <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800118c:	f000 f944 	bl	8001418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2303      	movs	r3, #3
 8001196:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2104      	movs	r1, #4
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 f899 	bl	80042e0 <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80011b4:	f000 f930 	bl	8001418 <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3750      	adds	r7, #80	; 0x50
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <mesure_loop>:

/* USER CODE BEGIN 4 */
void mesure_loop()
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	 * 1.measure motor current
	 * 2.measure motor speed
	 */


}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <motor_speed_control_loop>:
void motor_speed_control_loop()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	if(motor_current_speed != motor_set_speed)
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <motor_speed_control_loop+0x40>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <motor_speed_control_loop+0x44>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d015      	beq.n	800120c <motor_speed_control_loop+0x3c>
	{
		if (motor_current_speed < motor_set_speed)
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <motor_speed_control_loop+0x40>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <motor_speed_control_loop+0x44>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	da05      	bge.n	80011f8 <motor_speed_control_loop+0x28>
		{
			motor_current_speed++;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <motor_speed_control_loop+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	4a07      	ldr	r2, [pc, #28]	; (8001210 <motor_speed_control_loop+0x40>)
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e004      	b.n	8001202 <motor_speed_control_loop+0x32>
		}else{
			motor_current_speed--;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <motor_speed_control_loop+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <motor_speed_control_loop+0x40>)
 8001200:	6013      	str	r3, [r2, #0]
		}
		set_PWM(motor_current_speed);
 8001202:	4b03      	ldr	r3, [pc, #12]	; (8001210 <motor_speed_control_loop+0x40>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f878 	bl	80012fc <set_PWM>
	}
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000370 	.word	0x20000370
 8001214:	2000036c 	.word	0x2000036c

08001218 <start_PWM>:
int start_PWM()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
    int speed_stopped = __HAL_TIM_GET_AUTORELOAD(&htim1) / 2;
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <start_PWM+0x7c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001224:	085b      	lsrs	r3, r3, #1
 8001226:	607b      	str	r3, [r7, #4]
    motor_set_speed = 0;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <start_PWM+0x80>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
    motor_current_speed = 0;
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <start_PWM+0x84>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
    TIM1->CCR1 = speed_stopped;
 8001234:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <start_PWM+0x88>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6353      	str	r3, [r2, #52]	; 0x34
    TIM1->CCR2 = speed_stopped;
 800123a:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <start_PWM+0x88>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6393      	str	r3, [r2, #56]	; 0x38

    if (HAL_OK != HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1)) {
 8001240:	2100      	movs	r1, #0
 8001242:	4814      	ldr	r0, [pc, #80]	; (8001294 <start_PWM+0x7c>)
 8001244:	f003 fe1a 	bl	8004e7c <HAL_TIM_PWM_Start>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <start_PWM+0x3a>
        return ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e01b      	b.n	800128a <start_PWM+0x72>
    }

    if (HAL_OK != HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2)) {
 8001252:	2104      	movs	r1, #4
 8001254:	480f      	ldr	r0, [pc, #60]	; (8001294 <start_PWM+0x7c>)
 8001256:	f003 fe11 	bl	8004e7c <HAL_TIM_PWM_Start>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <start_PWM+0x4c>
        return ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e012      	b.n	800128a <start_PWM+0x72>
    }

    if (HAL_OK != HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1)) {
 8001264:	2100      	movs	r1, #0
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <start_PWM+0x7c>)
 8001268:	f005 f93e 	bl	80064e8 <HAL_TIMEx_PWMN_Start>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <start_PWM+0x5e>
        return ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e009      	b.n	800128a <start_PWM+0x72>
    }

    if (HAL_OK != HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2)) {
 8001276:	2104      	movs	r1, #4
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <start_PWM+0x7c>)
 800127a:	f005 f935 	bl	80064e8 <HAL_TIMEx_PWMN_Start>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <start_PWM+0x70>
        return ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <start_PWM+0x72>
    }

    return SUCCESS;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200003c4 	.word	0x200003c4
 8001298:	2000036c 	.word	0x2000036c
 800129c:	20000370 	.word	0x20000370
 80012a0:	40012c00 	.word	0x40012c00

080012a4 <stop_PWM>:

int stop_PWM()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
    if (HAL_OK != HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1)) {
 80012a8:	2100      	movs	r1, #0
 80012aa:	4813      	ldr	r0, [pc, #76]	; (80012f8 <stop_PWM+0x54>)
 80012ac:	f003 fef8 	bl	80050a0 <HAL_TIM_PWM_Stop>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <stop_PWM+0x16>
        return ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e01b      	b.n	80012f2 <stop_PWM+0x4e>
    }

    if (HAL_OK != HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2)) {
 80012ba:	2104      	movs	r1, #4
 80012bc:	480e      	ldr	r0, [pc, #56]	; (80012f8 <stop_PWM+0x54>)
 80012be:	f003 feef 	bl	80050a0 <HAL_TIM_PWM_Stop>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <stop_PWM+0x28>
        return ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e012      	b.n	80012f2 <stop_PWM+0x4e>
    }

    if (HAL_OK != HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1)) {
 80012cc:	2100      	movs	r1, #0
 80012ce:	480a      	ldr	r0, [pc, #40]	; (80012f8 <stop_PWM+0x54>)
 80012d0:	f005 f9cc 	bl	800666c <HAL_TIMEx_PWMN_Stop>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <stop_PWM+0x3a>
        return ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e009      	b.n	80012f2 <stop_PWM+0x4e>
    }

    if (HAL_OK != HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2)) {
 80012de:	2104      	movs	r1, #4
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <stop_PWM+0x54>)
 80012e2:	f005 f9c3 	bl	800666c <HAL_TIMEx_PWMN_Stop>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <stop_PWM+0x4c>
        return ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <stop_PWM+0x4e>
    }

    return SUCCESS;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200003c4 	.word	0x200003c4

080012fc <set_PWM>:

int set_PWM(int new_speed)
{
 80012fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001300:	b088      	sub	sp, #32
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
	if((new_speed>100) || (new_speed<-100))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b64      	cmp	r3, #100	; 0x64
 800130a:	dc03      	bgt.n	8001314 <set_PWM+0x18>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001312:	da01      	bge.n	8001318 <set_PWM+0x1c>
	{
		return ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e061      	b.n	80013dc <set_PWM+0xe0>
	}else{
		const int ccr_size = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8001318:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <set_PWM+0xec>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	617b      	str	r3, [r7, #20]
		int ccr_size_div_2 = ccr_size/2;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	0fda      	lsrs	r2, r3, #31
 8001324:	4413      	add	r3, r2
 8001326:	105b      	asrs	r3, r3, #1
 8001328:	613b      	str	r3, [r7, #16]
		int ccr_U_value,ccr_V_value;
		float f_speed = (float)new_speed/100;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001334:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80013ec <set_PWM+0xf0>
 8001338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133c:	edc7 7a03 	vstr	s15, [r7, #12]
		if(new_speed >0)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	dd19      	ble.n	800137a <set_PWM+0x7e>
		{//sens de marche horaire
			ccr_U_value = ccr_size_div_2+(f_speed*ccr_size_div_2);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800135a:	edd7 7a03 	vldr	s15, [r7, #12]
 800135e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136a:	ee17 3a90 	vmov	r3, s15
 800136e:	61fb      	str	r3, [r7, #28]
			ccr_V_value = ccr_size-ccr_U_value;
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	e029      	b.n	80013ce <set_PWM+0xd2>
		}
		else
		{//sens de marche anti_horraire
			ccr_V_value = ccr_size_div_2+(fabs(f_speed)*ccr_size_div_2);
 800137a:	6938      	ldr	r0, [r7, #16]
 800137c:	f7ff fa34 	bl	80007e8 <__aeabi_i2d>
 8001380:	4604      	mov	r4, r0
 8001382:	460d      	mov	r5, r1
 8001384:	edd7 7a03 	vldr	s15, [r7, #12]
 8001388:	eef0 7ae7 	vabs.f32	s15, s15
 800138c:	ee17 0a90 	vmov	r0, s15
 8001390:	f7ff fa3c 	bl	800080c <__aeabi_f2d>
 8001394:	4680      	mov	r8, r0
 8001396:	4689      	mov	r9, r1
 8001398:	6938      	ldr	r0, [r7, #16]
 800139a:	f7ff fa25 	bl	80007e8 <__aeabi_i2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4640      	mov	r0, r8
 80013a4:	4649      	mov	r1, r9
 80013a6:	f7fe ffa3 	bl	80002f0 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4620      	mov	r0, r4
 80013b0:	4629      	mov	r1, r5
 80013b2:	f7ff f8cd 	bl	8000550 <__adddf3>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fa7d 	bl	80008bc <__aeabi_d2iz>
 80013c2:	4603      	mov	r3, r0
 80013c4:	61bb      	str	r3, [r7, #24]
			ccr_U_value = ccr_size-ccr_V_value;
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	61fb      	str	r3, [r7, #28]
		}
		TIM1->CCR1 = ccr_U_value;
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <set_PWM+0xf4>)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = ccr_V_value;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <set_PWM+0xf4>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	6393      	str	r3, [r2, #56]	; 0x38
		return SUCCESS;
 80013da:	2300      	movs	r3, #0
	}
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013e6:	bf00      	nop
 80013e8:	200003c4 	.word	0x200003c4
 80013ec:	42c80000 	.word	0x42c80000
 80013f0:	40012c00 	.word	0x40012c00

080013f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001406:	f000 ff19 	bl	800223c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40001000 	.word	0x40001000

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001420:	e7fe      	b.n	8001420 <Error_Handler+0x8>
	...

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_MspInit+0x44>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142e:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <HAL_MspInit+0x44>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6613      	str	r3, [r2, #96]	; 0x60
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <HAL_MspInit+0x44>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_MspInit+0x44>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_MspInit+0x44>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	6593      	str	r3, [r2, #88]	; 0x58
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_MspInit+0x44>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800145a:	f002 fc19 	bl	8003c90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	; 0x30
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800147c:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <HAL_InitTick+0xc4>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	4a2b      	ldr	r2, [pc, #172]	; (8001530 <HAL_InitTick+0xc4>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6593      	str	r3, [r2, #88]	; 0x58
 8001488:	4b29      	ldr	r3, [pc, #164]	; (8001530 <HAL_InitTick+0xc4>)
 800148a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001494:	f107 020c 	add.w	r2, r7, #12
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 f8f4 	bl	800468c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014a4:	f003 f8c6 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80014a8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ac:	4a21      	ldr	r2, [pc, #132]	; (8001534 <HAL_InitTick+0xc8>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	0c9b      	lsrs	r3, r3, #18
 80014b4:	3b01      	subs	r3, #1
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <HAL_InitTick+0xcc>)
 80014ba:	4a20      	ldr	r2, [pc, #128]	; (800153c <HAL_InitTick+0xd0>)
 80014bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014be:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <HAL_InitTick+0xcc>)
 80014c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014c6:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <HAL_InitTick+0xcc>)
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_InitTick+0xcc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_InitTick+0xcc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80014d8:	4817      	ldr	r0, [pc, #92]	; (8001538 <HAL_InitTick+0xcc>)
 80014da:	f003 fb9d 	bl	8004c18 <HAL_TIM_Base_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80014e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d11b      	bne.n	8001524 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014ec:	4812      	ldr	r0, [pc, #72]	; (8001538 <HAL_InitTick+0xcc>)
 80014ee:	f003 fbeb 	bl	8004cc8 <HAL_TIM_Base_Start_IT>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80014f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d111      	bne.n	8001524 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001500:	2036      	movs	r0, #54	; 0x36
 8001502:	f002 f895 	bl	8003630 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d808      	bhi.n	800151e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800150c:	2200      	movs	r2, #0
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	2036      	movs	r0, #54	; 0x36
 8001512:	f002 f873 	bl	80035fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_InitTick+0xd4>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	e002      	b.n	8001524 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001528:	4618      	mov	r0, r3
 800152a:	3730      	adds	r7, #48	; 0x30
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000
 8001534:	431bde83 	.word	0x431bde83
 8001538:	20000374 	.word	0x20000374
 800153c:	40001000 	.word	0x40001000
 8001540:	20000210 	.word	0x20000210

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <NMI_Handler+0x4>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <USART2_IRQHandler+0x10>)
 80015a2:	f005 fbb1 	bl	8006d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000045c 	.word	0x2000045c

080015b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <USART3_IRQHandler+0x10>)
 80015b6:	f005 fba7 	bl	8006d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200004ec 	.word	0x200004ec

080015c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80015c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015cc:	f002 fa98 	bl	8003b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <TIM6_DAC_IRQHandler+0x10>)
 80015da:	f003 fdfd 	bl	80051d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000374 	.word	0x20000374

080015e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return 1;
 80015ec:	2301      	movs	r3, #1
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_kill>:

int _kill(int pid, int sig)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001602:	f007 fd2f 	bl	8009064 <__errno>
 8001606:	4603      	mov	r3, r0
 8001608:	2216      	movs	r2, #22
 800160a:	601a      	str	r2, [r3, #0]
  return -1;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <_exit>:

void _exit (int status)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffe7 	bl	80015f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800162a:	e7fe      	b.n	800162a <_exit+0x12>

0800162c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e00a      	b.n	8001654 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800163e:	f3af 8000 	nop.w
 8001642:	4601      	mov	r1, r0
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	60ba      	str	r2, [r7, #8]
 800164a:	b2ca      	uxtb	r2, r1
 800164c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbf0      	blt.n	800163e <_read+0x12>
  }

  return len;
 800165c:	687b      	ldr	r3, [r7, #4]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	e009      	b.n	800168c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	60ba      	str	r2, [r7, #8]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	dbf1      	blt.n	8001678 <_write+0x12>
  }
  return len;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <_close>:

int _close(int file)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c6:	605a      	str	r2, [r3, #4]
  return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_isatty>:

int _isatty(int file)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d207      	bcs.n	8001748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001738:	f007 fc94 	bl	8009064 <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e009      	b.n	800175c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <_sbrk+0x64>)
 8001758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20020000 	.word	0x20020000
 8001768:	00000400 	.word	0x00000400
 800176c:	200003c0 	.word	0x200003c0
 8001770:	20000788 	.word	0x20000788

08001774 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <SystemInit+0x20>)
 800177a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <SystemInit+0x20>)
 8001780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b09c      	sub	sp, #112	; 0x70
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
 80017c8:	615a      	str	r2, [r3, #20]
 80017ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2234      	movs	r2, #52	; 0x34
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f007 fb9b 	bl	8008f0e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017d8:	4b55      	ldr	r3, [pc, #340]	; (8001930 <MX_TIM1_Init+0x198>)
 80017da:	4a56      	ldr	r2, [pc, #344]	; (8001934 <MX_TIM1_Init+0x19c>)
 80017dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80017de:	4b54      	ldr	r3, [pc, #336]	; (8001930 <MX_TIM1_Init+0x198>)
 80017e0:	2207      	movs	r2, #7
 80017e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b52      	ldr	r3, [pc, #328]	; (8001930 <MX_TIM1_Init+0x198>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80017ea:	4b51      	ldr	r3, [pc, #324]	; (8001930 <MX_TIM1_Init+0x198>)
 80017ec:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80017f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f2:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <MX_TIM1_Init+0x198>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017f8:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <MX_TIM1_Init+0x198>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017fe:	4b4c      	ldr	r3, [pc, #304]	; (8001930 <MX_TIM1_Init+0x198>)
 8001800:	2280      	movs	r2, #128	; 0x80
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001804:	484a      	ldr	r0, [pc, #296]	; (8001930 <MX_TIM1_Init+0x198>)
 8001806:	f003 fa07 	bl	8004c18 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001810:	f7ff fe02 	bl	8001418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001818:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800181a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800181e:	4619      	mov	r1, r3
 8001820:	4843      	ldr	r0, [pc, #268]	; (8001930 <MX_TIM1_Init+0x198>)
 8001822:	f003 ff6d 	bl	8005700 <HAL_TIM_ConfigClockSource>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800182c:	f7ff fdf4 	bl	8001418 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001830:	483f      	ldr	r0, [pc, #252]	; (8001930 <MX_TIM1_Init+0x198>)
 8001832:	f003 fac1 	bl	8004db8 <HAL_TIM_PWM_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800183c:	f7ff fdec 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800184c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001850:	4619      	mov	r1, r3
 8001852:	4837      	ldr	r0, [pc, #220]	; (8001930 <MX_TIM1_Init+0x198>)
 8001854:	f004 ff68 	bl	8006728 <HAL_TIMEx_MasterConfigSynchronization>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800185e:	f7ff fddb 	bl	8001418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001862:	2360      	movs	r3, #96	; 0x60
 8001864:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 800;
 8001866:	f44f 7348 	mov.w	r3, #800	; 0x320
 800186a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186c:	2300      	movs	r3, #0
 800186e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001870:	2300      	movs	r3, #0
 8001872:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001874:	2304      	movs	r3, #4
 8001876:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001880:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	4829      	ldr	r0, [pc, #164]	; (8001930 <MX_TIM1_Init+0x198>)
 800188a:	f003 fe25 	bl	80054d8 <HAL_TIM_PWM_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001894:	f7ff fdc0 	bl	8001418 <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 8001898:	23c8      	movs	r3, #200	; 0xc8
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800189c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018a0:	2204      	movs	r2, #4
 80018a2:	4619      	mov	r1, r3
 80018a4:	4822      	ldr	r0, [pc, #136]	; (8001930 <MX_TIM1_Init+0x198>)
 80018a6:	f003 fe17 	bl	80054d8 <HAL_TIM_PWM_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 80018b0:	f7ff fdb2 	bl	8001418 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018c0:	2208      	movs	r2, #8
 80018c2:	4619      	mov	r1, r3
 80018c4:	481a      	ldr	r0, [pc, #104]	; (8001930 <MX_TIM1_Init+0x198>)
 80018c6:	f003 fe07 	bl	80054d8 <HAL_TIM_PWM_ConfigChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80018d0:	f7ff fda2 	bl	8001418 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 15;
 80018e0:	230f      	movs	r3, #15
 80018e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001904:	2300      	movs	r3, #0
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4619      	mov	r1, r3
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <MX_TIM1_Init+0x198>)
 8001912:	f004 ff9f 	bl	8006854 <HAL_TIMEx_ConfigBreakDeadTime>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 800191c:	f7ff fd7c 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <MX_TIM1_Init+0x198>)
 8001922:	f000 f8d7 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 8001926:	bf00      	nop
 8001928:	3770      	adds	r7, #112	; 0x70
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200003c4 	.word	0x200003c4
 8001934:	40012c00 	.word	0x40012c00

08001938 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <MX_TIM3_Init+0x90>)
 8001958:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <MX_TIM3_Init+0x94>)
 800195a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <MX_TIM3_Init+0x90>)
 800195e:	2200      	movs	r2, #0
 8001960:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <MX_TIM3_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <MX_TIM3_Init+0x90>)
 800196a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800196e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <MX_TIM3_Init+0x90>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_TIM3_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4619      	mov	r1, r3
 8001992:	480d      	ldr	r0, [pc, #52]	; (80019c8 <MX_TIM3_Init+0x90>)
 8001994:	f004 fcf9 	bl	800638a <HAL_TIMEx_HallSensor_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800199e:	f7ff fd3b 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80019a2:	2350      	movs	r3, #80	; 0x50
 80019a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4806      	ldr	r0, [pc, #24]	; (80019c8 <MX_TIM3_Init+0x90>)
 80019b0:	f004 feba 	bl	8006728 <HAL_TIMEx_MasterConfigSynchronization>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80019ba:	f7ff fd2d 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000410 	.word	0x20000410
 80019cc:	40000400 	.word	0x40000400

080019d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <HAL_TIM_Base_MspInit+0x38>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10b      	bne.n	80019fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_TIM_Base_MspInit+0x3c>)
 80019e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_TIM_Base_MspInit+0x3c>)
 80019e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019ec:	6613      	str	r3, [r2, #96]	; 0x60
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_TIM_Base_MspInit+0x3c>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40012c00 	.word	0x40012c00
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d145      	bne.n	8001abe <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001a7a:	2350      	movs	r3, #80	; 0x50
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a98:	f001 fe98 	bl	80037cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001aba:	f001 fe87 	bl	80037cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3728      	adds	r7, #40	; 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40000400 	.word	0x40000400
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	48000800 	.word	0x48000800

08001ad4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a29      	ldr	r2, [pc, #164]	; (8001b98 <HAL_TIM_MspPostInit+0xc4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d14b      	bne.n	8001b8e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HAL_TIM_MspPostInit+0xc8>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <HAL_TIM_MspPostInit+0xc8>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b02:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <HAL_TIM_MspPostInit+0xc8>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <HAL_TIM_MspPostInit+0xc8>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <HAL_TIM_MspPostInit+0xc8>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_TIM_MspPostInit+0xc8>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001b26:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b38:	2306      	movs	r3, #6
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	4817      	ldr	r0, [pc, #92]	; (8001ba0 <HAL_TIM_MspPostInit+0xcc>)
 8001b44:	f001 fe42 	bl	80037cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <HAL_TIM_MspPostInit+0xcc>)
 8001b66:	f001 fe31 	bl	80037cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b6a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b7c:	2306      	movs	r3, #6
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8a:	f001 fe1f 	bl	80037cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40012c00 	.word	0x40012c00
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	48000400 	.word	0x48000400

08001ba4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001baa:	4a23      	ldr	r2, [pc, #140]	; (8001c38 <MX_USART2_UART_Init+0x94>)
 8001bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bec:	4811      	ldr	r0, [pc, #68]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001bee:	f004 ff4e 	bl	8006a8e <HAL_UART_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001bf8:	f7ff fc0e 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	480d      	ldr	r0, [pc, #52]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001c00:	f006 fef1 	bl	80089e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c0a:	f7ff fc05 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4808      	ldr	r0, [pc, #32]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001c12:	f006 ff26 	bl	8008a62 <HAL_UARTEx_SetRxFifoThreshold>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c1c:	f7ff fbfc 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c20:	4804      	ldr	r0, [pc, #16]	; (8001c34 <MX_USART2_UART_Init+0x90>)
 8001c22:	f006 fea7 	bl	8008974 <HAL_UARTEx_DisableFifoMode>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c2c:	f7ff fbf4 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2000045c 	.word	0x2000045c
 8001c38:	40004400 	.word	0x40004400

08001c3c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001c42:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <MX_USART3_UART_Init+0x94>)
 8001c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c46:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c60:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001c62:	220c      	movs	r2, #12
 8001c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c84:	4811      	ldr	r0, [pc, #68]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001c86:	f004 ff02 	bl	8006a8e <HAL_UART_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c90:	f7ff fbc2 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c94:	2100      	movs	r1, #0
 8001c96:	480d      	ldr	r0, [pc, #52]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001c98:	f006 fea5 	bl	80089e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ca2:	f7ff fbb9 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4808      	ldr	r0, [pc, #32]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001caa:	f006 feda 	bl	8008a62 <HAL_UARTEx_SetRxFifoThreshold>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001cb4:	f7ff fbb0 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MX_USART3_UART_Init+0x90>)
 8001cba:	f006 fe5b 	bl	8008974 <HAL_UARTEx_DisableFifoMode>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001cc4:	f7ff fba8 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200004ec 	.word	0x200004ec
 8001cd0:	40004800 	.word	0x40004800

08001cd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b0a0      	sub	sp, #128	; 0x80
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cec:	f107 0318 	add.w	r3, r7, #24
 8001cf0:	2254      	movs	r2, #84	; 0x54
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f007 f90a 	bl	8008f0e <memset>
  if(uartHandle->Instance==USART2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a45      	ldr	r2, [pc, #276]	; (8001e14 <HAL_UART_MspInit+0x140>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d13f      	bne.n	8001d84 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d0c:	f107 0318 	add.w	r3, r7, #24
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 fd33 	bl	800477c <HAL_RCCEx_PeriphCLKConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d1c:	f7ff fb7c 	bl	8001418 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d20:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <HAL_UART_MspInit+0x144>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	4a3c      	ldr	r2, [pc, #240]	; (8001e18 <HAL_UART_MspInit+0x144>)
 8001d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <HAL_UART_MspInit+0x144>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <HAL_UART_MspInit+0x144>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	4a36      	ldr	r2, [pc, #216]	; (8001e18 <HAL_UART_MspInit+0x144>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d44:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <HAL_UART_MspInit+0x144>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d50:	230c      	movs	r3, #12
 8001d52:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d60:	2307      	movs	r3, #7
 8001d62:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6e:	f001 fd2d 	bl	80037cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2026      	movs	r0, #38	; 0x26
 8001d78:	f001 fc40 	bl	80035fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d7c:	2026      	movs	r0, #38	; 0x26
 8001d7e:	f001 fc57 	bl	8003630 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d82:	e043      	b.n	8001e0c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <HAL_UART_MspInit+0x148>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d13e      	bne.n	8001e0c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d96:	f107 0318 	add.w	r3, r7, #24
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fcee 	bl	800477c <HAL_RCCEx_PeriphCLKConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001da6:	f7ff fb37 	bl	8001418 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001daa:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <HAL_UART_MspInit+0x144>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <HAL_UART_MspInit+0x144>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db4:	6593      	str	r3, [r2, #88]	; 0x58
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <HAL_UART_MspInit+0x144>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <HAL_UART_MspInit+0x144>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <HAL_UART_MspInit+0x144>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_UART_MspInit+0x144>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dde:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dec:	2307      	movs	r3, #7
 8001dee:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001df4:	4619      	mov	r1, r3
 8001df6:	480a      	ldr	r0, [pc, #40]	; (8001e20 <HAL_UART_MspInit+0x14c>)
 8001df8:	f001 fce8 	bl	80037cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2027      	movs	r0, #39	; 0x27
 8001e02:	f001 fbfb 	bl	80035fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e06:	2027      	movs	r0, #39	; 0x27
 8001e08:	f001 fc12 	bl	8003630 <HAL_NVIC_EnableIRQ>
}
 8001e0c:	bf00      	nop
 8001e0e:	3780      	adds	r7, #128	; 0x80
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40004400 	.word	0x40004400
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40004800 	.word	0x40004800
 8001e20:	48000800 	.word	0x48000800

08001e24 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS*sizeof(char*));
 8001e28:	2224      	movs	r2, #36	; 0x24
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4816      	ldr	r0, [pc, #88]	; (8001e88 <Shell_Init+0x64>)
 8001e2e:	f007 f86e 	bl	8008f0e <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE*sizeof(char));
 8001e32:	2240      	movs	r2, #64	; 0x40
 8001e34:	2100      	movs	r1, #0
 8001e36:	4815      	ldr	r0, [pc, #84]	; (8001e8c <Shell_Init+0x68>)
 8001e38:	f007 f869 	bl	8008f0e <memset>
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <Shell_Init+0x6c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE*sizeof(char));
 8001e42:	2240      	movs	r2, #64	; 0x40
 8001e44:	2100      	movs	r1, #0
 8001e46:	4813      	ldr	r0, [pc, #76]	; (8001e94 <Shell_Init+0x70>)
 8001e48:	f007 f861 	bl	8008f0e <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4910      	ldr	r1, [pc, #64]	; (8001e90 <Shell_Init+0x6c>)
 8001e50:	4811      	ldr	r0, [pc, #68]	; (8001e98 <Shell_Init+0x74>)
 8001e52:	f004 ff03 	bl	8006c5c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001e56:	4811      	ldr	r0, [pc, #68]	; (8001e9c <Shell_Init+0x78>)
 8001e58:	f7fe f9ec 	bl	8000234 <strlen>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	490d      	ldr	r1, [pc, #52]	; (8001e9c <Shell_Init+0x78>)
 8001e66:	480c      	ldr	r0, [pc, #48]	; (8001e98 <Shell_Init+0x74>)
 8001e68:	f004 fe61 	bl	8006b2e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001e6c:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <Shell_Init+0x7c>)
 8001e6e:	f7fe f9e1 	bl	8000234 <strlen>
 8001e72:	4603      	mov	r3, r0
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	4909      	ldr	r1, [pc, #36]	; (8001ea0 <Shell_Init+0x7c>)
 8001e7c:	4806      	ldr	r0, [pc, #24]	; (8001e98 <Shell_Init+0x74>)
 8001e7e:	f004 fe56 	bl	8006b2e <HAL_UART_Transmit>
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000608 	.word	0x20000608
 8001e8c:	200005c4 	.word	0x200005c4
 8001e90:	20000580 	.word	0x20000580
 8001e94:	20000584 	.word	0x20000584
 8001e98:	2000045c 	.word	0x2000045c
 8001e9c:	20000024 	.word	0x20000024
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <Shell_Loop>:

void Shell_Loop(void){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 8001eaa:	4b9b      	ldr	r3, [pc, #620]	; (8002118 <Shell_Loop+0x274>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d05b      	beq.n	8001f6a <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8001eb2:	4b9a      	ldr	r3, [pc, #616]	; (800211c <Shell_Loop+0x278>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d034      	beq.n	8001f24 <Shell_Loop+0x80>
 8001eba:	2b0d      	cmp	r3, #13
 8001ebc:	d142      	bne.n	8001f44 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	4996      	ldr	r1, [pc, #600]	; (8002120 <Shell_Loop+0x27c>)
 8001ec6:	4897      	ldr	r0, [pc, #604]	; (8002124 <Shell_Loop+0x280>)
 8001ec8:	f004 fe31 	bl	8006b2e <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001ecc:	4b96      	ldr	r3, [pc, #600]	; (8002128 <Shell_Loop+0x284>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a96      	ldr	r2, [pc, #600]	; (800212c <Shell_Loop+0x288>)
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8001ed6:	4b96      	ldr	r3, [pc, #600]	; (8002130 <Shell_Loop+0x28c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001edc:	4995      	ldr	r1, [pc, #596]	; (8002134 <Shell_Loop+0x290>)
 8001ede:	4893      	ldr	r0, [pc, #588]	; (800212c <Shell_Loop+0x288>)
 8001ee0:	f007 f81e 	bl	8008f20 <strtok>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4a94      	ldr	r2, [pc, #592]	; (8002138 <Shell_Loop+0x294>)
 8001ee8:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001eea:	e010      	b.n	8001f0e <Shell_Loop+0x6a>
				argv[argc++] = token;
 8001eec:	4b90      	ldr	r3, [pc, #576]	; (8002130 <Shell_Loop+0x28c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	498f      	ldr	r1, [pc, #572]	; (8002130 <Shell_Loop+0x28c>)
 8001ef4:	600a      	str	r2, [r1, #0]
 8001ef6:	4a90      	ldr	r2, [pc, #576]	; (8002138 <Shell_Loop+0x294>)
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	4990      	ldr	r1, [pc, #576]	; (800213c <Shell_Loop+0x298>)
 8001efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001f00:	498c      	ldr	r1, [pc, #560]	; (8002134 <Shell_Loop+0x290>)
 8001f02:	2000      	movs	r0, #0
 8001f04:	f007 f80c 	bl	8008f20 <strtok>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4a8b      	ldr	r2, [pc, #556]	; (8002138 <Shell_Loop+0x294>)
 8001f0c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001f0e:	4b8a      	ldr	r3, [pc, #552]	; (8002138 <Shell_Loop+0x294>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1ea      	bne.n	8001eec <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8001f16:	4b84      	ldr	r3, [pc, #528]	; (8002128 <Shell_Loop+0x284>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001f1c:	4b88      	ldr	r3, [pc, #544]	; (8002140 <Shell_Loop+0x29c>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
			break;
 8001f22:	e01f      	b.n	8001f64 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8001f24:	4b80      	ldr	r3, [pc, #512]	; (8002128 <Shell_Loop+0x284>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	1e5a      	subs	r2, r3, #1
 8001f2a:	497f      	ldr	r1, [pc, #508]	; (8002128 <Shell_Loop+0x284>)
 8001f2c:	600a      	str	r2, [r1, #0]
 8001f2e:	4a7f      	ldr	r2, [pc, #508]	; (800212c <Shell_Loop+0x288>)
 8001f30:	2100      	movs	r1, #0
 8001f32:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295
 8001f38:	2204      	movs	r2, #4
 8001f3a:	4982      	ldr	r1, [pc, #520]	; (8002144 <Shell_Loop+0x2a0>)
 8001f3c:	4879      	ldr	r0, [pc, #484]	; (8002124 <Shell_Loop+0x280>)
 8001f3e:	f004 fdf6 	bl	8006b2e <HAL_UART_Transmit>
			break;
 8001f42:	e00f      	b.n	8001f64 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001f44:	4b78      	ldr	r3, [pc, #480]	; (8002128 <Shell_Loop+0x284>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	4977      	ldr	r1, [pc, #476]	; (8002128 <Shell_Loop+0x284>)
 8001f4c:	600a      	str	r2, [r1, #0]
 8001f4e:	4a73      	ldr	r2, [pc, #460]	; (800211c <Shell_Loop+0x278>)
 8001f50:	7811      	ldrb	r1, [r2, #0]
 8001f52:	4a76      	ldr	r2, [pc, #472]	; (800212c <Shell_Loop+0x288>)
 8001f54:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	496f      	ldr	r1, [pc, #444]	; (800211c <Shell_Loop+0x278>)
 8001f5e:	4871      	ldr	r0, [pc, #452]	; (8002124 <Shell_Loop+0x280>)
 8001f60:	f004 fde5 	bl	8006b2e <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8001f64:	4b6c      	ldr	r3, [pc, #432]	; (8002118 <Shell_Loop+0x274>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady)
 8001f6a:	4b75      	ldr	r3, [pc, #468]	; (8002140 <Shell_Loop+0x29c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 80cd 	beq.w	800210e <Shell_Loop+0x26a>
	{
		if(strcmp(argv[0],"WhereisBrian?")==0)
 8001f74:	4b71      	ldr	r3, [pc, #452]	; (800213c <Shell_Loop+0x298>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4973      	ldr	r1, [pc, #460]	; (8002148 <Shell_Loop+0x2a4>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe f950 	bl	8000220 <strcmp>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d107      	bne.n	8001f96 <Shell_Loop+0xf2>
		{
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	221a      	movs	r2, #26
 8001f8c:	496f      	ldr	r1, [pc, #444]	; (800214c <Shell_Loop+0x2a8>)
 8001f8e:	4865      	ldr	r0, [pc, #404]	; (8002124 <Shell_Loop+0x280>)
 8001f90:	f004 fdcd 	bl	8006b2e <HAL_UART_Transmit>
 8001f94:	e0b1      	b.n	80020fa <Shell_Loop+0x256>
		}
		else if(strcmp(argv[0],"help")==0)
 8001f96:	4b69      	ldr	r3, [pc, #420]	; (800213c <Shell_Loop+0x298>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	496d      	ldr	r1, [pc, #436]	; (8002150 <Shell_Loop+0x2ac>)
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe f93f 	bl	8000220 <strcmp>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10b      	bne.n	8001fc0 <Shell_Loop+0x11c>
		{
			HAL_UART_Transmit(&huart2, help_prompt, strlen((char *)help_prompt), HAL_MAX_DELAY);
 8001fa8:	486a      	ldr	r0, [pc, #424]	; (8002154 <Shell_Loop+0x2b0>)
 8001faa:	f7fe f943 	bl	8000234 <strlen>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	4967      	ldr	r1, [pc, #412]	; (8002154 <Shell_Loop+0x2b0>)
 8001fb8:	485a      	ldr	r0, [pc, #360]	; (8002124 <Shell_Loop+0x280>)
 8001fba:	f004 fdb8 	bl	8006b2e <HAL_UART_Transmit>
 8001fbe:	e09c      	b.n	80020fa <Shell_Loop+0x256>
		}
		else if(strcmp(argv[0],"start")==0)
 8001fc0:	4b5e      	ldr	r3, [pc, #376]	; (800213c <Shell_Loop+0x298>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4964      	ldr	r1, [pc, #400]	; (8002158 <Shell_Loop+0x2b4>)
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe f92a 	bl	8000220 <strcmp>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d125      	bne.n	800201e <Shell_Loop+0x17a>
		{
			int result = start_PWM();
 8001fd2:	f7ff f921 	bl	8001218 <start_PWM>
 8001fd6:	60f8      	str	r0, [r7, #12]
			if(result == SUCCESS)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10d      	bne.n	8001ffa <Shell_Loop+0x156>
			{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\npower ON \r\nSpeed set to 0");
 8001fde:	4a5f      	ldr	r2, [pc, #380]	; (800215c <Shell_Loop+0x2b8>)
 8001fe0:	2140      	movs	r1, #64	; 0x40
 8001fe2:	485f      	ldr	r0, [pc, #380]	; (8002160 <Shell_Loop+0x2bc>)
 8001fe4:	f006 ff1c 	bl	8008e20 <sniprintf>
 8001fe8:	60b8      	str	r0, [r7, #8]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	495b      	ldr	r1, [pc, #364]	; (8002160 <Shell_Loop+0x2bc>)
 8001ff4:	484b      	ldr	r0, [pc, #300]	; (8002124 <Shell_Loop+0x280>)
 8001ff6:	f004 fd9a 	bl	8006b2e <HAL_UART_Transmit>
			}
			if(result == ERROR)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d17c      	bne.n	80020fa <Shell_Loop+0x256>
			{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\nFailed to power ON");
 8002000:	4a58      	ldr	r2, [pc, #352]	; (8002164 <Shell_Loop+0x2c0>)
 8002002:	2140      	movs	r1, #64	; 0x40
 8002004:	4856      	ldr	r0, [pc, #344]	; (8002160 <Shell_Loop+0x2bc>)
 8002006:	f006 ff0b 	bl	8008e20 <sniprintf>
 800200a:	6078      	str	r0, [r7, #4]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	b29a      	uxth	r2, r3
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	4952      	ldr	r1, [pc, #328]	; (8002160 <Shell_Loop+0x2bc>)
 8002016:	4843      	ldr	r0, [pc, #268]	; (8002124 <Shell_Loop+0x280>)
 8002018:	f004 fd89 	bl	8006b2e <HAL_UART_Transmit>
 800201c:	e06d      	b.n	80020fa <Shell_Loop+0x256>
			}
		}
		else if(strcmp(argv[0],"stop")==0)
 800201e:	4b47      	ldr	r3, [pc, #284]	; (800213c <Shell_Loop+0x298>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4951      	ldr	r1, [pc, #324]	; (8002168 <Shell_Loop+0x2c4>)
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe f8fb 	bl	8000220 <strcmp>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d125      	bne.n	800207c <Shell_Loop+0x1d8>
		{
			int result = stop_PWM();
 8002030:	f7ff f938 	bl	80012a4 <stop_PWM>
 8002034:	61b8      	str	r0, [r7, #24]
			if(result == SUCCESS)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10d      	bne.n	8002058 <Shell_Loop+0x1b4>
			{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\npower OFF");
 800203c:	4a4b      	ldr	r2, [pc, #300]	; (800216c <Shell_Loop+0x2c8>)
 800203e:	2140      	movs	r1, #64	; 0x40
 8002040:	4847      	ldr	r0, [pc, #284]	; (8002160 <Shell_Loop+0x2bc>)
 8002042:	f006 feed 	bl	8008e20 <sniprintf>
 8002046:	6178      	str	r0, [r7, #20]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	b29a      	uxth	r2, r3
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
 8002050:	4943      	ldr	r1, [pc, #268]	; (8002160 <Shell_Loop+0x2bc>)
 8002052:	4834      	ldr	r0, [pc, #208]	; (8002124 <Shell_Loop+0x280>)
 8002054:	f004 fd6b 	bl	8006b2e <HAL_UART_Transmit>
			}
			if(result == ERROR)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d14d      	bne.n	80020fa <Shell_Loop+0x256>
			{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\nFailed to power OFF");
 800205e:	4a44      	ldr	r2, [pc, #272]	; (8002170 <Shell_Loop+0x2cc>)
 8002060:	2140      	movs	r1, #64	; 0x40
 8002062:	483f      	ldr	r0, [pc, #252]	; (8002160 <Shell_Loop+0x2bc>)
 8002064:	f006 fedc 	bl	8008e20 <sniprintf>
 8002068:	6138      	str	r0, [r7, #16]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	b29a      	uxth	r2, r3
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	493b      	ldr	r1, [pc, #236]	; (8002160 <Shell_Loop+0x2bc>)
 8002074:	482b      	ldr	r0, [pc, #172]	; (8002124 <Shell_Loop+0x280>)
 8002076:	f004 fd5a 	bl	8006b2e <HAL_UART_Transmit>
 800207a:	e03e      	b.n	80020fa <Shell_Loop+0x256>
			}
		}
		else if(strcmp(argv[0],"speed")==0)
 800207c:	4b2f      	ldr	r3, [pc, #188]	; (800213c <Shell_Loop+0x298>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	493c      	ldr	r1, [pc, #240]	; (8002174 <Shell_Loop+0x2d0>)
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe f8cc 	bl	8000220 <strcmp>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d12e      	bne.n	80020ec <Shell_Loop+0x248>
		{
			int val = atoi(argv[1]);
 800208e:	4b2b      	ldr	r3, [pc, #172]	; (800213c <Shell_Loop+0x298>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4618      	mov	r0, r3
 8002094:	f006 fd72 	bl	8008b7c <atoi>
 8002098:	6278      	str	r0, [r7, #36]	; 0x24
			if((-100 <= val) && (val<= 100))
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80020a0:	db15      	blt.n	80020ce <Shell_Loop+0x22a>
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	2b64      	cmp	r3, #100	; 0x64
 80020a6:	dc12      	bgt.n	80020ce <Shell_Loop+0x22a>
			{
				motor_set_speed = val;
 80020a8:	4a33      	ldr	r2, [pc, #204]	; (8002178 <Shell_Loop+0x2d4>)
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	6013      	str	r3, [r2, #0]
				int uartTxStringLength = snprintf((char *)uartTxBuffer,UART_TX_BUFFER_SIZE, "\r\nPWM set to %03d", val);
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	4a32      	ldr	r2, [pc, #200]	; (800217c <Shell_Loop+0x2d8>)
 80020b2:	2140      	movs	r1, #64	; 0x40
 80020b4:	482a      	ldr	r0, [pc, #168]	; (8002160 <Shell_Loop+0x2bc>)
 80020b6:	f006 feb3 	bl	8008e20 <sniprintf>
 80020ba:	6238      	str	r0, [r7, #32]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
 80020c4:	4926      	ldr	r1, [pc, #152]	; (8002160 <Shell_Loop+0x2bc>)
 80020c6:	4817      	ldr	r0, [pc, #92]	; (8002124 <Shell_Loop+0x280>)
 80020c8:	f004 fd31 	bl	8006b2e <HAL_UART_Transmit>
			{
 80020cc:	e015      	b.n	80020fa <Shell_Loop+0x256>
			}
			else
			{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\nFailed to set PWM");
 80020ce:	4a2c      	ldr	r2, [pc, #176]	; (8002180 <Shell_Loop+0x2dc>)
 80020d0:	2140      	movs	r1, #64	; 0x40
 80020d2:	4823      	ldr	r0, [pc, #140]	; (8002160 <Shell_Loop+0x2bc>)
 80020d4:	f006 fea4 	bl	8008e20 <sniprintf>
 80020d8:	61f8      	str	r0, [r7, #28]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	b29a      	uxth	r2, r3
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	491f      	ldr	r1, [pc, #124]	; (8002160 <Shell_Loop+0x2bc>)
 80020e4:	480f      	ldr	r0, [pc, #60]	; (8002124 <Shell_Loop+0x280>)
 80020e6:	f004 fd22 	bl	8006b2e <HAL_UART_Transmit>
 80020ea:	e006      	b.n	80020fa <Shell_Loop+0x256>
			}
		}
		else
		{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
 80020f0:	2214      	movs	r2, #20
 80020f2:	4924      	ldr	r1, [pc, #144]	; (8002184 <Shell_Loop+0x2e0>)
 80020f4:	480b      	ldr	r0, [pc, #44]	; (8002124 <Shell_Loop+0x280>)
 80020f6:	f004 fd1a 	bl	8006b2e <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	2220      	movs	r2, #32
 8002100:	4921      	ldr	r1, [pc, #132]	; (8002188 <Shell_Loop+0x2e4>)
 8002102:	4808      	ldr	r0, [pc, #32]	; (8002124 <Shell_Loop+0x280>)
 8002104:	f004 fd13 	bl	8006b2e <HAL_UART_Transmit>
		newCmdReady = 0;
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <Shell_Loop+0x29c>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
	}
}
 800210e:	bf00      	nop
 8002110:	3728      	adds	r7, #40	; 0x28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000057c 	.word	0x2000057c
 800211c:	20000580 	.word	0x20000580
 8002120:	200001d8 	.word	0x200001d8
 8002124:	2000045c 	.word	0x2000045c
 8002128:	20000604 	.word	0x20000604
 800212c:	200005c4 	.word	0x200005c4
 8002130:	2000062c 	.word	0x2000062c
 8002134:	0800a094 	.word	0x0800a094
 8002138:	20000630 	.word	0x20000630
 800213c:	20000608 	.word	0x20000608
 8002140:	20000634 	.word	0x20000634
 8002144:	200001dc 	.word	0x200001dc
 8002148:	0800a098 	.word	0x0800a098
 800214c:	200001f4 	.word	0x200001f4
 8002150:	0800a0a8 	.word	0x0800a0a8
 8002154:	200000ac 	.word	0x200000ac
 8002158:	0800a0b0 	.word	0x0800a0b0
 800215c:	0800a0b8 	.word	0x0800a0b8
 8002160:	20000584 	.word	0x20000584
 8002164:	0800a0d4 	.word	0x0800a0d4
 8002168:	0800a0ec 	.word	0x0800a0ec
 800216c:	0800a0f4 	.word	0x0800a0f4
 8002170:	0800a100 	.word	0x0800a100
 8002174:	0800a118 	.word	0x0800a118
 8002178:	2000036c 	.word	0x2000036c
 800217c:	0800a120 	.word	0x0800a120
 8002180:	0800a134 	.word	0x0800a134
 8002184:	200001e0 	.word	0x200001e0
 8002188:	20000004 	.word	0x20000004

0800218c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_UART_RxCpltCallback+0x20>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800219a:	2201      	movs	r2, #1
 800219c:	4904      	ldr	r1, [pc, #16]	; (80021b0 <HAL_UART_RxCpltCallback+0x24>)
 800219e:	4805      	ldr	r0, [pc, #20]	; (80021b4 <HAL_UART_RxCpltCallback+0x28>)
 80021a0:	f004 fd5c 	bl	8006c5c <HAL_UART_Receive_IT>
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	2000057c 	.word	0x2000057c
 80021b0:	20000580 	.word	0x20000580
 80021b4:	2000045c 	.word	0x2000045c

080021b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021b8:	480d      	ldr	r0, [pc, #52]	; (80021f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021bc:	480d      	ldr	r0, [pc, #52]	; (80021f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80021be:	490e      	ldr	r1, [pc, #56]	; (80021f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021c0:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <LoopForever+0xe>)
  movs r3, #0
 80021c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80021c4:	e002      	b.n	80021cc <LoopCopyDataInit>

080021c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ca:	3304      	adds	r3, #4

080021cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d0:	d3f9      	bcc.n	80021c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d2:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021d4:	4c0b      	ldr	r4, [pc, #44]	; (8002204 <LoopForever+0x16>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d8:	e001      	b.n	80021de <LoopFillZerobss>

080021da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021dc:	3204      	adds	r2, #4

080021de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e0:	d3fb      	bcc.n	80021da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021e2:	f7ff fac7 	bl	8001774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021e6:	f006 ff43 	bl	8009070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ea:	f7fe ff75 	bl	80010d8 <main>

080021ee <LoopForever>:

LoopForever:
    b LoopForever
 80021ee:	e7fe      	b.n	80021ee <LoopForever>
  ldr   r0, =_estack
 80021f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f8:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 80021fc:	0800a37c 	.word	0x0800a37c
  ldr r2, =_sbss
 8002200:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 8002204:	20000788 	.word	0x20000788

08002208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002208:	e7fe      	b.n	8002208 <ADC1_2_IRQHandler>

0800220a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f001 f9e6 	bl	80035e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800221a:	200f      	movs	r0, #15
 800221c:	f7ff f926 	bl	800146c <HAL_InitTick>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	71fb      	strb	r3, [r7, #7]
 800222a:	e001      	b.n	8002230 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800222c:	f7ff f8fa 	bl	8001424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002230:	79fb      	ldrb	r3, [r7, #7]

}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_IncTick+0x1c>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_IncTick+0x20>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4413      	add	r3, r2
 800224a:	4a03      	ldr	r2, [pc, #12]	; (8002258 <HAL_IncTick+0x1c>)
 800224c:	6013      	str	r3, [r2, #0]
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	20000638 	.word	0x20000638
 800225c:	20000214 	.word	0x20000214

08002260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return uwTick;
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <HAL_GetTick+0x14>)
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000638 	.word	0x20000638

08002278 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	609a      	str	r2, [r3, #8]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3360      	adds	r3, #96	; 0x60
 80022f2:	461a      	mov	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <LL_ADC_SetOffset+0x44>)
 8002302:	4013      	ands	r3, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	4313      	orrs	r3, r2
 8002310:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002318:	bf00      	nop
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	03fff000 	.word	0x03fff000

08002328 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3360      	adds	r3, #96	; 0x60
 8002336:	461a      	mov	r2, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3360      	adds	r3, #96	; 0x60
 8002364:	461a      	mov	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	431a      	orrs	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800238a:	b480      	push	{r7}
 800238c:	b087      	sub	sp, #28
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3360      	adds	r3, #96	; 0x60
 800239a:	461a      	mov	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023b4:	bf00      	nop
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3360      	adds	r3, #96	; 0x60
 80023d0:	461a      	mov	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80023ea:	bf00      	nop
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	615a      	str	r2, [r3, #20]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3330      	adds	r3, #48	; 0x30
 800242c:	461a      	mov	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	4413      	add	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	211f      	movs	r1, #31
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	401a      	ands	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	0e9b      	lsrs	r3, r3, #26
 8002454:	f003 011f 	and.w	r1, r3, #31
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	431a      	orrs	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002468:	bf00      	nop
 800246a:	371c      	adds	r7, #28
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3314      	adds	r3, #20
 8002484:	461a      	mov	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	0e5b      	lsrs	r3, r3, #25
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	4413      	add	r3, r2
 8002492:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	0d1b      	lsrs	r3, r3, #20
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	2107      	movs	r1, #7
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	401a      	ands	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	0d1b      	lsrs	r3, r3, #20
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	431a      	orrs	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d10a      	bne.n	80024f6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ec:	431a      	orrs	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80024f4:	e00a      	b.n	800250c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	43db      	mvns	r3, r3
 8002504:	401a      	ands	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	407f0000 	.word	0x407f0000

0800251c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800252c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6093      	str	r3, [r2, #8]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002554:	d101      	bne.n	800255a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800257c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025a4:	d101      	bne.n	80025aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <LL_ADC_IsEnabled+0x18>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <LL_ADC_IsEnabled+0x1a>
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d101      	bne.n	80025f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d101      	bne.n	800261c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002638:	2300      	movs	r3, #0
 800263a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e1af      	b.n	80029a6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7fe fbb5 	bl	8000dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff67 	bl	8002540 <LL_ADC_IsDeepPowerDownEnabled>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d004      	beq.n	8002682 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff4d 	bl	800251c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff82 	bl	8002590 <LL_ADC_IsInternalRegulatorEnabled>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d115      	bne.n	80026be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ff66 	bl	8002568 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800269c:	4b9f      	ldr	r3, [pc, #636]	; (800291c <HAL_ADC_Init+0x2f0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	099b      	lsrs	r3, r3, #6
 80026a2:	4a9f      	ldr	r2, [pc, #636]	; (8002920 <HAL_ADC_Init+0x2f4>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	3301      	adds	r3, #1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026b0:	e002      	b.n	80026b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f9      	bne.n	80026b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff64 	bl	8002590 <LL_ADC_IsInternalRegulatorEnabled>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10d      	bne.n	80026ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	f043 0210 	orr.w	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ff75 	bl	80025de <LL_ADC_REG_IsConversionOngoing>
 80026f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 8148 	bne.w	8002994 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 8144 	bne.w	8002994 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002714:	f043 0202 	orr.w	r2, r3, #2
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff49 	bl	80025b8 <LL_ADC_IsEnabled>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d141      	bne.n	80027b0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002734:	d004      	beq.n	8002740 <HAL_ADC_Init+0x114>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a7a      	ldr	r2, [pc, #488]	; (8002924 <HAL_ADC_Init+0x2f8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d10f      	bne.n	8002760 <HAL_ADC_Init+0x134>
 8002740:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002744:	f7ff ff38 	bl	80025b8 <LL_ADC_IsEnabled>
 8002748:	4604      	mov	r4, r0
 800274a:	4876      	ldr	r0, [pc, #472]	; (8002924 <HAL_ADC_Init+0x2f8>)
 800274c:	f7ff ff34 	bl	80025b8 <LL_ADC_IsEnabled>
 8002750:	4603      	mov	r3, r0
 8002752:	4323      	orrs	r3, r4
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e012      	b.n	8002786 <HAL_ADC_Init+0x15a>
 8002760:	4871      	ldr	r0, [pc, #452]	; (8002928 <HAL_ADC_Init+0x2fc>)
 8002762:	f7ff ff29 	bl	80025b8 <LL_ADC_IsEnabled>
 8002766:	4604      	mov	r4, r0
 8002768:	4870      	ldr	r0, [pc, #448]	; (800292c <HAL_ADC_Init+0x300>)
 800276a:	f7ff ff25 	bl	80025b8 <LL_ADC_IsEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	431c      	orrs	r4, r3
 8002772:	486f      	ldr	r0, [pc, #444]	; (8002930 <HAL_ADC_Init+0x304>)
 8002774:	f7ff ff20 	bl	80025b8 <LL_ADC_IsEnabled>
 8002778:	4603      	mov	r3, r0
 800277a:	4323      	orrs	r3, r4
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d012      	beq.n	80027b0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002792:	d004      	beq.n	800279e <HAL_ADC_Init+0x172>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a62      	ldr	r2, [pc, #392]	; (8002924 <HAL_ADC_Init+0x2f8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_Init+0x176>
 800279e:	4a65      	ldr	r2, [pc, #404]	; (8002934 <HAL_ADC_Init+0x308>)
 80027a0:	e000      	b.n	80027a4 <HAL_ADC_Init+0x178>
 80027a2:	4a65      	ldr	r2, [pc, #404]	; (8002938 <HAL_ADC_Init+0x30c>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f7ff fd64 	bl	8002278 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7f5b      	ldrb	r3, [r3, #29]
 80027b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80027c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80027c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d106      	bne.n	80027ec <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	3b01      	subs	r3, #1
 80027e4:	045b      	lsls	r3, r3, #17
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d009      	beq.n	8002808 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	4b4b      	ldr	r3, [pc, #300]	; (800293c <HAL_ADC_Init+0x310>)
 8002810:	4013      	ands	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	69b9      	ldr	r1, [r7, #24]
 8002818:	430b      	orrs	r3, r1
 800281a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fed1 	bl	80025de <LL_ADC_REG_IsConversionOngoing>
 800283c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fede 	bl	8002604 <LL_ADC_INJ_IsConversionOngoing>
 8002848:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d17f      	bne.n	8002950 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d17c      	bne.n	8002950 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800285a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002862:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002872:	f023 0302 	bic.w	r3, r3, #2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	69b9      	ldr	r1, [r7, #24]
 800287c:	430b      	orrs	r3, r1
 800287e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d017      	beq.n	80028b8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002896:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6911      	ldr	r1, [r2, #16]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	430b      	orrs	r3, r1
 80028b2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80028b6:	e013      	b.n	80028e0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028dc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d12a      	bne.n	8002940 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028f4:	f023 0304 	bic.w	r3, r3, #4
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002900:	4311      	orrs	r1, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002906:	4311      	orrs	r1, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800290c:	430a      	orrs	r2, r1
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	611a      	str	r2, [r3, #16]
 800291a:	e019      	b.n	8002950 <HAL_ADC_Init+0x324>
 800291c:	20000000 	.word	0x20000000
 8002920:	053e2d63 	.word	0x053e2d63
 8002924:	50000100 	.word	0x50000100
 8002928:	50000400 	.word	0x50000400
 800292c:	50000500 	.word	0x50000500
 8002930:	50000600 	.word	0x50000600
 8002934:	50000300 	.word	0x50000300
 8002938:	50000700 	.word	0x50000700
 800293c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10c      	bne.n	8002972 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f023 010f 	bic.w	r1, r3, #15
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
 8002970:	e007      	b.n	8002982 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 020f 	bic.w	r2, r2, #15
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	65da      	str	r2, [r3, #92]	; 0x5c
 8002992:	e007      	b.n	80029a4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002998:	f043 0210 	orr.w	r2, r3, #16
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	; 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd90      	pop	{r4, r7, pc}
 80029ae:	bf00      	nop

080029b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b0b6      	sub	sp, #216	; 0xd8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d102      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x24>
 80029ce:	2302      	movs	r3, #2
 80029d0:	f000 bc13 	b.w	80031fa <HAL_ADC_ConfigChannel+0x84a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fdfc 	bl	80025de <LL_ADC_REG_IsConversionOngoing>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f040 83f3 	bne.w	80031d4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f7ff fd0e 	bl	800241c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fdea 	bl	80025de <LL_ADC_REG_IsConversionOngoing>
 8002a0a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fdf6 	bl	8002604 <LL_ADC_INJ_IsConversionOngoing>
 8002a18:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f040 81d9 	bne.w	8002dd8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 81d4 	bne.w	8002dd8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a38:	d10f      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2200      	movs	r2, #0
 8002a44:	4619      	mov	r1, r3
 8002a46:	f7ff fd15 	bl	8002474 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fccf 	bl	80023f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002a58:	e00e      	b.n	8002a78 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6819      	ldr	r1, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f7ff fd04 	bl	8002474 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fcbf 	bl	80023f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	08db      	lsrs	r3, r3, #3
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d022      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6919      	ldr	r1, [r3, #16]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002aaa:	f7ff fc19 	bl	80022e0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6919      	ldr	r1, [r3, #16]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f7ff fc65 	bl	800238a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6919      	ldr	r1, [r3, #16]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	7f1b      	ldrb	r3, [r3, #28]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d102      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x126>
 8002ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad4:	e000      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x128>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f7ff fc71 	bl	80023c0 <LL_ADC_SetOffsetSaturation>
 8002ade:	e17b      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fc1e 	bl	8002328 <LL_ADC_GetOffsetChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x15c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fc13 	bl	8002328 <LL_ADC_GetOffsetChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	f003 021f 	and.w	r2, r3, #31
 8002b0a:	e01e      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x19a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fc08 	bl	8002328 <LL_ADC_GetOffsetChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	e004      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002b3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x1b2>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0e9b      	lsrs	r3, r3, #26
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	e018      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x1e4>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002b86:	2320      	movs	r3, #32
 8002b88:	e004      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002b8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d106      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fbd7 	bl	8002354 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fbbb 	bl	8002328 <LL_ADC_GetOffsetChannel>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x222>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fbb0 	bl	8002328 <LL_ADC_GetOffsetChannel>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	0e9b      	lsrs	r3, r3, #26
 8002bcc:	f003 021f 	and.w	r2, r3, #31
 8002bd0:	e01e      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x260>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fba5 	bl	8002328 <LL_ADC_GetOffsetChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002bf0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002bf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e004      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002c04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x278>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0e9b      	lsrs	r3, r3, #26
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	e018      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x2aa>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	e004      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c54:	fab3 f383 	clz	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d106      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2200      	movs	r2, #0
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fb74 	bl	8002354 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fb58 	bl	8002328 <LL_ADC_GetOffsetChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10a      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x2e8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2102      	movs	r1, #2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fb4d 	bl	8002328 <LL_ADC_GetOffsetChannel>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	0e9b      	lsrs	r3, r3, #26
 8002c92:	f003 021f 	and.w	r2, r3, #31
 8002c96:	e01e      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x326>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fb42 	bl	8002328 <LL_ADC_GetOffsetChannel>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002cbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e004      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002cca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d105      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x33e>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0e9b      	lsrs	r3, r3, #26
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	e016      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x36c>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002d0e:	2320      	movs	r3, #32
 8002d10:	e004      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d106      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2200      	movs	r2, #0
 8002d26:	2102      	movs	r1, #2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fb13 	bl	8002354 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2103      	movs	r1, #3
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff faf7 	bl	8002328 <LL_ADC_GetOffsetChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x3aa>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2103      	movs	r1, #3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff faec 	bl	8002328 <LL_ADC_GetOffsetChannel>
 8002d50:	4603      	mov	r3, r0
 8002d52:	0e9b      	lsrs	r3, r3, #26
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	e017      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x3da>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2103      	movs	r1, #3
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fae1 	bl	8002328 <LL_ADC_GetOffsetChannel>
 8002d66:	4603      	mov	r3, r0
 8002d68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d74:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	e003      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x3f2>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0e9b      	lsrs	r3, r3, #26
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	e011      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x416>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002db2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	e003      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d106      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fabe 	bl	8002354 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fbeb 	bl	80025b8 <LL_ADC_IsEnabled>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f040 813d 	bne.w	8003064 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6819      	ldr	r1, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f7ff fb68 	bl	80024cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4aa2      	ldr	r2, [pc, #648]	; (800308c <HAL_ADC_ConfigChannel+0x6dc>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	f040 812e 	bne.w	8003064 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10b      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x480>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	0e9b      	lsrs	r3, r3, #26
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	2b09      	cmp	r3, #9
 8002e26:	bf94      	ite	ls
 8002e28:	2301      	movls	r3, #1
 8002e2a:	2300      	movhi	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e019      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x4b4>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e40:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002e48:	2320      	movs	r3, #32
 8002e4a:	e003      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	3301      	adds	r3, #1
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	2b09      	cmp	r3, #9
 8002e5c:	bf94      	ite	ls
 8002e5e:	2301      	movls	r3, #1
 8002e60:	2300      	movhi	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d079      	beq.n	8002f5c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x4d4>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0e9b      	lsrs	r3, r3, #26
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	069b      	lsls	r3, r3, #26
 8002e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e82:	e015      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x500>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e94:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	e003      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	069b      	lsls	r3, r3, #26
 8002eac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d109      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x520>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	0e9b      	lsrs	r3, r3, #26
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	2101      	movs	r1, #1
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	e017      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x550>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ee8:	2320      	movs	r3, #32
 8002eea:	e003      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	2101      	movs	r1, #1
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	ea42 0103 	orr.w	r1, r2, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10a      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x576>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0e9b      	lsrs	r3, r3, #26
 8002f16:	3301      	adds	r3, #1
 8002f18:	f003 021f 	and.w	r2, r3, #31
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	051b      	lsls	r3, r3, #20
 8002f24:	e018      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x5a8>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e003      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f003 021f 	and.w	r2, r3, #31
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	e07e      	b.n	800305a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d107      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x5c8>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0e9b      	lsrs	r3, r3, #26
 8002f6e:	3301      	adds	r3, #1
 8002f70:	069b      	lsls	r3, r3, #26
 8002f72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f76:	e015      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x5f4>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e003      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	069b      	lsls	r3, r3, #26
 8002fa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x614>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	e017      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x644>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	61fb      	str	r3, [r7, #28]
  return result;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e003      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	ea42 0103 	orr.w	r1, r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10d      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x670>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	3301      	adds	r3, #1
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	3b1e      	subs	r3, #30
 8003018:	051b      	lsls	r3, r3, #20
 800301a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800301e:	e01b      	b.n	8003058 <HAL_ADC_ConfigChannel+0x6a8>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	613b      	str	r3, [r7, #16]
  return result;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003038:	2320      	movs	r3, #32
 800303a:	e003      	b.n	8003044 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	3301      	adds	r3, #1
 8003046:	f003 021f 	and.w	r2, r3, #31
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	3b1e      	subs	r3, #30
 8003052:	051b      	lsls	r3, r3, #20
 8003054:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003058:	430b      	orrs	r3, r1
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	6892      	ldr	r2, [r2, #8]
 800305e:	4619      	mov	r1, r3
 8003060:	f7ff fa08 	bl	8002474 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_ADC_ConfigChannel+0x6e0>)
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80be 	beq.w	80031ee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800307a:	d004      	beq.n	8003086 <HAL_ADC_ConfigChannel+0x6d6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a04      	ldr	r2, [pc, #16]	; (8003094 <HAL_ADC_ConfigChannel+0x6e4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d10a      	bne.n	800309c <HAL_ADC_ConfigChannel+0x6ec>
 8003086:	4b04      	ldr	r3, [pc, #16]	; (8003098 <HAL_ADC_ConfigChannel+0x6e8>)
 8003088:	e009      	b.n	800309e <HAL_ADC_ConfigChannel+0x6ee>
 800308a:	bf00      	nop
 800308c:	407f0000 	.word	0x407f0000
 8003090:	80080000 	.word	0x80080000
 8003094:	50000100 	.word	0x50000100
 8003098:	50000300 	.word	0x50000300
 800309c:	4b59      	ldr	r3, [pc, #356]	; (8003204 <HAL_ADC_ConfigChannel+0x854>)
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff f910 	bl	80022c4 <LL_ADC_GetCommonPathInternalCh>
 80030a4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a56      	ldr	r2, [pc, #344]	; (8003208 <HAL_ADC_ConfigChannel+0x858>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d004      	beq.n	80030bc <HAL_ADC_ConfigChannel+0x70c>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a55      	ldr	r2, [pc, #340]	; (800320c <HAL_ADC_ConfigChannel+0x85c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d13a      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d134      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d0:	d005      	beq.n	80030de <HAL_ADC_ConfigChannel+0x72e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a4e      	ldr	r2, [pc, #312]	; (8003210 <HAL_ADC_ConfigChannel+0x860>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	f040 8085 	bne.w	80031e8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e6:	d004      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x742>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a49      	ldr	r2, [pc, #292]	; (8003214 <HAL_ADC_ConfigChannel+0x864>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x746>
 80030f2:	4a49      	ldr	r2, [pc, #292]	; (8003218 <HAL_ADC_ConfigChannel+0x868>)
 80030f4:	e000      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x748>
 80030f6:	4a43      	ldr	r2, [pc, #268]	; (8003204 <HAL_ADC_ConfigChannel+0x854>)
 80030f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f7ff f8cb 	bl	800229e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003108:	4b44      	ldr	r3, [pc, #272]	; (800321c <HAL_ADC_ConfigChannel+0x86c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	099b      	lsrs	r3, r3, #6
 800310e:	4a44      	ldr	r2, [pc, #272]	; (8003220 <HAL_ADC_ConfigChannel+0x870>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003122:	e002      	b.n	800312a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3b01      	subs	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1f9      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003130:	e05a      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a3b      	ldr	r2, [pc, #236]	; (8003224 <HAL_ADC_ConfigChannel+0x874>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d125      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x7d8>
 800313c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d11f      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a31      	ldr	r2, [pc, #196]	; (8003214 <HAL_ADC_ConfigChannel+0x864>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d104      	bne.n	800315c <HAL_ADC_ConfigChannel+0x7ac>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a34      	ldr	r2, [pc, #208]	; (8003228 <HAL_ADC_ConfigChannel+0x878>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d047      	beq.n	80031ec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003164:	d004      	beq.n	8003170 <HAL_ADC_ConfigChannel+0x7c0>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a2a      	ldr	r2, [pc, #168]	; (8003214 <HAL_ADC_ConfigChannel+0x864>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x7c4>
 8003170:	4a29      	ldr	r2, [pc, #164]	; (8003218 <HAL_ADC_ConfigChannel+0x868>)
 8003172:	e000      	b.n	8003176 <HAL_ADC_ConfigChannel+0x7c6>
 8003174:	4a23      	ldr	r2, [pc, #140]	; (8003204 <HAL_ADC_ConfigChannel+0x854>)
 8003176:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800317a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317e:	4619      	mov	r1, r3
 8003180:	4610      	mov	r0, r2
 8003182:	f7ff f88c 	bl	800229e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003186:	e031      	b.n	80031ec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a27      	ldr	r2, [pc, #156]	; (800322c <HAL_ADC_ConfigChannel+0x87c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d12d      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d127      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <HAL_ADC_ConfigChannel+0x864>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031b0:	d004      	beq.n	80031bc <HAL_ADC_ConfigChannel+0x80c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a17      	ldr	r2, [pc, #92]	; (8003214 <HAL_ADC_ConfigChannel+0x864>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d101      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x810>
 80031bc:	4a16      	ldr	r2, [pc, #88]	; (8003218 <HAL_ADC_ConfigChannel+0x868>)
 80031be:	e000      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x812>
 80031c0:	4a10      	ldr	r2, [pc, #64]	; (8003204 <HAL_ADC_ConfigChannel+0x854>)
 80031c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031ca:	4619      	mov	r1, r3
 80031cc:	4610      	mov	r0, r2
 80031ce:	f7ff f866 	bl	800229e <LL_ADC_SetCommonPathInternalCh>
 80031d2:	e00c      	b.n	80031ee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80031e6:	e002      	b.n	80031ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031e8:	bf00      	nop
 80031ea:	e000      	b.n	80031ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	37d8      	adds	r7, #216	; 0xd8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	50000700 	.word	0x50000700
 8003208:	c3210000 	.word	0xc3210000
 800320c:	90c00010 	.word	0x90c00010
 8003210:	50000600 	.word	0x50000600
 8003214:	50000100 	.word	0x50000100
 8003218:	50000300 	.word	0x50000300
 800321c:	20000000 	.word	0x20000000
 8003220:	053e2d63 	.word	0x053e2d63
 8003224:	c7520000 	.word	0xc7520000
 8003228:	50000500 	.word	0x50000500
 800322c:	cb840000 	.word	0xcb840000

08003230 <LL_ADC_IsEnabled>:
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <LL_ADC_IsEnabled+0x18>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <LL_ADC_IsEnabled+0x1a>
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_ADC_REG_IsConversionOngoing>:
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d101      	bne.n	800326e <LL_ADC_REG_IsConversionOngoing+0x18>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b0a1      	sub	sp, #132	; 0x84
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003296:	2302      	movs	r3, #2
 8003298:	e0e7      	b.n	800346a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80032a2:	2300      	movs	r3, #0
 80032a4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80032a6:	2300      	movs	r3, #0
 80032a8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b2:	d102      	bne.n	80032ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032b4:	4b6f      	ldr	r3, [pc, #444]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	e009      	b.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6e      	ldr	r2, [pc, #440]	; (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d102      	bne.n	80032ca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80032c4:	4b6d      	ldr	r3, [pc, #436]	; (800347c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	e001      	b.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0be      	b.n	800346a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff ffb1 	bl	8003256 <LL_ADC_REG_IsConversionOngoing>
 80032f4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ffab 	bl	8003256 <LL_ADC_REG_IsConversionOngoing>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 80a0 	bne.w	8003448 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 809c 	bne.w	8003448 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003318:	d004      	beq.n	8003324 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a55      	ldr	r2, [pc, #340]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003324:	4b56      	ldr	r3, [pc, #344]	; (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003326:	e000      	b.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003328:	4b56      	ldr	r3, [pc, #344]	; (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800332a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d04b      	beq.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003346:	035b      	lsls	r3, r3, #13
 8003348:	430b      	orrs	r3, r1
 800334a:	431a      	orrs	r2, r3
 800334c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003358:	d004      	beq.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a45      	ldr	r2, [pc, #276]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d10f      	bne.n	8003384 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003364:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003368:	f7ff ff62 	bl	8003230 <LL_ADC_IsEnabled>
 800336c:	4604      	mov	r4, r0
 800336e:	4841      	ldr	r0, [pc, #260]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003370:	f7ff ff5e 	bl	8003230 <LL_ADC_IsEnabled>
 8003374:	4603      	mov	r3, r0
 8003376:	4323      	orrs	r3, r4
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e012      	b.n	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003384:	483c      	ldr	r0, [pc, #240]	; (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003386:	f7ff ff53 	bl	8003230 <LL_ADC_IsEnabled>
 800338a:	4604      	mov	r4, r0
 800338c:	483b      	ldr	r0, [pc, #236]	; (800347c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800338e:	f7ff ff4f 	bl	8003230 <LL_ADC_IsEnabled>
 8003392:	4603      	mov	r3, r0
 8003394:	431c      	orrs	r4, r3
 8003396:	483c      	ldr	r0, [pc, #240]	; (8003488 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003398:	f7ff ff4a 	bl	8003230 <LL_ADC_IsEnabled>
 800339c:	4603      	mov	r3, r0
 800339e:	4323      	orrs	r3, r4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d056      	beq.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033b6:	f023 030f 	bic.w	r3, r3, #15
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	6811      	ldr	r1, [r2, #0]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	6892      	ldr	r2, [r2, #8]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	431a      	orrs	r2, r3
 80033c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ca:	e047      	b.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e0:	d004      	beq.n	80033ec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a23      	ldr	r2, [pc, #140]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10f      	bne.n	800340c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80033ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80033f0:	f7ff ff1e 	bl	8003230 <LL_ADC_IsEnabled>
 80033f4:	4604      	mov	r4, r0
 80033f6:	481f      	ldr	r0, [pc, #124]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033f8:	f7ff ff1a 	bl	8003230 <LL_ADC_IsEnabled>
 80033fc:	4603      	mov	r3, r0
 80033fe:	4323      	orrs	r3, r4
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e012      	b.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800340c:	481a      	ldr	r0, [pc, #104]	; (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800340e:	f7ff ff0f 	bl	8003230 <LL_ADC_IsEnabled>
 8003412:	4604      	mov	r4, r0
 8003414:	4819      	ldr	r0, [pc, #100]	; (800347c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003416:	f7ff ff0b 	bl	8003230 <LL_ADC_IsEnabled>
 800341a:	4603      	mov	r3, r0
 800341c:	431c      	orrs	r4, r3
 800341e:	481a      	ldr	r0, [pc, #104]	; (8003488 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003420:	f7ff ff06 	bl	8003230 <LL_ADC_IsEnabled>
 8003424:	4603      	mov	r3, r0
 8003426:	4323      	orrs	r3, r4
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf0c      	ite	eq
 800342c:	2301      	moveq	r3, #1
 800342e:	2300      	movne	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d012      	beq.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800343e:	f023 030f 	bic.w	r3, r3, #15
 8003442:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003444:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003446:	e009      	b.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800345a:	e000      	b.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800345c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003466:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800346a:	4618      	mov	r0, r3
 800346c:	3784      	adds	r7, #132	; 0x84
 800346e:	46bd      	mov	sp, r7
 8003470:	bd90      	pop	{r4, r7, pc}
 8003472:	bf00      	nop
 8003474:	50000100 	.word	0x50000100
 8003478:	50000400 	.word	0x50000400
 800347c:	50000500 	.word	0x50000500
 8003480:	50000300 	.word	0x50000300
 8003484:	50000700 	.word	0x50000700
 8003488:	50000600 	.word	0x50000600

0800348c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <__NVIC_SetPriorityGrouping+0x44>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a8:	4013      	ands	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034be:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <__NVIC_SetPriorityGrouping+0x44>)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	60d3      	str	r3, [r2, #12]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <__NVIC_GetPriorityGrouping+0x18>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	f003 0307 	and.w	r3, r3, #7
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	db0b      	blt.n	800351a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	4907      	ldr	r1, [pc, #28]	; (8003528 <__NVIC_EnableIRQ+0x38>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2001      	movs	r0, #1
 8003512:	fa00 f202 	lsl.w	r2, r0, r2
 8003516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000e100 	.word	0xe000e100

0800352c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	2b00      	cmp	r3, #0
 800353e:	db0a      	blt.n	8003556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	490c      	ldr	r1, [pc, #48]	; (8003578 <__NVIC_SetPriority+0x4c>)
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	0112      	lsls	r2, r2, #4
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	440b      	add	r3, r1
 8003550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003554:	e00a      	b.n	800356c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4908      	ldr	r1, [pc, #32]	; (800357c <__NVIC_SetPriority+0x50>)
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	3b04      	subs	r3, #4
 8003564:	0112      	lsls	r2, r2, #4
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	440b      	add	r3, r1
 800356a:	761a      	strb	r2, [r3, #24]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000e100 	.word	0xe000e100
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	; 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f1c3 0307 	rsb	r3, r3, #7
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf28      	it	cs
 800359e:	2304      	movcs	r3, #4
 80035a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d902      	bls.n	80035b0 <NVIC_EncodePriority+0x30>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3b03      	subs	r3, #3
 80035ae:	e000      	b.n	80035b2 <NVIC_EncodePriority+0x32>
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	401a      	ands	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c8:	f04f 31ff 	mov.w	r1, #4294967295
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	43d9      	mvns	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	4313      	orrs	r3, r2
         );
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3724      	adds	r7, #36	; 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff ff4c 	bl	800348c <__NVIC_SetPriorityGrouping>
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800360a:	f7ff ff63 	bl	80034d4 <__NVIC_GetPriorityGrouping>
 800360e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	6978      	ldr	r0, [r7, #20]
 8003616:	f7ff ffb3 	bl	8003580 <NVIC_EncodePriority>
 800361a:	4602      	mov	r2, r0
 800361c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ff82 	bl	800352c <__NVIC_SetPriority>
}
 8003628:	bf00      	nop
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff56 	bl	80034f0 <__NVIC_EnableIRQ>
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d005      	beq.n	8003670 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2204      	movs	r2, #4
 8003668:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	e037      	b.n	80036e0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 020e 	bic.w	r2, r2, #14
 800367e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800368e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	f003 021f 	and.w	r2, r3, #31
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f202 	lsl.w	r2, r1, r2
 80036b2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036bc:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00c      	beq.n	80036e0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036d4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036de:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d00d      	beq.n	8003732 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2204      	movs	r2, #4
 800371a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
 8003730:	e047      	b.n	80037c2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 020e 	bic.w	r2, r2, #14
 8003740:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003760:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	f003 021f 	and.w	r2, r3, #31
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2101      	movs	r1, #1
 8003770:	fa01 f202 	lsl.w	r2, r1, r2
 8003774:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800377e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00c      	beq.n	80037a2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003796:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
    }
  }
  return status;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037da:	e15a      	b.n	8003a92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	2101      	movs	r1, #1
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	fa01 f303 	lsl.w	r3, r1, r3
 80037e8:	4013      	ands	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 814c 	beq.w	8003a8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d005      	beq.n	800380c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003808:	2b02      	cmp	r3, #2
 800380a:	d130      	bne.n	800386e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	2203      	movs	r2, #3
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003842:	2201      	movs	r2, #1
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4013      	ands	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	f003 0201 	and.w	r2, r3, #1
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b03      	cmp	r3, #3
 8003878:	d017      	beq.n	80038aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	2203      	movs	r2, #3
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d123      	bne.n	80038fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	08da      	lsrs	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3208      	adds	r2, #8
 80038be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	220f      	movs	r2, #15
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	08da      	lsrs	r2, r3, #3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3208      	adds	r2, #8
 80038f8:	6939      	ldr	r1, [r7, #16]
 80038fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	2203      	movs	r2, #3
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4013      	ands	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 0203 	and.w	r2, r3, #3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80a6 	beq.w	8003a8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003940:	4b5b      	ldr	r3, [pc, #364]	; (8003ab0 <HAL_GPIO_Init+0x2e4>)
 8003942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003944:	4a5a      	ldr	r2, [pc, #360]	; (8003ab0 <HAL_GPIO_Init+0x2e4>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6613      	str	r3, [r2, #96]	; 0x60
 800394c:	4b58      	ldr	r3, [pc, #352]	; (8003ab0 <HAL_GPIO_Init+0x2e4>)
 800394e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003958:	4a56      	ldr	r2, [pc, #344]	; (8003ab4 <HAL_GPIO_Init+0x2e8>)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	089b      	lsrs	r3, r3, #2
 800395e:	3302      	adds	r3, #2
 8003960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003964:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	220f      	movs	r2, #15
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003982:	d01f      	beq.n	80039c4 <HAL_GPIO_Init+0x1f8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a4c      	ldr	r2, [pc, #304]	; (8003ab8 <HAL_GPIO_Init+0x2ec>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d019      	beq.n	80039c0 <HAL_GPIO_Init+0x1f4>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a4b      	ldr	r2, [pc, #300]	; (8003abc <HAL_GPIO_Init+0x2f0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d013      	beq.n	80039bc <HAL_GPIO_Init+0x1f0>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a4a      	ldr	r2, [pc, #296]	; (8003ac0 <HAL_GPIO_Init+0x2f4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00d      	beq.n	80039b8 <HAL_GPIO_Init+0x1ec>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a49      	ldr	r2, [pc, #292]	; (8003ac4 <HAL_GPIO_Init+0x2f8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d007      	beq.n	80039b4 <HAL_GPIO_Init+0x1e8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a48      	ldr	r2, [pc, #288]	; (8003ac8 <HAL_GPIO_Init+0x2fc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d101      	bne.n	80039b0 <HAL_GPIO_Init+0x1e4>
 80039ac:	2305      	movs	r3, #5
 80039ae:	e00a      	b.n	80039c6 <HAL_GPIO_Init+0x1fa>
 80039b0:	2306      	movs	r3, #6
 80039b2:	e008      	b.n	80039c6 <HAL_GPIO_Init+0x1fa>
 80039b4:	2304      	movs	r3, #4
 80039b6:	e006      	b.n	80039c6 <HAL_GPIO_Init+0x1fa>
 80039b8:	2303      	movs	r3, #3
 80039ba:	e004      	b.n	80039c6 <HAL_GPIO_Init+0x1fa>
 80039bc:	2302      	movs	r3, #2
 80039be:	e002      	b.n	80039c6 <HAL_GPIO_Init+0x1fa>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_GPIO_Init+0x1fa>
 80039c4:	2300      	movs	r3, #0
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	f002 0203 	and.w	r2, r2, #3
 80039cc:	0092      	lsls	r2, r2, #2
 80039ce:	4093      	lsls	r3, r2
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d6:	4937      	ldr	r1, [pc, #220]	; (8003ab4 <HAL_GPIO_Init+0x2e8>)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	3302      	adds	r3, #2
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039e4:	4b39      	ldr	r3, [pc, #228]	; (8003acc <HAL_GPIO_Init+0x300>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a08:	4a30      	ldr	r2, [pc, #192]	; (8003acc <HAL_GPIO_Init+0x300>)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a0e:	4b2f      	ldr	r3, [pc, #188]	; (8003acc <HAL_GPIO_Init+0x300>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a32:	4a26      	ldr	r2, [pc, #152]	; (8003acc <HAL_GPIO_Init+0x300>)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003a38:	4b24      	ldr	r3, [pc, #144]	; (8003acc <HAL_GPIO_Init+0x300>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4013      	ands	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a5c:	4a1b      	ldr	r2, [pc, #108]	; (8003acc <HAL_GPIO_Init+0x300>)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a62:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <HAL_GPIO_Init+0x300>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a86:	4a11      	ldr	r2, [pc, #68]	; (8003acc <HAL_GPIO_Init+0x300>)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f47f ae9d 	bne.w	80037dc <HAL_GPIO_Init+0x10>
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	48000400 	.word	0x48000400
 8003abc:	48000800 	.word	0x48000800
 8003ac0:	48000c00 	.word	0x48000c00
 8003ac4:	48001000 	.word	0x48001000
 8003ac8:	48001400 	.word	0x48001400
 8003acc:	40010400 	.word	0x40010400

08003ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	807b      	strh	r3, [r7, #2]
 8003adc:	4613      	mov	r3, r2
 8003ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ae0:	787b      	ldrb	r3, [r7, #1]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ae6:	887a      	ldrh	r2, [r7, #2]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003aec:	e002      	b.n	8003af4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b16:	4a05      	ldr	r2, [pc, #20]	; (8003b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b1c:	88fb      	ldrh	r3, [r7, #6]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 f806 	bl	8003b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40010400 	.word	0x40010400

08003b30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d141      	bne.n	8003bda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b56:	4b4b      	ldr	r3, [pc, #300]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b62:	d131      	bne.n	8003bc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b64:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b6a:	4a46      	ldr	r2, [pc, #280]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b74:	4b43      	ldr	r3, [pc, #268]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b7c:	4a41      	ldr	r2, [pc, #260]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b84:	4b40      	ldr	r3, [pc, #256]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2232      	movs	r2, #50	; 0x32
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	4a3f      	ldr	r2, [pc, #252]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	0c9b      	lsrs	r3, r3, #18
 8003b96:	3301      	adds	r3, #1
 8003b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b9a:	e002      	b.n	8003ba2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ba2:	4b38      	ldr	r3, [pc, #224]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bae:	d102      	bne.n	8003bb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f2      	bne.n	8003b9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bb6:	4b33      	ldr	r3, [pc, #204]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc2:	d158      	bne.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e057      	b.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bc8:	4b2e      	ldr	r3, [pc, #184]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bce:	4a2d      	ldr	r2, [pc, #180]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bd8:	e04d      	b.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be0:	d141      	bne.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003be2:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bee:	d131      	bne.n	8003c54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bf0:	4b24      	ldr	r3, [pc, #144]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf6:	4a23      	ldr	r2, [pc, #140]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c00:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c08:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c10:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2232      	movs	r2, #50	; 0x32
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	0c9b      	lsrs	r3, r3, #18
 8003c22:	3301      	adds	r3, #1
 8003c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c26:	e002      	b.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2e:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3a:	d102      	bne.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f2      	bne.n	8003c28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4e:	d112      	bne.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e011      	b.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c64:	e007      	b.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c6e:	4a05      	ldr	r2, [pc, #20]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40007000 	.word	0x40007000
 8003c88:	20000000 	.word	0x20000000
 8003c8c:	431bde83 	.word	0x431bde83

08003c90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4a04      	ldr	r2, [pc, #16]	; (8003cac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c9e:	6093      	str	r3, [r2, #8]
}
 8003ca0:	bf00      	nop
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40007000 	.word	0x40007000

08003cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e306      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d075      	beq.n	8003dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cce:	4b97      	ldr	r3, [pc, #604]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd8:	4b94      	ldr	r3, [pc, #592]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	d102      	bne.n	8003cee <HAL_RCC_OscConfig+0x3e>
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d002      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x44>
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d10b      	bne.n	8003d0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf4:	4b8d      	ldr	r3, [pc, #564]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d05b      	beq.n	8003db8 <HAL_RCC_OscConfig+0x108>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d157      	bne.n	8003db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e2e1      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d14:	d106      	bne.n	8003d24 <HAL_RCC_OscConfig+0x74>
 8003d16:	4b85      	ldr	r3, [pc, #532]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a84      	ldr	r2, [pc, #528]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e01d      	b.n	8003d60 <HAL_RCC_OscConfig+0xb0>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCC_OscConfig+0x98>
 8003d2e:	4b7f      	ldr	r3, [pc, #508]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a7e      	ldr	r2, [pc, #504]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	4b7c      	ldr	r3, [pc, #496]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a7b      	ldr	r2, [pc, #492]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e00b      	b.n	8003d60 <HAL_RCC_OscConfig+0xb0>
 8003d48:	4b78      	ldr	r3, [pc, #480]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a77      	ldr	r2, [pc, #476]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b75      	ldr	r3, [pc, #468]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a74      	ldr	r2, [pc, #464]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d013      	beq.n	8003d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fe fa7a 	bl	8002260 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fe fa76 	bl	8002260 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	; 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e2a6      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d82:	4b6a      	ldr	r3, [pc, #424]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0xc0>
 8003d8e:	e014      	b.n	8003dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe fa66 	bl	8002260 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fe fa62 	bl	8002260 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e292      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003daa:	4b60      	ldr	r3, [pc, #384]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0xe8>
 8003db6:	e000      	b.n	8003dba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d075      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc6:	4b59      	ldr	r3, [pc, #356]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dd0:	4b56      	ldr	r3, [pc, #344]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2b0c      	cmp	r3, #12
 8003dde:	d102      	bne.n	8003de6 <HAL_RCC_OscConfig+0x136>
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d002      	beq.n	8003dec <HAL_RCC_OscConfig+0x13c>
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d11f      	bne.n	8003e2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dec:	4b4f      	ldr	r3, [pc, #316]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_OscConfig+0x154>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e265      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e04:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	4946      	ldr	r1, [pc, #280]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e18:	4b45      	ldr	r3, [pc, #276]	; (8003f30 <HAL_RCC_OscConfig+0x280>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fd fb25 	bl	800146c <HAL_InitTick>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d043      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e251      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d023      	beq.n	8003e7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e34:	4b3d      	ldr	r3, [pc, #244]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a3c      	ldr	r2, [pc, #240]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e40:	f7fe fa0e 	bl	8002260 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e48:	f7fe fa0a 	bl	8002260 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e23a      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e5a:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e66:	4b31      	ldr	r3, [pc, #196]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	061b      	lsls	r3, r3, #24
 8003e74:	492d      	ldr	r1, [pc, #180]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	604b      	str	r3, [r1, #4]
 8003e7a:	e01a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e7c:	4b2b      	ldr	r3, [pc, #172]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003e82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fe f9ea 	bl	8002260 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e90:	f7fe f9e6 	bl	8002260 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e216      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ea2:	4b22      	ldr	r3, [pc, #136]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x1e0>
 8003eae:	e000      	b.n	8003eb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d041      	beq.n	8003f42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01c      	beq.n	8003f00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec6:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ecc:	4a17      	ldr	r2, [pc, #92]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed6:	f7fe f9c3 	bl	8002260 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ede:	f7fe f9bf 	bl	8002260 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e1ef      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ef0:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0ef      	beq.n	8003ede <HAL_RCC_OscConfig+0x22e>
 8003efe:	e020      	b.n	8003f42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f00:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f06:	4a09      	ldr	r2, [pc, #36]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fe f9a6 	bl	8002260 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f16:	e00d      	b.n	8003f34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f18:	f7fe f9a2 	bl	8002260 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d906      	bls.n	8003f34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e1d2      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
 8003f2a:	bf00      	nop
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	20000210 	.word	0x20000210
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f34:	4b8c      	ldr	r3, [pc, #560]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8003f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1ea      	bne.n	8003f18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80a6 	beq.w	800409c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f50:	2300      	movs	r3, #0
 8003f52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f54:	4b84      	ldr	r3, [pc, #528]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_OscConfig+0x2b4>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x2b6>
 8003f64:	2300      	movs	r3, #0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	4b7f      	ldr	r3, [pc, #508]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6e:	4a7e      	ldr	r2, [pc, #504]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f74:	6593      	str	r3, [r2, #88]	; 0x58
 8003f76:	4b7c      	ldr	r3, [pc, #496]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f82:	2301      	movs	r3, #1
 8003f84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f86:	4b79      	ldr	r3, [pc, #484]	; (800416c <HAL_RCC_OscConfig+0x4bc>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d118      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f92:	4b76      	ldr	r3, [pc, #472]	; (800416c <HAL_RCC_OscConfig+0x4bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a75      	ldr	r2, [pc, #468]	; (800416c <HAL_RCC_OscConfig+0x4bc>)
 8003f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe f95f 	bl	8002260 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa6:	f7fe f95b 	bl	8002260 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e18b      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb8:	4b6c      	ldr	r3, [pc, #432]	; (800416c <HAL_RCC_OscConfig+0x4bc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d108      	bne.n	8003fde <HAL_RCC_OscConfig+0x32e>
 8003fcc:	4b66      	ldr	r3, [pc, #408]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd2:	4a65      	ldr	r2, [pc, #404]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fdc:	e024      	b.n	8004028 <HAL_RCC_OscConfig+0x378>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d110      	bne.n	8004008 <HAL_RCC_OscConfig+0x358>
 8003fe6:	4b60      	ldr	r3, [pc, #384]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fec:	4a5e      	ldr	r2, [pc, #376]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8003fee:	f043 0304 	orr.w	r3, r3, #4
 8003ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ff6:	4b5c      	ldr	r3, [pc, #368]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffc:	4a5a      	ldr	r2, [pc, #360]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004006:	e00f      	b.n	8004028 <HAL_RCC_OscConfig+0x378>
 8004008:	4b57      	ldr	r3, [pc, #348]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	4a56      	ldr	r2, [pc, #344]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004018:	4b53      	ldr	r3, [pc, #332]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	4a52      	ldr	r2, [pc, #328]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8004020:	f023 0304 	bic.w	r3, r3, #4
 8004024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d016      	beq.n	800405e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004030:	f7fe f916 	bl	8002260 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004036:	e00a      	b.n	800404e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004038:	f7fe f912 	bl	8002260 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f241 3288 	movw	r2, #5000	; 0x1388
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e140      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404e:	4b46      	ldr	r3, [pc, #280]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ed      	beq.n	8004038 <HAL_RCC_OscConfig+0x388>
 800405c:	e015      	b.n	800408a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405e:	f7fe f8ff 	bl	8002260 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004064:	e00a      	b.n	800407c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004066:	f7fe f8fb 	bl	8002260 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	f241 3288 	movw	r2, #5000	; 0x1388
 8004074:	4293      	cmp	r3, r2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e129      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800407c:	4b3a      	ldr	r3, [pc, #232]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1ed      	bne.n	8004066 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800408a:	7ffb      	ldrb	r3, [r7, #31]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d105      	bne.n	800409c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004090:	4b35      	ldr	r3, [pc, #212]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8004092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004094:	4a34      	ldr	r2, [pc, #208]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8004096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d03c      	beq.n	8004122 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01c      	beq.n	80040ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040b0:	4b2d      	ldr	r3, [pc, #180]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 80040b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040b6:	4a2c      	ldr	r2, [pc, #176]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fe f8ce 	bl	8002260 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040c8:	f7fe f8ca 	bl	8002260 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e0fa      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040da:	4b23      	ldr	r3, [pc, #140]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 80040dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0ef      	beq.n	80040c8 <HAL_RCC_OscConfig+0x418>
 80040e8:	e01b      	b.n	8004122 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040ea:	4b1f      	ldr	r3, [pc, #124]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 80040ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040f0:	4a1d      	ldr	r2, [pc, #116]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 80040f2:	f023 0301 	bic.w	r3, r3, #1
 80040f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fa:	f7fe f8b1 	bl	8002260 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004102:	f7fe f8ad 	bl	8002260 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e0dd      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004114:	4b14      	ldr	r3, [pc, #80]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8004116:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1ef      	bne.n	8004102 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80d1 	beq.w	80042ce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800412c:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b0c      	cmp	r3, #12
 8004136:	f000 808b 	beq.w	8004250 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d15e      	bne.n	8004200 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a08      	ldr	r2, [pc, #32]	; (8004168 <HAL_RCC_OscConfig+0x4b8>)
 8004148:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800414c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fe f887 	bl	8002260 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004154:	e00c      	b.n	8004170 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004156:	f7fe f883 	bl	8002260 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d905      	bls.n	8004170 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e0b3      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
 8004168:	40021000 	.word	0x40021000
 800416c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004170:	4b59      	ldr	r3, [pc, #356]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ec      	bne.n	8004156 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417c:	4b56      	ldr	r3, [pc, #344]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	4b56      	ldr	r3, [pc, #344]	; (80042dc <HAL_RCC_OscConfig+0x62c>)
 8004182:	4013      	ands	r3, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6a11      	ldr	r1, [r2, #32]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800418c:	3a01      	subs	r2, #1
 800418e:	0112      	lsls	r2, r2, #4
 8004190:	4311      	orrs	r1, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004196:	0212      	lsls	r2, r2, #8
 8004198:	4311      	orrs	r1, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800419e:	0852      	lsrs	r2, r2, #1
 80041a0:	3a01      	subs	r2, #1
 80041a2:	0552      	lsls	r2, r2, #21
 80041a4:	4311      	orrs	r1, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041aa:	0852      	lsrs	r2, r2, #1
 80041ac:	3a01      	subs	r2, #1
 80041ae:	0652      	lsls	r2, r2, #25
 80041b0:	4311      	orrs	r1, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041b6:	06d2      	lsls	r2, r2, #27
 80041b8:	430a      	orrs	r2, r1
 80041ba:	4947      	ldr	r1, [pc, #284]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c0:	4b45      	ldr	r3, [pc, #276]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a44      	ldr	r2, [pc, #272]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 80041c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041cc:	4b42      	ldr	r3, [pc, #264]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a41      	ldr	r2, [pc, #260]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 80041d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fe f842 	bl	8002260 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fe f83e 	bl	8002260 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e06e      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f2:	4b39      	ldr	r3, [pc, #228]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0x530>
 80041fe:	e066      	b.n	80042ce <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004200:	4b35      	ldr	r3, [pc, #212]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a34      	ldr	r2, [pc, #208]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 8004206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800420a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800420c:	4b32      	ldr	r3, [pc, #200]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a31      	ldr	r2, [pc, #196]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 8004212:	f023 0303 	bic.w	r3, r3, #3
 8004216:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004218:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4a2e      	ldr	r2, [pc, #184]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 800421e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fe f81a 	bl	8002260 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004230:	f7fe f816 	bl	8002260 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e046      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004242:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x580>
 800424e:	e03e      	b.n	80042ce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e039      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800425c:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <HAL_RCC_OscConfig+0x628>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f003 0203 	and.w	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	429a      	cmp	r2, r3
 800426e:	d12c      	bne.n	80042ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	3b01      	subs	r3, #1
 800427c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427e:	429a      	cmp	r2, r3
 8004280:	d123      	bne.n	80042ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d11b      	bne.n	80042ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d113      	bne.n	80042ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	3b01      	subs	r3, #1
 80042b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d109      	bne.n	80042ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	085b      	lsrs	r3, r3, #1
 80042c2:	3b01      	subs	r3, #1
 80042c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	019f800c 	.word	0x019f800c

080042e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e11e      	b.n	8004536 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042f8:	4b91      	ldr	r3, [pc, #580]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d910      	bls.n	8004328 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b8e      	ldr	r3, [pc, #568]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 020f 	bic.w	r2, r3, #15
 800430e:	498c      	ldr	r1, [pc, #560]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b8a      	ldr	r3, [pc, #552]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e106      	b.n	8004536 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d073      	beq.n	800441c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d129      	bne.n	8004390 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433c:	4b81      	ldr	r3, [pc, #516]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0f4      	b.n	8004536 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800434c:	f000 f9d0 	bl	80046f0 <RCC_GetSysClockFreqFromPLLSource>
 8004350:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4a7c      	ldr	r2, [pc, #496]	; (8004548 <HAL_RCC_ClockConfig+0x268>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d93f      	bls.n	80043da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800435a:	4b7a      	ldr	r3, [pc, #488]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800436e:	2b00      	cmp	r3, #0
 8004370:	d033      	beq.n	80043da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004376:	2b00      	cmp	r3, #0
 8004378:	d12f      	bne.n	80043da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800437a:	4b72      	ldr	r3, [pc, #456]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004382:	4a70      	ldr	r2, [pc, #448]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 8004384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004388:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	e024      	b.n	80043da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d107      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004398:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0c6      	b.n	8004536 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a8:	4b66      	ldr	r3, [pc, #408]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0be      	b.n	8004536 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043b8:	f000 f8ce 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4a61      	ldr	r2, [pc, #388]	; (8004548 <HAL_RCC_ClockConfig+0x268>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d909      	bls.n	80043da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043c6:	4b5f      	ldr	r3, [pc, #380]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ce:	4a5d      	ldr	r2, [pc, #372]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 80043d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80043d6:	2380      	movs	r3, #128	; 0x80
 80043d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043da:	4b5a      	ldr	r3, [pc, #360]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f023 0203 	bic.w	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4957      	ldr	r1, [pc, #348]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ec:	f7fd ff38 	bl	8002260 <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	e00a      	b.n	800440a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f4:	f7fd ff34 	bl	8002260 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e095      	b.n	8004536 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	4b4e      	ldr	r3, [pc, #312]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 020c 	and.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	429a      	cmp	r2, r3
 800441a:	d1eb      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d023      	beq.n	8004470 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004434:	4b43      	ldr	r3, [pc, #268]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	4a42      	ldr	r2, [pc, #264]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 800443a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800443e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800444c:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004454:	4a3b      	ldr	r2, [pc, #236]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 8004456:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800445a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800445c:	4b39      	ldr	r3, [pc, #228]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4936      	ldr	r1, [pc, #216]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 800446a:	4313      	orrs	r3, r2
 800446c:	608b      	str	r3, [r1, #8]
 800446e:	e008      	b.n	8004482 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2b80      	cmp	r3, #128	; 0x80
 8004474:	d105      	bne.n	8004482 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004476:	4b33      	ldr	r3, [pc, #204]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	4a32      	ldr	r2, [pc, #200]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 800447c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004480:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004482:	4b2f      	ldr	r3, [pc, #188]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d21d      	bcs.n	80044cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004490:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f023 020f 	bic.w	r2, r3, #15
 8004498:	4929      	ldr	r1, [pc, #164]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	4313      	orrs	r3, r2
 800449e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044a0:	f7fd fede 	bl	8002260 <HAL_GetTick>
 80044a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a6:	e00a      	b.n	80044be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a8:	f7fd feda 	bl	8002260 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e03b      	b.n	8004536 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044be:	4b20      	ldr	r3, [pc, #128]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d1ed      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4917      	ldr	r1, [pc, #92]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d009      	beq.n	800450a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044f6:	4b13      	ldr	r3, [pc, #76]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	490f      	ldr	r1, [pc, #60]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 8004506:	4313      	orrs	r3, r2
 8004508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800450a:	f000 f825 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 800450e:	4602      	mov	r2, r0
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <HAL_RCC_ClockConfig+0x264>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	091b      	lsrs	r3, r3, #4
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	490c      	ldr	r1, [pc, #48]	; (800454c <HAL_RCC_ClockConfig+0x26c>)
 800451c:	5ccb      	ldrb	r3, [r1, r3]
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	fa22 f303 	lsr.w	r3, r2, r3
 8004526:	4a0a      	ldr	r2, [pc, #40]	; (8004550 <HAL_RCC_ClockConfig+0x270>)
 8004528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <HAL_RCC_ClockConfig+0x274>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fc ff9c 	bl	800146c <HAL_InitTick>
 8004534:	4603      	mov	r3, r0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40022000 	.word	0x40022000
 8004544:	40021000 	.word	0x40021000
 8004548:	04c4b400 	.word	0x04c4b400
 800454c:	0800a148 	.word	0x0800a148
 8004550:	20000000 	.word	0x20000000
 8004554:	20000210 	.word	0x20000210

08004558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800455e:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b04      	cmp	r3, #4
 8004568:	d102      	bne.n	8004570 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800456a:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <HAL_RCC_GetSysClockFreq+0xbc>)
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	e047      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004570:	4b27      	ldr	r3, [pc, #156]	; (8004610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 030c 	and.w	r3, r3, #12
 8004578:	2b08      	cmp	r3, #8
 800457a:	d102      	bne.n	8004582 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800457c:	4b26      	ldr	r3, [pc, #152]	; (8004618 <HAL_RCC_GetSysClockFreq+0xc0>)
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	e03e      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004582:	4b23      	ldr	r3, [pc, #140]	; (8004610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b0c      	cmp	r3, #12
 800458c:	d136      	bne.n	80045fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800458e:	4b20      	ldr	r3, [pc, #128]	; (8004610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004598:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <HAL_RCC_GetSysClockFreq+0xb8>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	091b      	lsrs	r3, r3, #4
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	3301      	adds	r3, #1
 80045a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d10c      	bne.n	80045c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045ac:	4a1a      	ldr	r2, [pc, #104]	; (8004618 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	4a16      	ldr	r2, [pc, #88]	; (8004610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045b6:	68d2      	ldr	r2, [r2, #12]
 80045b8:	0a12      	lsrs	r2, r2, #8
 80045ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045be:	fb02 f303 	mul.w	r3, r2, r3
 80045c2:	617b      	str	r3, [r7, #20]
      break;
 80045c4:	e00c      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045c6:	4a13      	ldr	r2, [pc, #76]	; (8004614 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ce:	4a10      	ldr	r2, [pc, #64]	; (8004610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d0:	68d2      	ldr	r2, [r2, #12]
 80045d2:	0a12      	lsrs	r2, r2, #8
 80045d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045d8:	fb02 f303 	mul.w	r3, r2, r3
 80045dc:	617b      	str	r3, [r7, #20]
      break;
 80045de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	0e5b      	lsrs	r3, r3, #25
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	3301      	adds	r3, #1
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	e001      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004600:	693b      	ldr	r3, [r7, #16]
}
 8004602:	4618      	mov	r0, r3
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000
 8004614:	00f42400 	.word	0x00f42400
 8004618:	016e3600 	.word	0x016e3600

0800461c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <HAL_RCC_GetHCLKFreq+0x14>)
 8004622:	681b      	ldr	r3, [r3, #0]
}
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000000 	.word	0x20000000

08004634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004638:	f7ff fff0 	bl	800461c <HAL_RCC_GetHCLKFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4904      	ldr	r1, [pc, #16]	; (800465c <HAL_RCC_GetPCLK1Freq+0x28>)
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000
 800465c:	0800a158 	.word	0x0800a158

08004660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004664:	f7ff ffda 	bl	800461c <HAL_RCC_GetHCLKFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <HAL_RCC_GetPCLK2Freq+0x24>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0adb      	lsrs	r3, r3, #11
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4904      	ldr	r1, [pc, #16]	; (8004688 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000
 8004688:	0800a158 	.word	0x0800a158

0800468c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	220f      	movs	r2, #15
 800469a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800469c:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <HAL_RCC_GetClockConfig+0x5c>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 0203 	and.w	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80046a8:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <HAL_RCC_GetClockConfig+0x5c>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <HAL_RCC_GetClockConfig+0x5c>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_RCC_GetClockConfig+0x5c>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	08db      	lsrs	r3, r3, #3
 80046c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <HAL_RCC_GetClockConfig+0x60>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 020f 	and.w	r2, r3, #15
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	601a      	str	r2, [r3, #0]
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40022000 	.word	0x40022000

080046f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046f6:	4b1e      	ldr	r3, [pc, #120]	; (8004770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004700:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	3301      	adds	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b03      	cmp	r3, #3
 8004712:	d10c      	bne.n	800472e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004714:	4a17      	ldr	r2, [pc, #92]	; (8004774 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	4a14      	ldr	r2, [pc, #80]	; (8004770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800471e:	68d2      	ldr	r2, [r2, #12]
 8004720:	0a12      	lsrs	r2, r2, #8
 8004722:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	617b      	str	r3, [r7, #20]
    break;
 800472c:	e00c      	b.n	8004748 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800472e:	4a12      	ldr	r2, [pc, #72]	; (8004778 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	4a0e      	ldr	r2, [pc, #56]	; (8004770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004738:	68d2      	ldr	r2, [r2, #12]
 800473a:	0a12      	lsrs	r2, r2, #8
 800473c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	617b      	str	r3, [r7, #20]
    break;
 8004746:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	0e5b      	lsrs	r3, r3, #25
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	3301      	adds	r3, #1
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004762:	687b      	ldr	r3, [r7, #4]
}
 8004764:	4618      	mov	r0, r3
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40021000 	.word	0x40021000
 8004774:	016e3600 	.word	0x016e3600
 8004778:	00f42400 	.word	0x00f42400

0800477c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004784:	2300      	movs	r3, #0
 8004786:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004788:	2300      	movs	r3, #0
 800478a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8098 	beq.w	80048ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479e:	4b43      	ldr	r3, [pc, #268]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10d      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047aa:	4b40      	ldr	r3, [pc, #256]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	4a3f      	ldr	r2, [pc, #252]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b4:	6593      	str	r3, [r2, #88]	; 0x58
 80047b6:	4b3d      	ldr	r3, [pc, #244]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c2:	2301      	movs	r3, #1
 80047c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c6:	4b3a      	ldr	r3, [pc, #232]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a39      	ldr	r2, [pc, #228]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047d2:	f7fd fd45 	bl	8002260 <HAL_GetTick>
 80047d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047d8:	e009      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047da:	f7fd fd41 	bl	8002260 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d902      	bls.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	74fb      	strb	r3, [r7, #19]
        break;
 80047ec:	e005      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ee:	4b30      	ldr	r3, [pc, #192]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0ef      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d159      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004800:	4b2a      	ldr	r3, [pc, #168]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d01e      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	429a      	cmp	r2, r3
 800481a:	d019      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800481c:	4b23      	ldr	r3, [pc, #140]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004826:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004828:	4b20      	ldr	r3, [pc, #128]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	4a1f      	ldr	r2, [pc, #124]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004838:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004848:	4a18      	ldr	r2, [pc, #96]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d016      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485a:	f7fd fd01 	bl	8002260 <HAL_GetTick>
 800485e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004860:	e00b      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004862:	f7fd fcfd 	bl	8002260 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004870:	4293      	cmp	r3, r2
 8004872:	d902      	bls.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	74fb      	strb	r3, [r7, #19]
            break;
 8004878:	e006      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487a:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0ec      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10b      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800488e:	4b07      	ldr	r3, [pc, #28]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489c:	4903      	ldr	r1, [pc, #12]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048a4:	e008      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048a6:	7cfb      	ldrb	r3, [r7, #19]
 80048a8:	74bb      	strb	r3, [r7, #18]
 80048aa:	e005      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048ac:	40021000 	.word	0x40021000
 80048b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048b8:	7c7b      	ldrb	r3, [r7, #17]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d105      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048be:	4ba7      	ldr	r3, [pc, #668]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c2:	4aa6      	ldr	r2, [pc, #664]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048d6:	4ba1      	ldr	r3, [pc, #644]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048dc:	f023 0203 	bic.w	r2, r3, #3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	499d      	ldr	r1, [pc, #628]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048f8:	4b98      	ldr	r3, [pc, #608]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	f023 020c 	bic.w	r2, r3, #12
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	4995      	ldr	r1, [pc, #596]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800491a:	4b90      	ldr	r3, [pc, #576]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	498c      	ldr	r1, [pc, #560]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800493c:	4b87      	ldr	r3, [pc, #540]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	4984      	ldr	r1, [pc, #528]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800495e:	4b7f      	ldr	r3, [pc, #508]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	497b      	ldr	r1, [pc, #492]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004980:	4b76      	ldr	r3, [pc, #472]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004986:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	4973      	ldr	r1, [pc, #460]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049a2:	4b6e      	ldr	r3, [pc, #440]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	496a      	ldr	r1, [pc, #424]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049c4:	4b65      	ldr	r3, [pc, #404]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	4962      	ldr	r1, [pc, #392]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049e6:	4b5d      	ldr	r3, [pc, #372]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	4959      	ldr	r1, [pc, #356]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a08:	4b54      	ldr	r3, [pc, #336]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a0e:	f023 0203 	bic.w	r2, r3, #3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	4951      	ldr	r1, [pc, #324]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a2a:	4b4c      	ldr	r3, [pc, #304]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	4948      	ldr	r1, [pc, #288]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d015      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a4c:	4b43      	ldr	r3, [pc, #268]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	4940      	ldr	r1, [pc, #256]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a6a:	d105      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a6c:	4b3b      	ldr	r3, [pc, #236]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4a3a      	ldr	r2, [pc, #232]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d015      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a84:	4b35      	ldr	r3, [pc, #212]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a92:	4932      	ldr	r1, [pc, #200]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa4:	4b2d      	ldr	r3, [pc, #180]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	4a2c      	ldr	r2, [pc, #176]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d015      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004abc:	4b27      	ldr	r3, [pc, #156]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	4924      	ldr	r1, [pc, #144]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ada:	d105      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004adc:	4b1f      	ldr	r3, [pc, #124]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ae6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d015      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004af4:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b02:	4916      	ldr	r1, [pc, #88]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b12:	d105      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b14:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b1e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d019      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	4908      	ldr	r1, [pc, #32]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b4a:	d109      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b4c:	4b03      	ldr	r3, [pc, #12]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	4a02      	ldr	r2, [pc, #8]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b56:	60d3      	str	r3, [r2, #12]
 8004b58:	e002      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b5a:	bf00      	nop
 8004b5c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d015      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b6c:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	4926      	ldr	r1, [pc, #152]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b8a:	d105      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b8c:	4b21      	ldr	r3, [pc, #132]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4a20      	ldr	r2, [pc, #128]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b96:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d015      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb2:	4918      	ldr	r1, [pc, #96]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004bc4:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d015      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004bdc:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004be2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bea:	490a      	ldr	r1, [pc, #40]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bfa:	d105      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a04      	ldr	r2, [pc, #16]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c08:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000

08004c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e049      	b.n	8004cbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fc fec6 	bl	80019d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3304      	adds	r3, #4
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f000 fe90 	bl	800597c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d001      	beq.n	8004ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e054      	b.n	8004d8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a26      	ldr	r2, [pc, #152]	; (8004d98 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d022      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0x80>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0a:	d01d      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0x80>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a22      	ldr	r2, [pc, #136]	; (8004d9c <HAL_TIM_Base_Start_IT+0xd4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d018      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0x80>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a21      	ldr	r2, [pc, #132]	; (8004da0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0x80>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1f      	ldr	r2, [pc, #124]	; (8004da4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00e      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0x80>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	; (8004da8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d009      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0x80>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <HAL_TIM_Base_Start_IT+0xe4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0x80>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1b      	ldr	r2, [pc, #108]	; (8004db0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d115      	bne.n	8004d74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <HAL_TIM_Base_Start_IT+0xec>)
 8004d50:	4013      	ands	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b06      	cmp	r3, #6
 8004d58:	d015      	beq.n	8004d86 <HAL_TIM_Base_Start_IT+0xbe>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d60:	d011      	beq.n	8004d86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d72:	e008      	b.n	8004d86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e000      	b.n	8004d88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800
 8004da4:	40000c00 	.word	0x40000c00
 8004da8:	40013400 	.word	0x40013400
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40015000 	.word	0x40015000
 8004db4:	00010007 	.word	0x00010007

08004db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e049      	b.n	8004e5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f841 	bl	8004e66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3304      	adds	r3, #4
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f000 fdc0 	bl	800597c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d109      	bne.n	8004ea0 <HAL_TIM_PWM_Start+0x24>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	bf14      	ite	ne
 8004e98:	2301      	movne	r3, #1
 8004e9a:	2300      	moveq	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e03c      	b.n	8004f1a <HAL_TIM_PWM_Start+0x9e>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d109      	bne.n	8004eba <HAL_TIM_PWM_Start+0x3e>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	bf14      	ite	ne
 8004eb2:	2301      	movne	r3, #1
 8004eb4:	2300      	moveq	r3, #0
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	e02f      	b.n	8004f1a <HAL_TIM_PWM_Start+0x9e>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d109      	bne.n	8004ed4 <HAL_TIM_PWM_Start+0x58>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	bf14      	ite	ne
 8004ecc:	2301      	movne	r3, #1
 8004ece:	2300      	moveq	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	e022      	b.n	8004f1a <HAL_TIM_PWM_Start+0x9e>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	d109      	bne.n	8004eee <HAL_TIM_PWM_Start+0x72>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	bf14      	ite	ne
 8004ee6:	2301      	movne	r3, #1
 8004ee8:	2300      	moveq	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	e015      	b.n	8004f1a <HAL_TIM_PWM_Start+0x9e>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d109      	bne.n	8004f08 <HAL_TIM_PWM_Start+0x8c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	e008      	b.n	8004f1a <HAL_TIM_PWM_Start+0x9e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	bf14      	ite	ne
 8004f14:	2301      	movne	r3, #1
 8004f16:	2300      	moveq	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e0a6      	b.n	8005070 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <HAL_TIM_PWM_Start+0xb6>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f30:	e023      	b.n	8004f7a <HAL_TIM_PWM_Start+0xfe>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d104      	bne.n	8004f42 <HAL_TIM_PWM_Start+0xc6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f40:	e01b      	b.n	8004f7a <HAL_TIM_PWM_Start+0xfe>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d104      	bne.n	8004f52 <HAL_TIM_PWM_Start+0xd6>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f50:	e013      	b.n	8004f7a <HAL_TIM_PWM_Start+0xfe>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b0c      	cmp	r3, #12
 8004f56:	d104      	bne.n	8004f62 <HAL_TIM_PWM_Start+0xe6>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f60:	e00b      	b.n	8004f7a <HAL_TIM_PWM_Start+0xfe>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d104      	bne.n	8004f72 <HAL_TIM_PWM_Start+0xf6>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f70:	e003      	b.n	8004f7a <HAL_TIM_PWM_Start+0xfe>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	6839      	ldr	r1, [r7, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f001 f9dc 	bl	8006340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a3a      	ldr	r2, [pc, #232]	; (8005078 <HAL_TIM_PWM_Start+0x1fc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d018      	beq.n	8004fc4 <HAL_TIM_PWM_Start+0x148>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a39      	ldr	r2, [pc, #228]	; (800507c <HAL_TIM_PWM_Start+0x200>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <HAL_TIM_PWM_Start+0x148>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a37      	ldr	r2, [pc, #220]	; (8005080 <HAL_TIM_PWM_Start+0x204>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00e      	beq.n	8004fc4 <HAL_TIM_PWM_Start+0x148>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a36      	ldr	r2, [pc, #216]	; (8005084 <HAL_TIM_PWM_Start+0x208>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d009      	beq.n	8004fc4 <HAL_TIM_PWM_Start+0x148>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a34      	ldr	r2, [pc, #208]	; (8005088 <HAL_TIM_PWM_Start+0x20c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <HAL_TIM_PWM_Start+0x148>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a33      	ldr	r2, [pc, #204]	; (800508c <HAL_TIM_PWM_Start+0x210>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIM_PWM_Start+0x14c>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <HAL_TIM_PWM_Start+0x14e>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a25      	ldr	r2, [pc, #148]	; (8005078 <HAL_TIM_PWM_Start+0x1fc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d022      	beq.n	800502e <HAL_TIM_PWM_Start+0x1b2>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff0:	d01d      	beq.n	800502e <HAL_TIM_PWM_Start+0x1b2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a26      	ldr	r2, [pc, #152]	; (8005090 <HAL_TIM_PWM_Start+0x214>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d018      	beq.n	800502e <HAL_TIM_PWM_Start+0x1b2>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a24      	ldr	r2, [pc, #144]	; (8005094 <HAL_TIM_PWM_Start+0x218>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <HAL_TIM_PWM_Start+0x1b2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a23      	ldr	r2, [pc, #140]	; (8005098 <HAL_TIM_PWM_Start+0x21c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00e      	beq.n	800502e <HAL_TIM_PWM_Start+0x1b2>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a19      	ldr	r2, [pc, #100]	; (800507c <HAL_TIM_PWM_Start+0x200>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d009      	beq.n	800502e <HAL_TIM_PWM_Start+0x1b2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a18      	ldr	r2, [pc, #96]	; (8005080 <HAL_TIM_PWM_Start+0x204>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d004      	beq.n	800502e <HAL_TIM_PWM_Start+0x1b2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a18      	ldr	r2, [pc, #96]	; (800508c <HAL_TIM_PWM_Start+0x210>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d115      	bne.n	800505a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	4b19      	ldr	r3, [pc, #100]	; (800509c <HAL_TIM_PWM_Start+0x220>)
 8005036:	4013      	ands	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b06      	cmp	r3, #6
 800503e:	d015      	beq.n	800506c <HAL_TIM_PWM_Start+0x1f0>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005046:	d011      	beq.n	800506c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005058:	e008      	b.n	800506c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0201 	orr.w	r2, r2, #1
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	e000      	b.n	800506e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40012c00 	.word	0x40012c00
 800507c:	40013400 	.word	0x40013400
 8005080:	40014000 	.word	0x40014000
 8005084:	40014400 	.word	0x40014400
 8005088:	40014800 	.word	0x40014800
 800508c:	40015000 	.word	0x40015000
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	00010007 	.word	0x00010007

080050a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2200      	movs	r2, #0
 80050b0:	6839      	ldr	r1, [r7, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 f944 	bl	8006340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a40      	ldr	r2, [pc, #256]	; (80051c0 <HAL_TIM_PWM_Stop+0x120>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d018      	beq.n	80050f4 <HAL_TIM_PWM_Stop+0x54>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a3f      	ldr	r2, [pc, #252]	; (80051c4 <HAL_TIM_PWM_Stop+0x124>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d013      	beq.n	80050f4 <HAL_TIM_PWM_Stop+0x54>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a3d      	ldr	r2, [pc, #244]	; (80051c8 <HAL_TIM_PWM_Stop+0x128>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00e      	beq.n	80050f4 <HAL_TIM_PWM_Stop+0x54>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a3c      	ldr	r2, [pc, #240]	; (80051cc <HAL_TIM_PWM_Stop+0x12c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d009      	beq.n	80050f4 <HAL_TIM_PWM_Stop+0x54>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a3a      	ldr	r2, [pc, #232]	; (80051d0 <HAL_TIM_PWM_Stop+0x130>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <HAL_TIM_PWM_Stop+0x54>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a39      	ldr	r2, [pc, #228]	; (80051d4 <HAL_TIM_PWM_Stop+0x134>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d101      	bne.n	80050f8 <HAL_TIM_PWM_Stop+0x58>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <HAL_TIM_PWM_Stop+0x5a>
 80050f8:	2300      	movs	r3, #0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d017      	beq.n	800512e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a1a      	ldr	r2, [r3, #32]
 8005104:	f241 1311 	movw	r3, #4369	; 0x1111
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10f      	bne.n	800512e <HAL_TIM_PWM_Stop+0x8e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6a1a      	ldr	r2, [r3, #32]
 8005114:	f244 4344 	movw	r3, #17476	; 0x4444
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d107      	bne.n	800512e <HAL_TIM_PWM_Stop+0x8e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800512c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1a      	ldr	r2, [r3, #32]
 8005134:	f241 1311 	movw	r3, #4369	; 0x1111
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10f      	bne.n	800515e <HAL_TIM_PWM_Stop+0xbe>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a1a      	ldr	r2, [r3, #32]
 8005144:	f244 4344 	movw	r3, #17476	; 0x4444
 8005148:	4013      	ands	r3, r2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d107      	bne.n	800515e <HAL_TIM_PWM_Stop+0xbe>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0201 	bic.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <HAL_TIM_PWM_Stop+0xce>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800516c:	e023      	b.n	80051b6 <HAL_TIM_PWM_Stop+0x116>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d104      	bne.n	800517e <HAL_TIM_PWM_Stop+0xde>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800517c:	e01b      	b.n	80051b6 <HAL_TIM_PWM_Stop+0x116>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d104      	bne.n	800518e <HAL_TIM_PWM_Stop+0xee>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800518c:	e013      	b.n	80051b6 <HAL_TIM_PWM_Stop+0x116>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b0c      	cmp	r3, #12
 8005192:	d104      	bne.n	800519e <HAL_TIM_PWM_Stop+0xfe>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800519c:	e00b      	b.n	80051b6 <HAL_TIM_PWM_Stop+0x116>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_PWM_Stop+0x10e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ac:	e003      	b.n	80051b6 <HAL_TIM_PWM_Stop+0x116>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40013400 	.word	0x40013400
 80051c8:	40014000 	.word	0x40014000
 80051cc:	40014400 	.word	0x40014400
 80051d0:	40014800 	.word	0x40014800
 80051d4:	40015000 	.word	0x40015000

080051d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0202 	mvn.w	r2, #2
 8005204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fb90 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fb82 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fb93 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b04      	cmp	r3, #4
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b04      	cmp	r3, #4
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0204 	mvn.w	r2, #4
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fb66 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fb58 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fb69 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b08      	cmp	r3, #8
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0208 	mvn.w	r2, #8
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2204      	movs	r2, #4
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fb3c 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fb2e 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fb3f 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d122      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0210 	mvn.w	r2, #16
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2208      	movs	r2, #8
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fb12 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fb04 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fb15 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d10e      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d107      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0201 	mvn.w	r2, #1
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fc f84c 	bl	80013f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005366:	2b80      	cmp	r3, #128	; 0x80
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005374:	2b80      	cmp	r3, #128	; 0x80
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f001 fb22 	bl	80069cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005396:	d10e      	bne.n	80053b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a2:	2b80      	cmp	r3, #128	; 0x80
 80053a4:	d107      	bne.n	80053b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f001 fb15 	bl	80069e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d10e      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	d107      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fac3 	bl	8005968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d10e      	bne.n	800540e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d107      	bne.n	800540e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f06f 0220 	mvn.w	r2, #32
 8005406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f001 fad5 	bl	80069b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800541c:	d10f      	bne.n	800543e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800542c:	d107      	bne.n	800543e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 fadb 	bl	80069f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800544c:	d10f      	bne.n	800546e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005458:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800545c:	d107      	bne.n	800546e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f001 facd 	bl	8006a08 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800547c:	d10f      	bne.n	800549e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800548c:	d107      	bne.n	800549e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f001 fabf 	bl	8006a1c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054ac:	d10f      	bne.n	80054ce <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054bc:	d107      	bne.n	80054ce <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80054c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f001 fab1 	bl	8006a30 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e0ff      	b.n	80056f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b14      	cmp	r3, #20
 8005502:	f200 80f0 	bhi.w	80056e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005561 	.word	0x08005561
 8005510:	080056e7 	.word	0x080056e7
 8005514:	080056e7 	.word	0x080056e7
 8005518:	080056e7 	.word	0x080056e7
 800551c:	080055a1 	.word	0x080055a1
 8005520:	080056e7 	.word	0x080056e7
 8005524:	080056e7 	.word	0x080056e7
 8005528:	080056e7 	.word	0x080056e7
 800552c:	080055e3 	.word	0x080055e3
 8005530:	080056e7 	.word	0x080056e7
 8005534:	080056e7 	.word	0x080056e7
 8005538:	080056e7 	.word	0x080056e7
 800553c:	08005623 	.word	0x08005623
 8005540:	080056e7 	.word	0x080056e7
 8005544:	080056e7 	.word	0x080056e7
 8005548:	080056e7 	.word	0x080056e7
 800554c:	08005665 	.word	0x08005665
 8005550:	080056e7 	.word	0x080056e7
 8005554:	080056e7 	.word	0x080056e7
 8005558:	080056e7 	.word	0x080056e7
 800555c:	080056a5 	.word	0x080056a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fab0 	bl	8005acc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0208 	orr.w	r2, r2, #8
 800557a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0204 	bic.w	r2, r2, #4
 800558a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6999      	ldr	r1, [r3, #24]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	619a      	str	r2, [r3, #24]
      break;
 800559e:	e0a5      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fb2a 	bl	8005c00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699a      	ldr	r2, [r3, #24]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6999      	ldr	r1, [r3, #24]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	021a      	lsls	r2, r3, #8
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	619a      	str	r2, [r3, #24]
      break;
 80055e0:	e084      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fb9d 	bl	8005d28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69da      	ldr	r2, [r3, #28]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0208 	orr.w	r2, r2, #8
 80055fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0204 	bic.w	r2, r2, #4
 800560c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69d9      	ldr	r1, [r3, #28]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	61da      	str	r2, [r3, #28]
      break;
 8005620:	e064      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fc0f 	bl	8005e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69da      	ldr	r2, [r3, #28]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800563c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69d9      	ldr	r1, [r3, #28]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	021a      	lsls	r2, r3, #8
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	61da      	str	r2, [r3, #28]
      break;
 8005662:	e043      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fc82 	bl	8005f74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0208 	orr.w	r2, r2, #8
 800567e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0204 	bic.w	r2, r2, #4
 800568e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80056a2:	e023      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fccc 	bl	8006048 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	021a      	lsls	r2, r3, #8
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80056e4:	e002      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	75fb      	strb	r3, [r7, #23]
      break;
 80056ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop

08005700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_TIM_ConfigClockSource+0x1c>
 8005718:	2302      	movs	r3, #2
 800571a:	e0f6      	b.n	800590a <HAL_TIM_ConfigClockSource+0x20a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800573a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800573e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005746:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a6f      	ldr	r2, [pc, #444]	; (8005914 <HAL_TIM_ConfigClockSource+0x214>)
 8005756:	4293      	cmp	r3, r2
 8005758:	f000 80c1 	beq.w	80058de <HAL_TIM_ConfigClockSource+0x1de>
 800575c:	4a6d      	ldr	r2, [pc, #436]	; (8005914 <HAL_TIM_ConfigClockSource+0x214>)
 800575e:	4293      	cmp	r3, r2
 8005760:	f200 80c6 	bhi.w	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005764:	4a6c      	ldr	r2, [pc, #432]	; (8005918 <HAL_TIM_ConfigClockSource+0x218>)
 8005766:	4293      	cmp	r3, r2
 8005768:	f000 80b9 	beq.w	80058de <HAL_TIM_ConfigClockSource+0x1de>
 800576c:	4a6a      	ldr	r2, [pc, #424]	; (8005918 <HAL_TIM_ConfigClockSource+0x218>)
 800576e:	4293      	cmp	r3, r2
 8005770:	f200 80be 	bhi.w	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005774:	4a69      	ldr	r2, [pc, #420]	; (800591c <HAL_TIM_ConfigClockSource+0x21c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	f000 80b1 	beq.w	80058de <HAL_TIM_ConfigClockSource+0x1de>
 800577c:	4a67      	ldr	r2, [pc, #412]	; (800591c <HAL_TIM_ConfigClockSource+0x21c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	f200 80b6 	bhi.w	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005784:	4a66      	ldr	r2, [pc, #408]	; (8005920 <HAL_TIM_ConfigClockSource+0x220>)
 8005786:	4293      	cmp	r3, r2
 8005788:	f000 80a9 	beq.w	80058de <HAL_TIM_ConfigClockSource+0x1de>
 800578c:	4a64      	ldr	r2, [pc, #400]	; (8005920 <HAL_TIM_ConfigClockSource+0x220>)
 800578e:	4293      	cmp	r3, r2
 8005790:	f200 80ae 	bhi.w	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005794:	4a63      	ldr	r2, [pc, #396]	; (8005924 <HAL_TIM_ConfigClockSource+0x224>)
 8005796:	4293      	cmp	r3, r2
 8005798:	f000 80a1 	beq.w	80058de <HAL_TIM_ConfigClockSource+0x1de>
 800579c:	4a61      	ldr	r2, [pc, #388]	; (8005924 <HAL_TIM_ConfigClockSource+0x224>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	f200 80a6 	bhi.w	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80057a4:	4a60      	ldr	r2, [pc, #384]	; (8005928 <HAL_TIM_ConfigClockSource+0x228>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	f000 8099 	beq.w	80058de <HAL_TIM_ConfigClockSource+0x1de>
 80057ac:	4a5e      	ldr	r2, [pc, #376]	; (8005928 <HAL_TIM_ConfigClockSource+0x228>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	f200 809e 	bhi.w	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80057b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057b8:	f000 8091 	beq.w	80058de <HAL_TIM_ConfigClockSource+0x1de>
 80057bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057c0:	f200 8096 	bhi.w	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80057c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c8:	f000 8089 	beq.w	80058de <HAL_TIM_ConfigClockSource+0x1de>
 80057cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d0:	f200 808e 	bhi.w	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80057d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d8:	d03e      	beq.n	8005858 <HAL_TIM_ConfigClockSource+0x158>
 80057da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057de:	f200 8087 	bhi.w	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	f000 8086 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1f6>
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ee:	d87f      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80057f0:	2b70      	cmp	r3, #112	; 0x70
 80057f2:	d01a      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x12a>
 80057f4:	2b70      	cmp	r3, #112	; 0x70
 80057f6:	d87b      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80057f8:	2b60      	cmp	r3, #96	; 0x60
 80057fa:	d050      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x19e>
 80057fc:	2b60      	cmp	r3, #96	; 0x60
 80057fe:	d877      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005800:	2b50      	cmp	r3, #80	; 0x50
 8005802:	d03c      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x17e>
 8005804:	2b50      	cmp	r3, #80	; 0x50
 8005806:	d873      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d058      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x1be>
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d86f      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005810:	2b30      	cmp	r3, #48	; 0x30
 8005812:	d064      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x1de>
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d86b      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005818:	2b20      	cmp	r3, #32
 800581a:	d060      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x1de>
 800581c:	2b20      	cmp	r3, #32
 800581e:	d867      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d05c      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x1de>
 8005824:	2b10      	cmp	r3, #16
 8005826:	d05a      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x1de>
 8005828:	e062      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6899      	ldr	r1, [r3, #8]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f000 fd61 	bl	8006300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800584c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	609a      	str	r2, [r3, #8]
      break;
 8005856:	e04f      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	6899      	ldr	r1, [r3, #8]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f000 fd4a 	bl	8006300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800587a:	609a      	str	r2, [r3, #8]
      break;
 800587c:	e03c      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	461a      	mov	r2, r3
 800588c:	f000 fcbc 	bl	8006208 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2150      	movs	r1, #80	; 0x50
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fd15 	bl	80062c6 <TIM_ITRx_SetConfig>
      break;
 800589c:	e02c      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6859      	ldr	r1, [r3, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f000 fcdb 	bl	8006266 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2160      	movs	r1, #96	; 0x60
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fd05 	bl	80062c6 <TIM_ITRx_SetConfig>
      break;
 80058bc:	e01c      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6859      	ldr	r1, [r3, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f000 fc9c 	bl	8006208 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2140      	movs	r1, #64	; 0x40
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fcf5 	bl	80062c6 <TIM_ITRx_SetConfig>
      break;
 80058dc:	e00c      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4619      	mov	r1, r3
 80058e8:	4610      	mov	r0, r2
 80058ea:	f000 fcec 	bl	80062c6 <TIM_ITRx_SetConfig>
      break;
 80058ee:	e003      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
      break;
 80058f4:	e000      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80058f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	00100070 	.word	0x00100070
 8005918:	00100060 	.word	0x00100060
 800591c:	00100050 	.word	0x00100050
 8005920:	00100040 	.word	0x00100040
 8005924:	00100030 	.word	0x00100030
 8005928:	00100020 	.word	0x00100020

0800592c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a46      	ldr	r2, [pc, #280]	; (8005aa8 <TIM_Base_SetConfig+0x12c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d017      	beq.n	80059c4 <TIM_Base_SetConfig+0x48>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599a:	d013      	beq.n	80059c4 <TIM_Base_SetConfig+0x48>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a43      	ldr	r2, [pc, #268]	; (8005aac <TIM_Base_SetConfig+0x130>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00f      	beq.n	80059c4 <TIM_Base_SetConfig+0x48>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a42      	ldr	r2, [pc, #264]	; (8005ab0 <TIM_Base_SetConfig+0x134>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00b      	beq.n	80059c4 <TIM_Base_SetConfig+0x48>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a41      	ldr	r2, [pc, #260]	; (8005ab4 <TIM_Base_SetConfig+0x138>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d007      	beq.n	80059c4 <TIM_Base_SetConfig+0x48>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a40      	ldr	r2, [pc, #256]	; (8005ab8 <TIM_Base_SetConfig+0x13c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_Base_SetConfig+0x48>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a3f      	ldr	r2, [pc, #252]	; (8005abc <TIM_Base_SetConfig+0x140>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d108      	bne.n	80059d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a33      	ldr	r2, [pc, #204]	; (8005aa8 <TIM_Base_SetConfig+0x12c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d023      	beq.n	8005a26 <TIM_Base_SetConfig+0xaa>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e4:	d01f      	beq.n	8005a26 <TIM_Base_SetConfig+0xaa>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a30      	ldr	r2, [pc, #192]	; (8005aac <TIM_Base_SetConfig+0x130>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01b      	beq.n	8005a26 <TIM_Base_SetConfig+0xaa>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2f      	ldr	r2, [pc, #188]	; (8005ab0 <TIM_Base_SetConfig+0x134>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d017      	beq.n	8005a26 <TIM_Base_SetConfig+0xaa>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2e      	ldr	r2, [pc, #184]	; (8005ab4 <TIM_Base_SetConfig+0x138>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <TIM_Base_SetConfig+0xaa>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a2d      	ldr	r2, [pc, #180]	; (8005ab8 <TIM_Base_SetConfig+0x13c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00f      	beq.n	8005a26 <TIM_Base_SetConfig+0xaa>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2d      	ldr	r2, [pc, #180]	; (8005ac0 <TIM_Base_SetConfig+0x144>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00b      	beq.n	8005a26 <TIM_Base_SetConfig+0xaa>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2c      	ldr	r2, [pc, #176]	; (8005ac4 <TIM_Base_SetConfig+0x148>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d007      	beq.n	8005a26 <TIM_Base_SetConfig+0xaa>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2b      	ldr	r2, [pc, #172]	; (8005ac8 <TIM_Base_SetConfig+0x14c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d003      	beq.n	8005a26 <TIM_Base_SetConfig+0xaa>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a26      	ldr	r2, [pc, #152]	; (8005abc <TIM_Base_SetConfig+0x140>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d108      	bne.n	8005a38 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a12      	ldr	r2, [pc, #72]	; (8005aa8 <TIM_Base_SetConfig+0x12c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d013      	beq.n	8005a8c <TIM_Base_SetConfig+0x110>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <TIM_Base_SetConfig+0x13c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00f      	beq.n	8005a8c <TIM_Base_SetConfig+0x110>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a14      	ldr	r2, [pc, #80]	; (8005ac0 <TIM_Base_SetConfig+0x144>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00b      	beq.n	8005a8c <TIM_Base_SetConfig+0x110>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a13      	ldr	r2, [pc, #76]	; (8005ac4 <TIM_Base_SetConfig+0x148>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d007      	beq.n	8005a8c <TIM_Base_SetConfig+0x110>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a12      	ldr	r2, [pc, #72]	; (8005ac8 <TIM_Base_SetConfig+0x14c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d003      	beq.n	8005a8c <TIM_Base_SetConfig+0x110>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a0d      	ldr	r2, [pc, #52]	; (8005abc <TIM_Base_SetConfig+0x140>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d103      	bne.n	8005a94 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	691a      	ldr	r2, [r3, #16]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	615a      	str	r2, [r3, #20]
}
 8005a9a:	bf00      	nop
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40000400 	.word	0x40000400
 8005ab0:	40000800 	.word	0x40000800
 8005ab4:	40000c00 	.word	0x40000c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40015000 	.word	0x40015000
 8005ac0:	40014000 	.word	0x40014000
 8005ac4:	40014400 	.word	0x40014400
 8005ac8:	40014800 	.word	0x40014800

08005acc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f023 0201 	bic.w	r2, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0303 	bic.w	r3, r3, #3
 8005b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f023 0302 	bic.w	r3, r3, #2
 8005b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a30      	ldr	r2, [pc, #192]	; (8005be8 <TIM_OC1_SetConfig+0x11c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d013      	beq.n	8005b54 <TIM_OC1_SetConfig+0x88>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a2f      	ldr	r2, [pc, #188]	; (8005bec <TIM_OC1_SetConfig+0x120>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00f      	beq.n	8005b54 <TIM_OC1_SetConfig+0x88>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a2e      	ldr	r2, [pc, #184]	; (8005bf0 <TIM_OC1_SetConfig+0x124>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00b      	beq.n	8005b54 <TIM_OC1_SetConfig+0x88>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a2d      	ldr	r2, [pc, #180]	; (8005bf4 <TIM_OC1_SetConfig+0x128>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d007      	beq.n	8005b54 <TIM_OC1_SetConfig+0x88>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a2c      	ldr	r2, [pc, #176]	; (8005bf8 <TIM_OC1_SetConfig+0x12c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_OC1_SetConfig+0x88>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a2b      	ldr	r2, [pc, #172]	; (8005bfc <TIM_OC1_SetConfig+0x130>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d10c      	bne.n	8005b6e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f023 0308 	bic.w	r3, r3, #8
 8005b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f023 0304 	bic.w	r3, r3, #4
 8005b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a1d      	ldr	r2, [pc, #116]	; (8005be8 <TIM_OC1_SetConfig+0x11c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <TIM_OC1_SetConfig+0xd2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <TIM_OC1_SetConfig+0x120>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00f      	beq.n	8005b9e <TIM_OC1_SetConfig+0xd2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <TIM_OC1_SetConfig+0x124>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00b      	beq.n	8005b9e <TIM_OC1_SetConfig+0xd2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a1a      	ldr	r2, [pc, #104]	; (8005bf4 <TIM_OC1_SetConfig+0x128>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <TIM_OC1_SetConfig+0xd2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a19      	ldr	r2, [pc, #100]	; (8005bf8 <TIM_OC1_SetConfig+0x12c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_OC1_SetConfig+0xd2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a18      	ldr	r2, [pc, #96]	; (8005bfc <TIM_OC1_SetConfig+0x130>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d111      	bne.n	8005bc2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	621a      	str	r2, [r3, #32]
}
 8005bdc:	bf00      	nop
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	40012c00 	.word	0x40012c00
 8005bec:	40013400 	.word	0x40013400
 8005bf0:	40014000 	.word	0x40014000
 8005bf4:	40014400 	.word	0x40014400
 8005bf8:	40014800 	.word	0x40014800
 8005bfc:	40015000 	.word	0x40015000

08005c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f023 0210 	bic.w	r2, r3, #16
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0320 	bic.w	r3, r3, #32
 8005c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a2c      	ldr	r2, [pc, #176]	; (8005d10 <TIM_OC2_SetConfig+0x110>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d007      	beq.n	8005c74 <TIM_OC2_SetConfig+0x74>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a2b      	ldr	r2, [pc, #172]	; (8005d14 <TIM_OC2_SetConfig+0x114>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d003      	beq.n	8005c74 <TIM_OC2_SetConfig+0x74>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a2a      	ldr	r2, [pc, #168]	; (8005d18 <TIM_OC2_SetConfig+0x118>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d10d      	bne.n	8005c90 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a1f      	ldr	r2, [pc, #124]	; (8005d10 <TIM_OC2_SetConfig+0x110>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d013      	beq.n	8005cc0 <TIM_OC2_SetConfig+0xc0>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a1e      	ldr	r2, [pc, #120]	; (8005d14 <TIM_OC2_SetConfig+0x114>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00f      	beq.n	8005cc0 <TIM_OC2_SetConfig+0xc0>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a1e      	ldr	r2, [pc, #120]	; (8005d1c <TIM_OC2_SetConfig+0x11c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00b      	beq.n	8005cc0 <TIM_OC2_SetConfig+0xc0>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a1d      	ldr	r2, [pc, #116]	; (8005d20 <TIM_OC2_SetConfig+0x120>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <TIM_OC2_SetConfig+0xc0>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a1c      	ldr	r2, [pc, #112]	; (8005d24 <TIM_OC2_SetConfig+0x124>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_OC2_SetConfig+0xc0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <TIM_OC2_SetConfig+0x118>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d113      	bne.n	8005ce8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40012c00 	.word	0x40012c00
 8005d14:	40013400 	.word	0x40013400
 8005d18:	40015000 	.word	0x40015000
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40014400 	.word	0x40014400
 8005d24:	40014800 	.word	0x40014800

08005d28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0303 	bic.w	r3, r3, #3
 8005d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	021b      	lsls	r3, r3, #8
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2b      	ldr	r2, [pc, #172]	; (8005e34 <TIM_OC3_SetConfig+0x10c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d007      	beq.n	8005d9a <TIM_OC3_SetConfig+0x72>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a2a      	ldr	r2, [pc, #168]	; (8005e38 <TIM_OC3_SetConfig+0x110>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d003      	beq.n	8005d9a <TIM_OC3_SetConfig+0x72>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a29      	ldr	r2, [pc, #164]	; (8005e3c <TIM_OC3_SetConfig+0x114>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d10d      	bne.n	8005db6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005da0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1e      	ldr	r2, [pc, #120]	; (8005e34 <TIM_OC3_SetConfig+0x10c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <TIM_OC3_SetConfig+0xbe>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1d      	ldr	r2, [pc, #116]	; (8005e38 <TIM_OC3_SetConfig+0x110>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00f      	beq.n	8005de6 <TIM_OC3_SetConfig+0xbe>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1d      	ldr	r2, [pc, #116]	; (8005e40 <TIM_OC3_SetConfig+0x118>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00b      	beq.n	8005de6 <TIM_OC3_SetConfig+0xbe>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1c      	ldr	r2, [pc, #112]	; (8005e44 <TIM_OC3_SetConfig+0x11c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d007      	beq.n	8005de6 <TIM_OC3_SetConfig+0xbe>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1b      	ldr	r2, [pc, #108]	; (8005e48 <TIM_OC3_SetConfig+0x120>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_OC3_SetConfig+0xbe>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a16      	ldr	r2, [pc, #88]	; (8005e3c <TIM_OC3_SetConfig+0x114>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d113      	bne.n	8005e0e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	40013400 	.word	0x40013400
 8005e3c:	40015000 	.word	0x40015000
 8005e40:	40014000 	.word	0x40014000
 8005e44:	40014400 	.word	0x40014400
 8005e48:	40014800 	.word	0x40014800

08005e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	031b      	lsls	r3, r3, #12
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a2c      	ldr	r2, [pc, #176]	; (8005f5c <TIM_OC4_SetConfig+0x110>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d007      	beq.n	8005ec0 <TIM_OC4_SetConfig+0x74>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a2b      	ldr	r2, [pc, #172]	; (8005f60 <TIM_OC4_SetConfig+0x114>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_OC4_SetConfig+0x74>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a2a      	ldr	r2, [pc, #168]	; (8005f64 <TIM_OC4_SetConfig+0x118>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d10d      	bne.n	8005edc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	031b      	lsls	r3, r3, #12
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a1f      	ldr	r2, [pc, #124]	; (8005f5c <TIM_OC4_SetConfig+0x110>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d013      	beq.n	8005f0c <TIM_OC4_SetConfig+0xc0>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a1e      	ldr	r2, [pc, #120]	; (8005f60 <TIM_OC4_SetConfig+0x114>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00f      	beq.n	8005f0c <TIM_OC4_SetConfig+0xc0>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a1e      	ldr	r2, [pc, #120]	; (8005f68 <TIM_OC4_SetConfig+0x11c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00b      	beq.n	8005f0c <TIM_OC4_SetConfig+0xc0>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a1d      	ldr	r2, [pc, #116]	; (8005f6c <TIM_OC4_SetConfig+0x120>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d007      	beq.n	8005f0c <TIM_OC4_SetConfig+0xc0>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a1c      	ldr	r2, [pc, #112]	; (8005f70 <TIM_OC4_SetConfig+0x124>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_OC4_SetConfig+0xc0>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a17      	ldr	r2, [pc, #92]	; (8005f64 <TIM_OC4_SetConfig+0x118>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d113      	bne.n	8005f34 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f12:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f1a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	019b      	lsls	r3, r3, #6
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	019b      	lsls	r3, r3, #6
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40013400 	.word	0x40013400
 8005f64:	40015000 	.word	0x40015000
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40014400 	.word	0x40014400
 8005f70:	40014800 	.word	0x40014800

08005f74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	041b      	lsls	r3, r3, #16
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a19      	ldr	r2, [pc, #100]	; (8006030 <TIM_OC5_SetConfig+0xbc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <TIM_OC5_SetConfig+0x82>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a18      	ldr	r2, [pc, #96]	; (8006034 <TIM_OC5_SetConfig+0xc0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00f      	beq.n	8005ff6 <TIM_OC5_SetConfig+0x82>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a17      	ldr	r2, [pc, #92]	; (8006038 <TIM_OC5_SetConfig+0xc4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00b      	beq.n	8005ff6 <TIM_OC5_SetConfig+0x82>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a16      	ldr	r2, [pc, #88]	; (800603c <TIM_OC5_SetConfig+0xc8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d007      	beq.n	8005ff6 <TIM_OC5_SetConfig+0x82>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a15      	ldr	r2, [pc, #84]	; (8006040 <TIM_OC5_SetConfig+0xcc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d003      	beq.n	8005ff6 <TIM_OC5_SetConfig+0x82>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a14      	ldr	r2, [pc, #80]	; (8006044 <TIM_OC5_SetConfig+0xd0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d109      	bne.n	800600a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	621a      	str	r2, [r3, #32]
}
 8006024:	bf00      	nop
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	40012c00 	.word	0x40012c00
 8006034:	40013400 	.word	0x40013400
 8006038:	40014000 	.word	0x40014000
 800603c:	40014400 	.word	0x40014400
 8006040:	40014800 	.word	0x40014800
 8006044:	40015000 	.word	0x40015000

08006048 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800608e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	051b      	lsls	r3, r3, #20
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a1a      	ldr	r2, [pc, #104]	; (8006108 <TIM_OC6_SetConfig+0xc0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <TIM_OC6_SetConfig+0x84>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a19      	ldr	r2, [pc, #100]	; (800610c <TIM_OC6_SetConfig+0xc4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00f      	beq.n	80060cc <TIM_OC6_SetConfig+0x84>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a18      	ldr	r2, [pc, #96]	; (8006110 <TIM_OC6_SetConfig+0xc8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00b      	beq.n	80060cc <TIM_OC6_SetConfig+0x84>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a17      	ldr	r2, [pc, #92]	; (8006114 <TIM_OC6_SetConfig+0xcc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d007      	beq.n	80060cc <TIM_OC6_SetConfig+0x84>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a16      	ldr	r2, [pc, #88]	; (8006118 <TIM_OC6_SetConfig+0xd0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d003      	beq.n	80060cc <TIM_OC6_SetConfig+0x84>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a15      	ldr	r2, [pc, #84]	; (800611c <TIM_OC6_SetConfig+0xd4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d109      	bne.n	80060e0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	029b      	lsls	r3, r3, #10
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	621a      	str	r2, [r3, #32]
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40013400 	.word	0x40013400
 8006110:	40014000 	.word	0x40014000
 8006114:	40014400 	.word	0x40014400
 8006118:	40014800 	.word	0x40014800
 800611c:	40015000 	.word	0x40015000

08006120 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f023 0201 	bic.w	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4a28      	ldr	r2, [pc, #160]	; (80061ec <TIM_TI1_SetConfig+0xcc>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d01b      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006154:	d017      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4a25      	ldr	r2, [pc, #148]	; (80061f0 <TIM_TI1_SetConfig+0xd0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d013      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a24      	ldr	r2, [pc, #144]	; (80061f4 <TIM_TI1_SetConfig+0xd4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d00f      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a23      	ldr	r2, [pc, #140]	; (80061f8 <TIM_TI1_SetConfig+0xd8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00b      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a22      	ldr	r2, [pc, #136]	; (80061fc <TIM_TI1_SetConfig+0xdc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d007      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4a21      	ldr	r2, [pc, #132]	; (8006200 <TIM_TI1_SetConfig+0xe0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4a20      	ldr	r2, [pc, #128]	; (8006204 <TIM_TI1_SetConfig+0xe4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d101      	bne.n	800618a <TIM_TI1_SetConfig+0x6a>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <TIM_TI1_SetConfig+0x6c>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e003      	b.n	80061aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f043 0301 	orr.w	r3, r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f023 030a 	bic.w	r3, r3, #10
 80061c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f003 030a 	and.w	r3, r3, #10
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40000800 	.word	0x40000800
 80061f8:	40000c00 	.word	0x40000c00
 80061fc:	40013400 	.word	0x40013400
 8006200:	40014000 	.word	0x40014000
 8006204:	40015000 	.word	0x40015000

08006208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	f023 0201 	bic.w	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f023 030a 	bic.w	r3, r3, #10
 8006244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006266:	b480      	push	{r7}
 8006268:	b087      	sub	sp, #28
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f023 0210 	bic.w	r2, r3, #16
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006290:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	031b      	lsls	r3, r3, #12
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	621a      	str	r2, [r3, #32]
}
 80062ba:	bf00      	nop
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b085      	sub	sp, #20
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80062dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f043 0307 	orr.w	r3, r3, #7
 80062ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	609a      	str	r2, [r3, #8]
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800631a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	021a      	lsls	r2, r3, #8
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	431a      	orrs	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4313      	orrs	r3, r2
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	609a      	str	r2, [r3, #8]
}
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 031f 	and.w	r3, r3, #31
 8006352:	2201      	movs	r2, #1
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a1a      	ldr	r2, [r3, #32]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	43db      	mvns	r3, r3
 8006362:	401a      	ands	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a1a      	ldr	r2, [r3, #32]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f003 031f 	and.w	r3, r3, #31
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	fa01 f303 	lsl.w	r3, r1, r3
 8006378:	431a      	orrs	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	bf00      	nop
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b08a      	sub	sp, #40	; 0x28
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e0a0      	b.n	80064e0 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fb fb2c 	bl	8001a10 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4619      	mov	r1, r3
 80063ca:	4610      	mov	r0, r2
 80063cc:	f7ff fad6 	bl	800597c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	6819      	ldr	r1, [r3, #0]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2203      	movs	r2, #3
 80063de:	f7ff fe9f 	bl	8006120 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	699a      	ldr	r2, [r3, #24]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 020c 	bic.w	r2, r2, #12
 80063f0:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6999      	ldr	r1, [r3, #24]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006412:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6812      	ldr	r2, [r2, #0]
 800641e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006426:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006436:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006446:	f023 0307 	bic.w	r3, r3, #7
 800644a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0204 	orr.w	r2, r2, #4
 800645a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800645c:	2300      	movs	r3, #0
 800645e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006460:	2300      	movs	r3, #0
 8006462:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006464:	2370      	movs	r3, #112	; 0x70
 8006466:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006468:	2300      	movs	r3, #0
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800646c:	2300      	movs	r3, #0
 800646e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f107 020c 	add.w	r2, r7, #12
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fbbb 	bl	8005c00 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6812      	ldr	r2, [r2, #0]
 8006494:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80064ac:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3728      	adds	r7, #40	; 0x28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d109      	bne.n	800650c <HAL_TIMEx_PWMN_Start+0x24>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	bf14      	ite	ne
 8006504:	2301      	movne	r3, #1
 8006506:	2300      	moveq	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	e022      	b.n	8006552 <HAL_TIMEx_PWMN_Start+0x6a>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b04      	cmp	r3, #4
 8006510:	d109      	bne.n	8006526 <HAL_TIMEx_PWMN_Start+0x3e>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b01      	cmp	r3, #1
 800651c:	bf14      	ite	ne
 800651e:	2301      	movne	r3, #1
 8006520:	2300      	moveq	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	e015      	b.n	8006552 <HAL_TIMEx_PWMN_Start+0x6a>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b08      	cmp	r3, #8
 800652a:	d109      	bne.n	8006540 <HAL_TIMEx_PWMN_Start+0x58>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b01      	cmp	r3, #1
 8006536:	bf14      	ite	ne
 8006538:	2301      	movne	r3, #1
 800653a:	2300      	moveq	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	e008      	b.n	8006552 <HAL_TIMEx_PWMN_Start+0x6a>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	bf14      	ite	ne
 800654c:	2301      	movne	r3, #1
 800654e:	2300      	moveq	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e073      	b.n	8006642 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d104      	bne.n	800656a <HAL_TIMEx_PWMN_Start+0x82>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006568:	e013      	b.n	8006592 <HAL_TIMEx_PWMN_Start+0xaa>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b04      	cmp	r3, #4
 800656e:	d104      	bne.n	800657a <HAL_TIMEx_PWMN_Start+0x92>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006578:	e00b      	b.n	8006592 <HAL_TIMEx_PWMN_Start+0xaa>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b08      	cmp	r3, #8
 800657e:	d104      	bne.n	800658a <HAL_TIMEx_PWMN_Start+0xa2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006588:	e003      	b.n	8006592 <HAL_TIMEx_PWMN_Start+0xaa>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2202      	movs	r2, #2
 800658e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2204      	movs	r2, #4
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fa52 	bl	8006a44 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a25      	ldr	r2, [pc, #148]	; (800664c <HAL_TIMEx_PWMN_Start+0x164>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d022      	beq.n	8006600 <HAL_TIMEx_PWMN_Start+0x118>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c2:	d01d      	beq.n	8006600 <HAL_TIMEx_PWMN_Start+0x118>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a21      	ldr	r2, [pc, #132]	; (8006650 <HAL_TIMEx_PWMN_Start+0x168>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d018      	beq.n	8006600 <HAL_TIMEx_PWMN_Start+0x118>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a20      	ldr	r2, [pc, #128]	; (8006654 <HAL_TIMEx_PWMN_Start+0x16c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d013      	beq.n	8006600 <HAL_TIMEx_PWMN_Start+0x118>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <HAL_TIMEx_PWMN_Start+0x170>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00e      	beq.n	8006600 <HAL_TIMEx_PWMN_Start+0x118>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1d      	ldr	r2, [pc, #116]	; (800665c <HAL_TIMEx_PWMN_Start+0x174>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d009      	beq.n	8006600 <HAL_TIMEx_PWMN_Start+0x118>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1b      	ldr	r2, [pc, #108]	; (8006660 <HAL_TIMEx_PWMN_Start+0x178>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_TIMEx_PWMN_Start+0x118>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a1a      	ldr	r2, [pc, #104]	; (8006664 <HAL_TIMEx_PWMN_Start+0x17c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d115      	bne.n	800662c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	4b18      	ldr	r3, [pc, #96]	; (8006668 <HAL_TIMEx_PWMN_Start+0x180>)
 8006608:	4013      	ands	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b06      	cmp	r3, #6
 8006610:	d015      	beq.n	800663e <HAL_TIMEx_PWMN_Start+0x156>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006618:	d011      	beq.n	800663e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0201 	orr.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662a:	e008      	b.n	800663e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e000      	b.n	8006640 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40012c00 	.word	0x40012c00
 8006650:	40000400 	.word	0x40000400
 8006654:	40000800 	.word	0x40000800
 8006658:	40000c00 	.word	0x40000c00
 800665c:	40013400 	.word	0x40013400
 8006660:	40014000 	.word	0x40014000
 8006664:	40015000 	.word	0x40015000
 8006668:	00010007 	.word	0x00010007

0800666c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 f9e0 	bl	8006a44 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6a1a      	ldr	r2, [r3, #32]
 800668a:	f241 1311 	movw	r3, #4369	; 0x1111
 800668e:	4013      	ands	r3, r2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10f      	bne.n	80066b4 <HAL_TIMEx_PWMN_Stop+0x48>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6a1a      	ldr	r2, [r3, #32]
 800669a:	f244 4344 	movw	r3, #17476	; 0x4444
 800669e:	4013      	ands	r3, r2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d107      	bne.n	80066b4 <HAL_TIMEx_PWMN_Stop+0x48>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6a1a      	ldr	r2, [r3, #32]
 80066ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80066be:	4013      	ands	r3, r2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10f      	bne.n	80066e4 <HAL_TIMEx_PWMN_Stop+0x78>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6a1a      	ldr	r2, [r3, #32]
 80066ca:	f244 4344 	movw	r3, #17476	; 0x4444
 80066ce:	4013      	ands	r3, r2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d107      	bne.n	80066e4 <HAL_TIMEx_PWMN_Stop+0x78>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0201 	bic.w	r2, r2, #1
 80066e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d104      	bne.n	80066f4 <HAL_TIMEx_PWMN_Stop+0x88>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066f2:	e013      	b.n	800671c <HAL_TIMEx_PWMN_Stop+0xb0>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d104      	bne.n	8006704 <HAL_TIMEx_PWMN_Stop+0x98>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006702:	e00b      	b.n	800671c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b08      	cmp	r3, #8
 8006708:	d104      	bne.n	8006714 <HAL_TIMEx_PWMN_Stop+0xa8>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006712:	e003      	b.n	800671c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800673c:	2302      	movs	r3, #2
 800673e:	e074      	b.n	800682a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a34      	ldr	r2, [pc, #208]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d009      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a33      	ldr	r2, [pc, #204]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d004      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a31      	ldr	r2, [pc, #196]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d108      	bne.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006784:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a21      	ldr	r2, [pc, #132]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d022      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c0:	d01d      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1f      	ldr	r2, [pc, #124]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d018      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a1d      	ldr	r2, [pc, #116]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d013      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a1c      	ldr	r2, [pc, #112]	; (800684c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00e      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a15      	ldr	r2, [pc, #84]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d009      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a18      	ldr	r2, [pc, #96]	; (8006850 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d004      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a11      	ldr	r2, [pc, #68]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d10c      	bne.n	8006818 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	4313      	orrs	r3, r2
 800680e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40012c00 	.word	0x40012c00
 800683c:	40013400 	.word	0x40013400
 8006840:	40015000 	.word	0x40015000
 8006844:	40000400 	.word	0x40000400
 8006848:	40000800 	.word	0x40000800
 800684c:	40000c00 	.word	0x40000c00
 8006850:	40014000 	.word	0x40014000

08006854 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800686c:	2302      	movs	r3, #2
 800686e:	e096      	b.n	800699e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	041b      	lsls	r3, r3, #16
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a2f      	ldr	r2, [pc, #188]	; (80069ac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d009      	beq.n	8006908 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a2d      	ldr	r2, [pc, #180]	; (80069b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d004      	beq.n	8006908 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a2c      	ldr	r2, [pc, #176]	; (80069b4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d106      	bne.n	8006916 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a24      	ldr	r2, [pc, #144]	; (80069ac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d009      	beq.n	8006934 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a22      	ldr	r2, [pc, #136]	; (80069b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d004      	beq.n	8006934 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a21      	ldr	r2, [pc, #132]	; (80069b4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d12b      	bne.n	800698c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693e:	051b      	lsls	r3, r3, #20
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a11      	ldr	r2, [pc, #68]	; (80069ac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d009      	beq.n	800697e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a10      	ldr	r2, [pc, #64]	; (80069b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d004      	beq.n	800697e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a0e      	ldr	r2, [pc, #56]	; (80069b4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d106      	bne.n	800698c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40012c00 	.word	0x40012c00
 80069b0:	40013400 	.word	0x40013400
 80069b4:	40015000 	.word	0x40015000

080069b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	2204      	movs	r2, #4
 8006a58:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a1a      	ldr	r2, [r3, #32]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	43db      	mvns	r3, r3
 8006a66:	401a      	ands	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a1a      	ldr	r2, [r3, #32]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	621a      	str	r2, [r3, #32]
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b082      	sub	sp, #8
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e042      	b.n	8006b26 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fb f90e 	bl	8001cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2224      	movs	r2, #36	; 0x24
 8006abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0201 	bic.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fc51 	bl	8007378 <UART_SetConfig>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e022      	b.n	8006b26 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 ff41 	bl	8007970 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006afc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0201 	orr.w	r2, r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 ffc8 	bl	8007ab4 <UART_CheckIdleState>
 8006b24:	4603      	mov	r3, r0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b08a      	sub	sp, #40	; 0x28
 8006b32:	af02      	add	r7, sp, #8
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	603b      	str	r3, [r7, #0]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	f040 8083 	bne.w	8006c50 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <HAL_UART_Transmit+0x28>
 8006b50:	88fb      	ldrh	r3, [r7, #6]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e07b      	b.n	8006c52 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d101      	bne.n	8006b68 <HAL_UART_Transmit+0x3a>
 8006b64:	2302      	movs	r3, #2
 8006b66:	e074      	b.n	8006c52 <HAL_UART_Transmit+0x124>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2221      	movs	r2, #33	; 0x21
 8006b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b80:	f7fb fb6e 	bl	8002260 <HAL_GetTick>
 8006b84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	88fa      	ldrh	r2, [r7, #6]
 8006b8a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	88fa      	ldrh	r2, [r7, #6]
 8006b92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b9e:	d108      	bne.n	8006bb2 <HAL_UART_Transmit+0x84>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	e003      	b.n	8006bba <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006bc2:	e02c      	b.n	8006c1e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2180      	movs	r1, #128	; 0x80
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 ffbb 	bl	8007b4a <UART_WaitOnFlagUntilTimeout>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e039      	b.n	8006c52 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10b      	bne.n	8006bfc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	461a      	mov	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	3302      	adds	r3, #2
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	e007      	b.n	8006c0c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	781a      	ldrb	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1cc      	bne.n	8006bc4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2200      	movs	r2, #0
 8006c32:	2140      	movs	r1, #64	; 0x40
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 ff88 	bl	8007b4a <UART_WaitOnFlagUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e006      	b.n	8006c52 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e000      	b.n	8006c52 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006c50:	2302      	movs	r3, #2
  }
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3720      	adds	r7, #32
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08a      	sub	sp, #40	; 0x28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d142      	bne.n	8006cfa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_UART_Receive_IT+0x24>
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e03b      	b.n	8006cfc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d101      	bne.n	8006c92 <HAL_UART_Receive_IT+0x36>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e034      	b.n	8006cfc <HAL_UART_Receive_IT+0xa0>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a17      	ldr	r2, [pc, #92]	; (8006d04 <HAL_UART_Receive_IT+0xa8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d01f      	beq.n	8006cea <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d018      	beq.n	8006cea <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	623b      	str	r3, [r7, #32]
 8006cd8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	69f9      	ldr	r1, [r7, #28]
 8006cdc:	6a3a      	ldr	r2, [r7, #32]
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e6      	bne.n	8006cb8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	461a      	mov	r2, r3
 8006cee:	68b9      	ldr	r1, [r7, #8]
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 fff3 	bl	8007cdc <UART_Start_Receive_IT>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	e000      	b.n	8006cfc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006cfa:	2302      	movs	r3, #2
  }
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3728      	adds	r7, #40	; 0x28
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	40008000 	.word	0x40008000

08006d08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b0ba      	sub	sp, #232	; 0xe8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d32:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d36:	4013      	ands	r3, r2
 8006d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11b      	bne.n	8006d7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d48:	f003 0320 	and.w	r3, r3, #32
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d015      	beq.n	8006d7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 82d6 	beq.w	800731e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
      }
      return;
 8006d7a:	e2d0      	b.n	800731e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 811f 	beq.w	8006fc4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006d86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d8a:	4b8b      	ldr	r3, [pc, #556]	; (8006fb8 <HAL_UART_IRQHandler+0x2b0>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006d92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006d96:	4b89      	ldr	r3, [pc, #548]	; (8006fbc <HAL_UART_IRQHandler+0x2b4>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 8112 	beq.w	8006fc4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d011      	beq.n	8006dd0 <HAL_UART_IRQHandler+0xc8>
 8006dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00b      	beq.n	8006dd0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dc6:	f043 0201 	orr.w	r2, r3, #1
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d011      	beq.n	8006e00 <HAL_UART_IRQHandler+0xf8>
 8006ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2202      	movs	r2, #2
 8006dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df6:	f043 0204 	orr.w	r2, r3, #4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d011      	beq.n	8006e30 <HAL_UART_IRQHandler+0x128>
 8006e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e26:	f043 0202 	orr.w	r2, r3, #2
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d017      	beq.n	8006e6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d105      	bne.n	8006e54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006e48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006e4c:	4b5a      	ldr	r3, [pc, #360]	; (8006fb8 <HAL_UART_IRQHandler+0x2b0>)
 8006e4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00b      	beq.n	8006e6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2208      	movs	r2, #8
 8006e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e62:	f043 0208 	orr.w	r2, r3, #8
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d012      	beq.n	8006e9e <HAL_UART_IRQHandler+0x196>
 8006e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00c      	beq.n	8006e9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e94:	f043 0220 	orr.w	r2, r3, #32
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 823c 	beq.w	8007322 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d013      	beq.n	8006ede <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d105      	bne.n	8006ece <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d007      	beq.n	8006ede <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef2:	2b40      	cmp	r3, #64	; 0x40
 8006ef4:	d005      	beq.n	8006f02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006efa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d04f      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 f814 	bl	8007f30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f12:	2b40      	cmp	r3, #64	; 0x40
 8006f14:	d141      	bne.n	8006f9a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1d9      	bne.n	8006f16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d013      	beq.n	8006f92 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f6e:	4a14      	ldr	r2, [pc, #80]	; (8006fc0 <HAL_UART_IRQHandler+0x2b8>)
 8006f70:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fc fbc1 	bl	80036fe <HAL_DMA_Abort_IT>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d017      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f90:	e00f      	b.n	8006fb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f9da 	bl	800734c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f98:	e00b      	b.n	8006fb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f9d6 	bl	800734c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa0:	e007      	b.n	8006fb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f9d2 	bl	800734c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006fb0:	e1b7      	b.n	8007322 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb2:	bf00      	nop
    return;
 8006fb4:	e1b5      	b.n	8007322 <HAL_UART_IRQHandler+0x61a>
 8006fb6:	bf00      	nop
 8006fb8:	10000001 	.word	0x10000001
 8006fbc:	04000120 	.word	0x04000120
 8006fc0:	08007ffd 	.word	0x08007ffd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	f040 814a 	bne.w	8007262 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd2:	f003 0310 	and.w	r3, r3, #16
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 8143 	beq.w	8007262 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 813c 	beq.w	8007262 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2210      	movs	r2, #16
 8006ff0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffc:	2b40      	cmp	r3, #64	; 0x40
 8006ffe:	f040 80b5 	bne.w	800716c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800700e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 8187 	beq.w	8007326 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800701e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007022:	429a      	cmp	r2, r3
 8007024:	f080 817f 	bcs.w	8007326 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800702e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	f040 8086 	bne.w	8007150 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800705c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800706e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007072:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800707a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1da      	bne.n	8007044 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3308      	adds	r3, #8
 8007094:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800709e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e1      	bne.n	800708e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3308      	adds	r3, #8
 80070d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e3      	bne.n	80070ca <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2220      	movs	r2, #32
 8007106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800711e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007120:	f023 0310 	bic.w	r3, r3, #16
 8007124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	461a      	mov	r2, r3
 800712e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007132:	65bb      	str	r3, [r7, #88]	; 0x58
 8007134:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007138:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e4      	bne.n	8007110 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800714a:	4618      	mov	r0, r3
 800714c:	f7fc fa7e 	bl	800364c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800715c:	b29b      	uxth	r3, r3
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	b29b      	uxth	r3, r3
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f8fb 	bl	8007360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800716a:	e0dc      	b.n	8007326 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007178:	b29b      	uxth	r3, r3
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 80ce 	beq.w	800732a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800718e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 80c9 	beq.w	800732a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071ba:	647b      	str	r3, [r7, #68]	; 0x44
 80071bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e4      	bne.n	8007198 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3308      	adds	r3, #8
 80071d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	623b      	str	r3, [r7, #32]
   return(result);
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071e4:	f023 0301 	bic.w	r3, r3, #1
 80071e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3308      	adds	r3, #8
 80071f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071f6:	633a      	str	r2, [r7, #48]	; 0x30
 80071f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e1      	bne.n	80071ce <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	e853 3f00 	ldrex	r3, [r3]
 800722a:	60fb      	str	r3, [r7, #12]
   return(result);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 0310 	bic.w	r3, r3, #16
 8007232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007240:	61fb      	str	r3, [r7, #28]
 8007242:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	69b9      	ldr	r1, [r7, #24]
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	e841 2300 	strex	r3, r2, [r1]
 800724c:	617b      	str	r3, [r7, #20]
   return(result);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e4      	bne.n	800721e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f880 	bl	8007360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007260:	e063      	b.n	800732a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00e      	beq.n	800728c <HAL_UART_IRQHandler+0x584>
 800726e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d008      	beq.n	800728c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007282:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 fb57 	bl	8008938 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800728a:	e051      	b.n	8007330 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800728c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007294:	2b00      	cmp	r3, #0
 8007296:	d014      	beq.n	80072c2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d105      	bne.n	80072b0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80072a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d008      	beq.n	80072c2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d03a      	beq.n	800732e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	4798      	blx	r3
    }
    return;
 80072c0:	e035      	b.n	800732e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <HAL_UART_IRQHandler+0x5da>
 80072ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fea4 	bl	8008028 <UART_EndTransmit_IT>
    return;
 80072e0:	e026      	b.n	8007330 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80072e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d009      	beq.n	8007302 <HAL_UART_IRQHandler+0x5fa>
 80072ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 fb30 	bl	8008960 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007300:	e016      	b.n	8007330 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d010      	beq.n	8007330 <HAL_UART_IRQHandler+0x628>
 800730e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007312:	2b00      	cmp	r3, #0
 8007314:	da0c      	bge.n	8007330 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 fb18 	bl	800894c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800731c:	e008      	b.n	8007330 <HAL_UART_IRQHandler+0x628>
      return;
 800731e:	bf00      	nop
 8007320:	e006      	b.n	8007330 <HAL_UART_IRQHandler+0x628>
    return;
 8007322:	bf00      	nop
 8007324:	e004      	b.n	8007330 <HAL_UART_IRQHandler+0x628>
      return;
 8007326:	bf00      	nop
 8007328:	e002      	b.n	8007330 <HAL_UART_IRQHandler+0x628>
      return;
 800732a:	bf00      	nop
 800732c:	e000      	b.n	8007330 <HAL_UART_IRQHandler+0x628>
    return;
 800732e:	bf00      	nop
  }
}
 8007330:	37e8      	adds	r7, #232	; 0xe8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop

08007338 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800737c:	b08c      	sub	sp, #48	; 0x30
 800737e:	af00      	add	r7, sp, #0
 8007380:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	431a      	orrs	r2, r3
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	431a      	orrs	r2, r3
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	4313      	orrs	r3, r2
 800739e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	4baa      	ldr	r3, [pc, #680]	; (8007650 <UART_SetConfig+0x2d8>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073b0:	430b      	orrs	r3, r1
 80073b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a9f      	ldr	r2, [pc, #636]	; (8007654 <UART_SetConfig+0x2dc>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d004      	beq.n	80073e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073e0:	4313      	orrs	r3, r2
 80073e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80073ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	6812      	ldr	r2, [r2, #0]
 80073f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073f8:	430b      	orrs	r3, r1
 80073fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	f023 010f 	bic.w	r1, r3, #15
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a90      	ldr	r2, [pc, #576]	; (8007658 <UART_SetConfig+0x2e0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d125      	bne.n	8007468 <UART_SetConfig+0xf0>
 800741c:	4b8f      	ldr	r3, [pc, #572]	; (800765c <UART_SetConfig+0x2e4>)
 800741e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	2b03      	cmp	r3, #3
 8007428:	d81a      	bhi.n	8007460 <UART_SetConfig+0xe8>
 800742a:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <UART_SetConfig+0xb8>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	08007441 	.word	0x08007441
 8007434:	08007451 	.word	0x08007451
 8007438:	08007449 	.word	0x08007449
 800743c:	08007459 	.word	0x08007459
 8007440:	2301      	movs	r3, #1
 8007442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007446:	e116      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007448:	2302      	movs	r3, #2
 800744a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800744e:	e112      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007450:	2304      	movs	r3, #4
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007456:	e10e      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007458:	2308      	movs	r3, #8
 800745a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800745e:	e10a      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007460:	2310      	movs	r3, #16
 8007462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007466:	e106      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a7c      	ldr	r2, [pc, #496]	; (8007660 <UART_SetConfig+0x2e8>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d138      	bne.n	80074e4 <UART_SetConfig+0x16c>
 8007472:	4b7a      	ldr	r3, [pc, #488]	; (800765c <UART_SetConfig+0x2e4>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007478:	f003 030c 	and.w	r3, r3, #12
 800747c:	2b0c      	cmp	r3, #12
 800747e:	d82d      	bhi.n	80074dc <UART_SetConfig+0x164>
 8007480:	a201      	add	r2, pc, #4	; (adr r2, 8007488 <UART_SetConfig+0x110>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	080074bd 	.word	0x080074bd
 800748c:	080074dd 	.word	0x080074dd
 8007490:	080074dd 	.word	0x080074dd
 8007494:	080074dd 	.word	0x080074dd
 8007498:	080074cd 	.word	0x080074cd
 800749c:	080074dd 	.word	0x080074dd
 80074a0:	080074dd 	.word	0x080074dd
 80074a4:	080074dd 	.word	0x080074dd
 80074a8:	080074c5 	.word	0x080074c5
 80074ac:	080074dd 	.word	0x080074dd
 80074b0:	080074dd 	.word	0x080074dd
 80074b4:	080074dd 	.word	0x080074dd
 80074b8:	080074d5 	.word	0x080074d5
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074c2:	e0d8      	b.n	8007676 <UART_SetConfig+0x2fe>
 80074c4:	2302      	movs	r3, #2
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ca:	e0d4      	b.n	8007676 <UART_SetConfig+0x2fe>
 80074cc:	2304      	movs	r3, #4
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074d2:	e0d0      	b.n	8007676 <UART_SetConfig+0x2fe>
 80074d4:	2308      	movs	r3, #8
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074da:	e0cc      	b.n	8007676 <UART_SetConfig+0x2fe>
 80074dc:	2310      	movs	r3, #16
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074e2:	e0c8      	b.n	8007676 <UART_SetConfig+0x2fe>
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a5e      	ldr	r2, [pc, #376]	; (8007664 <UART_SetConfig+0x2ec>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d125      	bne.n	800753a <UART_SetConfig+0x1c2>
 80074ee:	4b5b      	ldr	r3, [pc, #364]	; (800765c <UART_SetConfig+0x2e4>)
 80074f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074f8:	2b30      	cmp	r3, #48	; 0x30
 80074fa:	d016      	beq.n	800752a <UART_SetConfig+0x1b2>
 80074fc:	2b30      	cmp	r3, #48	; 0x30
 80074fe:	d818      	bhi.n	8007532 <UART_SetConfig+0x1ba>
 8007500:	2b20      	cmp	r3, #32
 8007502:	d00a      	beq.n	800751a <UART_SetConfig+0x1a2>
 8007504:	2b20      	cmp	r3, #32
 8007506:	d814      	bhi.n	8007532 <UART_SetConfig+0x1ba>
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <UART_SetConfig+0x19a>
 800750c:	2b10      	cmp	r3, #16
 800750e:	d008      	beq.n	8007522 <UART_SetConfig+0x1aa>
 8007510:	e00f      	b.n	8007532 <UART_SetConfig+0x1ba>
 8007512:	2300      	movs	r3, #0
 8007514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007518:	e0ad      	b.n	8007676 <UART_SetConfig+0x2fe>
 800751a:	2302      	movs	r3, #2
 800751c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007520:	e0a9      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007522:	2304      	movs	r3, #4
 8007524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007528:	e0a5      	b.n	8007676 <UART_SetConfig+0x2fe>
 800752a:	2308      	movs	r3, #8
 800752c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007530:	e0a1      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007532:	2310      	movs	r3, #16
 8007534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007538:	e09d      	b.n	8007676 <UART_SetConfig+0x2fe>
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a4a      	ldr	r2, [pc, #296]	; (8007668 <UART_SetConfig+0x2f0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d125      	bne.n	8007590 <UART_SetConfig+0x218>
 8007544:	4b45      	ldr	r3, [pc, #276]	; (800765c <UART_SetConfig+0x2e4>)
 8007546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800754e:	2bc0      	cmp	r3, #192	; 0xc0
 8007550:	d016      	beq.n	8007580 <UART_SetConfig+0x208>
 8007552:	2bc0      	cmp	r3, #192	; 0xc0
 8007554:	d818      	bhi.n	8007588 <UART_SetConfig+0x210>
 8007556:	2b80      	cmp	r3, #128	; 0x80
 8007558:	d00a      	beq.n	8007570 <UART_SetConfig+0x1f8>
 800755a:	2b80      	cmp	r3, #128	; 0x80
 800755c:	d814      	bhi.n	8007588 <UART_SetConfig+0x210>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <UART_SetConfig+0x1f0>
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	d008      	beq.n	8007578 <UART_SetConfig+0x200>
 8007566:	e00f      	b.n	8007588 <UART_SetConfig+0x210>
 8007568:	2300      	movs	r3, #0
 800756a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800756e:	e082      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007570:	2302      	movs	r3, #2
 8007572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007576:	e07e      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007578:	2304      	movs	r3, #4
 800757a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800757e:	e07a      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007580:	2308      	movs	r3, #8
 8007582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007586:	e076      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007588:	2310      	movs	r3, #16
 800758a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800758e:	e072      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a35      	ldr	r2, [pc, #212]	; (800766c <UART_SetConfig+0x2f4>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d12a      	bne.n	80075f0 <UART_SetConfig+0x278>
 800759a:	4b30      	ldr	r3, [pc, #192]	; (800765c <UART_SetConfig+0x2e4>)
 800759c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075a8:	d01a      	beq.n	80075e0 <UART_SetConfig+0x268>
 80075aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ae:	d81b      	bhi.n	80075e8 <UART_SetConfig+0x270>
 80075b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075b4:	d00c      	beq.n	80075d0 <UART_SetConfig+0x258>
 80075b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075ba:	d815      	bhi.n	80075e8 <UART_SetConfig+0x270>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <UART_SetConfig+0x250>
 80075c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c4:	d008      	beq.n	80075d8 <UART_SetConfig+0x260>
 80075c6:	e00f      	b.n	80075e8 <UART_SetConfig+0x270>
 80075c8:	2300      	movs	r3, #0
 80075ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ce:	e052      	b.n	8007676 <UART_SetConfig+0x2fe>
 80075d0:	2302      	movs	r3, #2
 80075d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075d6:	e04e      	b.n	8007676 <UART_SetConfig+0x2fe>
 80075d8:	2304      	movs	r3, #4
 80075da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075de:	e04a      	b.n	8007676 <UART_SetConfig+0x2fe>
 80075e0:	2308      	movs	r3, #8
 80075e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075e6:	e046      	b.n	8007676 <UART_SetConfig+0x2fe>
 80075e8:	2310      	movs	r3, #16
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ee:	e042      	b.n	8007676 <UART_SetConfig+0x2fe>
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a17      	ldr	r2, [pc, #92]	; (8007654 <UART_SetConfig+0x2dc>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d13a      	bne.n	8007670 <UART_SetConfig+0x2f8>
 80075fa:	4b18      	ldr	r3, [pc, #96]	; (800765c <UART_SetConfig+0x2e4>)
 80075fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007600:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007608:	d01a      	beq.n	8007640 <UART_SetConfig+0x2c8>
 800760a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800760e:	d81b      	bhi.n	8007648 <UART_SetConfig+0x2d0>
 8007610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007614:	d00c      	beq.n	8007630 <UART_SetConfig+0x2b8>
 8007616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800761a:	d815      	bhi.n	8007648 <UART_SetConfig+0x2d0>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <UART_SetConfig+0x2b0>
 8007620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007624:	d008      	beq.n	8007638 <UART_SetConfig+0x2c0>
 8007626:	e00f      	b.n	8007648 <UART_SetConfig+0x2d0>
 8007628:	2300      	movs	r3, #0
 800762a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800762e:	e022      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007630:	2302      	movs	r3, #2
 8007632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007636:	e01e      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007638:	2304      	movs	r3, #4
 800763a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800763e:	e01a      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007640:	2308      	movs	r3, #8
 8007642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007646:	e016      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007648:	2310      	movs	r3, #16
 800764a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800764e:	e012      	b.n	8007676 <UART_SetConfig+0x2fe>
 8007650:	cfff69f3 	.word	0xcfff69f3
 8007654:	40008000 	.word	0x40008000
 8007658:	40013800 	.word	0x40013800
 800765c:	40021000 	.word	0x40021000
 8007660:	40004400 	.word	0x40004400
 8007664:	40004800 	.word	0x40004800
 8007668:	40004c00 	.word	0x40004c00
 800766c:	40005000 	.word	0x40005000
 8007670:	2310      	movs	r3, #16
 8007672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4aae      	ldr	r2, [pc, #696]	; (8007934 <UART_SetConfig+0x5bc>)
 800767c:	4293      	cmp	r3, r2
 800767e:	f040 8097 	bne.w	80077b0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007686:	2b08      	cmp	r3, #8
 8007688:	d823      	bhi.n	80076d2 <UART_SetConfig+0x35a>
 800768a:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <UART_SetConfig+0x318>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076b5 	.word	0x080076b5
 8007694:	080076d3 	.word	0x080076d3
 8007698:	080076bd 	.word	0x080076bd
 800769c:	080076d3 	.word	0x080076d3
 80076a0:	080076c3 	.word	0x080076c3
 80076a4:	080076d3 	.word	0x080076d3
 80076a8:	080076d3 	.word	0x080076d3
 80076ac:	080076d3 	.word	0x080076d3
 80076b0:	080076cb 	.word	0x080076cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b4:	f7fc ffbe 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80076b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076ba:	e010      	b.n	80076de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076bc:	4b9e      	ldr	r3, [pc, #632]	; (8007938 <UART_SetConfig+0x5c0>)
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076c0:	e00d      	b.n	80076de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076c2:	f7fc ff49 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 80076c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076c8:	e009      	b.n	80076de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076d0:	e005      	b.n	80076de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 8130 	beq.w	8007946 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	4a94      	ldr	r2, [pc, #592]	; (800793c <UART_SetConfig+0x5c4>)
 80076ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076f0:	461a      	mov	r2, r3
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	4613      	mov	r3, r2
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	4413      	add	r3, r2
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	429a      	cmp	r2, r3
 8007708:	d305      	bcc.n	8007716 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	429a      	cmp	r2, r3
 8007714:	d903      	bls.n	800771e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800771c:	e113      	b.n	8007946 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	2200      	movs	r2, #0
 8007722:	60bb      	str	r3, [r7, #8]
 8007724:	60fa      	str	r2, [r7, #12]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	4a84      	ldr	r2, [pc, #528]	; (800793c <UART_SetConfig+0x5c4>)
 800772c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007730:	b29b      	uxth	r3, r3
 8007732:	2200      	movs	r2, #0
 8007734:	603b      	str	r3, [r7, #0]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800773c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007740:	f7f9 f8e4 	bl	800090c <__aeabi_uldivmod>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4610      	mov	r0, r2
 800774a:	4619      	mov	r1, r3
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	f04f 0300 	mov.w	r3, #0
 8007754:	020b      	lsls	r3, r1, #8
 8007756:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800775a:	0202      	lsls	r2, r0, #8
 800775c:	6979      	ldr	r1, [r7, #20]
 800775e:	6849      	ldr	r1, [r1, #4]
 8007760:	0849      	lsrs	r1, r1, #1
 8007762:	2000      	movs	r0, #0
 8007764:	460c      	mov	r4, r1
 8007766:	4605      	mov	r5, r0
 8007768:	eb12 0804 	adds.w	r8, r2, r4
 800776c:	eb43 0905 	adc.w	r9, r3, r5
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	469a      	mov	sl, r3
 8007778:	4693      	mov	fp, r2
 800777a:	4652      	mov	r2, sl
 800777c:	465b      	mov	r3, fp
 800777e:	4640      	mov	r0, r8
 8007780:	4649      	mov	r1, r9
 8007782:	f7f9 f8c3 	bl	800090c <__aeabi_uldivmod>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4613      	mov	r3, r2
 800778c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007794:	d308      	bcc.n	80077a8 <UART_SetConfig+0x430>
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800779c:	d204      	bcs.n	80077a8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6a3a      	ldr	r2, [r7, #32]
 80077a4:	60da      	str	r2, [r3, #12]
 80077a6:	e0ce      	b.n	8007946 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077ae:	e0ca      	b.n	8007946 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077b8:	d166      	bne.n	8007888 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80077ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d827      	bhi.n	8007812 <UART_SetConfig+0x49a>
 80077c2:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <UART_SetConfig+0x450>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	080077f5 	.word	0x080077f5
 80077d0:	080077fd 	.word	0x080077fd
 80077d4:	08007813 	.word	0x08007813
 80077d8:	08007803 	.word	0x08007803
 80077dc:	08007813 	.word	0x08007813
 80077e0:	08007813 	.word	0x08007813
 80077e4:	08007813 	.word	0x08007813
 80077e8:	0800780b 	.word	0x0800780b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ec:	f7fc ff22 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80077f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077f2:	e014      	b.n	800781e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077f4:	f7fc ff34 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 80077f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077fa:	e010      	b.n	800781e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077fc:	4b4e      	ldr	r3, [pc, #312]	; (8007938 <UART_SetConfig+0x5c0>)
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007800:	e00d      	b.n	800781e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007802:	f7fc fea9 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 8007806:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007808:	e009      	b.n	800781e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800780a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007810:	e005      	b.n	800781e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800781c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 8090 	beq.w	8007946 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	4a44      	ldr	r2, [pc, #272]	; (800793c <UART_SetConfig+0x5c4>)
 800782c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007830:	461a      	mov	r2, r3
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	fbb3 f3f2 	udiv	r3, r3, r2
 8007838:	005a      	lsls	r2, r3, #1
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	085b      	lsrs	r3, r3, #1
 8007840:	441a      	add	r2, r3
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	fbb2 f3f3 	udiv	r3, r2, r3
 800784a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	2b0f      	cmp	r3, #15
 8007850:	d916      	bls.n	8007880 <UART_SetConfig+0x508>
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007858:	d212      	bcs.n	8007880 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	b29b      	uxth	r3, r3
 800785e:	f023 030f 	bic.w	r3, r3, #15
 8007862:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	085b      	lsrs	r3, r3, #1
 8007868:	b29b      	uxth	r3, r3
 800786a:	f003 0307 	and.w	r3, r3, #7
 800786e:	b29a      	uxth	r2, r3
 8007870:	8bfb      	ldrh	r3, [r7, #30]
 8007872:	4313      	orrs	r3, r2
 8007874:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	8bfa      	ldrh	r2, [r7, #30]
 800787c:	60da      	str	r2, [r3, #12]
 800787e:	e062      	b.n	8007946 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007886:	e05e      	b.n	8007946 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007888:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800788c:	2b08      	cmp	r3, #8
 800788e:	d828      	bhi.n	80078e2 <UART_SetConfig+0x56a>
 8007890:	a201      	add	r2, pc, #4	; (adr r2, 8007898 <UART_SetConfig+0x520>)
 8007892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007896:	bf00      	nop
 8007898:	080078bd 	.word	0x080078bd
 800789c:	080078c5 	.word	0x080078c5
 80078a0:	080078cd 	.word	0x080078cd
 80078a4:	080078e3 	.word	0x080078e3
 80078a8:	080078d3 	.word	0x080078d3
 80078ac:	080078e3 	.word	0x080078e3
 80078b0:	080078e3 	.word	0x080078e3
 80078b4:	080078e3 	.word	0x080078e3
 80078b8:	080078db 	.word	0x080078db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078bc:	f7fc feba 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80078c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078c2:	e014      	b.n	80078ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078c4:	f7fc fecc 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 80078c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078ca:	e010      	b.n	80078ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078cc:	4b1a      	ldr	r3, [pc, #104]	; (8007938 <UART_SetConfig+0x5c0>)
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078d0:	e00d      	b.n	80078ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078d2:	f7fc fe41 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 80078d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078d8:	e009      	b.n	80078ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078e0:	e005      	b.n	80078ee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80078ec:	bf00      	nop
    }

    if (pclk != 0U)
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d028      	beq.n	8007946 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	4a10      	ldr	r2, [pc, #64]	; (800793c <UART_SetConfig+0x5c4>)
 80078fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078fe:	461a      	mov	r2, r3
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	fbb3 f2f2 	udiv	r2, r3, r2
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	085b      	lsrs	r3, r3, #1
 800790c:	441a      	add	r2, r3
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	fbb2 f3f3 	udiv	r3, r2, r3
 8007916:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	2b0f      	cmp	r3, #15
 800791c:	d910      	bls.n	8007940 <UART_SetConfig+0x5c8>
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007924:	d20c      	bcs.n	8007940 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	b29a      	uxth	r2, r3
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	60da      	str	r2, [r3, #12]
 8007930:	e009      	b.n	8007946 <UART_SetConfig+0x5ce>
 8007932:	bf00      	nop
 8007934:	40008000 	.word	0x40008000
 8007938:	00f42400 	.word	0x00f42400
 800793c:	0800a160 	.word	0x0800a160
      }
      else
      {
        ret = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2201      	movs	r2, #1
 800794a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2201      	movs	r2, #1
 8007952:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2200      	movs	r2, #0
 800795a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2200      	movs	r2, #0
 8007960:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007962:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007966:	4618      	mov	r0, r3
 8007968:	3730      	adds	r7, #48	; 0x30
 800796a:	46bd      	mov	sp, r7
 800796c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00a      	beq.n	800799a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00a      	beq.n	80079de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a04:	f003 0310 	and.w	r3, r3, #16
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00a      	beq.n	8007a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01a      	beq.n	8007a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a6e:	d10a      	bne.n	8007a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	605a      	str	r2, [r3, #4]
  }
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ac4:	f7fa fbcc 	bl	8002260 <HAL_GetTick>
 8007ac8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0308 	and.w	r3, r3, #8
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d10e      	bne.n	8007af6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f82f 	bl	8007b4a <UART_WaitOnFlagUntilTimeout>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e025      	b.n	8007b42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d10e      	bne.n	8007b22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f819 	bl	8007b4a <UART_WaitOnFlagUntilTimeout>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e00f      	b.n	8007b42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b09c      	sub	sp, #112	; 0x70
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	603b      	str	r3, [r7, #0]
 8007b56:	4613      	mov	r3, r2
 8007b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b5a:	e0a9      	b.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b62:	f000 80a5 	beq.w	8007cb0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b66:	f7fa fb7b 	bl	8002260 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d302      	bcc.n	8007b7c <UART_WaitOnFlagUntilTimeout+0x32>
 8007b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d140      	bne.n	8007bfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b90:	667b      	str	r3, [r7, #100]	; 0x64
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ba0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e6      	bne.n	8007b7c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	f023 0301 	bic.w	r3, r3, #1
 8007bc4:	663b      	str	r3, [r7, #96]	; 0x60
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bce:	64ba      	str	r2, [r7, #72]	; 0x48
 8007bd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bd6:	e841 2300 	strex	r3, r2, [r1]
 8007bda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e5      	bne.n	8007bae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2220      	movs	r2, #32
 8007bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e069      	b.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d051      	beq.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c1a:	d149      	bne.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
 8007c46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e6      	bne.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	613b      	str	r3, [r7, #16]
   return(result);
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	f023 0301 	bic.w	r3, r3, #1
 8007c6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c78:	623a      	str	r2, [r7, #32]
 8007c7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	69f9      	ldr	r1, [r7, #28]
 8007c7e:	6a3a      	ldr	r2, [r7, #32]
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e5      	bne.n	8007c58 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e010      	b.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	69da      	ldr	r2, [r3, #28]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	bf0c      	ite	eq
 8007cc0:	2301      	moveq	r3, #1
 8007cc2:	2300      	movne	r3, #0
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	f43f af46 	beq.w	8007b5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3770      	adds	r7, #112	; 0x70
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b0a3      	sub	sp, #140	; 0x8c
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	88fa      	ldrh	r2, [r7, #6]
 8007cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	88fa      	ldrh	r2, [r7, #6]
 8007cfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d0e:	d10e      	bne.n	8007d2e <UART_Start_Receive_IT+0x52>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d105      	bne.n	8007d24 <UART_Start_Receive_IT+0x48>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d22:	e02d      	b.n	8007d80 <UART_Start_Receive_IT+0xa4>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	22ff      	movs	r2, #255	; 0xff
 8007d28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d2c:	e028      	b.n	8007d80 <UART_Start_Receive_IT+0xa4>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10d      	bne.n	8007d52 <UART_Start_Receive_IT+0x76>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d104      	bne.n	8007d48 <UART_Start_Receive_IT+0x6c>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	22ff      	movs	r2, #255	; 0xff
 8007d42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d46:	e01b      	b.n	8007d80 <UART_Start_Receive_IT+0xa4>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	227f      	movs	r2, #127	; 0x7f
 8007d4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d50:	e016      	b.n	8007d80 <UART_Start_Receive_IT+0xa4>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d5a:	d10d      	bne.n	8007d78 <UART_Start_Receive_IT+0x9c>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d104      	bne.n	8007d6e <UART_Start_Receive_IT+0x92>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	227f      	movs	r2, #127	; 0x7f
 8007d68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d6c:	e008      	b.n	8007d80 <UART_Start_Receive_IT+0xa4>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	223f      	movs	r2, #63	; 0x3f
 8007d72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d76:	e003      	b.n	8007d80 <UART_Start_Receive_IT+0xa4>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2222      	movs	r2, #34	; 0x22
 8007d8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007da2:	f043 0301 	orr.w	r3, r3, #1
 8007da6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3308      	adds	r3, #8
 8007db0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007db4:	673a      	str	r2, [r7, #112]	; 0x70
 8007db6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007dba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e3      	bne.n	8007d90 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd0:	d153      	bne.n	8007e7a <UART_Start_Receive_IT+0x19e>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007dd8:	88fa      	ldrh	r2, [r7, #6]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d34d      	bcc.n	8007e7a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de6:	d107      	bne.n	8007df8 <UART_Start_Receive_IT+0x11c>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d103      	bne.n	8007df8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4a4b      	ldr	r2, [pc, #300]	; (8007f20 <UART_Start_Receive_IT+0x244>)
 8007df4:	671a      	str	r2, [r3, #112]	; 0x70
 8007df6:	e002      	b.n	8007dfe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4a4a      	ldr	r2, [pc, #296]	; (8007f24 <UART_Start_Receive_IT+0x248>)
 8007dfc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d01a      	beq.n	8007e44 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e32:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e38:	e841 2300 	strex	r3, r2, [r1]
 8007e3c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e4      	bne.n	8007e0e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3308      	adds	r3, #8
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e4e:	e853 3f00 	ldrex	r3, [r3]
 8007e52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3308      	adds	r3, #8
 8007e62:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007e64:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e66:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e6c:	e841 2300 	strex	r3, r2, [r1]
 8007e70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e5      	bne.n	8007e44 <UART_Start_Receive_IT+0x168>
 8007e78:	e04a      	b.n	8007f10 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e82:	d107      	bne.n	8007e94 <UART_Start_Receive_IT+0x1b8>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d103      	bne.n	8007e94 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4a26      	ldr	r2, [pc, #152]	; (8007f28 <UART_Start_Receive_IT+0x24c>)
 8007e90:	671a      	str	r2, [r3, #112]	; 0x70
 8007e92:	e002      	b.n	8007e9a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4a25      	ldr	r2, [pc, #148]	; (8007f2c <UART_Start_Receive_IT+0x250>)
 8007e98:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d019      	beq.n	8007ede <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb2:	e853 3f00 	ldrex	r3, [r3]
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007ebe:	677b      	str	r3, [r7, #116]	; 0x74
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ecc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ed0:	e841 2300 	strex	r3, r2, [r1]
 8007ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e6      	bne.n	8007eaa <UART_Start_Receive_IT+0x1ce>
 8007edc:	e018      	b.n	8007f10 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	613b      	str	r3, [r7, #16]
   return(result);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	f043 0320 	orr.w	r3, r3, #32
 8007ef2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007efc:	623b      	str	r3, [r7, #32]
 8007efe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	69f9      	ldr	r1, [r7, #28]
 8007f02:	6a3a      	ldr	r2, [r7, #32]
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e6      	bne.n	8007ede <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	378c      	adds	r7, #140	; 0x8c
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	08008639 	.word	0x08008639
 8007f24:	08008341 	.word	0x08008341
 8007f28:	080081df 	.word	0x080081df
 8007f2c:	0800807f 	.word	0x0800807f

08007f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b095      	sub	sp, #84	; 0x54
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f56:	643b      	str	r3, [r7, #64]	; 0x40
 8007f58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f5e:	e841 2300 	strex	r3, r2, [r1]
 8007f62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e6      	bne.n	8007f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3308      	adds	r3, #8
 8007f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f80:	f023 0301 	bic.w	r3, r3, #1
 8007f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e3      	bne.n	8007f6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d118      	bne.n	8007fdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	e853 3f00 	ldrex	r3, [r3]
 8007fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f023 0310 	bic.w	r3, r3, #16
 8007fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fcc:	6979      	ldr	r1, [r7, #20]
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	e841 2300 	strex	r3, r2, [r1]
 8007fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e6      	bne.n	8007faa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007ff0:	bf00      	nop
 8007ff2:	3754      	adds	r7, #84	; 0x54
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7ff f996 	bl	800734c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008020:	bf00      	nop
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b088      	sub	sp, #32
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	60bb      	str	r3, [r7, #8]
   return(result);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008044:	61fb      	str	r3, [r7, #28]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	61bb      	str	r3, [r7, #24]
 8008050:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	6979      	ldr	r1, [r7, #20]
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	613b      	str	r3, [r7, #16]
   return(result);
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1e6      	bne.n	8008030 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2220      	movs	r2, #32
 8008066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7ff f961 	bl	8007338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008076:	bf00      	nop
 8008078:	3720      	adds	r7, #32
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b096      	sub	sp, #88	; 0x58
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800808c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008096:	2b22      	cmp	r3, #34	; 0x22
 8008098:	f040 8095 	bne.w	80081c6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080a6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80080aa:	b2d9      	uxtb	r1, r3
 80080ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080b6:	400a      	ands	r2, r1
 80080b8:	b2d2      	uxtb	r2, r2
 80080ba:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	3b01      	subs	r3, #1
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080de:	b29b      	uxth	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d178      	bne.n	80081d6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080f8:	653b      	str	r3, [r7, #80]	; 0x50
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008102:	647b      	str	r3, [r7, #68]	; 0x44
 8008104:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008106:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e6      	bne.n	80080e4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	623b      	str	r3, [r7, #32]
   return(result);
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	f023 0301 	bic.w	r3, r3, #1
 800812c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3308      	adds	r3, #8
 8008134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008136:	633a      	str	r2, [r7, #48]	; 0x30
 8008138:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800813c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800813e:	e841 2300 	strex	r3, r2, [r1]
 8008142:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1e5      	bne.n	8008116 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800815c:	2b01      	cmp	r3, #1
 800815e:	d12e      	bne.n	80081be <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	60fb      	str	r3, [r7, #12]
   return(result);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0310 	bic.w	r3, r3, #16
 800817a:	64bb      	str	r3, [r7, #72]	; 0x48
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	461a      	mov	r2, r3
 8008182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008184:	61fb      	str	r3, [r7, #28]
 8008186:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	69b9      	ldr	r1, [r7, #24]
 800818a:	69fa      	ldr	r2, [r7, #28]
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	617b      	str	r3, [r7, #20]
   return(result);
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e6      	bne.n	8008166 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	f003 0310 	and.w	r3, r3, #16
 80081a2:	2b10      	cmp	r3, #16
 80081a4:	d103      	bne.n	80081ae <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2210      	movs	r2, #16
 80081ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff f8d2 	bl	8007360 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081bc:	e00b      	b.n	80081d6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7f9 ffe4 	bl	800218c <HAL_UART_RxCpltCallback>
}
 80081c4:	e007      	b.n	80081d6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	699a      	ldr	r2, [r3, #24]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f042 0208 	orr.w	r2, r2, #8
 80081d4:	619a      	str	r2, [r3, #24]
}
 80081d6:	bf00      	nop
 80081d8:	3758      	adds	r7, #88	; 0x58
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b096      	sub	sp, #88	; 0x58
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f6:	2b22      	cmp	r3, #34	; 0x22
 80081f8:	f040 8095 	bne.w	8008326 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800820a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800820c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008210:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008214:	4013      	ands	r3, r2
 8008216:	b29a      	uxth	r2, r3
 8008218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800821a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008220:	1c9a      	adds	r2, r3, #2
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800822c:	b29b      	uxth	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	b29a      	uxth	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800823e:	b29b      	uxth	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	d178      	bne.n	8008336 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008262:	643b      	str	r3, [r7, #64]	; 0x40
 8008264:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e6      	bne.n	8008244 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3308      	adds	r3, #8
 800827c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	61fb      	str	r3, [r7, #28]
   return(result);
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f023 0301 	bic.w	r3, r3, #1
 800828c:	64bb      	str	r3, [r7, #72]	; 0x48
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3308      	adds	r3, #8
 8008294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800829c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e5      	bne.n	8008276 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2220      	movs	r2, #32
 80082ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d12e      	bne.n	800831e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	e853 3f00 	ldrex	r3, [r3]
 80082d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f023 0310 	bic.w	r3, r3, #16
 80082da:	647b      	str	r3, [r7, #68]	; 0x44
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	461a      	mov	r2, r3
 80082e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e4:	61bb      	str	r3, [r7, #24]
 80082e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e8:	6979      	ldr	r1, [r7, #20]
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	e841 2300 	strex	r3, r2, [r1]
 80082f0:	613b      	str	r3, [r7, #16]
   return(result);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1e6      	bne.n	80082c6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	f003 0310 	and.w	r3, r3, #16
 8008302:	2b10      	cmp	r3, #16
 8008304:	d103      	bne.n	800830e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2210      	movs	r2, #16
 800830c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7ff f822 	bl	8007360 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800831c:	e00b      	b.n	8008336 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7f9 ff34 	bl	800218c <HAL_UART_RxCpltCallback>
}
 8008324:	e007      	b.n	8008336 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	699a      	ldr	r2, [r3, #24]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f042 0208 	orr.w	r2, r2, #8
 8008334:	619a      	str	r2, [r3, #24]
}
 8008336:	bf00      	nop
 8008338:	3758      	adds	r7, #88	; 0x58
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b0a6      	sub	sp, #152	; 0x98
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800834e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008376:	2b22      	cmp	r3, #34	; 0x22
 8008378:	f040 814f 	bne.w	800861a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008382:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008386:	e0f6      	b.n	8008576 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008392:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008396:	b2d9      	uxtb	r1, r3
 8008398:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800839c:	b2da      	uxtb	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a2:	400a      	ands	r2, r1
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ac:	1c5a      	adds	r2, r3, #1
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	3b01      	subs	r3, #1
 80083bc:	b29a      	uxth	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d053      	beq.n	8008482 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d011      	beq.n	800840a <UART_RxISR_8BIT_FIFOEN+0xca>
 80083e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2201      	movs	r2, #1
 80083f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008400:	f043 0201 	orr.w	r2, r3, #1
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800840a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d011      	beq.n	800843a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008416:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00b      	beq.n	800843a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2202      	movs	r2, #2
 8008428:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008430:	f043 0204 	orr.w	r2, r3, #4
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800843a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800843e:	f003 0304 	and.w	r3, r3, #4
 8008442:	2b00      	cmp	r3, #0
 8008444:	d011      	beq.n	800846a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008446:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00b      	beq.n	800846a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2204      	movs	r2, #4
 8008458:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008460:	f043 0202 	orr.w	r2, r3, #2
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d006      	beq.n	8008482 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7fe ff69 	bl	800734c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d173      	bne.n	8008576 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008496:	e853 3f00 	ldrex	r3, [r3]
 800849a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800849c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800849e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80084b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80084b2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80084b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80084be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e4      	bne.n	800848e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3308      	adds	r3, #8
 80084ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80084d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084da:	f023 0301 	bic.w	r3, r3, #1
 80084de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3308      	adds	r3, #8
 80084e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80084e8:	657a      	str	r2, [r7, #84]	; 0x54
 80084ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084f0:	e841 2300 	strex	r3, r2, [r1]
 80084f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1e3      	bne.n	80084c4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2220      	movs	r2, #32
 8008500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800850e:	2b01      	cmp	r3, #1
 8008510:	d12e      	bne.n	8008570 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008520:	e853 3f00 	ldrex	r3, [r3]
 8008524:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	f023 0310 	bic.w	r3, r3, #16
 800852c:	67bb      	str	r3, [r7, #120]	; 0x78
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008536:	643b      	str	r3, [r7, #64]	; 0x40
 8008538:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800853c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e6      	bne.n	8008518 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	f003 0310 	and.w	r3, r3, #16
 8008554:	2b10      	cmp	r3, #16
 8008556:	d103      	bne.n	8008560 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2210      	movs	r2, #16
 800855e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7fe fef9 	bl	8007360 <HAL_UARTEx_RxEventCallback>
 800856e:	e002      	b.n	8008576 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7f9 fe0b 	bl	800218c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008576:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800857a:	2b00      	cmp	r3, #0
 800857c:	d006      	beq.n	800858c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800857e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008582:	f003 0320 	and.w	r3, r3, #32
 8008586:	2b00      	cmp	r3, #0
 8008588:	f47f aefe 	bne.w	8008388 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008592:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008596:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800859a:	2b00      	cmp	r3, #0
 800859c:	d045      	beq.n	800862a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80085a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d23e      	bcs.n	800862a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3308      	adds	r3, #8
 80085b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085c2:	673b      	str	r3, [r7, #112]	; 0x70
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3308      	adds	r3, #8
 80085ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80085cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085d4:	e841 2300 	strex	r3, r2, [r1]
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e5      	bne.n	80085ac <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a14      	ldr	r2, [pc, #80]	; (8008634 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80085e4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f043 0320 	orr.w	r3, r3, #32
 80085fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008604:	61bb      	str	r3, [r7, #24]
 8008606:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	6979      	ldr	r1, [r7, #20]
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	e841 2300 	strex	r3, r2, [r1]
 8008610:	613b      	str	r3, [r7, #16]
   return(result);
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e6      	bne.n	80085e6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008618:	e007      	b.n	800862a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	699a      	ldr	r2, [r3, #24]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f042 0208 	orr.w	r2, r2, #8
 8008628:	619a      	str	r2, [r3, #24]
}
 800862a:	bf00      	nop
 800862c:	3798      	adds	r7, #152	; 0x98
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	0800807f 	.word	0x0800807f

08008638 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b0a8      	sub	sp, #160	; 0xa0
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008646:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	69db      	ldr	r3, [r3, #28]
 8008650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800866e:	2b22      	cmp	r3, #34	; 0x22
 8008670:	f040 8153 	bne.w	800891a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800867a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800867e:	e0fa      	b.n	8008876 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800868e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008692:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008696:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800869a:	4013      	ands	r3, r2
 800869c:	b29a      	uxth	r2, r3
 800869e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a8:	1c9a      	adds	r2, r3, #2
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	3b01      	subs	r3, #1
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d053      	beq.n	800877e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d011      	beq.n	8008706 <UART_RxISR_16BIT_FIFOEN+0xce>
 80086e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00b      	beq.n	8008706 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2201      	movs	r2, #1
 80086f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086fc:	f043 0201 	orr.w	r2, r3, #1
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008706:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b00      	cmp	r3, #0
 8008710:	d011      	beq.n	8008736 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008712:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2202      	movs	r2, #2
 8008724:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800872c:	f043 0204 	orr.w	r2, r3, #4
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008736:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d011      	beq.n	8008766 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00b      	beq.n	8008766 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2204      	movs	r2, #4
 8008754:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800875c:	f043 0202 	orr.w	r2, r3, #2
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800876c:	2b00      	cmp	r3, #0
 800876e:	d006      	beq.n	800877e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7fe fdeb 	bl	800734c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008784:	b29b      	uxth	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d175      	bne.n	8008876 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008792:	e853 3f00 	ldrex	r3, [r3]
 8008796:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800879a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800879e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087ae:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087b4:	e841 2300 	strex	r3, r2, [r1]
 80087b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1e4      	bne.n	800878a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ca:	e853 3f00 	ldrex	r3, [r3]
 80087ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087d6:	f023 0301 	bic.w	r3, r3, #1
 80087da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3308      	adds	r3, #8
 80087e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80087ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087f0:	e841 2300 	strex	r3, r2, [r1]
 80087f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e1      	bne.n	80087c0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2220      	movs	r2, #32
 8008800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800880e:	2b01      	cmp	r3, #1
 8008810:	d12e      	bne.n	8008870 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	e853 3f00 	ldrex	r3, [r3]
 8008824:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008828:	f023 0310 	bic.w	r3, r3, #16
 800882c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008836:	647b      	str	r3, [r7, #68]	; 0x44
 8008838:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800883c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800883e:	e841 2300 	strex	r3, r2, [r1]
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1e6      	bne.n	8008818 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	f003 0310 	and.w	r3, r3, #16
 8008854:	2b10      	cmp	r3, #16
 8008856:	d103      	bne.n	8008860 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2210      	movs	r2, #16
 800885e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008866:	4619      	mov	r1, r3
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7fe fd79 	bl	8007360 <HAL_UARTEx_RxEventCallback>
 800886e:	e002      	b.n	8008876 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7f9 fc8b 	bl	800218c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008876:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800887a:	2b00      	cmp	r3, #0
 800887c:	d006      	beq.n	800888c <UART_RxISR_16BIT_FIFOEN+0x254>
 800887e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008882:	f003 0320 	and.w	r3, r3, #32
 8008886:	2b00      	cmp	r3, #0
 8008888:	f47f aefa 	bne.w	8008680 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008892:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008896:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800889a:	2b00      	cmp	r3, #0
 800889c:	d045      	beq.n	800892a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088a4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d23e      	bcs.n	800892a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3308      	adds	r3, #8
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	e853 3f00 	ldrex	r3, [r3]
 80088ba:	623b      	str	r3, [r7, #32]
   return(result);
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088c2:	677b      	str	r3, [r7, #116]	; 0x74
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3308      	adds	r3, #8
 80088ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80088cc:	633a      	str	r2, [r7, #48]	; 0x30
 80088ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d4:	e841 2300 	strex	r3, r2, [r1]
 80088d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1e5      	bne.n	80088ac <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a14      	ldr	r2, [pc, #80]	; (8008934 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80088e4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f043 0320 	orr.w	r3, r3, #32
 80088fa:	673b      	str	r3, [r7, #112]	; 0x70
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008904:	61fb      	str	r3, [r7, #28]
 8008906:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	69b9      	ldr	r1, [r7, #24]
 800890a:	69fa      	ldr	r2, [r7, #28]
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	617b      	str	r3, [r7, #20]
   return(result);
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e6      	bne.n	80088e6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008918:	e007      	b.n	800892a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	699a      	ldr	r2, [r3, #24]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f042 0208 	orr.w	r2, r2, #8
 8008928:	619a      	str	r2, [r3, #24]
}
 800892a:	bf00      	nop
 800892c:	37a0      	adds	r7, #160	; 0xa0
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	080081df 	.word	0x080081df

08008938 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008982:	2b01      	cmp	r3, #1
 8008984:	d101      	bne.n	800898a <HAL_UARTEx_DisableFifoMode+0x16>
 8008986:	2302      	movs	r3, #2
 8008988:	e027      	b.n	80089da <HAL_UARTEx_DisableFifoMode+0x66>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2224      	movs	r2, #36	; 0x24
 8008996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f022 0201 	bic.w	r2, r2, #1
 80089b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2220      	movs	r2, #32
 80089cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d101      	bne.n	80089fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089fa:	2302      	movs	r3, #2
 80089fc:	e02d      	b.n	8008a5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2224      	movs	r2, #36	; 0x24
 8008a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f022 0201 	bic.w	r2, r2, #1
 8008a24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f850 	bl	8008ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d101      	bne.n	8008a7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a76:	2302      	movs	r3, #2
 8008a78:	e02d      	b.n	8008ad6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2224      	movs	r2, #36	; 0x24
 8008a86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f022 0201 	bic.w	r2, r2, #1
 8008aa0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f812 	bl	8008ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
	...

08008ae0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d108      	bne.n	8008b02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b00:	e031      	b.n	8008b66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b02:	2308      	movs	r3, #8
 8008b04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b06:	2308      	movs	r3, #8
 8008b08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	0e5b      	lsrs	r3, r3, #25
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	f003 0307 	and.w	r3, r3, #7
 8008b18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	0f5b      	lsrs	r3, r3, #29
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	f003 0307 	and.w	r3, r3, #7
 8008b28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	7b3a      	ldrb	r2, [r7, #12]
 8008b2e:	4911      	ldr	r1, [pc, #68]	; (8008b74 <UARTEx_SetNbDataToProcess+0x94>)
 8008b30:	5c8a      	ldrb	r2, [r1, r2]
 8008b32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b36:	7b3a      	ldrb	r2, [r7, #12]
 8008b38:	490f      	ldr	r1, [pc, #60]	; (8008b78 <UARTEx_SetNbDataToProcess+0x98>)
 8008b3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	7b7a      	ldrb	r2, [r7, #13]
 8008b4c:	4909      	ldr	r1, [pc, #36]	; (8008b74 <UARTEx_SetNbDataToProcess+0x94>)
 8008b4e:	5c8a      	ldrb	r2, [r1, r2]
 8008b50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b54:	7b7a      	ldrb	r2, [r7, #13]
 8008b56:	4908      	ldr	r1, [pc, #32]	; (8008b78 <UARTEx_SetNbDataToProcess+0x98>)
 8008b58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b66:	bf00      	nop
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	0800a178 	.word	0x0800a178
 8008b78:	0800a180 	.word	0x0800a180

08008b7c <atoi>:
 8008b7c:	220a      	movs	r2, #10
 8008b7e:	2100      	movs	r1, #0
 8008b80:	f000 b882 	b.w	8008c88 <strtol>

08008b84 <_strtol_l.constprop.0>:
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b8a:	d001      	beq.n	8008b90 <_strtol_l.constprop.0+0xc>
 8008b8c:	2b24      	cmp	r3, #36	; 0x24
 8008b8e:	d906      	bls.n	8008b9e <_strtol_l.constprop.0+0x1a>
 8008b90:	f000 fa68 	bl	8009064 <__errno>
 8008b94:	2316      	movs	r3, #22
 8008b96:	6003      	str	r3, [r0, #0]
 8008b98:	2000      	movs	r0, #0
 8008b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008c84 <_strtol_l.constprop.0+0x100>
 8008ba2:	460d      	mov	r5, r1
 8008ba4:	462e      	mov	r6, r5
 8008ba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008baa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008bae:	f017 0708 	ands.w	r7, r7, #8
 8008bb2:	d1f7      	bne.n	8008ba4 <_strtol_l.constprop.0+0x20>
 8008bb4:	2c2d      	cmp	r4, #45	; 0x2d
 8008bb6:	d132      	bne.n	8008c1e <_strtol_l.constprop.0+0x9a>
 8008bb8:	782c      	ldrb	r4, [r5, #0]
 8008bba:	2701      	movs	r7, #1
 8008bbc:	1cb5      	adds	r5, r6, #2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d05b      	beq.n	8008c7a <_strtol_l.constprop.0+0xf6>
 8008bc2:	2b10      	cmp	r3, #16
 8008bc4:	d109      	bne.n	8008bda <_strtol_l.constprop.0+0x56>
 8008bc6:	2c30      	cmp	r4, #48	; 0x30
 8008bc8:	d107      	bne.n	8008bda <_strtol_l.constprop.0+0x56>
 8008bca:	782c      	ldrb	r4, [r5, #0]
 8008bcc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008bd0:	2c58      	cmp	r4, #88	; 0x58
 8008bd2:	d14d      	bne.n	8008c70 <_strtol_l.constprop.0+0xec>
 8008bd4:	786c      	ldrb	r4, [r5, #1]
 8008bd6:	2310      	movs	r3, #16
 8008bd8:	3502      	adds	r5, #2
 8008bda:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008bde:	f108 38ff 	add.w	r8, r8, #4294967295
 8008be2:	f04f 0e00 	mov.w	lr, #0
 8008be6:	fbb8 f9f3 	udiv	r9, r8, r3
 8008bea:	4676      	mov	r6, lr
 8008bec:	fb03 8a19 	mls	sl, r3, r9, r8
 8008bf0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008bf4:	f1bc 0f09 	cmp.w	ip, #9
 8008bf8:	d816      	bhi.n	8008c28 <_strtol_l.constprop.0+0xa4>
 8008bfa:	4664      	mov	r4, ip
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	dd24      	ble.n	8008c4a <_strtol_l.constprop.0+0xc6>
 8008c00:	f1be 3fff 	cmp.w	lr, #4294967295
 8008c04:	d008      	beq.n	8008c18 <_strtol_l.constprop.0+0x94>
 8008c06:	45b1      	cmp	r9, r6
 8008c08:	d31c      	bcc.n	8008c44 <_strtol_l.constprop.0+0xc0>
 8008c0a:	d101      	bne.n	8008c10 <_strtol_l.constprop.0+0x8c>
 8008c0c:	45a2      	cmp	sl, r4
 8008c0e:	db19      	blt.n	8008c44 <_strtol_l.constprop.0+0xc0>
 8008c10:	fb06 4603 	mla	r6, r6, r3, r4
 8008c14:	f04f 0e01 	mov.w	lr, #1
 8008c18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c1c:	e7e8      	b.n	8008bf0 <_strtol_l.constprop.0+0x6c>
 8008c1e:	2c2b      	cmp	r4, #43	; 0x2b
 8008c20:	bf04      	itt	eq
 8008c22:	782c      	ldrbeq	r4, [r5, #0]
 8008c24:	1cb5      	addeq	r5, r6, #2
 8008c26:	e7ca      	b.n	8008bbe <_strtol_l.constprop.0+0x3a>
 8008c28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008c2c:	f1bc 0f19 	cmp.w	ip, #25
 8008c30:	d801      	bhi.n	8008c36 <_strtol_l.constprop.0+0xb2>
 8008c32:	3c37      	subs	r4, #55	; 0x37
 8008c34:	e7e2      	b.n	8008bfc <_strtol_l.constprop.0+0x78>
 8008c36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008c3a:	f1bc 0f19 	cmp.w	ip, #25
 8008c3e:	d804      	bhi.n	8008c4a <_strtol_l.constprop.0+0xc6>
 8008c40:	3c57      	subs	r4, #87	; 0x57
 8008c42:	e7db      	b.n	8008bfc <_strtol_l.constprop.0+0x78>
 8008c44:	f04f 3eff 	mov.w	lr, #4294967295
 8008c48:	e7e6      	b.n	8008c18 <_strtol_l.constprop.0+0x94>
 8008c4a:	f1be 3fff 	cmp.w	lr, #4294967295
 8008c4e:	d105      	bne.n	8008c5c <_strtol_l.constprop.0+0xd8>
 8008c50:	2322      	movs	r3, #34	; 0x22
 8008c52:	6003      	str	r3, [r0, #0]
 8008c54:	4646      	mov	r6, r8
 8008c56:	b942      	cbnz	r2, 8008c6a <_strtol_l.constprop.0+0xe6>
 8008c58:	4630      	mov	r0, r6
 8008c5a:	e79e      	b.n	8008b9a <_strtol_l.constprop.0+0x16>
 8008c5c:	b107      	cbz	r7, 8008c60 <_strtol_l.constprop.0+0xdc>
 8008c5e:	4276      	negs	r6, r6
 8008c60:	2a00      	cmp	r2, #0
 8008c62:	d0f9      	beq.n	8008c58 <_strtol_l.constprop.0+0xd4>
 8008c64:	f1be 0f00 	cmp.w	lr, #0
 8008c68:	d000      	beq.n	8008c6c <_strtol_l.constprop.0+0xe8>
 8008c6a:	1e69      	subs	r1, r5, #1
 8008c6c:	6011      	str	r1, [r2, #0]
 8008c6e:	e7f3      	b.n	8008c58 <_strtol_l.constprop.0+0xd4>
 8008c70:	2430      	movs	r4, #48	; 0x30
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1b1      	bne.n	8008bda <_strtol_l.constprop.0+0x56>
 8008c76:	2308      	movs	r3, #8
 8008c78:	e7af      	b.n	8008bda <_strtol_l.constprop.0+0x56>
 8008c7a:	2c30      	cmp	r4, #48	; 0x30
 8008c7c:	d0a5      	beq.n	8008bca <_strtol_l.constprop.0+0x46>
 8008c7e:	230a      	movs	r3, #10
 8008c80:	e7ab      	b.n	8008bda <_strtol_l.constprop.0+0x56>
 8008c82:	bf00      	nop
 8008c84:	0800a189 	.word	0x0800a189

08008c88 <strtol>:
 8008c88:	4613      	mov	r3, r2
 8008c8a:	460a      	mov	r2, r1
 8008c8c:	4601      	mov	r1, r0
 8008c8e:	4802      	ldr	r0, [pc, #8]	; (8008c98 <strtol+0x10>)
 8008c90:	6800      	ldr	r0, [r0, #0]
 8008c92:	f7ff bf77 	b.w	8008b84 <_strtol_l.constprop.0>
 8008c96:	bf00      	nop
 8008c98:	20000270 	.word	0x20000270

08008c9c <std>:
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	b510      	push	{r4, lr}
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008caa:	6083      	str	r3, [r0, #8]
 8008cac:	8181      	strh	r1, [r0, #12]
 8008cae:	6643      	str	r3, [r0, #100]	; 0x64
 8008cb0:	81c2      	strh	r2, [r0, #14]
 8008cb2:	6183      	str	r3, [r0, #24]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	2208      	movs	r2, #8
 8008cb8:	305c      	adds	r0, #92	; 0x5c
 8008cba:	f000 f928 	bl	8008f0e <memset>
 8008cbe:	4b0d      	ldr	r3, [pc, #52]	; (8008cf4 <std+0x58>)
 8008cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8008cc2:	4b0d      	ldr	r3, [pc, #52]	; (8008cf8 <std+0x5c>)
 8008cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <std+0x60>)
 8008cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cca:	4b0d      	ldr	r3, [pc, #52]	; (8008d00 <std+0x64>)
 8008ccc:	6323      	str	r3, [r4, #48]	; 0x30
 8008cce:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <std+0x68>)
 8008cd0:	6224      	str	r4, [r4, #32]
 8008cd2:	429c      	cmp	r4, r3
 8008cd4:	d006      	beq.n	8008ce4 <std+0x48>
 8008cd6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008cda:	4294      	cmp	r4, r2
 8008cdc:	d002      	beq.n	8008ce4 <std+0x48>
 8008cde:	33d0      	adds	r3, #208	; 0xd0
 8008ce0:	429c      	cmp	r4, r3
 8008ce2:	d105      	bne.n	8008cf0 <std+0x54>
 8008ce4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cec:	f000 b9e4 	b.w	80090b8 <__retarget_lock_init_recursive>
 8008cf0:	bd10      	pop	{r4, pc}
 8008cf2:	bf00      	nop
 8008cf4:	08008e89 	.word	0x08008e89
 8008cf8:	08008eab 	.word	0x08008eab
 8008cfc:	08008ee3 	.word	0x08008ee3
 8008d00:	08008f07 	.word	0x08008f07
 8008d04:	2000063c 	.word	0x2000063c

08008d08 <stdio_exit_handler>:
 8008d08:	4a02      	ldr	r2, [pc, #8]	; (8008d14 <stdio_exit_handler+0xc>)
 8008d0a:	4903      	ldr	r1, [pc, #12]	; (8008d18 <stdio_exit_handler+0x10>)
 8008d0c:	4803      	ldr	r0, [pc, #12]	; (8008d1c <stdio_exit_handler+0x14>)
 8008d0e:	f000 b869 	b.w	8008de4 <_fwalk_sglue>
 8008d12:	bf00      	nop
 8008d14:	20000218 	.word	0x20000218
 8008d18:	080099d9 	.word	0x080099d9
 8008d1c:	20000224 	.word	0x20000224

08008d20 <cleanup_stdio>:
 8008d20:	6841      	ldr	r1, [r0, #4]
 8008d22:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <cleanup_stdio+0x34>)
 8008d24:	4299      	cmp	r1, r3
 8008d26:	b510      	push	{r4, lr}
 8008d28:	4604      	mov	r4, r0
 8008d2a:	d001      	beq.n	8008d30 <cleanup_stdio+0x10>
 8008d2c:	f000 fe54 	bl	80099d8 <_fflush_r>
 8008d30:	68a1      	ldr	r1, [r4, #8]
 8008d32:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <cleanup_stdio+0x38>)
 8008d34:	4299      	cmp	r1, r3
 8008d36:	d002      	beq.n	8008d3e <cleanup_stdio+0x1e>
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 fe4d 	bl	80099d8 <_fflush_r>
 8008d3e:	68e1      	ldr	r1, [r4, #12]
 8008d40:	4b06      	ldr	r3, [pc, #24]	; (8008d5c <cleanup_stdio+0x3c>)
 8008d42:	4299      	cmp	r1, r3
 8008d44:	d004      	beq.n	8008d50 <cleanup_stdio+0x30>
 8008d46:	4620      	mov	r0, r4
 8008d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d4c:	f000 be44 	b.w	80099d8 <_fflush_r>
 8008d50:	bd10      	pop	{r4, pc}
 8008d52:	bf00      	nop
 8008d54:	2000063c 	.word	0x2000063c
 8008d58:	200006a4 	.word	0x200006a4
 8008d5c:	2000070c 	.word	0x2000070c

08008d60 <global_stdio_init.part.0>:
 8008d60:	b510      	push	{r4, lr}
 8008d62:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <global_stdio_init.part.0+0x30>)
 8008d64:	4c0b      	ldr	r4, [pc, #44]	; (8008d94 <global_stdio_init.part.0+0x34>)
 8008d66:	4a0c      	ldr	r2, [pc, #48]	; (8008d98 <global_stdio_init.part.0+0x38>)
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	2104      	movs	r1, #4
 8008d70:	f7ff ff94 	bl	8008c9c <std>
 8008d74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008d78:	2201      	movs	r2, #1
 8008d7a:	2109      	movs	r1, #9
 8008d7c:	f7ff ff8e 	bl	8008c9c <std>
 8008d80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008d84:	2202      	movs	r2, #2
 8008d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d8a:	2112      	movs	r1, #18
 8008d8c:	f7ff bf86 	b.w	8008c9c <std>
 8008d90:	20000774 	.word	0x20000774
 8008d94:	2000063c 	.word	0x2000063c
 8008d98:	08008d09 	.word	0x08008d09

08008d9c <__sfp_lock_acquire>:
 8008d9c:	4801      	ldr	r0, [pc, #4]	; (8008da4 <__sfp_lock_acquire+0x8>)
 8008d9e:	f000 b98c 	b.w	80090ba <__retarget_lock_acquire_recursive>
 8008da2:	bf00      	nop
 8008da4:	2000077d 	.word	0x2000077d

08008da8 <__sfp_lock_release>:
 8008da8:	4801      	ldr	r0, [pc, #4]	; (8008db0 <__sfp_lock_release+0x8>)
 8008daa:	f000 b987 	b.w	80090bc <__retarget_lock_release_recursive>
 8008dae:	bf00      	nop
 8008db0:	2000077d 	.word	0x2000077d

08008db4 <__sinit>:
 8008db4:	b510      	push	{r4, lr}
 8008db6:	4604      	mov	r4, r0
 8008db8:	f7ff fff0 	bl	8008d9c <__sfp_lock_acquire>
 8008dbc:	6a23      	ldr	r3, [r4, #32]
 8008dbe:	b11b      	cbz	r3, 8008dc8 <__sinit+0x14>
 8008dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc4:	f7ff bff0 	b.w	8008da8 <__sfp_lock_release>
 8008dc8:	4b04      	ldr	r3, [pc, #16]	; (8008ddc <__sinit+0x28>)
 8008dca:	6223      	str	r3, [r4, #32]
 8008dcc:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <__sinit+0x2c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1f5      	bne.n	8008dc0 <__sinit+0xc>
 8008dd4:	f7ff ffc4 	bl	8008d60 <global_stdio_init.part.0>
 8008dd8:	e7f2      	b.n	8008dc0 <__sinit+0xc>
 8008dda:	bf00      	nop
 8008ddc:	08008d21 	.word	0x08008d21
 8008de0:	20000774 	.word	0x20000774

08008de4 <_fwalk_sglue>:
 8008de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de8:	4607      	mov	r7, r0
 8008dea:	4688      	mov	r8, r1
 8008dec:	4614      	mov	r4, r2
 8008dee:	2600      	movs	r6, #0
 8008df0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008df4:	f1b9 0901 	subs.w	r9, r9, #1
 8008df8:	d505      	bpl.n	8008e06 <_fwalk_sglue+0x22>
 8008dfa:	6824      	ldr	r4, [r4, #0]
 8008dfc:	2c00      	cmp	r4, #0
 8008dfe:	d1f7      	bne.n	8008df0 <_fwalk_sglue+0xc>
 8008e00:	4630      	mov	r0, r6
 8008e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e06:	89ab      	ldrh	r3, [r5, #12]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d907      	bls.n	8008e1c <_fwalk_sglue+0x38>
 8008e0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e10:	3301      	adds	r3, #1
 8008e12:	d003      	beq.n	8008e1c <_fwalk_sglue+0x38>
 8008e14:	4629      	mov	r1, r5
 8008e16:	4638      	mov	r0, r7
 8008e18:	47c0      	blx	r8
 8008e1a:	4306      	orrs	r6, r0
 8008e1c:	3568      	adds	r5, #104	; 0x68
 8008e1e:	e7e9      	b.n	8008df4 <_fwalk_sglue+0x10>

08008e20 <sniprintf>:
 8008e20:	b40c      	push	{r2, r3}
 8008e22:	b530      	push	{r4, r5, lr}
 8008e24:	4b17      	ldr	r3, [pc, #92]	; (8008e84 <sniprintf+0x64>)
 8008e26:	1e0c      	subs	r4, r1, #0
 8008e28:	681d      	ldr	r5, [r3, #0]
 8008e2a:	b09d      	sub	sp, #116	; 0x74
 8008e2c:	da08      	bge.n	8008e40 <sniprintf+0x20>
 8008e2e:	238b      	movs	r3, #139	; 0x8b
 8008e30:	602b      	str	r3, [r5, #0]
 8008e32:	f04f 30ff 	mov.w	r0, #4294967295
 8008e36:	b01d      	add	sp, #116	; 0x74
 8008e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e3c:	b002      	add	sp, #8
 8008e3e:	4770      	bx	lr
 8008e40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008e44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e48:	bf14      	ite	ne
 8008e4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e4e:	4623      	moveq	r3, r4
 8008e50:	9304      	str	r3, [sp, #16]
 8008e52:	9307      	str	r3, [sp, #28]
 8008e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e58:	9002      	str	r0, [sp, #8]
 8008e5a:	9006      	str	r0, [sp, #24]
 8008e5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008e60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e62:	ab21      	add	r3, sp, #132	; 0x84
 8008e64:	a902      	add	r1, sp, #8
 8008e66:	4628      	mov	r0, r5
 8008e68:	9301      	str	r3, [sp, #4]
 8008e6a:	f000 faa1 	bl	80093b0 <_svfiprintf_r>
 8008e6e:	1c43      	adds	r3, r0, #1
 8008e70:	bfbc      	itt	lt
 8008e72:	238b      	movlt	r3, #139	; 0x8b
 8008e74:	602b      	strlt	r3, [r5, #0]
 8008e76:	2c00      	cmp	r4, #0
 8008e78:	d0dd      	beq.n	8008e36 <sniprintf+0x16>
 8008e7a:	9b02      	ldr	r3, [sp, #8]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	701a      	strb	r2, [r3, #0]
 8008e80:	e7d9      	b.n	8008e36 <sniprintf+0x16>
 8008e82:	bf00      	nop
 8008e84:	20000270 	.word	0x20000270

08008e88 <__sread>:
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e90:	f000 f8c4 	bl	800901c <_read_r>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	bfab      	itete	ge
 8008e98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e9c:	181b      	addge	r3, r3, r0
 8008e9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ea2:	bfac      	ite	ge
 8008ea4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ea6:	81a3      	strhlt	r3, [r4, #12]
 8008ea8:	bd10      	pop	{r4, pc}

08008eaa <__swrite>:
 8008eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eae:	461f      	mov	r7, r3
 8008eb0:	898b      	ldrh	r3, [r1, #12]
 8008eb2:	05db      	lsls	r3, r3, #23
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	4616      	mov	r6, r2
 8008eba:	d505      	bpl.n	8008ec8 <__swrite+0x1e>
 8008ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f000 f898 	bl	8008ff8 <_lseek_r>
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	4632      	mov	r2, r6
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	4628      	mov	r0, r5
 8008eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ede:	f000 b8af 	b.w	8009040 <_write_r>

08008ee2 <__sseek>:
 8008ee2:	b510      	push	{r4, lr}
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eea:	f000 f885 	bl	8008ff8 <_lseek_r>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	bf15      	itete	ne
 8008ef4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008efa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008efe:	81a3      	strheq	r3, [r4, #12]
 8008f00:	bf18      	it	ne
 8008f02:	81a3      	strhne	r3, [r4, #12]
 8008f04:	bd10      	pop	{r4, pc}

08008f06 <__sclose>:
 8008f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f0a:	f000 b865 	b.w	8008fd8 <_close_r>

08008f0e <memset>:
 8008f0e:	4402      	add	r2, r0
 8008f10:	4603      	mov	r3, r0
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d100      	bne.n	8008f18 <memset+0xa>
 8008f16:	4770      	bx	lr
 8008f18:	f803 1b01 	strb.w	r1, [r3], #1
 8008f1c:	e7f9      	b.n	8008f12 <memset+0x4>
	...

08008f20 <strtok>:
 8008f20:	4b16      	ldr	r3, [pc, #88]	; (8008f7c <strtok+0x5c>)
 8008f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f24:	681e      	ldr	r6, [r3, #0]
 8008f26:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8008f28:	4605      	mov	r5, r0
 8008f2a:	b9fc      	cbnz	r4, 8008f6c <strtok+0x4c>
 8008f2c:	2050      	movs	r0, #80	; 0x50
 8008f2e:	9101      	str	r1, [sp, #4]
 8008f30:	f000 f930 	bl	8009194 <malloc>
 8008f34:	9901      	ldr	r1, [sp, #4]
 8008f36:	6470      	str	r0, [r6, #68]	; 0x44
 8008f38:	4602      	mov	r2, r0
 8008f3a:	b920      	cbnz	r0, 8008f46 <strtok+0x26>
 8008f3c:	4b10      	ldr	r3, [pc, #64]	; (8008f80 <strtok+0x60>)
 8008f3e:	4811      	ldr	r0, [pc, #68]	; (8008f84 <strtok+0x64>)
 8008f40:	215b      	movs	r1, #91	; 0x5b
 8008f42:	f000 f8bd 	bl	80090c0 <__assert_func>
 8008f46:	e9c0 4400 	strd	r4, r4, [r0]
 8008f4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008f4e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008f52:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008f56:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008f5a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008f5e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008f62:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008f66:	6184      	str	r4, [r0, #24]
 8008f68:	7704      	strb	r4, [r0, #28]
 8008f6a:	6244      	str	r4, [r0, #36]	; 0x24
 8008f6c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8008f6e:	2301      	movs	r3, #1
 8008f70:	4628      	mov	r0, r5
 8008f72:	b002      	add	sp, #8
 8008f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f78:	f000 b806 	b.w	8008f88 <__strtok_r>
 8008f7c:	20000270 	.word	0x20000270
 8008f80:	0800a289 	.word	0x0800a289
 8008f84:	0800a2a0 	.word	0x0800a2a0

08008f88 <__strtok_r>:
 8008f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f8a:	b908      	cbnz	r0, 8008f90 <__strtok_r+0x8>
 8008f8c:	6810      	ldr	r0, [r2, #0]
 8008f8e:	b188      	cbz	r0, 8008fb4 <__strtok_r+0x2c>
 8008f90:	4604      	mov	r4, r0
 8008f92:	4620      	mov	r0, r4
 8008f94:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008f98:	460f      	mov	r7, r1
 8008f9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008f9e:	b91e      	cbnz	r6, 8008fa8 <__strtok_r+0x20>
 8008fa0:	b965      	cbnz	r5, 8008fbc <__strtok_r+0x34>
 8008fa2:	6015      	str	r5, [r2, #0]
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	e005      	b.n	8008fb4 <__strtok_r+0x2c>
 8008fa8:	42b5      	cmp	r5, r6
 8008faa:	d1f6      	bne.n	8008f9a <__strtok_r+0x12>
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1f0      	bne.n	8008f92 <__strtok_r+0xa>
 8008fb0:	6014      	str	r4, [r2, #0]
 8008fb2:	7003      	strb	r3, [r0, #0]
 8008fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fb6:	461c      	mov	r4, r3
 8008fb8:	e00c      	b.n	8008fd4 <__strtok_r+0x4c>
 8008fba:	b915      	cbnz	r5, 8008fc2 <__strtok_r+0x3a>
 8008fbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008fc0:	460e      	mov	r6, r1
 8008fc2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008fc6:	42ab      	cmp	r3, r5
 8008fc8:	d1f7      	bne.n	8008fba <__strtok_r+0x32>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d0f3      	beq.n	8008fb6 <__strtok_r+0x2e>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008fd4:	6014      	str	r4, [r2, #0]
 8008fd6:	e7ed      	b.n	8008fb4 <__strtok_r+0x2c>

08008fd8 <_close_r>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4d06      	ldr	r5, [pc, #24]	; (8008ff4 <_close_r+0x1c>)
 8008fdc:	2300      	movs	r3, #0
 8008fde:	4604      	mov	r4, r0
 8008fe0:	4608      	mov	r0, r1
 8008fe2:	602b      	str	r3, [r5, #0]
 8008fe4:	f7f8 fb5b 	bl	800169e <_close>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d102      	bne.n	8008ff2 <_close_r+0x1a>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	b103      	cbz	r3, 8008ff2 <_close_r+0x1a>
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	20000778 	.word	0x20000778

08008ff8 <_lseek_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d07      	ldr	r5, [pc, #28]	; (8009018 <_lseek_r+0x20>)
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	4608      	mov	r0, r1
 8009000:	4611      	mov	r1, r2
 8009002:	2200      	movs	r2, #0
 8009004:	602a      	str	r2, [r5, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	f7f8 fb70 	bl	80016ec <_lseek>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d102      	bne.n	8009016 <_lseek_r+0x1e>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	b103      	cbz	r3, 8009016 <_lseek_r+0x1e>
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	20000778 	.word	0x20000778

0800901c <_read_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d07      	ldr	r5, [pc, #28]	; (800903c <_read_r+0x20>)
 8009020:	4604      	mov	r4, r0
 8009022:	4608      	mov	r0, r1
 8009024:	4611      	mov	r1, r2
 8009026:	2200      	movs	r2, #0
 8009028:	602a      	str	r2, [r5, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	f7f8 fafe 	bl	800162c <_read>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d102      	bne.n	800903a <_read_r+0x1e>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b103      	cbz	r3, 800903a <_read_r+0x1e>
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	20000778 	.word	0x20000778

08009040 <_write_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4d07      	ldr	r5, [pc, #28]	; (8009060 <_write_r+0x20>)
 8009044:	4604      	mov	r4, r0
 8009046:	4608      	mov	r0, r1
 8009048:	4611      	mov	r1, r2
 800904a:	2200      	movs	r2, #0
 800904c:	602a      	str	r2, [r5, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	f7f8 fb09 	bl	8001666 <_write>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d102      	bne.n	800905e <_write_r+0x1e>
 8009058:	682b      	ldr	r3, [r5, #0]
 800905a:	b103      	cbz	r3, 800905e <_write_r+0x1e>
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	20000778 	.word	0x20000778

08009064 <__errno>:
 8009064:	4b01      	ldr	r3, [pc, #4]	; (800906c <__errno+0x8>)
 8009066:	6818      	ldr	r0, [r3, #0]
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	20000270 	.word	0x20000270

08009070 <__libc_init_array>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	4d0d      	ldr	r5, [pc, #52]	; (80090a8 <__libc_init_array+0x38>)
 8009074:	4c0d      	ldr	r4, [pc, #52]	; (80090ac <__libc_init_array+0x3c>)
 8009076:	1b64      	subs	r4, r4, r5
 8009078:	10a4      	asrs	r4, r4, #2
 800907a:	2600      	movs	r6, #0
 800907c:	42a6      	cmp	r6, r4
 800907e:	d109      	bne.n	8009094 <__libc_init_array+0x24>
 8009080:	4d0b      	ldr	r5, [pc, #44]	; (80090b0 <__libc_init_array+0x40>)
 8009082:	4c0c      	ldr	r4, [pc, #48]	; (80090b4 <__libc_init_array+0x44>)
 8009084:	f000 fffa 	bl	800a07c <_init>
 8009088:	1b64      	subs	r4, r4, r5
 800908a:	10a4      	asrs	r4, r4, #2
 800908c:	2600      	movs	r6, #0
 800908e:	42a6      	cmp	r6, r4
 8009090:	d105      	bne.n	800909e <__libc_init_array+0x2e>
 8009092:	bd70      	pop	{r4, r5, r6, pc}
 8009094:	f855 3b04 	ldr.w	r3, [r5], #4
 8009098:	4798      	blx	r3
 800909a:	3601      	adds	r6, #1
 800909c:	e7ee      	b.n	800907c <__libc_init_array+0xc>
 800909e:	f855 3b04 	ldr.w	r3, [r5], #4
 80090a2:	4798      	blx	r3
 80090a4:	3601      	adds	r6, #1
 80090a6:	e7f2      	b.n	800908e <__libc_init_array+0x1e>
 80090a8:	0800a374 	.word	0x0800a374
 80090ac:	0800a374 	.word	0x0800a374
 80090b0:	0800a374 	.word	0x0800a374
 80090b4:	0800a378 	.word	0x0800a378

080090b8 <__retarget_lock_init_recursive>:
 80090b8:	4770      	bx	lr

080090ba <__retarget_lock_acquire_recursive>:
 80090ba:	4770      	bx	lr

080090bc <__retarget_lock_release_recursive>:
 80090bc:	4770      	bx	lr
	...

080090c0 <__assert_func>:
 80090c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090c2:	4614      	mov	r4, r2
 80090c4:	461a      	mov	r2, r3
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <__assert_func+0x2c>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4605      	mov	r5, r0
 80090cc:	68d8      	ldr	r0, [r3, #12]
 80090ce:	b14c      	cbz	r4, 80090e4 <__assert_func+0x24>
 80090d0:	4b07      	ldr	r3, [pc, #28]	; (80090f0 <__assert_func+0x30>)
 80090d2:	9100      	str	r1, [sp, #0]
 80090d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090d8:	4906      	ldr	r1, [pc, #24]	; (80090f4 <__assert_func+0x34>)
 80090da:	462b      	mov	r3, r5
 80090dc:	f000 fca4 	bl	8009a28 <fiprintf>
 80090e0:	f000 fcec 	bl	8009abc <abort>
 80090e4:	4b04      	ldr	r3, [pc, #16]	; (80090f8 <__assert_func+0x38>)
 80090e6:	461c      	mov	r4, r3
 80090e8:	e7f3      	b.n	80090d2 <__assert_func+0x12>
 80090ea:	bf00      	nop
 80090ec:	20000270 	.word	0x20000270
 80090f0:	0800a2fa 	.word	0x0800a2fa
 80090f4:	0800a307 	.word	0x0800a307
 80090f8:	0800a335 	.word	0x0800a335

080090fc <_free_r>:
 80090fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090fe:	2900      	cmp	r1, #0
 8009100:	d044      	beq.n	800918c <_free_r+0x90>
 8009102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009106:	9001      	str	r0, [sp, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	f1a1 0404 	sub.w	r4, r1, #4
 800910e:	bfb8      	it	lt
 8009110:	18e4      	addlt	r4, r4, r3
 8009112:	f000 f8e7 	bl	80092e4 <__malloc_lock>
 8009116:	4a1e      	ldr	r2, [pc, #120]	; (8009190 <_free_r+0x94>)
 8009118:	9801      	ldr	r0, [sp, #4]
 800911a:	6813      	ldr	r3, [r2, #0]
 800911c:	b933      	cbnz	r3, 800912c <_free_r+0x30>
 800911e:	6063      	str	r3, [r4, #4]
 8009120:	6014      	str	r4, [r2, #0]
 8009122:	b003      	add	sp, #12
 8009124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009128:	f000 b8e2 	b.w	80092f0 <__malloc_unlock>
 800912c:	42a3      	cmp	r3, r4
 800912e:	d908      	bls.n	8009142 <_free_r+0x46>
 8009130:	6825      	ldr	r5, [r4, #0]
 8009132:	1961      	adds	r1, r4, r5
 8009134:	428b      	cmp	r3, r1
 8009136:	bf01      	itttt	eq
 8009138:	6819      	ldreq	r1, [r3, #0]
 800913a:	685b      	ldreq	r3, [r3, #4]
 800913c:	1949      	addeq	r1, r1, r5
 800913e:	6021      	streq	r1, [r4, #0]
 8009140:	e7ed      	b.n	800911e <_free_r+0x22>
 8009142:	461a      	mov	r2, r3
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	b10b      	cbz	r3, 800914c <_free_r+0x50>
 8009148:	42a3      	cmp	r3, r4
 800914a:	d9fa      	bls.n	8009142 <_free_r+0x46>
 800914c:	6811      	ldr	r1, [r2, #0]
 800914e:	1855      	adds	r5, r2, r1
 8009150:	42a5      	cmp	r5, r4
 8009152:	d10b      	bne.n	800916c <_free_r+0x70>
 8009154:	6824      	ldr	r4, [r4, #0]
 8009156:	4421      	add	r1, r4
 8009158:	1854      	adds	r4, r2, r1
 800915a:	42a3      	cmp	r3, r4
 800915c:	6011      	str	r1, [r2, #0]
 800915e:	d1e0      	bne.n	8009122 <_free_r+0x26>
 8009160:	681c      	ldr	r4, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	6053      	str	r3, [r2, #4]
 8009166:	440c      	add	r4, r1
 8009168:	6014      	str	r4, [r2, #0]
 800916a:	e7da      	b.n	8009122 <_free_r+0x26>
 800916c:	d902      	bls.n	8009174 <_free_r+0x78>
 800916e:	230c      	movs	r3, #12
 8009170:	6003      	str	r3, [r0, #0]
 8009172:	e7d6      	b.n	8009122 <_free_r+0x26>
 8009174:	6825      	ldr	r5, [r4, #0]
 8009176:	1961      	adds	r1, r4, r5
 8009178:	428b      	cmp	r3, r1
 800917a:	bf04      	itt	eq
 800917c:	6819      	ldreq	r1, [r3, #0]
 800917e:	685b      	ldreq	r3, [r3, #4]
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	bf04      	itt	eq
 8009184:	1949      	addeq	r1, r1, r5
 8009186:	6021      	streq	r1, [r4, #0]
 8009188:	6054      	str	r4, [r2, #4]
 800918a:	e7ca      	b.n	8009122 <_free_r+0x26>
 800918c:	b003      	add	sp, #12
 800918e:	bd30      	pop	{r4, r5, pc}
 8009190:	20000780 	.word	0x20000780

08009194 <malloc>:
 8009194:	4b02      	ldr	r3, [pc, #8]	; (80091a0 <malloc+0xc>)
 8009196:	4601      	mov	r1, r0
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	f000 b823 	b.w	80091e4 <_malloc_r>
 800919e:	bf00      	nop
 80091a0:	20000270 	.word	0x20000270

080091a4 <sbrk_aligned>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	4e0e      	ldr	r6, [pc, #56]	; (80091e0 <sbrk_aligned+0x3c>)
 80091a8:	460c      	mov	r4, r1
 80091aa:	6831      	ldr	r1, [r6, #0]
 80091ac:	4605      	mov	r5, r0
 80091ae:	b911      	cbnz	r1, 80091b6 <sbrk_aligned+0x12>
 80091b0:	f000 fc66 	bl	8009a80 <_sbrk_r>
 80091b4:	6030      	str	r0, [r6, #0]
 80091b6:	4621      	mov	r1, r4
 80091b8:	4628      	mov	r0, r5
 80091ba:	f000 fc61 	bl	8009a80 <_sbrk_r>
 80091be:	1c43      	adds	r3, r0, #1
 80091c0:	d00a      	beq.n	80091d8 <sbrk_aligned+0x34>
 80091c2:	1cc4      	adds	r4, r0, #3
 80091c4:	f024 0403 	bic.w	r4, r4, #3
 80091c8:	42a0      	cmp	r0, r4
 80091ca:	d007      	beq.n	80091dc <sbrk_aligned+0x38>
 80091cc:	1a21      	subs	r1, r4, r0
 80091ce:	4628      	mov	r0, r5
 80091d0:	f000 fc56 	bl	8009a80 <_sbrk_r>
 80091d4:	3001      	adds	r0, #1
 80091d6:	d101      	bne.n	80091dc <sbrk_aligned+0x38>
 80091d8:	f04f 34ff 	mov.w	r4, #4294967295
 80091dc:	4620      	mov	r0, r4
 80091de:	bd70      	pop	{r4, r5, r6, pc}
 80091e0:	20000784 	.word	0x20000784

080091e4 <_malloc_r>:
 80091e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091e8:	1ccd      	adds	r5, r1, #3
 80091ea:	f025 0503 	bic.w	r5, r5, #3
 80091ee:	3508      	adds	r5, #8
 80091f0:	2d0c      	cmp	r5, #12
 80091f2:	bf38      	it	cc
 80091f4:	250c      	movcc	r5, #12
 80091f6:	2d00      	cmp	r5, #0
 80091f8:	4607      	mov	r7, r0
 80091fa:	db01      	blt.n	8009200 <_malloc_r+0x1c>
 80091fc:	42a9      	cmp	r1, r5
 80091fe:	d905      	bls.n	800920c <_malloc_r+0x28>
 8009200:	230c      	movs	r3, #12
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	2600      	movs	r6, #0
 8009206:	4630      	mov	r0, r6
 8009208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800920c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80092e0 <_malloc_r+0xfc>
 8009210:	f000 f868 	bl	80092e4 <__malloc_lock>
 8009214:	f8d8 3000 	ldr.w	r3, [r8]
 8009218:	461c      	mov	r4, r3
 800921a:	bb5c      	cbnz	r4, 8009274 <_malloc_r+0x90>
 800921c:	4629      	mov	r1, r5
 800921e:	4638      	mov	r0, r7
 8009220:	f7ff ffc0 	bl	80091a4 <sbrk_aligned>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	4604      	mov	r4, r0
 8009228:	d155      	bne.n	80092d6 <_malloc_r+0xf2>
 800922a:	f8d8 4000 	ldr.w	r4, [r8]
 800922e:	4626      	mov	r6, r4
 8009230:	2e00      	cmp	r6, #0
 8009232:	d145      	bne.n	80092c0 <_malloc_r+0xdc>
 8009234:	2c00      	cmp	r4, #0
 8009236:	d048      	beq.n	80092ca <_malloc_r+0xe6>
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	4631      	mov	r1, r6
 800923c:	4638      	mov	r0, r7
 800923e:	eb04 0903 	add.w	r9, r4, r3
 8009242:	f000 fc1d 	bl	8009a80 <_sbrk_r>
 8009246:	4581      	cmp	r9, r0
 8009248:	d13f      	bne.n	80092ca <_malloc_r+0xe6>
 800924a:	6821      	ldr	r1, [r4, #0]
 800924c:	1a6d      	subs	r5, r5, r1
 800924e:	4629      	mov	r1, r5
 8009250:	4638      	mov	r0, r7
 8009252:	f7ff ffa7 	bl	80091a4 <sbrk_aligned>
 8009256:	3001      	adds	r0, #1
 8009258:	d037      	beq.n	80092ca <_malloc_r+0xe6>
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	442b      	add	r3, r5
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	f8d8 3000 	ldr.w	r3, [r8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d038      	beq.n	80092da <_malloc_r+0xf6>
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	42a2      	cmp	r2, r4
 800926c:	d12b      	bne.n	80092c6 <_malloc_r+0xe2>
 800926e:	2200      	movs	r2, #0
 8009270:	605a      	str	r2, [r3, #4]
 8009272:	e00f      	b.n	8009294 <_malloc_r+0xb0>
 8009274:	6822      	ldr	r2, [r4, #0]
 8009276:	1b52      	subs	r2, r2, r5
 8009278:	d41f      	bmi.n	80092ba <_malloc_r+0xd6>
 800927a:	2a0b      	cmp	r2, #11
 800927c:	d917      	bls.n	80092ae <_malloc_r+0xca>
 800927e:	1961      	adds	r1, r4, r5
 8009280:	42a3      	cmp	r3, r4
 8009282:	6025      	str	r5, [r4, #0]
 8009284:	bf18      	it	ne
 8009286:	6059      	strne	r1, [r3, #4]
 8009288:	6863      	ldr	r3, [r4, #4]
 800928a:	bf08      	it	eq
 800928c:	f8c8 1000 	streq.w	r1, [r8]
 8009290:	5162      	str	r2, [r4, r5]
 8009292:	604b      	str	r3, [r1, #4]
 8009294:	4638      	mov	r0, r7
 8009296:	f104 060b 	add.w	r6, r4, #11
 800929a:	f000 f829 	bl	80092f0 <__malloc_unlock>
 800929e:	f026 0607 	bic.w	r6, r6, #7
 80092a2:	1d23      	adds	r3, r4, #4
 80092a4:	1af2      	subs	r2, r6, r3
 80092a6:	d0ae      	beq.n	8009206 <_malloc_r+0x22>
 80092a8:	1b9b      	subs	r3, r3, r6
 80092aa:	50a3      	str	r3, [r4, r2]
 80092ac:	e7ab      	b.n	8009206 <_malloc_r+0x22>
 80092ae:	42a3      	cmp	r3, r4
 80092b0:	6862      	ldr	r2, [r4, #4]
 80092b2:	d1dd      	bne.n	8009270 <_malloc_r+0x8c>
 80092b4:	f8c8 2000 	str.w	r2, [r8]
 80092b8:	e7ec      	b.n	8009294 <_malloc_r+0xb0>
 80092ba:	4623      	mov	r3, r4
 80092bc:	6864      	ldr	r4, [r4, #4]
 80092be:	e7ac      	b.n	800921a <_malloc_r+0x36>
 80092c0:	4634      	mov	r4, r6
 80092c2:	6876      	ldr	r6, [r6, #4]
 80092c4:	e7b4      	b.n	8009230 <_malloc_r+0x4c>
 80092c6:	4613      	mov	r3, r2
 80092c8:	e7cc      	b.n	8009264 <_malloc_r+0x80>
 80092ca:	230c      	movs	r3, #12
 80092cc:	603b      	str	r3, [r7, #0]
 80092ce:	4638      	mov	r0, r7
 80092d0:	f000 f80e 	bl	80092f0 <__malloc_unlock>
 80092d4:	e797      	b.n	8009206 <_malloc_r+0x22>
 80092d6:	6025      	str	r5, [r4, #0]
 80092d8:	e7dc      	b.n	8009294 <_malloc_r+0xb0>
 80092da:	605b      	str	r3, [r3, #4]
 80092dc:	deff      	udf	#255	; 0xff
 80092de:	bf00      	nop
 80092e0:	20000780 	.word	0x20000780

080092e4 <__malloc_lock>:
 80092e4:	4801      	ldr	r0, [pc, #4]	; (80092ec <__malloc_lock+0x8>)
 80092e6:	f7ff bee8 	b.w	80090ba <__retarget_lock_acquire_recursive>
 80092ea:	bf00      	nop
 80092ec:	2000077c 	.word	0x2000077c

080092f0 <__malloc_unlock>:
 80092f0:	4801      	ldr	r0, [pc, #4]	; (80092f8 <__malloc_unlock+0x8>)
 80092f2:	f7ff bee3 	b.w	80090bc <__retarget_lock_release_recursive>
 80092f6:	bf00      	nop
 80092f8:	2000077c 	.word	0x2000077c

080092fc <__ssputs_r>:
 80092fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009300:	688e      	ldr	r6, [r1, #8]
 8009302:	461f      	mov	r7, r3
 8009304:	42be      	cmp	r6, r7
 8009306:	680b      	ldr	r3, [r1, #0]
 8009308:	4682      	mov	sl, r0
 800930a:	460c      	mov	r4, r1
 800930c:	4690      	mov	r8, r2
 800930e:	d82c      	bhi.n	800936a <__ssputs_r+0x6e>
 8009310:	898a      	ldrh	r2, [r1, #12]
 8009312:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009316:	d026      	beq.n	8009366 <__ssputs_r+0x6a>
 8009318:	6965      	ldr	r5, [r4, #20]
 800931a:	6909      	ldr	r1, [r1, #16]
 800931c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009320:	eba3 0901 	sub.w	r9, r3, r1
 8009324:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009328:	1c7b      	adds	r3, r7, #1
 800932a:	444b      	add	r3, r9
 800932c:	106d      	asrs	r5, r5, #1
 800932e:	429d      	cmp	r5, r3
 8009330:	bf38      	it	cc
 8009332:	461d      	movcc	r5, r3
 8009334:	0553      	lsls	r3, r2, #21
 8009336:	d527      	bpl.n	8009388 <__ssputs_r+0x8c>
 8009338:	4629      	mov	r1, r5
 800933a:	f7ff ff53 	bl	80091e4 <_malloc_r>
 800933e:	4606      	mov	r6, r0
 8009340:	b360      	cbz	r0, 800939c <__ssputs_r+0xa0>
 8009342:	6921      	ldr	r1, [r4, #16]
 8009344:	464a      	mov	r2, r9
 8009346:	f000 fbab 	bl	8009aa0 <memcpy>
 800934a:	89a3      	ldrh	r3, [r4, #12]
 800934c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009354:	81a3      	strh	r3, [r4, #12]
 8009356:	6126      	str	r6, [r4, #16]
 8009358:	6165      	str	r5, [r4, #20]
 800935a:	444e      	add	r6, r9
 800935c:	eba5 0509 	sub.w	r5, r5, r9
 8009360:	6026      	str	r6, [r4, #0]
 8009362:	60a5      	str	r5, [r4, #8]
 8009364:	463e      	mov	r6, r7
 8009366:	42be      	cmp	r6, r7
 8009368:	d900      	bls.n	800936c <__ssputs_r+0x70>
 800936a:	463e      	mov	r6, r7
 800936c:	6820      	ldr	r0, [r4, #0]
 800936e:	4632      	mov	r2, r6
 8009370:	4641      	mov	r1, r8
 8009372:	f000 fb6b 	bl	8009a4c <memmove>
 8009376:	68a3      	ldr	r3, [r4, #8]
 8009378:	1b9b      	subs	r3, r3, r6
 800937a:	60a3      	str	r3, [r4, #8]
 800937c:	6823      	ldr	r3, [r4, #0]
 800937e:	4433      	add	r3, r6
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	2000      	movs	r0, #0
 8009384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009388:	462a      	mov	r2, r5
 800938a:	f000 fb9e 	bl	8009aca <_realloc_r>
 800938e:	4606      	mov	r6, r0
 8009390:	2800      	cmp	r0, #0
 8009392:	d1e0      	bne.n	8009356 <__ssputs_r+0x5a>
 8009394:	6921      	ldr	r1, [r4, #16]
 8009396:	4650      	mov	r0, sl
 8009398:	f7ff feb0 	bl	80090fc <_free_r>
 800939c:	230c      	movs	r3, #12
 800939e:	f8ca 3000 	str.w	r3, [sl]
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	f04f 30ff 	mov.w	r0, #4294967295
 80093ae:	e7e9      	b.n	8009384 <__ssputs_r+0x88>

080093b0 <_svfiprintf_r>:
 80093b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	4698      	mov	r8, r3
 80093b6:	898b      	ldrh	r3, [r1, #12]
 80093b8:	061b      	lsls	r3, r3, #24
 80093ba:	b09d      	sub	sp, #116	; 0x74
 80093bc:	4607      	mov	r7, r0
 80093be:	460d      	mov	r5, r1
 80093c0:	4614      	mov	r4, r2
 80093c2:	d50e      	bpl.n	80093e2 <_svfiprintf_r+0x32>
 80093c4:	690b      	ldr	r3, [r1, #16]
 80093c6:	b963      	cbnz	r3, 80093e2 <_svfiprintf_r+0x32>
 80093c8:	2140      	movs	r1, #64	; 0x40
 80093ca:	f7ff ff0b 	bl	80091e4 <_malloc_r>
 80093ce:	6028      	str	r0, [r5, #0]
 80093d0:	6128      	str	r0, [r5, #16]
 80093d2:	b920      	cbnz	r0, 80093de <_svfiprintf_r+0x2e>
 80093d4:	230c      	movs	r3, #12
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	f04f 30ff 	mov.w	r0, #4294967295
 80093dc:	e0d0      	b.n	8009580 <_svfiprintf_r+0x1d0>
 80093de:	2340      	movs	r3, #64	; 0x40
 80093e0:	616b      	str	r3, [r5, #20]
 80093e2:	2300      	movs	r3, #0
 80093e4:	9309      	str	r3, [sp, #36]	; 0x24
 80093e6:	2320      	movs	r3, #32
 80093e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80093f0:	2330      	movs	r3, #48	; 0x30
 80093f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009598 <_svfiprintf_r+0x1e8>
 80093f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093fa:	f04f 0901 	mov.w	r9, #1
 80093fe:	4623      	mov	r3, r4
 8009400:	469a      	mov	sl, r3
 8009402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009406:	b10a      	cbz	r2, 800940c <_svfiprintf_r+0x5c>
 8009408:	2a25      	cmp	r2, #37	; 0x25
 800940a:	d1f9      	bne.n	8009400 <_svfiprintf_r+0x50>
 800940c:	ebba 0b04 	subs.w	fp, sl, r4
 8009410:	d00b      	beq.n	800942a <_svfiprintf_r+0x7a>
 8009412:	465b      	mov	r3, fp
 8009414:	4622      	mov	r2, r4
 8009416:	4629      	mov	r1, r5
 8009418:	4638      	mov	r0, r7
 800941a:	f7ff ff6f 	bl	80092fc <__ssputs_r>
 800941e:	3001      	adds	r0, #1
 8009420:	f000 80a9 	beq.w	8009576 <_svfiprintf_r+0x1c6>
 8009424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009426:	445a      	add	r2, fp
 8009428:	9209      	str	r2, [sp, #36]	; 0x24
 800942a:	f89a 3000 	ldrb.w	r3, [sl]
 800942e:	2b00      	cmp	r3, #0
 8009430:	f000 80a1 	beq.w	8009576 <_svfiprintf_r+0x1c6>
 8009434:	2300      	movs	r3, #0
 8009436:	f04f 32ff 	mov.w	r2, #4294967295
 800943a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800943e:	f10a 0a01 	add.w	sl, sl, #1
 8009442:	9304      	str	r3, [sp, #16]
 8009444:	9307      	str	r3, [sp, #28]
 8009446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800944a:	931a      	str	r3, [sp, #104]	; 0x68
 800944c:	4654      	mov	r4, sl
 800944e:	2205      	movs	r2, #5
 8009450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009454:	4850      	ldr	r0, [pc, #320]	; (8009598 <_svfiprintf_r+0x1e8>)
 8009456:	f7f6 fefb 	bl	8000250 <memchr>
 800945a:	9a04      	ldr	r2, [sp, #16]
 800945c:	b9d8      	cbnz	r0, 8009496 <_svfiprintf_r+0xe6>
 800945e:	06d0      	lsls	r0, r2, #27
 8009460:	bf44      	itt	mi
 8009462:	2320      	movmi	r3, #32
 8009464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009468:	0711      	lsls	r1, r2, #28
 800946a:	bf44      	itt	mi
 800946c:	232b      	movmi	r3, #43	; 0x2b
 800946e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009472:	f89a 3000 	ldrb.w	r3, [sl]
 8009476:	2b2a      	cmp	r3, #42	; 0x2a
 8009478:	d015      	beq.n	80094a6 <_svfiprintf_r+0xf6>
 800947a:	9a07      	ldr	r2, [sp, #28]
 800947c:	4654      	mov	r4, sl
 800947e:	2000      	movs	r0, #0
 8009480:	f04f 0c0a 	mov.w	ip, #10
 8009484:	4621      	mov	r1, r4
 8009486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800948a:	3b30      	subs	r3, #48	; 0x30
 800948c:	2b09      	cmp	r3, #9
 800948e:	d94d      	bls.n	800952c <_svfiprintf_r+0x17c>
 8009490:	b1b0      	cbz	r0, 80094c0 <_svfiprintf_r+0x110>
 8009492:	9207      	str	r2, [sp, #28]
 8009494:	e014      	b.n	80094c0 <_svfiprintf_r+0x110>
 8009496:	eba0 0308 	sub.w	r3, r0, r8
 800949a:	fa09 f303 	lsl.w	r3, r9, r3
 800949e:	4313      	orrs	r3, r2
 80094a0:	9304      	str	r3, [sp, #16]
 80094a2:	46a2      	mov	sl, r4
 80094a4:	e7d2      	b.n	800944c <_svfiprintf_r+0x9c>
 80094a6:	9b03      	ldr	r3, [sp, #12]
 80094a8:	1d19      	adds	r1, r3, #4
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	9103      	str	r1, [sp, #12]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	bfbb      	ittet	lt
 80094b2:	425b      	neglt	r3, r3
 80094b4:	f042 0202 	orrlt.w	r2, r2, #2
 80094b8:	9307      	strge	r3, [sp, #28]
 80094ba:	9307      	strlt	r3, [sp, #28]
 80094bc:	bfb8      	it	lt
 80094be:	9204      	strlt	r2, [sp, #16]
 80094c0:	7823      	ldrb	r3, [r4, #0]
 80094c2:	2b2e      	cmp	r3, #46	; 0x2e
 80094c4:	d10c      	bne.n	80094e0 <_svfiprintf_r+0x130>
 80094c6:	7863      	ldrb	r3, [r4, #1]
 80094c8:	2b2a      	cmp	r3, #42	; 0x2a
 80094ca:	d134      	bne.n	8009536 <_svfiprintf_r+0x186>
 80094cc:	9b03      	ldr	r3, [sp, #12]
 80094ce:	1d1a      	adds	r2, r3, #4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	9203      	str	r2, [sp, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	bfb8      	it	lt
 80094d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80094dc:	3402      	adds	r4, #2
 80094de:	9305      	str	r3, [sp, #20]
 80094e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80095a8 <_svfiprintf_r+0x1f8>
 80094e4:	7821      	ldrb	r1, [r4, #0]
 80094e6:	2203      	movs	r2, #3
 80094e8:	4650      	mov	r0, sl
 80094ea:	f7f6 feb1 	bl	8000250 <memchr>
 80094ee:	b138      	cbz	r0, 8009500 <_svfiprintf_r+0x150>
 80094f0:	9b04      	ldr	r3, [sp, #16]
 80094f2:	eba0 000a 	sub.w	r0, r0, sl
 80094f6:	2240      	movs	r2, #64	; 0x40
 80094f8:	4082      	lsls	r2, r0
 80094fa:	4313      	orrs	r3, r2
 80094fc:	3401      	adds	r4, #1
 80094fe:	9304      	str	r3, [sp, #16]
 8009500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009504:	4825      	ldr	r0, [pc, #148]	; (800959c <_svfiprintf_r+0x1ec>)
 8009506:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800950a:	2206      	movs	r2, #6
 800950c:	f7f6 fea0 	bl	8000250 <memchr>
 8009510:	2800      	cmp	r0, #0
 8009512:	d038      	beq.n	8009586 <_svfiprintf_r+0x1d6>
 8009514:	4b22      	ldr	r3, [pc, #136]	; (80095a0 <_svfiprintf_r+0x1f0>)
 8009516:	bb1b      	cbnz	r3, 8009560 <_svfiprintf_r+0x1b0>
 8009518:	9b03      	ldr	r3, [sp, #12]
 800951a:	3307      	adds	r3, #7
 800951c:	f023 0307 	bic.w	r3, r3, #7
 8009520:	3308      	adds	r3, #8
 8009522:	9303      	str	r3, [sp, #12]
 8009524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009526:	4433      	add	r3, r6
 8009528:	9309      	str	r3, [sp, #36]	; 0x24
 800952a:	e768      	b.n	80093fe <_svfiprintf_r+0x4e>
 800952c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009530:	460c      	mov	r4, r1
 8009532:	2001      	movs	r0, #1
 8009534:	e7a6      	b.n	8009484 <_svfiprintf_r+0xd4>
 8009536:	2300      	movs	r3, #0
 8009538:	3401      	adds	r4, #1
 800953a:	9305      	str	r3, [sp, #20]
 800953c:	4619      	mov	r1, r3
 800953e:	f04f 0c0a 	mov.w	ip, #10
 8009542:	4620      	mov	r0, r4
 8009544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009548:	3a30      	subs	r2, #48	; 0x30
 800954a:	2a09      	cmp	r2, #9
 800954c:	d903      	bls.n	8009556 <_svfiprintf_r+0x1a6>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0c6      	beq.n	80094e0 <_svfiprintf_r+0x130>
 8009552:	9105      	str	r1, [sp, #20]
 8009554:	e7c4      	b.n	80094e0 <_svfiprintf_r+0x130>
 8009556:	fb0c 2101 	mla	r1, ip, r1, r2
 800955a:	4604      	mov	r4, r0
 800955c:	2301      	movs	r3, #1
 800955e:	e7f0      	b.n	8009542 <_svfiprintf_r+0x192>
 8009560:	ab03      	add	r3, sp, #12
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	462a      	mov	r2, r5
 8009566:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <_svfiprintf_r+0x1f4>)
 8009568:	a904      	add	r1, sp, #16
 800956a:	4638      	mov	r0, r7
 800956c:	f3af 8000 	nop.w
 8009570:	1c42      	adds	r2, r0, #1
 8009572:	4606      	mov	r6, r0
 8009574:	d1d6      	bne.n	8009524 <_svfiprintf_r+0x174>
 8009576:	89ab      	ldrh	r3, [r5, #12]
 8009578:	065b      	lsls	r3, r3, #25
 800957a:	f53f af2d 	bmi.w	80093d8 <_svfiprintf_r+0x28>
 800957e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009580:	b01d      	add	sp, #116	; 0x74
 8009582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009586:	ab03      	add	r3, sp, #12
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	462a      	mov	r2, r5
 800958c:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <_svfiprintf_r+0x1f4>)
 800958e:	a904      	add	r1, sp, #16
 8009590:	4638      	mov	r0, r7
 8009592:	f000 f879 	bl	8009688 <_printf_i>
 8009596:	e7eb      	b.n	8009570 <_svfiprintf_r+0x1c0>
 8009598:	0800a336 	.word	0x0800a336
 800959c:	0800a340 	.word	0x0800a340
 80095a0:	00000000 	.word	0x00000000
 80095a4:	080092fd 	.word	0x080092fd
 80095a8:	0800a33c 	.word	0x0800a33c

080095ac <_printf_common>:
 80095ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b0:	4616      	mov	r6, r2
 80095b2:	4699      	mov	r9, r3
 80095b4:	688a      	ldr	r2, [r1, #8]
 80095b6:	690b      	ldr	r3, [r1, #16]
 80095b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095bc:	4293      	cmp	r3, r2
 80095be:	bfb8      	it	lt
 80095c0:	4613      	movlt	r3, r2
 80095c2:	6033      	str	r3, [r6, #0]
 80095c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095c8:	4607      	mov	r7, r0
 80095ca:	460c      	mov	r4, r1
 80095cc:	b10a      	cbz	r2, 80095d2 <_printf_common+0x26>
 80095ce:	3301      	adds	r3, #1
 80095d0:	6033      	str	r3, [r6, #0]
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	0699      	lsls	r1, r3, #26
 80095d6:	bf42      	ittt	mi
 80095d8:	6833      	ldrmi	r3, [r6, #0]
 80095da:	3302      	addmi	r3, #2
 80095dc:	6033      	strmi	r3, [r6, #0]
 80095de:	6825      	ldr	r5, [r4, #0]
 80095e0:	f015 0506 	ands.w	r5, r5, #6
 80095e4:	d106      	bne.n	80095f4 <_printf_common+0x48>
 80095e6:	f104 0a19 	add.w	sl, r4, #25
 80095ea:	68e3      	ldr	r3, [r4, #12]
 80095ec:	6832      	ldr	r2, [r6, #0]
 80095ee:	1a9b      	subs	r3, r3, r2
 80095f0:	42ab      	cmp	r3, r5
 80095f2:	dc26      	bgt.n	8009642 <_printf_common+0x96>
 80095f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095f8:	1e13      	subs	r3, r2, #0
 80095fa:	6822      	ldr	r2, [r4, #0]
 80095fc:	bf18      	it	ne
 80095fe:	2301      	movne	r3, #1
 8009600:	0692      	lsls	r2, r2, #26
 8009602:	d42b      	bmi.n	800965c <_printf_common+0xb0>
 8009604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009608:	4649      	mov	r1, r9
 800960a:	4638      	mov	r0, r7
 800960c:	47c0      	blx	r8
 800960e:	3001      	adds	r0, #1
 8009610:	d01e      	beq.n	8009650 <_printf_common+0xa4>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	6922      	ldr	r2, [r4, #16]
 8009616:	f003 0306 	and.w	r3, r3, #6
 800961a:	2b04      	cmp	r3, #4
 800961c:	bf02      	ittt	eq
 800961e:	68e5      	ldreq	r5, [r4, #12]
 8009620:	6833      	ldreq	r3, [r6, #0]
 8009622:	1aed      	subeq	r5, r5, r3
 8009624:	68a3      	ldr	r3, [r4, #8]
 8009626:	bf0c      	ite	eq
 8009628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800962c:	2500      	movne	r5, #0
 800962e:	4293      	cmp	r3, r2
 8009630:	bfc4      	itt	gt
 8009632:	1a9b      	subgt	r3, r3, r2
 8009634:	18ed      	addgt	r5, r5, r3
 8009636:	2600      	movs	r6, #0
 8009638:	341a      	adds	r4, #26
 800963a:	42b5      	cmp	r5, r6
 800963c:	d11a      	bne.n	8009674 <_printf_common+0xc8>
 800963e:	2000      	movs	r0, #0
 8009640:	e008      	b.n	8009654 <_printf_common+0xa8>
 8009642:	2301      	movs	r3, #1
 8009644:	4652      	mov	r2, sl
 8009646:	4649      	mov	r1, r9
 8009648:	4638      	mov	r0, r7
 800964a:	47c0      	blx	r8
 800964c:	3001      	adds	r0, #1
 800964e:	d103      	bne.n	8009658 <_printf_common+0xac>
 8009650:	f04f 30ff 	mov.w	r0, #4294967295
 8009654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009658:	3501      	adds	r5, #1
 800965a:	e7c6      	b.n	80095ea <_printf_common+0x3e>
 800965c:	18e1      	adds	r1, r4, r3
 800965e:	1c5a      	adds	r2, r3, #1
 8009660:	2030      	movs	r0, #48	; 0x30
 8009662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009666:	4422      	add	r2, r4
 8009668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800966c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009670:	3302      	adds	r3, #2
 8009672:	e7c7      	b.n	8009604 <_printf_common+0x58>
 8009674:	2301      	movs	r3, #1
 8009676:	4622      	mov	r2, r4
 8009678:	4649      	mov	r1, r9
 800967a:	4638      	mov	r0, r7
 800967c:	47c0      	blx	r8
 800967e:	3001      	adds	r0, #1
 8009680:	d0e6      	beq.n	8009650 <_printf_common+0xa4>
 8009682:	3601      	adds	r6, #1
 8009684:	e7d9      	b.n	800963a <_printf_common+0x8e>
	...

08009688 <_printf_i>:
 8009688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800968c:	7e0f      	ldrb	r7, [r1, #24]
 800968e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009690:	2f78      	cmp	r7, #120	; 0x78
 8009692:	4691      	mov	r9, r2
 8009694:	4680      	mov	r8, r0
 8009696:	460c      	mov	r4, r1
 8009698:	469a      	mov	sl, r3
 800969a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800969e:	d807      	bhi.n	80096b0 <_printf_i+0x28>
 80096a0:	2f62      	cmp	r7, #98	; 0x62
 80096a2:	d80a      	bhi.n	80096ba <_printf_i+0x32>
 80096a4:	2f00      	cmp	r7, #0
 80096a6:	f000 80d4 	beq.w	8009852 <_printf_i+0x1ca>
 80096aa:	2f58      	cmp	r7, #88	; 0x58
 80096ac:	f000 80c0 	beq.w	8009830 <_printf_i+0x1a8>
 80096b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096b8:	e03a      	b.n	8009730 <_printf_i+0xa8>
 80096ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096be:	2b15      	cmp	r3, #21
 80096c0:	d8f6      	bhi.n	80096b0 <_printf_i+0x28>
 80096c2:	a101      	add	r1, pc, #4	; (adr r1, 80096c8 <_printf_i+0x40>)
 80096c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096c8:	08009721 	.word	0x08009721
 80096cc:	08009735 	.word	0x08009735
 80096d0:	080096b1 	.word	0x080096b1
 80096d4:	080096b1 	.word	0x080096b1
 80096d8:	080096b1 	.word	0x080096b1
 80096dc:	080096b1 	.word	0x080096b1
 80096e0:	08009735 	.word	0x08009735
 80096e4:	080096b1 	.word	0x080096b1
 80096e8:	080096b1 	.word	0x080096b1
 80096ec:	080096b1 	.word	0x080096b1
 80096f0:	080096b1 	.word	0x080096b1
 80096f4:	08009839 	.word	0x08009839
 80096f8:	08009761 	.word	0x08009761
 80096fc:	080097f3 	.word	0x080097f3
 8009700:	080096b1 	.word	0x080096b1
 8009704:	080096b1 	.word	0x080096b1
 8009708:	0800985b 	.word	0x0800985b
 800970c:	080096b1 	.word	0x080096b1
 8009710:	08009761 	.word	0x08009761
 8009714:	080096b1 	.word	0x080096b1
 8009718:	080096b1 	.word	0x080096b1
 800971c:	080097fb 	.word	0x080097fb
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	1d1a      	adds	r2, r3, #4
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	602a      	str	r2, [r5, #0]
 8009728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800972c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009730:	2301      	movs	r3, #1
 8009732:	e09f      	b.n	8009874 <_printf_i+0x1ec>
 8009734:	6820      	ldr	r0, [r4, #0]
 8009736:	682b      	ldr	r3, [r5, #0]
 8009738:	0607      	lsls	r7, r0, #24
 800973a:	f103 0104 	add.w	r1, r3, #4
 800973e:	6029      	str	r1, [r5, #0]
 8009740:	d501      	bpl.n	8009746 <_printf_i+0xbe>
 8009742:	681e      	ldr	r6, [r3, #0]
 8009744:	e003      	b.n	800974e <_printf_i+0xc6>
 8009746:	0646      	lsls	r6, r0, #25
 8009748:	d5fb      	bpl.n	8009742 <_printf_i+0xba>
 800974a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800974e:	2e00      	cmp	r6, #0
 8009750:	da03      	bge.n	800975a <_printf_i+0xd2>
 8009752:	232d      	movs	r3, #45	; 0x2d
 8009754:	4276      	negs	r6, r6
 8009756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800975a:	485a      	ldr	r0, [pc, #360]	; (80098c4 <_printf_i+0x23c>)
 800975c:	230a      	movs	r3, #10
 800975e:	e012      	b.n	8009786 <_printf_i+0xfe>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	6820      	ldr	r0, [r4, #0]
 8009764:	1d19      	adds	r1, r3, #4
 8009766:	6029      	str	r1, [r5, #0]
 8009768:	0605      	lsls	r5, r0, #24
 800976a:	d501      	bpl.n	8009770 <_printf_i+0xe8>
 800976c:	681e      	ldr	r6, [r3, #0]
 800976e:	e002      	b.n	8009776 <_printf_i+0xee>
 8009770:	0641      	lsls	r1, r0, #25
 8009772:	d5fb      	bpl.n	800976c <_printf_i+0xe4>
 8009774:	881e      	ldrh	r6, [r3, #0]
 8009776:	4853      	ldr	r0, [pc, #332]	; (80098c4 <_printf_i+0x23c>)
 8009778:	2f6f      	cmp	r7, #111	; 0x6f
 800977a:	bf0c      	ite	eq
 800977c:	2308      	moveq	r3, #8
 800977e:	230a      	movne	r3, #10
 8009780:	2100      	movs	r1, #0
 8009782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009786:	6865      	ldr	r5, [r4, #4]
 8009788:	60a5      	str	r5, [r4, #8]
 800978a:	2d00      	cmp	r5, #0
 800978c:	bfa2      	ittt	ge
 800978e:	6821      	ldrge	r1, [r4, #0]
 8009790:	f021 0104 	bicge.w	r1, r1, #4
 8009794:	6021      	strge	r1, [r4, #0]
 8009796:	b90e      	cbnz	r6, 800979c <_printf_i+0x114>
 8009798:	2d00      	cmp	r5, #0
 800979a:	d04b      	beq.n	8009834 <_printf_i+0x1ac>
 800979c:	4615      	mov	r5, r2
 800979e:	fbb6 f1f3 	udiv	r1, r6, r3
 80097a2:	fb03 6711 	mls	r7, r3, r1, r6
 80097a6:	5dc7      	ldrb	r7, [r0, r7]
 80097a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097ac:	4637      	mov	r7, r6
 80097ae:	42bb      	cmp	r3, r7
 80097b0:	460e      	mov	r6, r1
 80097b2:	d9f4      	bls.n	800979e <_printf_i+0x116>
 80097b4:	2b08      	cmp	r3, #8
 80097b6:	d10b      	bne.n	80097d0 <_printf_i+0x148>
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	07de      	lsls	r6, r3, #31
 80097bc:	d508      	bpl.n	80097d0 <_printf_i+0x148>
 80097be:	6923      	ldr	r3, [r4, #16]
 80097c0:	6861      	ldr	r1, [r4, #4]
 80097c2:	4299      	cmp	r1, r3
 80097c4:	bfde      	ittt	le
 80097c6:	2330      	movle	r3, #48	; 0x30
 80097c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097d0:	1b52      	subs	r2, r2, r5
 80097d2:	6122      	str	r2, [r4, #16]
 80097d4:	f8cd a000 	str.w	sl, [sp]
 80097d8:	464b      	mov	r3, r9
 80097da:	aa03      	add	r2, sp, #12
 80097dc:	4621      	mov	r1, r4
 80097de:	4640      	mov	r0, r8
 80097e0:	f7ff fee4 	bl	80095ac <_printf_common>
 80097e4:	3001      	adds	r0, #1
 80097e6:	d14a      	bne.n	800987e <_printf_i+0x1f6>
 80097e8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ec:	b004      	add	sp, #16
 80097ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	f043 0320 	orr.w	r3, r3, #32
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	4833      	ldr	r0, [pc, #204]	; (80098c8 <_printf_i+0x240>)
 80097fc:	2778      	movs	r7, #120	; 0x78
 80097fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	6829      	ldr	r1, [r5, #0]
 8009806:	061f      	lsls	r7, r3, #24
 8009808:	f851 6b04 	ldr.w	r6, [r1], #4
 800980c:	d402      	bmi.n	8009814 <_printf_i+0x18c>
 800980e:	065f      	lsls	r7, r3, #25
 8009810:	bf48      	it	mi
 8009812:	b2b6      	uxthmi	r6, r6
 8009814:	07df      	lsls	r7, r3, #31
 8009816:	bf48      	it	mi
 8009818:	f043 0320 	orrmi.w	r3, r3, #32
 800981c:	6029      	str	r1, [r5, #0]
 800981e:	bf48      	it	mi
 8009820:	6023      	strmi	r3, [r4, #0]
 8009822:	b91e      	cbnz	r6, 800982c <_printf_i+0x1a4>
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	f023 0320 	bic.w	r3, r3, #32
 800982a:	6023      	str	r3, [r4, #0]
 800982c:	2310      	movs	r3, #16
 800982e:	e7a7      	b.n	8009780 <_printf_i+0xf8>
 8009830:	4824      	ldr	r0, [pc, #144]	; (80098c4 <_printf_i+0x23c>)
 8009832:	e7e4      	b.n	80097fe <_printf_i+0x176>
 8009834:	4615      	mov	r5, r2
 8009836:	e7bd      	b.n	80097b4 <_printf_i+0x12c>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	6826      	ldr	r6, [r4, #0]
 800983c:	6961      	ldr	r1, [r4, #20]
 800983e:	1d18      	adds	r0, r3, #4
 8009840:	6028      	str	r0, [r5, #0]
 8009842:	0635      	lsls	r5, r6, #24
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	d501      	bpl.n	800984c <_printf_i+0x1c4>
 8009848:	6019      	str	r1, [r3, #0]
 800984a:	e002      	b.n	8009852 <_printf_i+0x1ca>
 800984c:	0670      	lsls	r0, r6, #25
 800984e:	d5fb      	bpl.n	8009848 <_printf_i+0x1c0>
 8009850:	8019      	strh	r1, [r3, #0]
 8009852:	2300      	movs	r3, #0
 8009854:	6123      	str	r3, [r4, #16]
 8009856:	4615      	mov	r5, r2
 8009858:	e7bc      	b.n	80097d4 <_printf_i+0x14c>
 800985a:	682b      	ldr	r3, [r5, #0]
 800985c:	1d1a      	adds	r2, r3, #4
 800985e:	602a      	str	r2, [r5, #0]
 8009860:	681d      	ldr	r5, [r3, #0]
 8009862:	6862      	ldr	r2, [r4, #4]
 8009864:	2100      	movs	r1, #0
 8009866:	4628      	mov	r0, r5
 8009868:	f7f6 fcf2 	bl	8000250 <memchr>
 800986c:	b108      	cbz	r0, 8009872 <_printf_i+0x1ea>
 800986e:	1b40      	subs	r0, r0, r5
 8009870:	6060      	str	r0, [r4, #4]
 8009872:	6863      	ldr	r3, [r4, #4]
 8009874:	6123      	str	r3, [r4, #16]
 8009876:	2300      	movs	r3, #0
 8009878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800987c:	e7aa      	b.n	80097d4 <_printf_i+0x14c>
 800987e:	6923      	ldr	r3, [r4, #16]
 8009880:	462a      	mov	r2, r5
 8009882:	4649      	mov	r1, r9
 8009884:	4640      	mov	r0, r8
 8009886:	47d0      	blx	sl
 8009888:	3001      	adds	r0, #1
 800988a:	d0ad      	beq.n	80097e8 <_printf_i+0x160>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	079b      	lsls	r3, r3, #30
 8009890:	d413      	bmi.n	80098ba <_printf_i+0x232>
 8009892:	68e0      	ldr	r0, [r4, #12]
 8009894:	9b03      	ldr	r3, [sp, #12]
 8009896:	4298      	cmp	r0, r3
 8009898:	bfb8      	it	lt
 800989a:	4618      	movlt	r0, r3
 800989c:	e7a6      	b.n	80097ec <_printf_i+0x164>
 800989e:	2301      	movs	r3, #1
 80098a0:	4632      	mov	r2, r6
 80098a2:	4649      	mov	r1, r9
 80098a4:	4640      	mov	r0, r8
 80098a6:	47d0      	blx	sl
 80098a8:	3001      	adds	r0, #1
 80098aa:	d09d      	beq.n	80097e8 <_printf_i+0x160>
 80098ac:	3501      	adds	r5, #1
 80098ae:	68e3      	ldr	r3, [r4, #12]
 80098b0:	9903      	ldr	r1, [sp, #12]
 80098b2:	1a5b      	subs	r3, r3, r1
 80098b4:	42ab      	cmp	r3, r5
 80098b6:	dcf2      	bgt.n	800989e <_printf_i+0x216>
 80098b8:	e7eb      	b.n	8009892 <_printf_i+0x20a>
 80098ba:	2500      	movs	r5, #0
 80098bc:	f104 0619 	add.w	r6, r4, #25
 80098c0:	e7f5      	b.n	80098ae <_printf_i+0x226>
 80098c2:	bf00      	nop
 80098c4:	0800a347 	.word	0x0800a347
 80098c8:	0800a358 	.word	0x0800a358

080098cc <__sflush_r>:
 80098cc:	898a      	ldrh	r2, [r1, #12]
 80098ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d2:	4605      	mov	r5, r0
 80098d4:	0710      	lsls	r0, r2, #28
 80098d6:	460c      	mov	r4, r1
 80098d8:	d458      	bmi.n	800998c <__sflush_r+0xc0>
 80098da:	684b      	ldr	r3, [r1, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	dc05      	bgt.n	80098ec <__sflush_r+0x20>
 80098e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	dc02      	bgt.n	80098ec <__sflush_r+0x20>
 80098e6:	2000      	movs	r0, #0
 80098e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098ee:	2e00      	cmp	r6, #0
 80098f0:	d0f9      	beq.n	80098e6 <__sflush_r+0x1a>
 80098f2:	2300      	movs	r3, #0
 80098f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098f8:	682f      	ldr	r7, [r5, #0]
 80098fa:	6a21      	ldr	r1, [r4, #32]
 80098fc:	602b      	str	r3, [r5, #0]
 80098fe:	d032      	beq.n	8009966 <__sflush_r+0x9a>
 8009900:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	075a      	lsls	r2, r3, #29
 8009906:	d505      	bpl.n	8009914 <__sflush_r+0x48>
 8009908:	6863      	ldr	r3, [r4, #4]
 800990a:	1ac0      	subs	r0, r0, r3
 800990c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800990e:	b10b      	cbz	r3, 8009914 <__sflush_r+0x48>
 8009910:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009912:	1ac0      	subs	r0, r0, r3
 8009914:	2300      	movs	r3, #0
 8009916:	4602      	mov	r2, r0
 8009918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800991a:	6a21      	ldr	r1, [r4, #32]
 800991c:	4628      	mov	r0, r5
 800991e:	47b0      	blx	r6
 8009920:	1c43      	adds	r3, r0, #1
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	d106      	bne.n	8009934 <__sflush_r+0x68>
 8009926:	6829      	ldr	r1, [r5, #0]
 8009928:	291d      	cmp	r1, #29
 800992a:	d82b      	bhi.n	8009984 <__sflush_r+0xb8>
 800992c:	4a29      	ldr	r2, [pc, #164]	; (80099d4 <__sflush_r+0x108>)
 800992e:	410a      	asrs	r2, r1
 8009930:	07d6      	lsls	r6, r2, #31
 8009932:	d427      	bmi.n	8009984 <__sflush_r+0xb8>
 8009934:	2200      	movs	r2, #0
 8009936:	6062      	str	r2, [r4, #4]
 8009938:	04d9      	lsls	r1, r3, #19
 800993a:	6922      	ldr	r2, [r4, #16]
 800993c:	6022      	str	r2, [r4, #0]
 800993e:	d504      	bpl.n	800994a <__sflush_r+0x7e>
 8009940:	1c42      	adds	r2, r0, #1
 8009942:	d101      	bne.n	8009948 <__sflush_r+0x7c>
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	b903      	cbnz	r3, 800994a <__sflush_r+0x7e>
 8009948:	6560      	str	r0, [r4, #84]	; 0x54
 800994a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800994c:	602f      	str	r7, [r5, #0]
 800994e:	2900      	cmp	r1, #0
 8009950:	d0c9      	beq.n	80098e6 <__sflush_r+0x1a>
 8009952:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009956:	4299      	cmp	r1, r3
 8009958:	d002      	beq.n	8009960 <__sflush_r+0x94>
 800995a:	4628      	mov	r0, r5
 800995c:	f7ff fbce 	bl	80090fc <_free_r>
 8009960:	2000      	movs	r0, #0
 8009962:	6360      	str	r0, [r4, #52]	; 0x34
 8009964:	e7c0      	b.n	80098e8 <__sflush_r+0x1c>
 8009966:	2301      	movs	r3, #1
 8009968:	4628      	mov	r0, r5
 800996a:	47b0      	blx	r6
 800996c:	1c41      	adds	r1, r0, #1
 800996e:	d1c8      	bne.n	8009902 <__sflush_r+0x36>
 8009970:	682b      	ldr	r3, [r5, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0c5      	beq.n	8009902 <__sflush_r+0x36>
 8009976:	2b1d      	cmp	r3, #29
 8009978:	d001      	beq.n	800997e <__sflush_r+0xb2>
 800997a:	2b16      	cmp	r3, #22
 800997c:	d101      	bne.n	8009982 <__sflush_r+0xb6>
 800997e:	602f      	str	r7, [r5, #0]
 8009980:	e7b1      	b.n	80098e6 <__sflush_r+0x1a>
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009988:	81a3      	strh	r3, [r4, #12]
 800998a:	e7ad      	b.n	80098e8 <__sflush_r+0x1c>
 800998c:	690f      	ldr	r7, [r1, #16]
 800998e:	2f00      	cmp	r7, #0
 8009990:	d0a9      	beq.n	80098e6 <__sflush_r+0x1a>
 8009992:	0793      	lsls	r3, r2, #30
 8009994:	680e      	ldr	r6, [r1, #0]
 8009996:	bf08      	it	eq
 8009998:	694b      	ldreq	r3, [r1, #20]
 800999a:	600f      	str	r7, [r1, #0]
 800999c:	bf18      	it	ne
 800999e:	2300      	movne	r3, #0
 80099a0:	eba6 0807 	sub.w	r8, r6, r7
 80099a4:	608b      	str	r3, [r1, #8]
 80099a6:	f1b8 0f00 	cmp.w	r8, #0
 80099aa:	dd9c      	ble.n	80098e6 <__sflush_r+0x1a>
 80099ac:	6a21      	ldr	r1, [r4, #32]
 80099ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099b0:	4643      	mov	r3, r8
 80099b2:	463a      	mov	r2, r7
 80099b4:	4628      	mov	r0, r5
 80099b6:	47b0      	blx	r6
 80099b8:	2800      	cmp	r0, #0
 80099ba:	dc06      	bgt.n	80099ca <__sflush_r+0xfe>
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	f04f 30ff 	mov.w	r0, #4294967295
 80099c8:	e78e      	b.n	80098e8 <__sflush_r+0x1c>
 80099ca:	4407      	add	r7, r0
 80099cc:	eba8 0800 	sub.w	r8, r8, r0
 80099d0:	e7e9      	b.n	80099a6 <__sflush_r+0xda>
 80099d2:	bf00      	nop
 80099d4:	dfbffffe 	.word	0xdfbffffe

080099d8 <_fflush_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	690b      	ldr	r3, [r1, #16]
 80099dc:	4605      	mov	r5, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	b913      	cbnz	r3, 80099e8 <_fflush_r+0x10>
 80099e2:	2500      	movs	r5, #0
 80099e4:	4628      	mov	r0, r5
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	b118      	cbz	r0, 80099f2 <_fflush_r+0x1a>
 80099ea:	6a03      	ldr	r3, [r0, #32]
 80099ec:	b90b      	cbnz	r3, 80099f2 <_fflush_r+0x1a>
 80099ee:	f7ff f9e1 	bl	8008db4 <__sinit>
 80099f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d0f3      	beq.n	80099e2 <_fflush_r+0xa>
 80099fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099fc:	07d0      	lsls	r0, r2, #31
 80099fe:	d404      	bmi.n	8009a0a <_fflush_r+0x32>
 8009a00:	0599      	lsls	r1, r3, #22
 8009a02:	d402      	bmi.n	8009a0a <_fflush_r+0x32>
 8009a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a06:	f7ff fb58 	bl	80090ba <__retarget_lock_acquire_recursive>
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	f7ff ff5d 	bl	80098cc <__sflush_r>
 8009a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a14:	07da      	lsls	r2, r3, #31
 8009a16:	4605      	mov	r5, r0
 8009a18:	d4e4      	bmi.n	80099e4 <_fflush_r+0xc>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	059b      	lsls	r3, r3, #22
 8009a1e:	d4e1      	bmi.n	80099e4 <_fflush_r+0xc>
 8009a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a22:	f7ff fb4b 	bl	80090bc <__retarget_lock_release_recursive>
 8009a26:	e7dd      	b.n	80099e4 <_fflush_r+0xc>

08009a28 <fiprintf>:
 8009a28:	b40e      	push	{r1, r2, r3}
 8009a2a:	b503      	push	{r0, r1, lr}
 8009a2c:	4601      	mov	r1, r0
 8009a2e:	ab03      	add	r3, sp, #12
 8009a30:	4805      	ldr	r0, [pc, #20]	; (8009a48 <fiprintf+0x20>)
 8009a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a36:	6800      	ldr	r0, [r0, #0]
 8009a38:	9301      	str	r3, [sp, #4]
 8009a3a:	f000 f89f 	bl	8009b7c <_vfiprintf_r>
 8009a3e:	b002      	add	sp, #8
 8009a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a44:	b003      	add	sp, #12
 8009a46:	4770      	bx	lr
 8009a48:	20000270 	.word	0x20000270

08009a4c <memmove>:
 8009a4c:	4288      	cmp	r0, r1
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	eb01 0402 	add.w	r4, r1, r2
 8009a54:	d902      	bls.n	8009a5c <memmove+0x10>
 8009a56:	4284      	cmp	r4, r0
 8009a58:	4623      	mov	r3, r4
 8009a5a:	d807      	bhi.n	8009a6c <memmove+0x20>
 8009a5c:	1e43      	subs	r3, r0, #1
 8009a5e:	42a1      	cmp	r1, r4
 8009a60:	d008      	beq.n	8009a74 <memmove+0x28>
 8009a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a6a:	e7f8      	b.n	8009a5e <memmove+0x12>
 8009a6c:	4402      	add	r2, r0
 8009a6e:	4601      	mov	r1, r0
 8009a70:	428a      	cmp	r2, r1
 8009a72:	d100      	bne.n	8009a76 <memmove+0x2a>
 8009a74:	bd10      	pop	{r4, pc}
 8009a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a7e:	e7f7      	b.n	8009a70 <memmove+0x24>

08009a80 <_sbrk_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4d06      	ldr	r5, [pc, #24]	; (8009a9c <_sbrk_r+0x1c>)
 8009a84:	2300      	movs	r3, #0
 8009a86:	4604      	mov	r4, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	602b      	str	r3, [r5, #0]
 8009a8c:	f7f7 fe3c 	bl	8001708 <_sbrk>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_sbrk_r+0x1a>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_sbrk_r+0x1a>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	20000778 	.word	0x20000778

08009aa0 <memcpy>:
 8009aa0:	440a      	add	r2, r1
 8009aa2:	4291      	cmp	r1, r2
 8009aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009aa8:	d100      	bne.n	8009aac <memcpy+0xc>
 8009aaa:	4770      	bx	lr
 8009aac:	b510      	push	{r4, lr}
 8009aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ab6:	4291      	cmp	r1, r2
 8009ab8:	d1f9      	bne.n	8009aae <memcpy+0xe>
 8009aba:	bd10      	pop	{r4, pc}

08009abc <abort>:
 8009abc:	b508      	push	{r3, lr}
 8009abe:	2006      	movs	r0, #6
 8009ac0:	f000 fa34 	bl	8009f2c <raise>
 8009ac4:	2001      	movs	r0, #1
 8009ac6:	f7f7 fda7 	bl	8001618 <_exit>

08009aca <_realloc_r>:
 8009aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ace:	4680      	mov	r8, r0
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	460e      	mov	r6, r1
 8009ad4:	b921      	cbnz	r1, 8009ae0 <_realloc_r+0x16>
 8009ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ada:	4611      	mov	r1, r2
 8009adc:	f7ff bb82 	b.w	80091e4 <_malloc_r>
 8009ae0:	b92a      	cbnz	r2, 8009aee <_realloc_r+0x24>
 8009ae2:	f7ff fb0b 	bl	80090fc <_free_r>
 8009ae6:	4625      	mov	r5, r4
 8009ae8:	4628      	mov	r0, r5
 8009aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aee:	f000 fa39 	bl	8009f64 <_malloc_usable_size_r>
 8009af2:	4284      	cmp	r4, r0
 8009af4:	4607      	mov	r7, r0
 8009af6:	d802      	bhi.n	8009afe <_realloc_r+0x34>
 8009af8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009afc:	d812      	bhi.n	8009b24 <_realloc_r+0x5a>
 8009afe:	4621      	mov	r1, r4
 8009b00:	4640      	mov	r0, r8
 8009b02:	f7ff fb6f 	bl	80091e4 <_malloc_r>
 8009b06:	4605      	mov	r5, r0
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d0ed      	beq.n	8009ae8 <_realloc_r+0x1e>
 8009b0c:	42bc      	cmp	r4, r7
 8009b0e:	4622      	mov	r2, r4
 8009b10:	4631      	mov	r1, r6
 8009b12:	bf28      	it	cs
 8009b14:	463a      	movcs	r2, r7
 8009b16:	f7ff ffc3 	bl	8009aa0 <memcpy>
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	4640      	mov	r0, r8
 8009b1e:	f7ff faed 	bl	80090fc <_free_r>
 8009b22:	e7e1      	b.n	8009ae8 <_realloc_r+0x1e>
 8009b24:	4635      	mov	r5, r6
 8009b26:	e7df      	b.n	8009ae8 <_realloc_r+0x1e>

08009b28 <__sfputc_r>:
 8009b28:	6893      	ldr	r3, [r2, #8]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	b410      	push	{r4}
 8009b30:	6093      	str	r3, [r2, #8]
 8009b32:	da08      	bge.n	8009b46 <__sfputc_r+0x1e>
 8009b34:	6994      	ldr	r4, [r2, #24]
 8009b36:	42a3      	cmp	r3, r4
 8009b38:	db01      	blt.n	8009b3e <__sfputc_r+0x16>
 8009b3a:	290a      	cmp	r1, #10
 8009b3c:	d103      	bne.n	8009b46 <__sfputc_r+0x1e>
 8009b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b42:	f000 b935 	b.w	8009db0 <__swbuf_r>
 8009b46:	6813      	ldr	r3, [r2, #0]
 8009b48:	1c58      	adds	r0, r3, #1
 8009b4a:	6010      	str	r0, [r2, #0]
 8009b4c:	7019      	strb	r1, [r3, #0]
 8009b4e:	4608      	mov	r0, r1
 8009b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b54:	4770      	bx	lr

08009b56 <__sfputs_r>:
 8009b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b58:	4606      	mov	r6, r0
 8009b5a:	460f      	mov	r7, r1
 8009b5c:	4614      	mov	r4, r2
 8009b5e:	18d5      	adds	r5, r2, r3
 8009b60:	42ac      	cmp	r4, r5
 8009b62:	d101      	bne.n	8009b68 <__sfputs_r+0x12>
 8009b64:	2000      	movs	r0, #0
 8009b66:	e007      	b.n	8009b78 <__sfputs_r+0x22>
 8009b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b6c:	463a      	mov	r2, r7
 8009b6e:	4630      	mov	r0, r6
 8009b70:	f7ff ffda 	bl	8009b28 <__sfputc_r>
 8009b74:	1c43      	adds	r3, r0, #1
 8009b76:	d1f3      	bne.n	8009b60 <__sfputs_r+0xa>
 8009b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b7c <_vfiprintf_r>:
 8009b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b80:	460d      	mov	r5, r1
 8009b82:	b09d      	sub	sp, #116	; 0x74
 8009b84:	4614      	mov	r4, r2
 8009b86:	4698      	mov	r8, r3
 8009b88:	4606      	mov	r6, r0
 8009b8a:	b118      	cbz	r0, 8009b94 <_vfiprintf_r+0x18>
 8009b8c:	6a03      	ldr	r3, [r0, #32]
 8009b8e:	b90b      	cbnz	r3, 8009b94 <_vfiprintf_r+0x18>
 8009b90:	f7ff f910 	bl	8008db4 <__sinit>
 8009b94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b96:	07d9      	lsls	r1, r3, #31
 8009b98:	d405      	bmi.n	8009ba6 <_vfiprintf_r+0x2a>
 8009b9a:	89ab      	ldrh	r3, [r5, #12]
 8009b9c:	059a      	lsls	r2, r3, #22
 8009b9e:	d402      	bmi.n	8009ba6 <_vfiprintf_r+0x2a>
 8009ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ba2:	f7ff fa8a 	bl	80090ba <__retarget_lock_acquire_recursive>
 8009ba6:	89ab      	ldrh	r3, [r5, #12]
 8009ba8:	071b      	lsls	r3, r3, #28
 8009baa:	d501      	bpl.n	8009bb0 <_vfiprintf_r+0x34>
 8009bac:	692b      	ldr	r3, [r5, #16]
 8009bae:	b99b      	cbnz	r3, 8009bd8 <_vfiprintf_r+0x5c>
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f000 f93a 	bl	8009e2c <__swsetup_r>
 8009bb8:	b170      	cbz	r0, 8009bd8 <_vfiprintf_r+0x5c>
 8009bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bbc:	07dc      	lsls	r4, r3, #31
 8009bbe:	d504      	bpl.n	8009bca <_vfiprintf_r+0x4e>
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	b01d      	add	sp, #116	; 0x74
 8009bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bca:	89ab      	ldrh	r3, [r5, #12]
 8009bcc:	0598      	lsls	r0, r3, #22
 8009bce:	d4f7      	bmi.n	8009bc0 <_vfiprintf_r+0x44>
 8009bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bd2:	f7ff fa73 	bl	80090bc <__retarget_lock_release_recursive>
 8009bd6:	e7f3      	b.n	8009bc0 <_vfiprintf_r+0x44>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	9309      	str	r3, [sp, #36]	; 0x24
 8009bdc:	2320      	movs	r3, #32
 8009bde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009be2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009be6:	2330      	movs	r3, #48	; 0x30
 8009be8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009d9c <_vfiprintf_r+0x220>
 8009bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bf0:	f04f 0901 	mov.w	r9, #1
 8009bf4:	4623      	mov	r3, r4
 8009bf6:	469a      	mov	sl, r3
 8009bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bfc:	b10a      	cbz	r2, 8009c02 <_vfiprintf_r+0x86>
 8009bfe:	2a25      	cmp	r2, #37	; 0x25
 8009c00:	d1f9      	bne.n	8009bf6 <_vfiprintf_r+0x7a>
 8009c02:	ebba 0b04 	subs.w	fp, sl, r4
 8009c06:	d00b      	beq.n	8009c20 <_vfiprintf_r+0xa4>
 8009c08:	465b      	mov	r3, fp
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f7ff ffa1 	bl	8009b56 <__sfputs_r>
 8009c14:	3001      	adds	r0, #1
 8009c16:	f000 80a9 	beq.w	8009d6c <_vfiprintf_r+0x1f0>
 8009c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c1c:	445a      	add	r2, fp
 8009c1e:	9209      	str	r2, [sp, #36]	; 0x24
 8009c20:	f89a 3000 	ldrb.w	r3, [sl]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 80a1 	beq.w	8009d6c <_vfiprintf_r+0x1f0>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c34:	f10a 0a01 	add.w	sl, sl, #1
 8009c38:	9304      	str	r3, [sp, #16]
 8009c3a:	9307      	str	r3, [sp, #28]
 8009c3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c40:	931a      	str	r3, [sp, #104]	; 0x68
 8009c42:	4654      	mov	r4, sl
 8009c44:	2205      	movs	r2, #5
 8009c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c4a:	4854      	ldr	r0, [pc, #336]	; (8009d9c <_vfiprintf_r+0x220>)
 8009c4c:	f7f6 fb00 	bl	8000250 <memchr>
 8009c50:	9a04      	ldr	r2, [sp, #16]
 8009c52:	b9d8      	cbnz	r0, 8009c8c <_vfiprintf_r+0x110>
 8009c54:	06d1      	lsls	r1, r2, #27
 8009c56:	bf44      	itt	mi
 8009c58:	2320      	movmi	r3, #32
 8009c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c5e:	0713      	lsls	r3, r2, #28
 8009c60:	bf44      	itt	mi
 8009c62:	232b      	movmi	r3, #43	; 0x2b
 8009c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c68:	f89a 3000 	ldrb.w	r3, [sl]
 8009c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c6e:	d015      	beq.n	8009c9c <_vfiprintf_r+0x120>
 8009c70:	9a07      	ldr	r2, [sp, #28]
 8009c72:	4654      	mov	r4, sl
 8009c74:	2000      	movs	r0, #0
 8009c76:	f04f 0c0a 	mov.w	ip, #10
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c80:	3b30      	subs	r3, #48	; 0x30
 8009c82:	2b09      	cmp	r3, #9
 8009c84:	d94d      	bls.n	8009d22 <_vfiprintf_r+0x1a6>
 8009c86:	b1b0      	cbz	r0, 8009cb6 <_vfiprintf_r+0x13a>
 8009c88:	9207      	str	r2, [sp, #28]
 8009c8a:	e014      	b.n	8009cb6 <_vfiprintf_r+0x13a>
 8009c8c:	eba0 0308 	sub.w	r3, r0, r8
 8009c90:	fa09 f303 	lsl.w	r3, r9, r3
 8009c94:	4313      	orrs	r3, r2
 8009c96:	9304      	str	r3, [sp, #16]
 8009c98:	46a2      	mov	sl, r4
 8009c9a:	e7d2      	b.n	8009c42 <_vfiprintf_r+0xc6>
 8009c9c:	9b03      	ldr	r3, [sp, #12]
 8009c9e:	1d19      	adds	r1, r3, #4
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	9103      	str	r1, [sp, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	bfbb      	ittet	lt
 8009ca8:	425b      	neglt	r3, r3
 8009caa:	f042 0202 	orrlt.w	r2, r2, #2
 8009cae:	9307      	strge	r3, [sp, #28]
 8009cb0:	9307      	strlt	r3, [sp, #28]
 8009cb2:	bfb8      	it	lt
 8009cb4:	9204      	strlt	r2, [sp, #16]
 8009cb6:	7823      	ldrb	r3, [r4, #0]
 8009cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8009cba:	d10c      	bne.n	8009cd6 <_vfiprintf_r+0x15a>
 8009cbc:	7863      	ldrb	r3, [r4, #1]
 8009cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8009cc0:	d134      	bne.n	8009d2c <_vfiprintf_r+0x1b0>
 8009cc2:	9b03      	ldr	r3, [sp, #12]
 8009cc4:	1d1a      	adds	r2, r3, #4
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	9203      	str	r2, [sp, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	bfb8      	it	lt
 8009cce:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cd2:	3402      	adds	r4, #2
 8009cd4:	9305      	str	r3, [sp, #20]
 8009cd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009dac <_vfiprintf_r+0x230>
 8009cda:	7821      	ldrb	r1, [r4, #0]
 8009cdc:	2203      	movs	r2, #3
 8009cde:	4650      	mov	r0, sl
 8009ce0:	f7f6 fab6 	bl	8000250 <memchr>
 8009ce4:	b138      	cbz	r0, 8009cf6 <_vfiprintf_r+0x17a>
 8009ce6:	9b04      	ldr	r3, [sp, #16]
 8009ce8:	eba0 000a 	sub.w	r0, r0, sl
 8009cec:	2240      	movs	r2, #64	; 0x40
 8009cee:	4082      	lsls	r2, r0
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	3401      	adds	r4, #1
 8009cf4:	9304      	str	r3, [sp, #16]
 8009cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cfa:	4829      	ldr	r0, [pc, #164]	; (8009da0 <_vfiprintf_r+0x224>)
 8009cfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d00:	2206      	movs	r2, #6
 8009d02:	f7f6 faa5 	bl	8000250 <memchr>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d03f      	beq.n	8009d8a <_vfiprintf_r+0x20e>
 8009d0a:	4b26      	ldr	r3, [pc, #152]	; (8009da4 <_vfiprintf_r+0x228>)
 8009d0c:	bb1b      	cbnz	r3, 8009d56 <_vfiprintf_r+0x1da>
 8009d0e:	9b03      	ldr	r3, [sp, #12]
 8009d10:	3307      	adds	r3, #7
 8009d12:	f023 0307 	bic.w	r3, r3, #7
 8009d16:	3308      	adds	r3, #8
 8009d18:	9303      	str	r3, [sp, #12]
 8009d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d1c:	443b      	add	r3, r7
 8009d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d20:	e768      	b.n	8009bf4 <_vfiprintf_r+0x78>
 8009d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d26:	460c      	mov	r4, r1
 8009d28:	2001      	movs	r0, #1
 8009d2a:	e7a6      	b.n	8009c7a <_vfiprintf_r+0xfe>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	3401      	adds	r4, #1
 8009d30:	9305      	str	r3, [sp, #20]
 8009d32:	4619      	mov	r1, r3
 8009d34:	f04f 0c0a 	mov.w	ip, #10
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d3e:	3a30      	subs	r2, #48	; 0x30
 8009d40:	2a09      	cmp	r2, #9
 8009d42:	d903      	bls.n	8009d4c <_vfiprintf_r+0x1d0>
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d0c6      	beq.n	8009cd6 <_vfiprintf_r+0x15a>
 8009d48:	9105      	str	r1, [sp, #20]
 8009d4a:	e7c4      	b.n	8009cd6 <_vfiprintf_r+0x15a>
 8009d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d50:	4604      	mov	r4, r0
 8009d52:	2301      	movs	r3, #1
 8009d54:	e7f0      	b.n	8009d38 <_vfiprintf_r+0x1bc>
 8009d56:	ab03      	add	r3, sp, #12
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	462a      	mov	r2, r5
 8009d5c:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <_vfiprintf_r+0x22c>)
 8009d5e:	a904      	add	r1, sp, #16
 8009d60:	4630      	mov	r0, r6
 8009d62:	f3af 8000 	nop.w
 8009d66:	4607      	mov	r7, r0
 8009d68:	1c78      	adds	r0, r7, #1
 8009d6a:	d1d6      	bne.n	8009d1a <_vfiprintf_r+0x19e>
 8009d6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d6e:	07d9      	lsls	r1, r3, #31
 8009d70:	d405      	bmi.n	8009d7e <_vfiprintf_r+0x202>
 8009d72:	89ab      	ldrh	r3, [r5, #12]
 8009d74:	059a      	lsls	r2, r3, #22
 8009d76:	d402      	bmi.n	8009d7e <_vfiprintf_r+0x202>
 8009d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d7a:	f7ff f99f 	bl	80090bc <__retarget_lock_release_recursive>
 8009d7e:	89ab      	ldrh	r3, [r5, #12]
 8009d80:	065b      	lsls	r3, r3, #25
 8009d82:	f53f af1d 	bmi.w	8009bc0 <_vfiprintf_r+0x44>
 8009d86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d88:	e71c      	b.n	8009bc4 <_vfiprintf_r+0x48>
 8009d8a:	ab03      	add	r3, sp, #12
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	462a      	mov	r2, r5
 8009d90:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <_vfiprintf_r+0x22c>)
 8009d92:	a904      	add	r1, sp, #16
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7ff fc77 	bl	8009688 <_printf_i>
 8009d9a:	e7e4      	b.n	8009d66 <_vfiprintf_r+0x1ea>
 8009d9c:	0800a336 	.word	0x0800a336
 8009da0:	0800a340 	.word	0x0800a340
 8009da4:	00000000 	.word	0x00000000
 8009da8:	08009b57 	.word	0x08009b57
 8009dac:	0800a33c 	.word	0x0800a33c

08009db0 <__swbuf_r>:
 8009db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db2:	460e      	mov	r6, r1
 8009db4:	4614      	mov	r4, r2
 8009db6:	4605      	mov	r5, r0
 8009db8:	b118      	cbz	r0, 8009dc2 <__swbuf_r+0x12>
 8009dba:	6a03      	ldr	r3, [r0, #32]
 8009dbc:	b90b      	cbnz	r3, 8009dc2 <__swbuf_r+0x12>
 8009dbe:	f7fe fff9 	bl	8008db4 <__sinit>
 8009dc2:	69a3      	ldr	r3, [r4, #24]
 8009dc4:	60a3      	str	r3, [r4, #8]
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	071a      	lsls	r2, r3, #28
 8009dca:	d525      	bpl.n	8009e18 <__swbuf_r+0x68>
 8009dcc:	6923      	ldr	r3, [r4, #16]
 8009dce:	b31b      	cbz	r3, 8009e18 <__swbuf_r+0x68>
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	6922      	ldr	r2, [r4, #16]
 8009dd4:	1a98      	subs	r0, r3, r2
 8009dd6:	6963      	ldr	r3, [r4, #20]
 8009dd8:	b2f6      	uxtb	r6, r6
 8009dda:	4283      	cmp	r3, r0
 8009ddc:	4637      	mov	r7, r6
 8009dde:	dc04      	bgt.n	8009dea <__swbuf_r+0x3a>
 8009de0:	4621      	mov	r1, r4
 8009de2:	4628      	mov	r0, r5
 8009de4:	f7ff fdf8 	bl	80099d8 <_fflush_r>
 8009de8:	b9e0      	cbnz	r0, 8009e24 <__swbuf_r+0x74>
 8009dea:	68a3      	ldr	r3, [r4, #8]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	60a3      	str	r3, [r4, #8]
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	6022      	str	r2, [r4, #0]
 8009df6:	701e      	strb	r6, [r3, #0]
 8009df8:	6962      	ldr	r2, [r4, #20]
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d004      	beq.n	8009e0a <__swbuf_r+0x5a>
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	07db      	lsls	r3, r3, #31
 8009e04:	d506      	bpl.n	8009e14 <__swbuf_r+0x64>
 8009e06:	2e0a      	cmp	r6, #10
 8009e08:	d104      	bne.n	8009e14 <__swbuf_r+0x64>
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f7ff fde3 	bl	80099d8 <_fflush_r>
 8009e12:	b938      	cbnz	r0, 8009e24 <__swbuf_r+0x74>
 8009e14:	4638      	mov	r0, r7
 8009e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e18:	4621      	mov	r1, r4
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f000 f806 	bl	8009e2c <__swsetup_r>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d0d5      	beq.n	8009dd0 <__swbuf_r+0x20>
 8009e24:	f04f 37ff 	mov.w	r7, #4294967295
 8009e28:	e7f4      	b.n	8009e14 <__swbuf_r+0x64>
	...

08009e2c <__swsetup_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4b2a      	ldr	r3, [pc, #168]	; (8009ed8 <__swsetup_r+0xac>)
 8009e30:	4605      	mov	r5, r0
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	460c      	mov	r4, r1
 8009e36:	b118      	cbz	r0, 8009e40 <__swsetup_r+0x14>
 8009e38:	6a03      	ldr	r3, [r0, #32]
 8009e3a:	b90b      	cbnz	r3, 8009e40 <__swsetup_r+0x14>
 8009e3c:	f7fe ffba 	bl	8008db4 <__sinit>
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e46:	0718      	lsls	r0, r3, #28
 8009e48:	d422      	bmi.n	8009e90 <__swsetup_r+0x64>
 8009e4a:	06d9      	lsls	r1, r3, #27
 8009e4c:	d407      	bmi.n	8009e5e <__swsetup_r+0x32>
 8009e4e:	2309      	movs	r3, #9
 8009e50:	602b      	str	r3, [r5, #0]
 8009e52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5c:	e034      	b.n	8009ec8 <__swsetup_r+0x9c>
 8009e5e:	0758      	lsls	r0, r3, #29
 8009e60:	d512      	bpl.n	8009e88 <__swsetup_r+0x5c>
 8009e62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e64:	b141      	cbz	r1, 8009e78 <__swsetup_r+0x4c>
 8009e66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e6a:	4299      	cmp	r1, r3
 8009e6c:	d002      	beq.n	8009e74 <__swsetup_r+0x48>
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f7ff f944 	bl	80090fc <_free_r>
 8009e74:	2300      	movs	r3, #0
 8009e76:	6363      	str	r3, [r4, #52]	; 0x34
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e7e:	81a3      	strh	r3, [r4, #12]
 8009e80:	2300      	movs	r3, #0
 8009e82:	6063      	str	r3, [r4, #4]
 8009e84:	6923      	ldr	r3, [r4, #16]
 8009e86:	6023      	str	r3, [r4, #0]
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	f043 0308 	orr.w	r3, r3, #8
 8009e8e:	81a3      	strh	r3, [r4, #12]
 8009e90:	6923      	ldr	r3, [r4, #16]
 8009e92:	b94b      	cbnz	r3, 8009ea8 <__swsetup_r+0x7c>
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e9e:	d003      	beq.n	8009ea8 <__swsetup_r+0x7c>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 f88c 	bl	8009fc0 <__smakebuf_r>
 8009ea8:	89a0      	ldrh	r0, [r4, #12]
 8009eaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eae:	f010 0301 	ands.w	r3, r0, #1
 8009eb2:	d00a      	beq.n	8009eca <__swsetup_r+0x9e>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	60a3      	str	r3, [r4, #8]
 8009eb8:	6963      	ldr	r3, [r4, #20]
 8009eba:	425b      	negs	r3, r3
 8009ebc:	61a3      	str	r3, [r4, #24]
 8009ebe:	6923      	ldr	r3, [r4, #16]
 8009ec0:	b943      	cbnz	r3, 8009ed4 <__swsetup_r+0xa8>
 8009ec2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ec6:	d1c4      	bne.n	8009e52 <__swsetup_r+0x26>
 8009ec8:	bd38      	pop	{r3, r4, r5, pc}
 8009eca:	0781      	lsls	r1, r0, #30
 8009ecc:	bf58      	it	pl
 8009ece:	6963      	ldrpl	r3, [r4, #20]
 8009ed0:	60a3      	str	r3, [r4, #8]
 8009ed2:	e7f4      	b.n	8009ebe <__swsetup_r+0x92>
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	e7f7      	b.n	8009ec8 <__swsetup_r+0x9c>
 8009ed8:	20000270 	.word	0x20000270

08009edc <_raise_r>:
 8009edc:	291f      	cmp	r1, #31
 8009ede:	b538      	push	{r3, r4, r5, lr}
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	460d      	mov	r5, r1
 8009ee4:	d904      	bls.n	8009ef0 <_raise_r+0x14>
 8009ee6:	2316      	movs	r3, #22
 8009ee8:	6003      	str	r3, [r0, #0]
 8009eea:	f04f 30ff 	mov.w	r0, #4294967295
 8009eee:	bd38      	pop	{r3, r4, r5, pc}
 8009ef0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ef2:	b112      	cbz	r2, 8009efa <_raise_r+0x1e>
 8009ef4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ef8:	b94b      	cbnz	r3, 8009f0e <_raise_r+0x32>
 8009efa:	4620      	mov	r0, r4
 8009efc:	f000 f830 	bl	8009f60 <_getpid_r>
 8009f00:	462a      	mov	r2, r5
 8009f02:	4601      	mov	r1, r0
 8009f04:	4620      	mov	r0, r4
 8009f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f0a:	f000 b817 	b.w	8009f3c <_kill_r>
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d00a      	beq.n	8009f28 <_raise_r+0x4c>
 8009f12:	1c59      	adds	r1, r3, #1
 8009f14:	d103      	bne.n	8009f1e <_raise_r+0x42>
 8009f16:	2316      	movs	r3, #22
 8009f18:	6003      	str	r3, [r0, #0]
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	e7e7      	b.n	8009eee <_raise_r+0x12>
 8009f1e:	2400      	movs	r4, #0
 8009f20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f24:	4628      	mov	r0, r5
 8009f26:	4798      	blx	r3
 8009f28:	2000      	movs	r0, #0
 8009f2a:	e7e0      	b.n	8009eee <_raise_r+0x12>

08009f2c <raise>:
 8009f2c:	4b02      	ldr	r3, [pc, #8]	; (8009f38 <raise+0xc>)
 8009f2e:	4601      	mov	r1, r0
 8009f30:	6818      	ldr	r0, [r3, #0]
 8009f32:	f7ff bfd3 	b.w	8009edc <_raise_r>
 8009f36:	bf00      	nop
 8009f38:	20000270 	.word	0x20000270

08009f3c <_kill_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d07      	ldr	r5, [pc, #28]	; (8009f5c <_kill_r+0x20>)
 8009f40:	2300      	movs	r3, #0
 8009f42:	4604      	mov	r4, r0
 8009f44:	4608      	mov	r0, r1
 8009f46:	4611      	mov	r1, r2
 8009f48:	602b      	str	r3, [r5, #0]
 8009f4a:	f7f7 fb55 	bl	80015f8 <_kill>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	d102      	bne.n	8009f58 <_kill_r+0x1c>
 8009f52:	682b      	ldr	r3, [r5, #0]
 8009f54:	b103      	cbz	r3, 8009f58 <_kill_r+0x1c>
 8009f56:	6023      	str	r3, [r4, #0]
 8009f58:	bd38      	pop	{r3, r4, r5, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20000778 	.word	0x20000778

08009f60 <_getpid_r>:
 8009f60:	f7f7 bb42 	b.w	80015e8 <_getpid>

08009f64 <_malloc_usable_size_r>:
 8009f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f68:	1f18      	subs	r0, r3, #4
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	bfbc      	itt	lt
 8009f6e:	580b      	ldrlt	r3, [r1, r0]
 8009f70:	18c0      	addlt	r0, r0, r3
 8009f72:	4770      	bx	lr

08009f74 <__swhatbuf_r>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	460c      	mov	r4, r1
 8009f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f7c:	2900      	cmp	r1, #0
 8009f7e:	b096      	sub	sp, #88	; 0x58
 8009f80:	4615      	mov	r5, r2
 8009f82:	461e      	mov	r6, r3
 8009f84:	da0d      	bge.n	8009fa2 <__swhatbuf_r+0x2e>
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009f8c:	f04f 0100 	mov.w	r1, #0
 8009f90:	bf0c      	ite	eq
 8009f92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009f96:	2340      	movne	r3, #64	; 0x40
 8009f98:	2000      	movs	r0, #0
 8009f9a:	6031      	str	r1, [r6, #0]
 8009f9c:	602b      	str	r3, [r5, #0]
 8009f9e:	b016      	add	sp, #88	; 0x58
 8009fa0:	bd70      	pop	{r4, r5, r6, pc}
 8009fa2:	466a      	mov	r2, sp
 8009fa4:	f000 f848 	bl	800a038 <_fstat_r>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	dbec      	blt.n	8009f86 <__swhatbuf_r+0x12>
 8009fac:	9901      	ldr	r1, [sp, #4]
 8009fae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009fb2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009fb6:	4259      	negs	r1, r3
 8009fb8:	4159      	adcs	r1, r3
 8009fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fbe:	e7eb      	b.n	8009f98 <__swhatbuf_r+0x24>

08009fc0 <__smakebuf_r>:
 8009fc0:	898b      	ldrh	r3, [r1, #12]
 8009fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fc4:	079d      	lsls	r5, r3, #30
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	460c      	mov	r4, r1
 8009fca:	d507      	bpl.n	8009fdc <__smakebuf_r+0x1c>
 8009fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	6123      	str	r3, [r4, #16]
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	6163      	str	r3, [r4, #20]
 8009fd8:	b002      	add	sp, #8
 8009fda:	bd70      	pop	{r4, r5, r6, pc}
 8009fdc:	ab01      	add	r3, sp, #4
 8009fde:	466a      	mov	r2, sp
 8009fe0:	f7ff ffc8 	bl	8009f74 <__swhatbuf_r>
 8009fe4:	9900      	ldr	r1, [sp, #0]
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f7ff f8fb 	bl	80091e4 <_malloc_r>
 8009fee:	b948      	cbnz	r0, 800a004 <__smakebuf_r+0x44>
 8009ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ff4:	059a      	lsls	r2, r3, #22
 8009ff6:	d4ef      	bmi.n	8009fd8 <__smakebuf_r+0x18>
 8009ff8:	f023 0303 	bic.w	r3, r3, #3
 8009ffc:	f043 0302 	orr.w	r3, r3, #2
 800a000:	81a3      	strh	r3, [r4, #12]
 800a002:	e7e3      	b.n	8009fcc <__smakebuf_r+0xc>
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	6020      	str	r0, [r4, #0]
 800a008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	9b00      	ldr	r3, [sp, #0]
 800a010:	6163      	str	r3, [r4, #20]
 800a012:	9b01      	ldr	r3, [sp, #4]
 800a014:	6120      	str	r0, [r4, #16]
 800a016:	b15b      	cbz	r3, 800a030 <__smakebuf_r+0x70>
 800a018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a01c:	4630      	mov	r0, r6
 800a01e:	f000 f81d 	bl	800a05c <_isatty_r>
 800a022:	b128      	cbz	r0, 800a030 <__smakebuf_r+0x70>
 800a024:	89a3      	ldrh	r3, [r4, #12]
 800a026:	f023 0303 	bic.w	r3, r3, #3
 800a02a:	f043 0301 	orr.w	r3, r3, #1
 800a02e:	81a3      	strh	r3, [r4, #12]
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	431d      	orrs	r5, r3
 800a034:	81a5      	strh	r5, [r4, #12]
 800a036:	e7cf      	b.n	8009fd8 <__smakebuf_r+0x18>

0800a038 <_fstat_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d07      	ldr	r5, [pc, #28]	; (800a058 <_fstat_r+0x20>)
 800a03c:	2300      	movs	r3, #0
 800a03e:	4604      	mov	r4, r0
 800a040:	4608      	mov	r0, r1
 800a042:	4611      	mov	r1, r2
 800a044:	602b      	str	r3, [r5, #0]
 800a046:	f7f7 fb36 	bl	80016b6 <_fstat>
 800a04a:	1c43      	adds	r3, r0, #1
 800a04c:	d102      	bne.n	800a054 <_fstat_r+0x1c>
 800a04e:	682b      	ldr	r3, [r5, #0]
 800a050:	b103      	cbz	r3, 800a054 <_fstat_r+0x1c>
 800a052:	6023      	str	r3, [r4, #0]
 800a054:	bd38      	pop	{r3, r4, r5, pc}
 800a056:	bf00      	nop
 800a058:	20000778 	.word	0x20000778

0800a05c <_isatty_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d06      	ldr	r5, [pc, #24]	; (800a078 <_isatty_r+0x1c>)
 800a060:	2300      	movs	r3, #0
 800a062:	4604      	mov	r4, r0
 800a064:	4608      	mov	r0, r1
 800a066:	602b      	str	r3, [r5, #0]
 800a068:	f7f7 fb35 	bl	80016d6 <_isatty>
 800a06c:	1c43      	adds	r3, r0, #1
 800a06e:	d102      	bne.n	800a076 <_isatty_r+0x1a>
 800a070:	682b      	ldr	r3, [r5, #0]
 800a072:	b103      	cbz	r3, 800a076 <_isatty_r+0x1a>
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	bd38      	pop	{r3, r4, r5, pc}
 800a078:	20000778 	.word	0x20000778

0800a07c <_init>:
 800a07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07e:	bf00      	nop
 800a080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a082:	bc08      	pop	{r3}
 800a084:	469e      	mov	lr, r3
 800a086:	4770      	bx	lr

0800a088 <_fini>:
 800a088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08a:	bf00      	nop
 800a08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a08e:	bc08      	pop	{r3}
 800a090:	469e      	mov	lr, r3
 800a092:	4770      	bx	lr
