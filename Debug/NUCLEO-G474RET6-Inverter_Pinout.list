
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bc8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de0  08007de0  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08007de0  08007de0  00017de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007de8  08007de8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007de8  08007de8  00017de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000098  08007e88  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08007e88  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001995f  00000000  00000000  0002010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033cf  00000000  00000000  00039a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0003ce40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001078  00000000  00000000  0003e378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288e5  00000000  00000000  0003f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a44f  00000000  00000000  00067cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112388  00000000  00000000  00082124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a28  00000000  00000000  001944ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00199ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000098 	.word	0x20000098
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007d88 	.word	0x08007d88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000009c 	.word	0x2000009c
 8000214:	08007d88 	.word	0x08007d88

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08c      	sub	sp, #48	; 0x30
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800052a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2220      	movs	r2, #32
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f007 fbf7 	bl	8007d30 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000542:	4b32      	ldr	r3, [pc, #200]	; (800060c <MX_ADC1_Init+0xe8>)
 8000544:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000548:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800054a:	4b30      	ldr	r3, [pc, #192]	; (800060c <MX_ADC1_Init+0xe8>)
 800054c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000550:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000552:	4b2e      	ldr	r3, [pc, #184]	; (800060c <MX_ADC1_Init+0xe8>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000558:	4b2c      	ldr	r3, [pc, #176]	; (800060c <MX_ADC1_Init+0xe8>)
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800055e:	4b2b      	ldr	r3, [pc, #172]	; (800060c <MX_ADC1_Init+0xe8>)
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000564:	4b29      	ldr	r3, [pc, #164]	; (800060c <MX_ADC1_Init+0xe8>)
 8000566:	2200      	movs	r2, #0
 8000568:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800056a:	4b28      	ldr	r3, [pc, #160]	; (800060c <MX_ADC1_Init+0xe8>)
 800056c:	2204      	movs	r2, #4
 800056e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000570:	4b26      	ldr	r3, [pc, #152]	; (800060c <MX_ADC1_Init+0xe8>)
 8000572:	2200      	movs	r2, #0
 8000574:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000576:	4b25      	ldr	r3, [pc, #148]	; (800060c <MX_ADC1_Init+0xe8>)
 8000578:	2200      	movs	r2, #0
 800057a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800057c:	4b23      	ldr	r3, [pc, #140]	; (800060c <MX_ADC1_Init+0xe8>)
 800057e:	2201      	movs	r2, #1
 8000580:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000582:	4b22      	ldr	r3, [pc, #136]	; (800060c <MX_ADC1_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800058a:	4b20      	ldr	r3, [pc, #128]	; (800060c <MX_ADC1_Init+0xe8>)
 800058c:	2200      	movs	r2, #0
 800058e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <MX_ADC1_Init+0xe8>)
 8000592:	2200      	movs	r2, #0
 8000594:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000596:	4b1d      	ldr	r3, [pc, #116]	; (800060c <MX_ADC1_Init+0xe8>)
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800059e:	4b1b      	ldr	r3, [pc, #108]	; (800060c <MX_ADC1_Init+0xe8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <MX_ADC1_Init+0xe8>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ac:	4817      	ldr	r0, [pc, #92]	; (800060c <MX_ADC1_Init+0xe8>)
 80005ae:	f001 fa11 	bl	80019d4 <HAL_ADC_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005b8:	f000 fb1a 	bl	8000bf0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005bc:	2300      	movs	r3, #0
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c4:	4619      	mov	r1, r3
 80005c6:	4811      	ldr	r0, [pc, #68]	; (800060c <MX_ADC1_Init+0xe8>)
 80005c8:	f002 f82c 	bl	8002624 <HAL_ADCEx_MultiModeConfigChannel>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005d2:	f000 fb0d 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_ADC1_Init+0xec>)
 80005d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005da:	2306      	movs	r3, #6
 80005dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e2:	237f      	movs	r3, #127	; 0x7f
 80005e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005e6:	2304      	movs	r3, #4
 80005e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <MX_ADC1_Init+0xe8>)
 80005f4:	f001 fbb0 	bl	8001d58 <HAL_ADC_ConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005fe:	f000 faf7 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	3730      	adds	r7, #48	; 0x30
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000b4 	.word	0x200000b4
 8000610:	21800100 	.word	0x21800100

08000614 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	463b      	mov	r3, r7
 800061c:	2220      	movs	r2, #32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f007 fb85 	bl	8007d30 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000628:	4a2b      	ldr	r2, [pc, #172]	; (80006d8 <MX_ADC2_Init+0xc4>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_ADC2_Init+0xc0>)
 800062e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000632:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000634:	4b27      	ldr	r3, [pc, #156]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_ADC2_Init+0xc0>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000646:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <MX_ADC2_Init+0xc0>)
 800064e:	2204      	movs	r2, #4
 8000650:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000654:	2200      	movs	r2, #0
 8000656:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_ADC2_Init+0xc0>)
 800065a:	2200      	movs	r2, #0
 800065c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000660:	2201      	movs	r2, #1
 8000662:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC2_Init+0xc0>)
 800066e:	2200      	movs	r2, #0
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000674:	2200      	movs	r2, #0
 8000676:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_ADC2_Init+0xc0>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000682:	2200      	movs	r2, #0
 8000684:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000690:	f001 f9a0 	bl	80019d4 <HAL_ADC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800069a:	f000 faa9 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_ADC2_Init+0xc8>)
 80006a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	; 0x7f
 80006ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_ADC2_Init+0xc0>)
 80006bc:	f001 fb4c 	bl	8001d58 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80006c6:	f000 fa93 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000120 	.word	0x20000120
 80006d8:	50000100 	.word	0x50000100
 80006dc:	19200040 	.word	0x19200040

080006e0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b0a4      	sub	sp, #144	; 0x90
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006fc:	2254      	movs	r2, #84	; 0x54
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f007 fb15 	bl	8007d30 <memset>
  if(adcHandle->Instance==ADC1)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800070e:	d174      	bne.n	80007fa <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000716:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800071a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000720:	4618      	mov	r0, r3
 8000722:	f003 f9ff 	bl	8003b24 <HAL_RCCEx_PeriphCLKConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800072c:	f000 fa60 	bl	8000bf0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000730:	4b63      	ldr	r3, [pc, #396]	; (80008c0 <HAL_ADC_MspInit+0x1e0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	4a62      	ldr	r2, [pc, #392]	; (80008c0 <HAL_ADC_MspInit+0x1e0>)
 8000738:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800073a:	4b61      	ldr	r3, [pc, #388]	; (80008c0 <HAL_ADC_MspInit+0x1e0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d10b      	bne.n	800075a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000742:	4b60      	ldr	r3, [pc, #384]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a5f      	ldr	r2, [pc, #380]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000748:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b5d      	ldr	r3, [pc, #372]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	4b5a      	ldr	r3, [pc, #360]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a59      	ldr	r2, [pc, #356]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b57      	ldr	r3, [pc, #348]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	623b      	str	r3, [r7, #32]
 8000770:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b54      	ldr	r3, [pc, #336]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a53      	ldr	r2, [pc, #332]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b51      	ldr	r3, [pc, #324]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	61fb      	str	r3, [r7, #28]
 8000788:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b4e      	ldr	r3, [pc, #312]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a4d      	ldr	r2, [pc, #308]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80007a2:	2304      	movs	r3, #4
 80007a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a6:	2303      	movs	r3, #3
 80007a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007b6:	4619      	mov	r1, r3
 80007b8:	4843      	ldr	r0, [pc, #268]	; (80008c8 <HAL_ADC_MspInit+0x1e8>)
 80007ba:	f002 f9db 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80007be:	2302      	movs	r3, #2
 80007c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c2:	2303      	movs	r3, #3
 80007c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007d2:	4619      	mov	r1, r3
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d8:	f002 f9cc 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007dc:	2303      	movs	r3, #3
 80007de:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e0:	2303      	movs	r3, #3
 80007e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007f0:	4619      	mov	r1, r3
 80007f2:	4836      	ldr	r0, [pc, #216]	; (80008cc <HAL_ADC_MspInit+0x1ec>)
 80007f4:	f002 f9be 	bl	8002b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80007f8:	e05e      	b.n	80008b8 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a34      	ldr	r2, [pc, #208]	; (80008d0 <HAL_ADC_MspInit+0x1f0>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d159      	bne.n	80008b8 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800080a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800080e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000810:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000814:	4618      	mov	r0, r3
 8000816:	f003 f985 	bl	8003b24 <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000820:	f000 f9e6 	bl	8000bf0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000824:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <HAL_ADC_MspInit+0x1e0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <HAL_ADC_MspInit+0x1e0>)
 800082c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <HAL_ADC_MspInit+0x1e0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d10b      	bne.n	800084e <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a22      	ldr	r2, [pc, #136]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 800083c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <HAL_ADC_MspInit+0x1e4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800087e:	230b      	movs	r3, #11
 8000880:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000882:	2303      	movs	r3, #3
 8000884:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <HAL_ADC_MspInit+0x1e8>)
 8000896:	f002 f96d 	bl	8002b74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800089a:	2301      	movs	r3, #1
 800089c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089e:	2303      	movs	r3, #3
 80008a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f002 f95e 	bl	8002b74 <HAL_GPIO_Init>
}
 80008b8:	bf00      	nop
 80008ba:	3790      	adds	r7, #144	; 0x90
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000018c 	.word	0x2000018c
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000800 	.word	0x48000800
 80008cc:	48000400 	.word	0x48000400
 80008d0:	50000100 	.word	0x50000100

080008d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b3f      	ldr	r3, [pc, #252]	; (80009e8 <MX_GPIO_Init+0x114>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a3e      	ldr	r2, [pc, #248]	; (80009e8 <MX_GPIO_Init+0x114>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <MX_GPIO_Init+0x114>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000902:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <MX_GPIO_Init+0x114>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a38      	ldr	r2, [pc, #224]	; (80009e8 <MX_GPIO_Init+0x114>)
 8000908:	f043 0320 	orr.w	r3, r3, #32
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b36      	ldr	r3, [pc, #216]	; (80009e8 <MX_GPIO_Init+0x114>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0320 	and.w	r3, r3, #32
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <MX_GPIO_Init+0x114>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a32      	ldr	r2, [pc, #200]	; (80009e8 <MX_GPIO_Init+0x114>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <MX_GPIO_Init+0x114>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <MX_GPIO_Init+0x114>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a2c      	ldr	r2, [pc, #176]	; (80009e8 <MX_GPIO_Init+0x114>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <MX_GPIO_Init+0x114>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <MX_GPIO_Init+0x114>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <MX_GPIO_Init+0x114>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <MX_GPIO_Init+0x114>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096a:	f002 fa85 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2104      	movs	r1, #4
 8000972:	481e      	ldr	r0, [pc, #120]	; (80009ec <MX_GPIO_Init+0x118>)
 8000974:	f002 fa80 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	4818      	ldr	r0, [pc, #96]	; (80009f0 <MX_GPIO_Init+0x11c>)
 8000990:	f002 f8f0 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000994:	2320      	movs	r3, #32
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f002 f8e1 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 80009b2:	2304      	movs	r3, #4
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4808      	ldr	r0, [pc, #32]	; (80009ec <MX_GPIO_Init+0x118>)
 80009ca:	f002 f8d3 	bl	8002b74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2028      	movs	r0, #40	; 0x28
 80009d4:	f001 ffe6 	bl	80029a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d8:	2028      	movs	r0, #40	; 0x28
 80009da:	f001 fffd 	bl	80029d8 <HAL_NVIC_EnableIRQ>

}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	; 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000c00 	.word	0x48000c00
 80009f0:	48000800 	.word	0x48000800

080009f4 <setPWM>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int setPWM(int channel,int duty_cycle){
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	if((duty_cycle>100) || (duty_cycle<100)){
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	2b64      	cmp	r3, #100	; 0x64
 8000a02:	dc02      	bgt.n	8000a0a <setPWM+0x16>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	2b63      	cmp	r3, #99	; 0x63
 8000a08:	dc02      	bgt.n	8000a10 <setPWM+0x1c>
		return -1;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	e02c      	b.n	8000a6a <setPWM+0x76>
	}else{
		const int ccrSize = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <setPWM+0x84>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a16:	60fb      	str	r3, [r7, #12]
		int ccrValue = ccrSize/(((float)duty_cycle)/100);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	ee07 3a90 	vmov	s15, r3
 8000a1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	ee07 3a90 	vmov	s15, r3
 8000a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a2c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8000a7c <setPWM+0x88>
 8000a30:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8000a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a3c:	ee17 3a90 	vmov	r3, s15
 8000a40:	60bb      	str	r3, [r7, #8]

		switch(channel){
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d003      	beq.n	8000a50 <setPWM+0x5c>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d004      	beq.n	8000a58 <setPWM+0x64>
 8000a4e:	e007      	b.n	8000a60 <setPWM+0x6c>
		case 1:
			TIM1->CCR1 = ccrValue;
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <setPWM+0x8c>)
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000a56:	e006      	b.n	8000a66 <setPWM+0x72>
		case 2:
			TIM1->CCR1 = ccrValue;
 8000a58:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <setPWM+0x8c>)
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000a5e:	e002      	b.n	8000a66 <setPWM+0x72>
		default:
			return -1;
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
 8000a64:	e001      	b.n	8000a6a <setPWM+0x76>
		}
	}
	return -1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200001dc 	.word	0x200001dc
 8000a7c:	42c80000 	.word	0x42c80000
 8000a80:	40012c00 	.word	0x40012c00

08000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a88:	f000 fd71 	bl	800156e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8c:	f000 f854 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a90:	f7ff ff20 	bl	80008d4 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000a94:	f7ff fdbe 	bl	8000614 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000a98:	f7ff fd44 	bl	8000524 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a9c:	f000 f9a2 	bl	8000de4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000aa0:	f000 fa70 	bl	8000f84 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000aa4:	f000 fba4 	bl	80011f0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000aa8:	f000 fbee 	bl	8001288 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8000aac:	f000 fce0 	bl	8001470 <Shell_Init>
	//initialiaze PWM
	//HAL_TIM_Base_Start(&htim1);

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4820      	ldr	r0, [pc, #128]	; (8000b34 <main+0xb0>)
 8000ab4:	f003 fbb6 	bl	8004224 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	481e      	ldr	r0, [pc, #120]	; (8000b34 <main+0xb0>)
 8000abc:	f004 fe4c 	bl	8005758 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ac0:	2104      	movs	r1, #4
 8000ac2:	481c      	ldr	r0, [pc, #112]	; (8000b34 <main+0xb0>)
 8000ac4:	f003 fbae 	bl	8004224 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000ac8:	2104      	movs	r1, #4
 8000aca:	481a      	ldr	r0, [pc, #104]	; (8000b34 <main+0xb0>)
 8000acc:	f004 fe44 	bl	8005758 <HAL_TIMEx_PWMN_Start>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Shell_Loop();

		setPWM(1, 50);
 8000ad0:	2132      	movs	r1, #50	; 0x32
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f7ff ff8e 	bl	80009f4 <setPWM>
		HAL_Delay(1000);
 8000ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000adc:	f000 fd7e 	bl	80015dc <HAL_Delay>
		setPWM(1,31);
 8000ae0:	211f      	movs	r1, #31
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff ff86 	bl	80009f4 <setPWM>
		HAL_Delay(1000);
 8000ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aec:	f000 fd76 	bl	80015dc <HAL_Delay>
		setPWM(1, 12);
 8000af0:	210c      	movs	r1, #12
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff ff7e 	bl	80009f4 <setPWM>
		HAL_Delay(1000);
 8000af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afc:	f000 fd6e 	bl	80015dc <HAL_Delay>
		setPWM(1,14);
 8000b00:	210e      	movs	r1, #14
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff ff76 	bl	80009f4 <setPWM>
		HAL_Delay(1000);
 8000b08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b0c:	f000 fd66 	bl	80015dc <HAL_Delay>
		setPWM(1, 20);
 8000b10:	2114      	movs	r1, #20
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff ff6e 	bl	80009f4 <setPWM>
		HAL_Delay(1000);
 8000b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b1c:	f000 fd5e 	bl	80015dc <HAL_Delay>
		setPWM(1,80);
 8000b20:	2150      	movs	r1, #80	; 0x50
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff ff66 	bl	80009f4 <setPWM>
		HAL_Delay(1000);
 8000b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2c:	f000 fd56 	bl	80015dc <HAL_Delay>
		setPWM(1, 50);
 8000b30:	e7ce      	b.n	8000ad0 <main+0x4c>
 8000b32:	bf00      	nop
 8000b34:	200001dc 	.word	0x200001dc

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b094      	sub	sp, #80	; 0x50
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	2238      	movs	r2, #56	; 0x38
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 f8f2 	bl	8007d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f002 f9c8 	bl	8002ef0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b68:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b72:	2306      	movs	r3, #6
 8000b74:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b76:	2355      	movs	r3, #85	; 0x55
 8000b78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b86:	f107 0318 	add.w	r3, r7, #24
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fa64 	bl	8003058 <HAL_RCC_OscConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b96:	f000 f82b 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fd68 	bl	8003688 <HAL_RCC_ClockConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000bbe:	f000 f817 	bl	8000bf0 <Error_Handler>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3750      	adds	r7, #80	; 0x50
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d101      	bne.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bde:	f000 fcdf 	bl	80015a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40001000 	.word	0x40001000

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6593      	str	r3, [r2, #88]	; 0x58
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c32:	f002 fa01 	bl	8003038 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c54:	4b2c      	ldr	r3, [pc, #176]	; (8000d08 <HAL_InitTick+0xc4>)
 8000c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c58:	4a2b      	ldr	r2, [pc, #172]	; (8000d08 <HAL_InitTick+0xc4>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c60:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <HAL_InitTick+0xc4>)
 8000c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c64:	f003 0310 	and.w	r3, r3, #16
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c6c:	f107 020c 	add.w	r2, r7, #12
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 fedc 	bl	8003a34 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c7c:	f002 feae 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 8000c80:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c84:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <HAL_InitTick+0xc8>)
 8000c86:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8a:	0c9b      	lsrs	r3, r3, #18
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <HAL_InitTick+0xcc>)
 8000c92:	4a20      	ldr	r2, [pc, #128]	; (8000d14 <HAL_InitTick+0xd0>)
 8000c94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <HAL_InitTick+0xcc>)
 8000c98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <HAL_InitTick+0xcc>)
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <HAL_InitTick+0xcc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_InitTick+0xcc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000cb0:	4817      	ldr	r0, [pc, #92]	; (8000d10 <HAL_InitTick+0xcc>)
 8000cb2:	f003 f985 	bl	8003fc0 <HAL_TIM_Base_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d11b      	bne.n	8000cfc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cc4:	4812      	ldr	r0, [pc, #72]	; (8000d10 <HAL_InitTick+0xcc>)
 8000cc6:	f003 f9d3 	bl	8004070 <HAL_TIM_Base_Start_IT>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d111      	bne.n	8000cfc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cd8:	2036      	movs	r0, #54	; 0x36
 8000cda:	f001 fe7d 	bl	80029d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d808      	bhi.n	8000cf6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	2036      	movs	r0, #54	; 0x36
 8000cea:	f001 fe5b 	bl	80029a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_InitTick+0xd4>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	e002      	b.n	8000cfc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3730      	adds	r7, #48	; 0x30
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	431bde83 	.word	0x431bde83
 8000d10:	20000190 	.word	0x20000190
 8000d14:	40001000 	.word	0x40001000
 8000d18:	20000090 	.word	0x20000090

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <USART2_IRQHandler+0x10>)
 8000d7a:	f005 f89f 	bl	8005ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000274 	.word	0x20000274

08000d88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <USART3_IRQHandler+0x10>)
 8000d8e:	f005 f895 	bl	8005ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000304 	.word	0x20000304

08000d9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000da0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000da4:	f002 f880 	bl	8002ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <TIM6_DAC_IRQHandler+0x10>)
 8000db2:	f003 fb49 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000190 	.word	0x20000190

08000dc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <SystemInit+0x20>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <SystemInit+0x20>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b09c      	sub	sp, #112	; 0x70
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]
 8000e16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2234      	movs	r2, #52	; 0x34
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f006 ff86 	bl	8007d30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e24:	4b55      	ldr	r3, [pc, #340]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000e26:	4a56      	ldr	r2, [pc, #344]	; (8000f80 <MX_TIM1_Init+0x19c>)
 8000e28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000e2a:	4b54      	ldr	r3, [pc, #336]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e30:	4b52      	ldr	r3, [pc, #328]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8000e36:	4b51      	ldr	r3, [pc, #324]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000e38:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000e3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b4f      	ldr	r3, [pc, #316]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e44:	4b4d      	ldr	r3, [pc, #308]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e4a:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000e4c:	2280      	movs	r2, #128	; 0x80
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e50:	484a      	ldr	r0, [pc, #296]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000e52:	f003 f8b5 	bl	8003fc0 <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e5c:	f7ff fec8 	bl	8000bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e64:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e66:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4843      	ldr	r0, [pc, #268]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000e6e:	f003 fd7f 	bl	8004970 <HAL_TIM_ConfigClockSource>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e78:	f7ff feba 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e7c:	483f      	ldr	r0, [pc, #252]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000e7e:	f003 f96f 	bl	8004160 <HAL_TIM_PWM_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e88:	f7ff feb2 	bl	8000bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e90:	2300      	movs	r3, #0
 8000e92:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4837      	ldr	r0, [pc, #220]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000ea0:	f004 fd1c 	bl	80058dc <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000eaa:	f7ff fea1 	bl	8000bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eae:	2360      	movs	r3, #96	; 0x60
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 800;
 8000eb2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ecc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4829      	ldr	r0, [pc, #164]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000ed6:	f003 fc37 	bl	8004748 <HAL_TIM_PWM_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000ee0:	f7ff fe86 	bl	8000bf0 <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 8000ee4:	23c8      	movs	r3, #200	; 0xc8
 8000ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eec:	2204      	movs	r2, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4822      	ldr	r0, [pc, #136]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000ef2:	f003 fc29 	bl	8004748 <HAL_TIM_PWM_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8000efc:	f7ff fe78 	bl	8000bf0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481a      	ldr	r0, [pc, #104]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000f12:	f003 fc19 	bl	8004748 <HAL_TIM_PWM_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000f1c:	f7ff fe68 	bl	8000bf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 15;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4807      	ldr	r0, [pc, #28]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000f5e:	f004 fd53 	bl	8005a08 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000f68:	f7ff fe42 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <MX_TIM1_Init+0x198>)
 8000f6e:	f000 f8d7 	bl	8001120 <HAL_TIM_MspPostInit>

}
 8000f72:	bf00      	nop
 8000f74:	3770      	adds	r7, #112	; 0x70
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001dc 	.word	0x200001dc
 8000f80:	40012c00 	.word	0x40012c00

08000f84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <MX_TIM3_Init+0x90>)
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <MX_TIM3_Init+0x94>)
 8000fa6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_TIM3_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_TIM3_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_TIM3_Init+0x90>)
 8000fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_TIM3_Init+0x90>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_TIM3_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480d      	ldr	r0, [pc, #52]	; (8001014 <MX_TIM3_Init+0x90>)
 8000fe0:	f004 fb0b 	bl	80055fa <HAL_TIMEx_HallSensor_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000fea:	f7ff fe01 	bl	8000bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000fee:	2350      	movs	r3, #80	; 0x50
 8000ff0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_TIM3_Init+0x90>)
 8000ffc:	f004 fc6e 	bl	80058dc <HAL_TIMEx_MasterConfigSynchronization>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001006:	f7ff fdf3 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000228 	.word	0x20000228
 8001018:	40000400 	.word	0x40000400

0800101c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_TIM_Base_MspInit+0x38>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d10b      	bne.n	8001046 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_TIM_Base_MspInit+0x3c>)
 8001030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <HAL_TIM_Base_MspInit+0x3c>)
 8001034:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001038:	6613      	str	r3, [r2, #96]	; 0x60
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <HAL_TIM_Base_MspInit+0x3c>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40012c00 	.word	0x40012c00
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a26      	ldr	r2, [pc, #152]	; (8001114 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d145      	bne.n	800110a <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	4a25      	ldr	r2, [pc, #148]	; (8001118 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6593      	str	r3, [r2, #88]	; 0x58
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a19      	ldr	r2, [pc, #100]	; (8001118 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80010c6:	2350      	movs	r3, #80	; 0x50
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010d6:	2302      	movs	r3, #2
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f001 fd46 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010fa:	2302      	movs	r3, #2
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001106:	f001 fd35 	bl	8002b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40000400 	.word	0x40000400
 8001118:	40021000 	.word	0x40021000
 800111c:	48000800 	.word	0x48000800

08001120 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <HAL_TIM_MspPostInit+0xc4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d14b      	bne.n	80011da <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <HAL_TIM_MspPostInit+0xc8>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a28      	ldr	r2, [pc, #160]	; (80011e8 <HAL_TIM_MspPostInit+0xc8>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <HAL_TIM_MspPostInit+0xc8>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_TIM_MspPostInit+0xc8>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <HAL_TIM_MspPostInit+0xc8>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <HAL_TIM_MspPostInit+0xc8>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001172:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001184:	2306      	movs	r3, #6
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4817      	ldr	r0, [pc, #92]	; (80011ec <HAL_TIM_MspPostInit+0xcc>)
 8001190:	f001 fcf0 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80011a6:	2304      	movs	r3, #4
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	480e      	ldr	r0, [pc, #56]	; (80011ec <HAL_TIM_MspPostInit+0xcc>)
 80011b2:	f001 fcdf 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80011b6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80011ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80011c8:	2306      	movs	r3, #6
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f001 fccd 	bl	8002b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40012c00 	.word	0x40012c00
 80011e8:	40021000 	.word	0x40021000
 80011ec:	48000400 	.word	0x48000400

080011f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_USART2_UART_Init+0x90>)
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <MX_USART2_UART_Init+0x94>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_USART2_UART_Init+0x90>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800123a:	f004 fd02 	bl	8005c42 <HAL_UART_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001244:	f7ff fcd4 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001248:	2100      	movs	r1, #0
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800124c:	f006 fca5 	bl	8007b9a <HAL_UARTEx_SetTxFifoThreshold>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001256:	f7ff fccb 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800125e:	f006 fcda 	bl	8007c16 <HAL_UARTEx_SetRxFifoThreshold>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001268:	f7ff fcc2 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800126e:	f006 fc5b 	bl	8007b28 <HAL_UARTEx_DisableFifoMode>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001278:	f7ff fcba 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000274 	.word	0x20000274
 8001284:	40004400 	.word	0x40004400

08001288 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <MX_USART3_UART_Init+0x90>)
 800128e:	4a23      	ldr	r2, [pc, #140]	; (800131c <MX_USART3_UART_Init+0x94>)
 8001290:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <MX_USART3_UART_Init+0x90>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_USART3_UART_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012d0:	4811      	ldr	r0, [pc, #68]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012d2:	f004 fcb6 	bl	8005c42 <HAL_UART_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012dc:	f7ff fc88 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012e4:	f006 fc59 	bl	8007b9a <HAL_UARTEx_SetTxFifoThreshold>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012ee:	f7ff fc7f 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f2:	2100      	movs	r1, #0
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012f6:	f006 fc8e 	bl	8007c16 <HAL_UARTEx_SetRxFifoThreshold>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001300:	f7ff fc76 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_USART3_UART_Init+0x90>)
 8001306:	f006 fc0f 	bl	8007b28 <HAL_UARTEx_DisableFifoMode>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001310:	f7ff fc6e 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000304 	.word	0x20000304
 800131c:	40004800 	.word	0x40004800

08001320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0a0      	sub	sp, #128	; 0x80
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001338:	f107 0318 	add.w	r3, r7, #24
 800133c:	2254      	movs	r2, #84	; 0x54
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f006 fcf5 	bl	8007d30 <memset>
  if(uartHandle->Instance==USART2)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a45      	ldr	r2, [pc, #276]	; (8001460 <HAL_UART_MspInit+0x140>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d13f      	bne.n	80013d0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	4618      	mov	r0, r3
 800135e:	f002 fbe1 	bl	8003b24 <HAL_RCCEx_PeriphCLKConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001368:	f7ff fc42 	bl	8000bf0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800136c:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <HAL_UART_MspInit+0x144>)
 800136e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001370:	4a3c      	ldr	r2, [pc, #240]	; (8001464 <HAL_UART_MspInit+0x144>)
 8001372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001376:	6593      	str	r3, [r2, #88]	; 0x58
 8001378:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <HAL_UART_MspInit+0x144>)
 800137a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b37      	ldr	r3, [pc, #220]	; (8001464 <HAL_UART_MspInit+0x144>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	4a36      	ldr	r2, [pc, #216]	; (8001464 <HAL_UART_MspInit+0x144>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <HAL_UART_MspInit+0x144>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800139c:	230c      	movs	r3, #12
 800139e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ac:	2307      	movs	r3, #7
 80013ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f001 fbdb 	bl	8002b74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2026      	movs	r0, #38	; 0x26
 80013c4:	f001 faee 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013c8:	2026      	movs	r0, #38	; 0x26
 80013ca:	f001 fb05 	bl	80029d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013ce:	e043      	b.n	8001458 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a24      	ldr	r2, [pc, #144]	; (8001468 <HAL_UART_MspInit+0x148>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d13e      	bne.n	8001458 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013da:	2304      	movs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e2:	f107 0318 	add.w	r3, r7, #24
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fb9c 	bl	8003b24 <HAL_RCCEx_PeriphCLKConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80013f2:	f7ff fbfd 	bl	8000bf0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_UART_MspInit+0x144>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_UART_MspInit+0x144>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6593      	str	r3, [r2, #88]	; 0x58
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_UART_MspInit+0x144>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_UART_MspInit+0x144>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a14      	ldr	r2, [pc, #80]	; (8001464 <HAL_UART_MspInit+0x144>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_UART_MspInit+0x144>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001426:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800142a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001438:	2307      	movs	r3, #7
 800143a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001440:	4619      	mov	r1, r3
 8001442:	480a      	ldr	r0, [pc, #40]	; (800146c <HAL_UART_MspInit+0x14c>)
 8001444:	f001 fb96 	bl	8002b74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2027      	movs	r0, #39	; 0x27
 800144e:	f001 faa9 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001452:	2027      	movs	r0, #39	; 0x27
 8001454:	f001 fac0 	bl	80029d8 <HAL_NVIC_EnableIRQ>
}
 8001458:	bf00      	nop
 800145a:	3780      	adds	r7, #128	; 0x80
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40004400 	.word	0x40004400
 8001464:	40021000 	.word	0x40021000
 8001468:	40004800 	.word	0x40004800
 800146c:	48000800 	.word	0x48000800

08001470 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8001474:	2224      	movs	r2, #36	; 0x24
 8001476:	2100      	movs	r1, #0
 8001478:	4816      	ldr	r0, [pc, #88]	; (80014d4 <Shell_Init+0x64>)
 800147a:	f006 fc59 	bl	8007d30 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 800147e:	2240      	movs	r2, #64	; 0x40
 8001480:	2100      	movs	r1, #0
 8001482:	4815      	ldr	r0, [pc, #84]	; (80014d8 <Shell_Init+0x68>)
 8001484:	f006 fc54 	bl	8007d30 <memset>
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <Shell_Init+0x6c>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 800148e:	2240      	movs	r2, #64	; 0x40
 8001490:	2100      	movs	r1, #0
 8001492:	4813      	ldr	r0, [pc, #76]	; (80014e0 <Shell_Init+0x70>)
 8001494:	f006 fc4c 	bl	8007d30 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001498:	2201      	movs	r2, #1
 800149a:	4910      	ldr	r1, [pc, #64]	; (80014dc <Shell_Init+0x6c>)
 800149c:	4811      	ldr	r0, [pc, #68]	; (80014e4 <Shell_Init+0x74>)
 800149e:	f004 fcb7 	bl	8005e10 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80014a2:	4811      	ldr	r0, [pc, #68]	; (80014e8 <Shell_Init+0x78>)
 80014a4:	f7fe feb8 	bl	8000218 <strlen>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	490d      	ldr	r1, [pc, #52]	; (80014e8 <Shell_Init+0x78>)
 80014b2:	480c      	ldr	r0, [pc, #48]	; (80014e4 <Shell_Init+0x74>)
 80014b4:	f004 fc15 	bl	8005ce2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <Shell_Init+0x7c>)
 80014ba:	f7fe fead 	bl	8000218 <strlen>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	4909      	ldr	r1, [pc, #36]	; (80014ec <Shell_Init+0x7c>)
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <Shell_Init+0x74>)
 80014ca:	f004 fc0a 	bl	8005ce2 <HAL_UART_Transmit>
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000041c 	.word	0x2000041c
 80014d8:	200003dc 	.word	0x200003dc
 80014dc:	20000398 	.word	0x20000398
 80014e0:	2000039c 	.word	0x2000039c
 80014e4:	20000274 	.word	0x20000274
 80014e8:	20000028 	.word	0x20000028
 80014ec:	20000004 	.word	0x20000004

080014f0 <HAL_UART_RxCpltCallback>:
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
		newCmdReady = 0;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_UART_RxCpltCallback+0x20>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80014fe:	2201      	movs	r2, #1
 8001500:	4904      	ldr	r1, [pc, #16]	; (8001514 <HAL_UART_RxCpltCallback+0x24>)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_UART_RxCpltCallback+0x28>)
 8001504:	f004 fc84 	bl	8005e10 <HAL_UART_Receive_IT>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000394 	.word	0x20000394
 8001514:	20000398 	.word	0x20000398
 8001518:	20000274 	.word	0x20000274

0800151c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800151e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001520:	480d      	ldr	r0, [pc, #52]	; (8001558 <LoopForever+0x6>)
  ldr r1, =_edata
 8001522:	490e      	ldr	r1, [pc, #56]	; (800155c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001524:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <LoopForever+0xe>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001538:	4c0b      	ldr	r4, [pc, #44]	; (8001568 <LoopForever+0x16>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001546:	f7ff fc3b 	bl	8000dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154a:	f006 fbf9 	bl	8007d40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800154e:	f7ff fa99 	bl	8000a84 <main>

08001552 <LoopForever>:

LoopForever:
    b LoopForever
 8001552:	e7fe      	b.n	8001552 <LoopForever>
  ldr   r0, =_estack
 8001554:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800155c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001560:	08007df0 	.word	0x08007df0
  ldr r2, =_sbss
 8001564:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001568:	20000444 	.word	0x20000444

0800156c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC1_2_IRQHandler>

0800156e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f001 fa08 	bl	800298e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800157e:	200f      	movs	r0, #15
 8001580:	f7ff fb60 	bl	8000c44 <HAL_InitTick>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	e001      	b.n	8001594 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001590:	f7ff fb34 	bl	8000bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001594:	79fb      	ldrb	r3, [r7, #7]

}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_IncTick+0x1c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_IncTick+0x20>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4413      	add	r3, r2
 80015ae:	4a03      	ldr	r2, [pc, #12]	; (80015bc <HAL_IncTick+0x1c>)
 80015b0:	6013      	str	r3, [r2, #0]
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	20000440 	.word	0x20000440
 80015c0:	20000094 	.word	0x20000094

080015c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_GetTick+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000440 	.word	0x20000440

080015dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e4:	f7ff ffee 	bl	80015c4 <HAL_GetTick>
 80015e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d004      	beq.n	8001600 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_Delay+0x40>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4413      	add	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001600:	bf00      	nop
 8001602:	f7ff ffdf 	bl	80015c4 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	429a      	cmp	r2, r3
 8001610:	d8f7      	bhi.n	8001602 <HAL_Delay+0x26>
  {
  }
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000094 	.word	0x20000094

08001620 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	609a      	str	r2, [r3, #8]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	609a      	str	r2, [r3, #8]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3360      	adds	r3, #96	; 0x60
 800169a:	461a      	mov	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <LL_ADC_SetOffset+0x44>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	4313      	orrs	r3, r2
 80016b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016c0:	bf00      	nop
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	03fff000 	.word	0x03fff000

080016d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3360      	adds	r3, #96	; 0x60
 80016de:	461a      	mov	r2, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3360      	adds	r3, #96	; 0x60
 800170c:	461a      	mov	r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	431a      	orrs	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001726:	bf00      	nop
 8001728:	371c      	adds	r7, #28
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001732:	b480      	push	{r7}
 8001734:	b087      	sub	sp, #28
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3360      	adds	r3, #96	; 0x60
 8001742:	461a      	mov	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	431a      	orrs	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800175c:	bf00      	nop
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3360      	adds	r3, #96	; 0x60
 8001778:	461a      	mov	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	431a      	orrs	r2, r3
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001792:	bf00      	nop
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	615a      	str	r2, [r3, #20]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	3330      	adds	r3, #48	; 0x30
 80017d4:	461a      	mov	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	4413      	add	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	211f      	movs	r1, #31
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	401a      	ands	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	0e9b      	lsrs	r3, r3, #26
 80017fc:	f003 011f 	and.w	r1, r3, #31
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	431a      	orrs	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001810:	bf00      	nop
 8001812:	371c      	adds	r7, #28
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3314      	adds	r3, #20
 800182c:	461a      	mov	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	0e5b      	lsrs	r3, r3, #25
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	4413      	add	r3, r2
 800183a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	0d1b      	lsrs	r3, r3, #20
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	2107      	movs	r1, #7
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	401a      	ands	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	0d1b      	lsrs	r3, r3, #20
 8001856:	f003 031f 	and.w	r3, r3, #31
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	431a      	orrs	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001866:	bf00      	nop
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d10a      	bne.n	800189e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001894:	431a      	orrs	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800189c:	e00a      	b.n	80018b4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018aa:	43db      	mvns	r3, r3
 80018ac:	401a      	ands	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	407f0000 	.word	0x407f0000

080018c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6093      	str	r3, [r2, #8]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018fc:	d101      	bne.n	8001902 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001924:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800194c:	d101      	bne.n	8001952 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <LL_ADC_IsEnabled+0x18>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <LL_ADC_IsEnabled+0x1a>
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b04      	cmp	r3, #4
 8001998:	d101      	bne.n	800199e <LL_ADC_REG_IsConversionOngoing+0x18>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d101      	bne.n	80019c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e1af      	b.n	8001d4e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7fe fe6f 	bl	80006e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff67 	bl	80018e8 <LL_ADC_IsDeepPowerDownEnabled>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff4d 	bl	80018c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff ff82 	bl	8001938 <LL_ADC_IsInternalRegulatorEnabled>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d115      	bne.n	8001a66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff66 	bl	8001910 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a44:	4b9f      	ldr	r3, [pc, #636]	; (8001cc4 <HAL_ADC_Init+0x2f0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	099b      	lsrs	r3, r3, #6
 8001a4a:	4a9f      	ldr	r2, [pc, #636]	; (8001cc8 <HAL_ADC_Init+0x2f4>)
 8001a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a50:	099b      	lsrs	r3, r3, #6
 8001a52:	3301      	adds	r3, #1
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a58:	e002      	b.n	8001a60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f9      	bne.n	8001a5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff64 	bl	8001938 <LL_ADC_IsInternalRegulatorEnabled>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10d      	bne.n	8001a92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	f043 0210 	orr.w	r2, r3, #16
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff75 	bl	8001986 <LL_ADC_REG_IsConversionOngoing>
 8001a9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 8148 	bne.w	8001d3c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 8144 	bne.w	8001d3c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001abc:	f043 0202 	orr.w	r2, r3, #2
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff49 	bl	8001960 <LL_ADC_IsEnabled>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d141      	bne.n	8001b58 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001adc:	d004      	beq.n	8001ae8 <HAL_ADC_Init+0x114>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a7a      	ldr	r2, [pc, #488]	; (8001ccc <HAL_ADC_Init+0x2f8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d10f      	bne.n	8001b08 <HAL_ADC_Init+0x134>
 8001ae8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001aec:	f7ff ff38 	bl	8001960 <LL_ADC_IsEnabled>
 8001af0:	4604      	mov	r4, r0
 8001af2:	4876      	ldr	r0, [pc, #472]	; (8001ccc <HAL_ADC_Init+0x2f8>)
 8001af4:	f7ff ff34 	bl	8001960 <LL_ADC_IsEnabled>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4323      	orrs	r3, r4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	e012      	b.n	8001b2e <HAL_ADC_Init+0x15a>
 8001b08:	4871      	ldr	r0, [pc, #452]	; (8001cd0 <HAL_ADC_Init+0x2fc>)
 8001b0a:	f7ff ff29 	bl	8001960 <LL_ADC_IsEnabled>
 8001b0e:	4604      	mov	r4, r0
 8001b10:	4870      	ldr	r0, [pc, #448]	; (8001cd4 <HAL_ADC_Init+0x300>)
 8001b12:	f7ff ff25 	bl	8001960 <LL_ADC_IsEnabled>
 8001b16:	4603      	mov	r3, r0
 8001b18:	431c      	orrs	r4, r3
 8001b1a:	486f      	ldr	r0, [pc, #444]	; (8001cd8 <HAL_ADC_Init+0x304>)
 8001b1c:	f7ff ff20 	bl	8001960 <LL_ADC_IsEnabled>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4323      	orrs	r3, r4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf0c      	ite	eq
 8001b28:	2301      	moveq	r3, #1
 8001b2a:	2300      	movne	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d012      	beq.n	8001b58 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b3a:	d004      	beq.n	8001b46 <HAL_ADC_Init+0x172>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a62      	ldr	r2, [pc, #392]	; (8001ccc <HAL_ADC_Init+0x2f8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_Init+0x176>
 8001b46:	4a65      	ldr	r2, [pc, #404]	; (8001cdc <HAL_ADC_Init+0x308>)
 8001b48:	e000      	b.n	8001b4c <HAL_ADC_Init+0x178>
 8001b4a:	4a65      	ldr	r2, [pc, #404]	; (8001ce0 <HAL_ADC_Init+0x30c>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f7ff fd64 	bl	8001620 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7f5b      	ldrb	r3, [r3, #29]
 8001b5c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b62:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b68:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b6e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b76:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d106      	bne.n	8001b94 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	045b      	lsls	r3, r3, #17
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d009      	beq.n	8001bb0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	4b4b      	ldr	r3, [pc, #300]	; (8001ce4 <HAL_ADC_Init+0x310>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	69b9      	ldr	r1, [r7, #24]
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fed1 	bl	8001986 <LL_ADC_REG_IsConversionOngoing>
 8001be4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fede 	bl	80019ac <LL_ADC_INJ_IsConversionOngoing>
 8001bf0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d17f      	bne.n	8001cf8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d17c      	bne.n	8001cf8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c02:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c0a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c1a:	f023 0302 	bic.w	r3, r3, #2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	69b9      	ldr	r1, [r7, #24]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d017      	beq.n	8001c60 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6911      	ldr	r1, [r2, #16]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001c5e:	e013      	b.n	8001c88 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c84:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d12a      	bne.n	8001ce8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c9c:	f023 0304 	bic.w	r3, r3, #4
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ca8:	4311      	orrs	r1, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	611a      	str	r2, [r3, #16]
 8001cc2:	e019      	b.n	8001cf8 <HAL_ADC_Init+0x324>
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	053e2d63 	.word	0x053e2d63
 8001ccc:	50000100 	.word	0x50000100
 8001cd0:	50000400 	.word	0x50000400
 8001cd4:	50000500 	.word	0x50000500
 8001cd8:	50000600 	.word	0x50000600
 8001cdc:	50000300 	.word	0x50000300
 8001ce0:	50000700 	.word	0x50000700
 8001ce4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d10c      	bne.n	8001d1a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f023 010f 	bic.w	r1, r3, #15
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	1e5a      	subs	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
 8001d18:	e007      	b.n	8001d2a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 020f 	bic.w	r2, r2, #15
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d3a:	e007      	b.n	8001d4c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	f043 0210 	orr.w	r2, r3, #16
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}
 8001d56:	bf00      	nop

08001d58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b0b6      	sub	sp, #216	; 0xd8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x24>
 8001d76:	2302      	movs	r3, #2
 8001d78:	f000 bc13 	b.w	80025a2 <HAL_ADC_ConfigChannel+0x84a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fdfc 	bl	8001986 <LL_ADC_REG_IsConversionOngoing>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f040 83f3 	bne.w	800257c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6859      	ldr	r1, [r3, #4]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f7ff fd0e 	bl	80017c4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fdea 	bl	8001986 <LL_ADC_REG_IsConversionOngoing>
 8001db2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fdf6 	bl	80019ac <LL_ADC_INJ_IsConversionOngoing>
 8001dc0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 81d9 	bne.w	8002180 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 81d4 	bne.w	8002180 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001de0:	d10f      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2200      	movs	r2, #0
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7ff fd15 	bl	800181c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fccf 	bl	800179e <LL_ADC_SetSamplingTimeCommonConfig>
 8001e00:	e00e      	b.n	8001e20 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6819      	ldr	r1, [r3, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f7ff fd04 	bl	800181c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fcbf 	bl	800179e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d022      	beq.n	8001e88 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6919      	ldr	r1, [r3, #16]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e52:	f7ff fc19 	bl	8001688 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6919      	ldr	r1, [r3, #16]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	461a      	mov	r2, r3
 8001e64:	f7ff fc65 	bl	8001732 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6919      	ldr	r1, [r3, #16]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	7f1b      	ldrb	r3, [r3, #28]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x126>
 8001e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7c:	e000      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x128>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	461a      	mov	r2, r3
 8001e82:	f7ff fc71 	bl	8001768 <LL_ADC_SetOffsetSaturation>
 8001e86:	e17b      	b.n	8002180 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fc1e 	bl	80016d0 <LL_ADC_GetOffsetChannel>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x15c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fc13 	bl	80016d0 <LL_ADC_GetOffsetChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	0e9b      	lsrs	r3, r3, #26
 8001eae:	f003 021f 	and.w	r2, r3, #31
 8001eb2:	e01e      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x19a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fc08 	bl	80016d0 <LL_ADC_GetOffsetChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ed2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ed6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001eda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	e004      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001ee6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d105      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x1b2>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0e9b      	lsrs	r3, r3, #26
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	e018      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x1e4>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001f2e:	2320      	movs	r3, #32
 8001f30:	e004      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001f32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d106      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2200      	movs	r2, #0
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fbd7 	bl	80016fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2101      	movs	r1, #1
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fbbb 	bl	80016d0 <LL_ADC_GetOffsetChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10a      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x222>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fbb0 	bl	80016d0 <LL_ADC_GetOffsetChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	0e9b      	lsrs	r3, r3, #26
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	e01e      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x260>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2101      	movs	r1, #1
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fba5 	bl	80016d0 <LL_ADC_GetOffsetChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001fa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e004      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001fac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x278>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0e9b      	lsrs	r3, r3, #26
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	e018      	b.n	8002002 <HAL_ADC_ConfigChannel+0x2aa>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fe4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fe8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	e004      	b.n	8002002 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001ff8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002002:	429a      	cmp	r2, r3
 8002004:	d106      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	2101      	movs	r1, #1
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fb74 	bl	80016fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2102      	movs	r1, #2
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fb58 	bl	80016d0 <LL_ADC_GetOffsetChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10a      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x2e8>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2102      	movs	r1, #2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fb4d 	bl	80016d0 <LL_ADC_GetOffsetChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	0e9b      	lsrs	r3, r3, #26
 800203a:	f003 021f 	and.w	r2, r3, #31
 800203e:	e01e      	b.n	800207e <HAL_ADC_ConfigChannel+0x326>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2102      	movs	r1, #2
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fb42 	bl	80016d0 <LL_ADC_GetOffsetChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800205e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002066:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800206e:	2320      	movs	r3, #32
 8002070:	e004      	b.n	800207c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002072:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002086:	2b00      	cmp	r3, #0
 8002088:	d105      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x33e>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0e9b      	lsrs	r3, r3, #26
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	e016      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x36c>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80020a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80020ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80020b6:	2320      	movs	r3, #32
 80020b8:	e004      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80020ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d106      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	2102      	movs	r1, #2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fb13 	bl	80016fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2103      	movs	r1, #3
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff faf7 	bl	80016d0 <LL_ADC_GetOffsetChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x3aa>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2103      	movs	r1, #3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff faec 	bl	80016d0 <LL_ADC_GetOffsetChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	0e9b      	lsrs	r3, r3, #26
 80020fc:	f003 021f 	and.w	r2, r3, #31
 8002100:	e017      	b.n	8002132 <HAL_ADC_ConfigChannel+0x3da>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2103      	movs	r1, #3
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fae1 	bl	80016d0 <LL_ADC_GetOffsetChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800211a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800211c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800211e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002124:	2320      	movs	r3, #32
 8002126:	e003      	b.n	8002130 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213a:	2b00      	cmp	r3, #0
 800213c:	d105      	bne.n	800214a <HAL_ADC_ConfigChannel+0x3f2>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	0e9b      	lsrs	r3, r3, #26
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	e011      	b.n	800216e <HAL_ADC_ConfigChannel+0x416>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800215a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800215c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002162:	2320      	movs	r3, #32
 8002164:	e003      	b.n	800216e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800216e:	429a      	cmp	r2, r3
 8002170:	d106      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	2103      	movs	r1, #3
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fabe 	bl	80016fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fbeb 	bl	8001960 <LL_ADC_IsEnabled>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	f040 813d 	bne.w	800240c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	6819      	ldr	r1, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	461a      	mov	r2, r3
 80021a0:	f7ff fb68 	bl	8001874 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4aa2      	ldr	r2, [pc, #648]	; (8002434 <HAL_ADC_ConfigChannel+0x6dc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	f040 812e 	bne.w	800240c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x480>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	0e9b      	lsrs	r3, r3, #26
 80021c6:	3301      	adds	r3, #1
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	2b09      	cmp	r3, #9
 80021ce:	bf94      	ite	ls
 80021d0:	2301      	movls	r3, #1
 80021d2:	2300      	movhi	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	e019      	b.n	800220c <HAL_ADC_ConfigChannel+0x4b4>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80021f0:	2320      	movs	r3, #32
 80021f2:	e003      	b.n	80021fc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80021f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	2b09      	cmp	r3, #9
 8002204:	bf94      	ite	ls
 8002206:	2301      	movls	r3, #1
 8002208:	2300      	movhi	r3, #0
 800220a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800220c:	2b00      	cmp	r3, #0
 800220e:	d079      	beq.n	8002304 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002218:	2b00      	cmp	r3, #0
 800221a:	d107      	bne.n	800222c <HAL_ADC_ConfigChannel+0x4d4>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	3301      	adds	r3, #1
 8002224:	069b      	lsls	r3, r3, #26
 8002226:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800222a:	e015      	b.n	8002258 <HAL_ADC_ConfigChannel+0x500>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800223a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800223c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800223e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002244:	2320      	movs	r3, #32
 8002246:	e003      	b.n	8002250 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	3301      	adds	r3, #1
 8002252:	069b      	lsls	r3, r3, #26
 8002254:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002260:	2b00      	cmp	r3, #0
 8002262:	d109      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x520>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0e9b      	lsrs	r3, r3, #26
 800226a:	3301      	adds	r3, #1
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	2101      	movs	r1, #1
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	e017      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x550>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002288:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800228a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002290:	2320      	movs	r3, #32
 8002292:	e003      	b.n	800229c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	3301      	adds	r3, #1
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	ea42 0103 	orr.w	r1, r2, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10a      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x576>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	3301      	adds	r3, #1
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	051b      	lsls	r3, r3, #20
 80022cc:	e018      	b.n	8002300 <HAL_ADC_ConfigChannel+0x5a8>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80022e6:	2320      	movs	r3, #32
 80022e8:	e003      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80022ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3301      	adds	r3, #1
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002300:	430b      	orrs	r3, r1
 8002302:	e07e      	b.n	8002402 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230c:	2b00      	cmp	r3, #0
 800230e:	d107      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x5c8>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0e9b      	lsrs	r3, r3, #26
 8002316:	3301      	adds	r3, #1
 8002318:	069b      	lsls	r3, r3, #26
 800231a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800231e:	e015      	b.n	800234c <HAL_ADC_ConfigChannel+0x5f4>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800232e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002330:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002338:	2320      	movs	r3, #32
 800233a:	e003      	b.n	8002344 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	3301      	adds	r3, #1
 8002346:	069b      	lsls	r3, r3, #26
 8002348:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <HAL_ADC_ConfigChannel+0x614>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0e9b      	lsrs	r3, r3, #26
 800235e:	3301      	adds	r3, #1
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	2101      	movs	r1, #1
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	e017      	b.n	800239c <HAL_ADC_ConfigChannel+0x644>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	61fb      	str	r3, [r7, #28]
  return result;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e003      	b.n	8002390 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	2101      	movs	r1, #1
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	ea42 0103 	orr.w	r1, r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10d      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x670>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	3301      	adds	r3, #1
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	3b1e      	subs	r3, #30
 80023c0:	051b      	lsls	r3, r3, #20
 80023c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023c6:	e01b      	b.n	8002400 <HAL_ADC_ConfigChannel+0x6a8>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	613b      	str	r3, [r7, #16]
  return result;
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80023e0:	2320      	movs	r3, #32
 80023e2:	e003      	b.n	80023ec <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	3301      	adds	r3, #1
 80023ee:	f003 021f 	and.w	r2, r3, #31
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	3b1e      	subs	r3, #30
 80023fa:	051b      	lsls	r3, r3, #20
 80023fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002400:	430b      	orrs	r3, r1
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	6892      	ldr	r2, [r2, #8]
 8002406:	4619      	mov	r1, r3
 8002408:	f7ff fa08 	bl	800181c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_ADC_ConfigChannel+0x6e0>)
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80be 	beq.w	8002596 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002422:	d004      	beq.n	800242e <HAL_ADC_ConfigChannel+0x6d6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a04      	ldr	r2, [pc, #16]	; (800243c <HAL_ADC_ConfigChannel+0x6e4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d10a      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x6ec>
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <HAL_ADC_ConfigChannel+0x6e8>)
 8002430:	e009      	b.n	8002446 <HAL_ADC_ConfigChannel+0x6ee>
 8002432:	bf00      	nop
 8002434:	407f0000 	.word	0x407f0000
 8002438:	80080000 	.word	0x80080000
 800243c:	50000100 	.word	0x50000100
 8002440:	50000300 	.word	0x50000300
 8002444:	4b59      	ldr	r3, [pc, #356]	; (80025ac <HAL_ADC_ConfigChannel+0x854>)
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff f910 	bl	800166c <LL_ADC_GetCommonPathInternalCh>
 800244c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a56      	ldr	r2, [pc, #344]	; (80025b0 <HAL_ADC_ConfigChannel+0x858>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d004      	beq.n	8002464 <HAL_ADC_ConfigChannel+0x70c>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a55      	ldr	r2, [pc, #340]	; (80025b4 <HAL_ADC_ConfigChannel+0x85c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d13a      	bne.n	80024da <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002464:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d134      	bne.n	80024da <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002478:	d005      	beq.n	8002486 <HAL_ADC_ConfigChannel+0x72e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a4e      	ldr	r2, [pc, #312]	; (80025b8 <HAL_ADC_ConfigChannel+0x860>)
 8002480:	4293      	cmp	r3, r2
 8002482:	f040 8085 	bne.w	8002590 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800248e:	d004      	beq.n	800249a <HAL_ADC_ConfigChannel+0x742>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a49      	ldr	r2, [pc, #292]	; (80025bc <HAL_ADC_ConfigChannel+0x864>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x746>
 800249a:	4a49      	ldr	r2, [pc, #292]	; (80025c0 <HAL_ADC_ConfigChannel+0x868>)
 800249c:	e000      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x748>
 800249e:	4a43      	ldr	r2, [pc, #268]	; (80025ac <HAL_ADC_ConfigChannel+0x854>)
 80024a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024a8:	4619      	mov	r1, r3
 80024aa:	4610      	mov	r0, r2
 80024ac:	f7ff f8cb 	bl	8001646 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b0:	4b44      	ldr	r3, [pc, #272]	; (80025c4 <HAL_ADC_ConfigChannel+0x86c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	4a44      	ldr	r2, [pc, #272]	; (80025c8 <HAL_ADC_ConfigChannel+0x870>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024ca:	e002      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f9      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024d8:	e05a      	b.n	8002590 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a3b      	ldr	r2, [pc, #236]	; (80025cc <HAL_ADC_ConfigChannel+0x874>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d125      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x7d8>
 80024e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d11f      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a31      	ldr	r2, [pc, #196]	; (80025bc <HAL_ADC_ConfigChannel+0x864>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d104      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x7ac>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a34      	ldr	r2, [pc, #208]	; (80025d0 <HAL_ADC_ConfigChannel+0x878>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d047      	beq.n	8002594 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800250c:	d004      	beq.n	8002518 <HAL_ADC_ConfigChannel+0x7c0>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a2a      	ldr	r2, [pc, #168]	; (80025bc <HAL_ADC_ConfigChannel+0x864>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x7c4>
 8002518:	4a29      	ldr	r2, [pc, #164]	; (80025c0 <HAL_ADC_ConfigChannel+0x868>)
 800251a:	e000      	b.n	800251e <HAL_ADC_ConfigChannel+0x7c6>
 800251c:	4a23      	ldr	r2, [pc, #140]	; (80025ac <HAL_ADC_ConfigChannel+0x854>)
 800251e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002526:	4619      	mov	r1, r3
 8002528:	4610      	mov	r0, r2
 800252a:	f7ff f88c 	bl	8001646 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800252e:	e031      	b.n	8002594 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a27      	ldr	r2, [pc, #156]	; (80025d4 <HAL_ADC_ConfigChannel+0x87c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d12d      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800253a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800253e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d127      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <HAL_ADC_ConfigChannel+0x864>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d022      	beq.n	8002596 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002558:	d004      	beq.n	8002564 <HAL_ADC_ConfigChannel+0x80c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a17      	ldr	r2, [pc, #92]	; (80025bc <HAL_ADC_ConfigChannel+0x864>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d101      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x810>
 8002564:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <HAL_ADC_ConfigChannel+0x868>)
 8002566:	e000      	b.n	800256a <HAL_ADC_ConfigChannel+0x812>
 8002568:	4a10      	ldr	r2, [pc, #64]	; (80025ac <HAL_ADC_ConfigChannel+0x854>)
 800256a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800256e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f7ff f866 	bl	8001646 <LL_ADC_SetCommonPathInternalCh>
 800257a:	e00c      	b.n	8002596 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	f043 0220 	orr.w	r2, r3, #32
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800258e:	e002      	b.n	8002596 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002590:	bf00      	nop
 8002592:	e000      	b.n	8002596 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002594:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800259e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	37d8      	adds	r7, #216	; 0xd8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	50000700 	.word	0x50000700
 80025b0:	c3210000 	.word	0xc3210000
 80025b4:	90c00010 	.word	0x90c00010
 80025b8:	50000600 	.word	0x50000600
 80025bc:	50000100 	.word	0x50000100
 80025c0:	50000300 	.word	0x50000300
 80025c4:	20000000 	.word	0x20000000
 80025c8:	053e2d63 	.word	0x053e2d63
 80025cc:	c7520000 	.word	0xc7520000
 80025d0:	50000500 	.word	0x50000500
 80025d4:	cb840000 	.word	0xcb840000

080025d8 <LL_ADC_IsEnabled>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <LL_ADC_IsEnabled+0x18>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <LL_ADC_IsEnabled+0x1a>
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <LL_ADC_REG_IsConversionOngoing>:
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b04      	cmp	r3, #4
 8002610:	d101      	bne.n	8002616 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b0a1      	sub	sp, #132	; 0x84
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800263e:	2302      	movs	r3, #2
 8002640:	e0e7      	b.n	8002812 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800264a:	2300      	movs	r3, #0
 800264c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800264e:	2300      	movs	r3, #0
 8002650:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800265a:	d102      	bne.n	8002662 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800265c:	4b6f      	ldr	r3, [pc, #444]	; (800281c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	e009      	b.n	8002676 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6e      	ldr	r2, [pc, #440]	; (8002820 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d102      	bne.n	8002672 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800266c:	4b6d      	ldr	r3, [pc, #436]	; (8002824 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	e001      	b.n	8002676 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10b      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	f043 0220 	orr.w	r2, r3, #32
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0be      	b.n	8002812 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ffb1 	bl	80025fe <LL_ADC_REG_IsConversionOngoing>
 800269c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ffab 	bl	80025fe <LL_ADC_REG_IsConversionOngoing>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 80a0 	bne.w	80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 809c 	bne.w	80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026c0:	d004      	beq.n	80026cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a55      	ldr	r2, [pc, #340]	; (800281c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d101      	bne.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80026cc:	4b56      	ldr	r3, [pc, #344]	; (8002828 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80026ce:	e000      	b.n	80026d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80026d0:	4b56      	ldr	r3, [pc, #344]	; (800282c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80026d2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d04b      	beq.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026ee:	035b      	lsls	r3, r3, #13
 80026f0:	430b      	orrs	r3, r1
 80026f2:	431a      	orrs	r2, r3
 80026f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002700:	d004      	beq.n	800270c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a45      	ldr	r2, [pc, #276]	; (800281c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d10f      	bne.n	800272c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800270c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002710:	f7ff ff62 	bl	80025d8 <LL_ADC_IsEnabled>
 8002714:	4604      	mov	r4, r0
 8002716:	4841      	ldr	r0, [pc, #260]	; (800281c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002718:	f7ff ff5e 	bl	80025d8 <LL_ADC_IsEnabled>
 800271c:	4603      	mov	r3, r0
 800271e:	4323      	orrs	r3, r4
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	e012      	b.n	8002752 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800272c:	483c      	ldr	r0, [pc, #240]	; (8002820 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800272e:	f7ff ff53 	bl	80025d8 <LL_ADC_IsEnabled>
 8002732:	4604      	mov	r4, r0
 8002734:	483b      	ldr	r0, [pc, #236]	; (8002824 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002736:	f7ff ff4f 	bl	80025d8 <LL_ADC_IsEnabled>
 800273a:	4603      	mov	r3, r0
 800273c:	431c      	orrs	r4, r3
 800273e:	483c      	ldr	r0, [pc, #240]	; (8002830 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002740:	f7ff ff4a 	bl	80025d8 <LL_ADC_IsEnabled>
 8002744:	4603      	mov	r3, r0
 8002746:	4323      	orrs	r3, r4
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d056      	beq.n	8002804 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800275e:	f023 030f 	bic.w	r3, r3, #15
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	6811      	ldr	r1, [r2, #0]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	6892      	ldr	r2, [r2, #8]
 800276a:	430a      	orrs	r2, r1
 800276c:	431a      	orrs	r2, r3
 800276e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002770:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002772:	e047      	b.n	8002804 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800277c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002788:	d004      	beq.n	8002794 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a23      	ldr	r2, [pc, #140]	; (800281c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d10f      	bne.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002794:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002798:	f7ff ff1e 	bl	80025d8 <LL_ADC_IsEnabled>
 800279c:	4604      	mov	r4, r0
 800279e:	481f      	ldr	r0, [pc, #124]	; (800281c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027a0:	f7ff ff1a 	bl	80025d8 <LL_ADC_IsEnabled>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4323      	orrs	r3, r4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e012      	b.n	80027da <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80027b4:	481a      	ldr	r0, [pc, #104]	; (8002820 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80027b6:	f7ff ff0f 	bl	80025d8 <LL_ADC_IsEnabled>
 80027ba:	4604      	mov	r4, r0
 80027bc:	4819      	ldr	r0, [pc, #100]	; (8002824 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80027be:	f7ff ff0b 	bl	80025d8 <LL_ADC_IsEnabled>
 80027c2:	4603      	mov	r3, r0
 80027c4:	431c      	orrs	r4, r3
 80027c6:	481a      	ldr	r0, [pc, #104]	; (8002830 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80027c8:	f7ff ff06 	bl	80025d8 <LL_ADC_IsEnabled>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4323      	orrs	r3, r4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d012      	beq.n	8002804 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027e6:	f023 030f 	bic.w	r3, r3, #15
 80027ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027ee:	e009      	b.n	8002804 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f4:	f043 0220 	orr.w	r2, r3, #32
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002802:	e000      	b.n	8002806 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002804:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800280e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002812:	4618      	mov	r0, r3
 8002814:	3784      	adds	r7, #132	; 0x84
 8002816:	46bd      	mov	sp, r7
 8002818:	bd90      	pop	{r4, r7, pc}
 800281a:	bf00      	nop
 800281c:	50000100 	.word	0x50000100
 8002820:	50000400 	.word	0x50000400
 8002824:	50000500 	.word	0x50000500
 8002828:	50000300 	.word	0x50000300
 800282c:	50000700 	.word	0x50000700
 8002830:	50000600 	.word	0x50000600

08002834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800285c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002866:	4a04      	ldr	r2, [pc, #16]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	60d3      	str	r3, [r2, #12]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <__NVIC_GetPriorityGrouping+0x18>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f003 0307 	and.w	r3, r3, #7
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	db0b      	blt.n	80028c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	4907      	ldr	r1, [pc, #28]	; (80028d0 <__NVIC_EnableIRQ+0x38>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2001      	movs	r0, #1
 80028ba:	fa00 f202 	lsl.w	r2, r0, r2
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db0a      	blt.n	80028fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	490c      	ldr	r1, [pc, #48]	; (8002920 <__NVIC_SetPriority+0x4c>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028fc:	e00a      	b.n	8002914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4908      	ldr	r1, [pc, #32]	; (8002924 <__NVIC_SetPriority+0x50>)
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3b04      	subs	r3, #4
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	440b      	add	r3, r1
 8002912:	761a      	strb	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f1c3 0307 	rsb	r3, r3, #7
 8002942:	2b04      	cmp	r3, #4
 8002944:	bf28      	it	cs
 8002946:	2304      	movcs	r3, #4
 8002948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3304      	adds	r3, #4
 800294e:	2b06      	cmp	r3, #6
 8002950:	d902      	bls.n	8002958 <NVIC_EncodePriority+0x30>
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3b03      	subs	r3, #3
 8002956:	e000      	b.n	800295a <NVIC_EncodePriority+0x32>
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	f04f 32ff 	mov.w	r2, #4294967295
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002970:	f04f 31ff 	mov.w	r1, #4294967295
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43d9      	mvns	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	4313      	orrs	r3, r2
         );
}
 8002982:	4618      	mov	r0, r3
 8002984:	3724      	adds	r7, #36	; 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ff4c 	bl	8002834 <__NVIC_SetPriorityGrouping>
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029b2:	f7ff ff63 	bl	800287c <__NVIC_GetPriorityGrouping>
 80029b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	6978      	ldr	r0, [r7, #20]
 80029be:	f7ff ffb3 	bl	8002928 <NVIC_EncodePriority>
 80029c2:	4602      	mov	r2, r0
 80029c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff82 	bl	80028d4 <__NVIC_SetPriority>
}
 80029d0:	bf00      	nop
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff56 	bl	8002898 <__NVIC_EnableIRQ>
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d005      	beq.n	8002a18 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	e037      	b.n	8002a88 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 020e 	bic.w	r2, r2, #14
 8002a26:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a36:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	f003 021f 	and.w	r2, r3, #31
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	2101      	movs	r1, #1
 8002a56:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a64:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a7c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a86:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d00d      	beq.n	8002ada <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	e047      	b.n	8002b6a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 020e 	bic.w	r2, r2, #14
 8002ae8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0201 	bic.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f003 021f 	and.w	r2, r3, #31
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2101      	movs	r1, #1
 8002b18:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b26:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00c      	beq.n	8002b4a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b48:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
    }
  }
  return status;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b82:	e15a      	b.n	8002e3a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2101      	movs	r1, #1
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	4013      	ands	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 814c 	beq.w	8002e34 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d005      	beq.n	8002bb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d130      	bne.n	8002c16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bea:	2201      	movs	r2, #1
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	f003 0201 	and.w	r2, r3, #1
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d017      	beq.n	8002c52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d123      	bne.n	8002ca6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	08da      	lsrs	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3208      	adds	r2, #8
 8002c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	220f      	movs	r2, #15
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	08da      	lsrs	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3208      	adds	r2, #8
 8002ca0:	6939      	ldr	r1, [r7, #16]
 8002ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 0203 	and.w	r2, r3, #3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80a6 	beq.w	8002e34 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce8:	4b5b      	ldr	r3, [pc, #364]	; (8002e58 <HAL_GPIO_Init+0x2e4>)
 8002cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cec:	4a5a      	ldr	r2, [pc, #360]	; (8002e58 <HAL_GPIO_Init+0x2e4>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6613      	str	r3, [r2, #96]	; 0x60
 8002cf4:	4b58      	ldr	r3, [pc, #352]	; (8002e58 <HAL_GPIO_Init+0x2e4>)
 8002cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d00:	4a56      	ldr	r2, [pc, #344]	; (8002e5c <HAL_GPIO_Init+0x2e8>)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	089b      	lsrs	r3, r3, #2
 8002d06:	3302      	adds	r3, #2
 8002d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	220f      	movs	r2, #15
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d2a:	d01f      	beq.n	8002d6c <HAL_GPIO_Init+0x1f8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a4c      	ldr	r2, [pc, #304]	; (8002e60 <HAL_GPIO_Init+0x2ec>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d019      	beq.n	8002d68 <HAL_GPIO_Init+0x1f4>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a4b      	ldr	r2, [pc, #300]	; (8002e64 <HAL_GPIO_Init+0x2f0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_GPIO_Init+0x1f0>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a4a      	ldr	r2, [pc, #296]	; (8002e68 <HAL_GPIO_Init+0x2f4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00d      	beq.n	8002d60 <HAL_GPIO_Init+0x1ec>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a49      	ldr	r2, [pc, #292]	; (8002e6c <HAL_GPIO_Init+0x2f8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <HAL_GPIO_Init+0x1e8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a48      	ldr	r2, [pc, #288]	; (8002e70 <HAL_GPIO_Init+0x2fc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_GPIO_Init+0x1e4>
 8002d54:	2305      	movs	r3, #5
 8002d56:	e00a      	b.n	8002d6e <HAL_GPIO_Init+0x1fa>
 8002d58:	2306      	movs	r3, #6
 8002d5a:	e008      	b.n	8002d6e <HAL_GPIO_Init+0x1fa>
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	e006      	b.n	8002d6e <HAL_GPIO_Init+0x1fa>
 8002d60:	2303      	movs	r3, #3
 8002d62:	e004      	b.n	8002d6e <HAL_GPIO_Init+0x1fa>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e002      	b.n	8002d6e <HAL_GPIO_Init+0x1fa>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_GPIO_Init+0x1fa>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	f002 0203 	and.w	r2, r2, #3
 8002d74:	0092      	lsls	r2, r2, #2
 8002d76:	4093      	lsls	r3, r2
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d7e:	4937      	ldr	r1, [pc, #220]	; (8002e5c <HAL_GPIO_Init+0x2e8>)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	089b      	lsrs	r3, r3, #2
 8002d84:	3302      	adds	r3, #2
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d8c:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <HAL_GPIO_Init+0x300>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002db0:	4a30      	ldr	r2, [pc, #192]	; (8002e74 <HAL_GPIO_Init+0x300>)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002db6:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <HAL_GPIO_Init+0x300>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dda:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <HAL_GPIO_Init+0x300>)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002de0:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_GPIO_Init+0x300>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e04:	4a1b      	ldr	r2, [pc, #108]	; (8002e74 <HAL_GPIO_Init+0x300>)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <HAL_GPIO_Init+0x300>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4013      	ands	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e2e:	4a11      	ldr	r2, [pc, #68]	; (8002e74 <HAL_GPIO_Init+0x300>)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3301      	adds	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f47f ae9d 	bne.w	8002b84 <HAL_GPIO_Init+0x10>
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	48000400 	.word	0x48000400
 8002e64:	48000800 	.word	0x48000800
 8002e68:	48000c00 	.word	0x48000c00
 8002e6c:	48001000 	.word	0x48001000
 8002e70:	48001400 	.word	0x48001400
 8002e74:	40010400 	.word	0x40010400

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e94:	e002      	b.n	8002e9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eb2:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d006      	beq.n	8002ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ebe:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f806 	bl	8002ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40010400 	.word	0x40010400

08002ed8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d141      	bne.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002efe:	4b4b      	ldr	r3, [pc, #300]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0a:	d131      	bne.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f0c:	4b47      	ldr	r3, [pc, #284]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f12:	4a46      	ldr	r2, [pc, #280]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f1c:	4b43      	ldr	r3, [pc, #268]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f24:	4a41      	ldr	r2, [pc, #260]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f2c:	4b40      	ldr	r3, [pc, #256]	; (8003030 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2232      	movs	r2, #50	; 0x32
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	4a3f      	ldr	r2, [pc, #252]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	0c9b      	lsrs	r3, r3, #18
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f42:	e002      	b.n	8002f4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f4a:	4b38      	ldr	r3, [pc, #224]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f56:	d102      	bne.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f2      	bne.n	8002f44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f5e:	4b33      	ldr	r3, [pc, #204]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6a:	d158      	bne.n	800301e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e057      	b.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f70:	4b2e      	ldr	r3, [pc, #184]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f76:	4a2d      	ldr	r2, [pc, #180]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f80:	e04d      	b.n	800301e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f88:	d141      	bne.n	800300e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f8a:	4b28      	ldr	r3, [pc, #160]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f96:	d131      	bne.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f98:	4b24      	ldr	r3, [pc, #144]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f9e:	4a23      	ldr	r2, [pc, #140]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa8:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fb0:	4a1e      	ldr	r2, [pc, #120]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2232      	movs	r2, #50	; 0x32
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	0c9b      	lsrs	r3, r3, #18
 8002fca:	3301      	adds	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fce:	e002      	b.n	8002fd6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd6:	4b15      	ldr	r3, [pc, #84]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d102      	bne.n	8002fea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f2      	bne.n	8002fd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff6:	d112      	bne.n	800301e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e011      	b.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800300c:	e007      	b.n	800301e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800300e:	4b07      	ldr	r3, [pc, #28]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800301c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40007000 	.word	0x40007000
 8003030:	20000000 	.word	0x20000000
 8003034:	431bde83 	.word	0x431bde83

08003038 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003046:	6093      	str	r3, [r2, #8]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40007000 	.word	0x40007000

08003058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e306      	b.n	8003678 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d075      	beq.n	8003162 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003076:	4b97      	ldr	r3, [pc, #604]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003080:	4b94      	ldr	r3, [pc, #592]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b0c      	cmp	r3, #12
 800308e:	d102      	bne.n	8003096 <HAL_RCC_OscConfig+0x3e>
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d002      	beq.n	800309c <HAL_RCC_OscConfig+0x44>
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d10b      	bne.n	80030b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	4b8d      	ldr	r3, [pc, #564]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d05b      	beq.n	8003160 <HAL_RCC_OscConfig+0x108>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d157      	bne.n	8003160 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e2e1      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030bc:	d106      	bne.n	80030cc <HAL_RCC_OscConfig+0x74>
 80030be:	4b85      	ldr	r3, [pc, #532]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a84      	ldr	r2, [pc, #528]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e01d      	b.n	8003108 <HAL_RCC_OscConfig+0xb0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x98>
 80030d6:	4b7f      	ldr	r3, [pc, #508]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a7e      	ldr	r2, [pc, #504]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b7c      	ldr	r3, [pc, #496]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a7b      	ldr	r2, [pc, #492]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0xb0>
 80030f0:	4b78      	ldr	r3, [pc, #480]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a77      	ldr	r2, [pc, #476]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b75      	ldr	r3, [pc, #468]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a74      	ldr	r2, [pc, #464]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe fa58 	bl	80015c4 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe fa54 	bl	80015c4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e2a6      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312a:	4b6a      	ldr	r3, [pc, #424]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0xc0>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe fa44 	bl	80015c4 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe fa40 	bl	80015c4 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e292      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003152:	4b60      	ldr	r3, [pc, #384]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0xe8>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d075      	beq.n	800325a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316e:	4b59      	ldr	r3, [pc, #356]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003178:	4b56      	ldr	r3, [pc, #344]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b0c      	cmp	r3, #12
 8003186:	d102      	bne.n	800318e <HAL_RCC_OscConfig+0x136>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d002      	beq.n	8003194 <HAL_RCC_OscConfig+0x13c>
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b04      	cmp	r3, #4
 8003192:	d11f      	bne.n	80031d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003194:	4b4f      	ldr	r3, [pc, #316]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_OscConfig+0x154>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e265      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ac:	4b49      	ldr	r3, [pc, #292]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	4946      	ldr	r1, [pc, #280]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031c0:	4b45      	ldr	r3, [pc, #276]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd fd3d 	bl	8000c44 <HAL_InitTick>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d043      	beq.n	8003258 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e251      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d023      	beq.n	8003224 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031dc:	4b3d      	ldr	r3, [pc, #244]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a3c      	ldr	r2, [pc, #240]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80031e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe f9ec 	bl	80015c4 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f0:	f7fe f9e8 	bl	80015c4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e23a      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003202:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320e:	4b31      	ldr	r3, [pc, #196]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	061b      	lsls	r3, r3, #24
 800321c:	492d      	ldr	r1, [pc, #180]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
 8003222:	e01a      	b.n	800325a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003224:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a2a      	ldr	r2, [pc, #168]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 800322a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800322e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe f9c8 	bl	80015c4 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003238:	f7fe f9c4 	bl	80015c4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e216      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800324a:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x1e0>
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003258:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d041      	beq.n	80032ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326e:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 8003270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003274:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327e:	f7fe f9a1 	bl	80015c4 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003286:	f7fe f99d 	bl	80015c4 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e1ef      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 800329a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0ef      	beq.n	8003286 <HAL_RCC_OscConfig+0x22e>
 80032a6:	e020      	b.n	80032ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80032aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ae:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7fe f984 	bl	80015c4 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032be:	e00d      	b.n	80032dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c0:	f7fe f980 	bl	80015c4 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d906      	bls.n	80032dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e1d2      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	20000090 	.word	0x20000090
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032dc:	4b8c      	ldr	r3, [pc, #560]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 80032de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1ea      	bne.n	80032c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80a6 	beq.w	8003444 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f8:	2300      	movs	r3, #0
 80032fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032fc:	4b84      	ldr	r3, [pc, #528]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_RCC_OscConfig+0x2b4>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x2b6>
 800330c:	2300      	movs	r3, #0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00d      	beq.n	800332e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	4b7f      	ldr	r3, [pc, #508]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	4a7e      	ldr	r2, [pc, #504]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331c:	6593      	str	r3, [r2, #88]	; 0x58
 800331e:	4b7c      	ldr	r3, [pc, #496]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800332a:	2301      	movs	r3, #1
 800332c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332e:	4b79      	ldr	r3, [pc, #484]	; (8003514 <HAL_RCC_OscConfig+0x4bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d118      	bne.n	800336c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800333a:	4b76      	ldr	r3, [pc, #472]	; (8003514 <HAL_RCC_OscConfig+0x4bc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a75      	ldr	r2, [pc, #468]	; (8003514 <HAL_RCC_OscConfig+0x4bc>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003346:	f7fe f93d 	bl	80015c4 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334e:	f7fe f939 	bl	80015c4 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e18b      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003360:	4b6c      	ldr	r3, [pc, #432]	; (8003514 <HAL_RCC_OscConfig+0x4bc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d108      	bne.n	8003386 <HAL_RCC_OscConfig+0x32e>
 8003374:	4b66      	ldr	r3, [pc, #408]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	4a65      	ldr	r2, [pc, #404]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003384:	e024      	b.n	80033d0 <HAL_RCC_OscConfig+0x378>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d110      	bne.n	80033b0 <HAL_RCC_OscConfig+0x358>
 800338e:	4b60      	ldr	r3, [pc, #384]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	4a5e      	ldr	r2, [pc, #376]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800339e:	4b5c      	ldr	r3, [pc, #368]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a4:	4a5a      	ldr	r2, [pc, #360]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ae:	e00f      	b.n	80033d0 <HAL_RCC_OscConfig+0x378>
 80033b0:	4b57      	ldr	r3, [pc, #348]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	4a56      	ldr	r2, [pc, #344]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c0:	4b53      	ldr	r3, [pc, #332]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	4a52      	ldr	r2, [pc, #328]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d016      	beq.n	8003406 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fe f8f4 	bl	80015c4 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fe f8f0 	bl	80015c4 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e140      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f6:	4b46      	ldr	r3, [pc, #280]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ed      	beq.n	80033e0 <HAL_RCC_OscConfig+0x388>
 8003404:	e015      	b.n	8003432 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fe f8dd 	bl	80015c4 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe f8d9 	bl	80015c4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e129      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003424:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ed      	bne.n	800340e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003432:	7ffb      	ldrb	r3, [r7, #31]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003438:	4b35      	ldr	r3, [pc, #212]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	4a34      	ldr	r2, [pc, #208]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 800343e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003442:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d03c      	beq.n	80034ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01c      	beq.n	8003492 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003458:	4b2d      	ldr	r3, [pc, #180]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 800345a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800345e:	4a2c      	ldr	r2, [pc, #176]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7fe f8ac 	bl	80015c4 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003470:	f7fe f8a8 	bl	80015c4 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e0fa      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003482:	4b23      	ldr	r3, [pc, #140]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 8003484:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ef      	beq.n	8003470 <HAL_RCC_OscConfig+0x418>
 8003490:	e01b      	b.n	80034ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 8003494:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003498:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fe f88f 	bl	80015c4 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034aa:	f7fe f88b 	bl	80015c4 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e0dd      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034bc:	4b14      	ldr	r3, [pc, #80]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 80034be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1ef      	bne.n	80034aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80d1 	beq.w	8003676 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d4:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	f000 808b 	beq.w	80035f8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d15e      	bne.n	80035a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a08      	ldr	r2, [pc, #32]	; (8003510 <HAL_RCC_OscConfig+0x4b8>)
 80034f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fe f865 	bl	80015c4 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fc:	e00c      	b.n	8003518 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fe:	f7fe f861 	bl	80015c4 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d905      	bls.n	8003518 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0b3      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
 8003510:	40021000 	.word	0x40021000
 8003514:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003518:	4b59      	ldr	r3, [pc, #356]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ec      	bne.n	80034fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003524:	4b56      	ldr	r3, [pc, #344]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	4b56      	ldr	r3, [pc, #344]	; (8003684 <HAL_RCC_OscConfig+0x62c>)
 800352a:	4013      	ands	r3, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6a11      	ldr	r1, [r2, #32]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003534:	3a01      	subs	r2, #1
 8003536:	0112      	lsls	r2, r2, #4
 8003538:	4311      	orrs	r1, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800353e:	0212      	lsls	r2, r2, #8
 8003540:	4311      	orrs	r1, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003546:	0852      	lsrs	r2, r2, #1
 8003548:	3a01      	subs	r2, #1
 800354a:	0552      	lsls	r2, r2, #21
 800354c:	4311      	orrs	r1, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003552:	0852      	lsrs	r2, r2, #1
 8003554:	3a01      	subs	r2, #1
 8003556:	0652      	lsls	r2, r2, #25
 8003558:	4311      	orrs	r1, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800355e:	06d2      	lsls	r2, r2, #27
 8003560:	430a      	orrs	r2, r1
 8003562:	4947      	ldr	r1, [pc, #284]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 8003564:	4313      	orrs	r3, r2
 8003566:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003568:	4b45      	ldr	r3, [pc, #276]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a44      	ldr	r2, [pc, #272]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 800356e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003572:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003574:	4b42      	ldr	r3, [pc, #264]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a41      	ldr	r2, [pc, #260]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 800357a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800357e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fe f820 	bl	80015c4 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fe f81c 	bl	80015c4 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e06e      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359a:	4b39      	ldr	r3, [pc, #228]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x530>
 80035a6:	e066      	b.n	8003676 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a8:	4b35      	ldr	r3, [pc, #212]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a34      	ldr	r2, [pc, #208]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 80035ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035b4:	4b32      	ldr	r3, [pc, #200]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4a31      	ldr	r2, [pc, #196]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035c0:	4b2f      	ldr	r3, [pc, #188]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a2e      	ldr	r2, [pc, #184]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 80035c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fd fff8 	bl	80015c4 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d8:	f7fd fff4 	bl	80015c4 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e046      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ea:	4b25      	ldr	r3, [pc, #148]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x580>
 80035f6:	e03e      	b.n	8003676 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e039      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003604:	4b1e      	ldr	r3, [pc, #120]	; (8003680 <HAL_RCC_OscConfig+0x628>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0203 	and.w	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	429a      	cmp	r2, r3
 8003616:	d12c      	bne.n	8003672 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	3b01      	subs	r3, #1
 8003624:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d123      	bne.n	8003672 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d11b      	bne.n	8003672 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d113      	bne.n	8003672 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	3b01      	subs	r3, #1
 8003658:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d109      	bne.n	8003672 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	3b01      	subs	r3, #1
 800366c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d001      	beq.n	8003676 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3720      	adds	r7, #32
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40021000 	.word	0x40021000
 8003684:	019f800c 	.word	0x019f800c

08003688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e11e      	b.n	80038de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b91      	ldr	r3, [pc, #580]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d910      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b8e      	ldr	r3, [pc, #568]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 020f 	bic.w	r2, r3, #15
 80036b6:	498c      	ldr	r1, [pc, #560]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b8a      	ldr	r3, [pc, #552]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e106      	b.n	80038de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d073      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d129      	bne.n	8003738 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e4:	4b81      	ldr	r3, [pc, #516]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0f4      	b.n	80038de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80036f4:	f000 f9d0 	bl	8003a98 <RCC_GetSysClockFreqFromPLLSource>
 80036f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4a7c      	ldr	r2, [pc, #496]	; (80038f0 <HAL_RCC_ClockConfig+0x268>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d93f      	bls.n	8003782 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003702:	4b7a      	ldr	r3, [pc, #488]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003716:	2b00      	cmp	r3, #0
 8003718:	d033      	beq.n	8003782 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800371e:	2b00      	cmp	r3, #0
 8003720:	d12f      	bne.n	8003782 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003722:	4b72      	ldr	r3, [pc, #456]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372a:	4a70      	ldr	r2, [pc, #448]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 800372c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003730:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e024      	b.n	8003782 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d107      	bne.n	8003750 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003740:	4b6a      	ldr	r3, [pc, #424]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0c6      	b.n	80038de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003750:	4b66      	ldr	r3, [pc, #408]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0be      	b.n	80038de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003760:	f000 f8ce 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 8003764:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4a61      	ldr	r2, [pc, #388]	; (80038f0 <HAL_RCC_ClockConfig+0x268>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d909      	bls.n	8003782 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800376e:	4b5f      	ldr	r3, [pc, #380]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003776:	4a5d      	ldr	r2, [pc, #372]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 8003778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800377c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b5a      	ldr	r3, [pc, #360]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4957      	ldr	r1, [pc, #348]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003794:	f7fd ff16 	bl	80015c4 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fd ff12 	bl	80015c4 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e095      	b.n	80038de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b4e      	ldr	r3, [pc, #312]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d023      	beq.n	8003818 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037dc:	4b43      	ldr	r3, [pc, #268]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a42      	ldr	r2, [pc, #264]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 80037e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80037f4:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037fc:	4a3b      	ldr	r2, [pc, #236]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 80037fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003802:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003804:	4b39      	ldr	r3, [pc, #228]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4936      	ldr	r1, [pc, #216]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
 8003816:	e008      	b.n	800382a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2b80      	cmp	r3, #128	; 0x80
 800381c:	d105      	bne.n	800382a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800381e:	4b33      	ldr	r3, [pc, #204]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	4a32      	ldr	r2, [pc, #200]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 8003824:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003828:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800382a:	4b2f      	ldr	r3, [pc, #188]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d21d      	bcs.n	8003874 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003838:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 020f 	bic.w	r2, r3, #15
 8003840:	4929      	ldr	r1, [pc, #164]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003848:	f7fd febc 	bl	80015c4 <HAL_GetTick>
 800384c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003850:	f7fd feb8 	bl	80015c4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e03b      	b.n	80038de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d1ed      	bne.n	8003850 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4917      	ldr	r1, [pc, #92]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800389e:	4b13      	ldr	r3, [pc, #76]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	490f      	ldr	r1, [pc, #60]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038b2:	f000 f825 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 80038b6:	4602      	mov	r2, r0
 80038b8:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <HAL_RCC_ClockConfig+0x264>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	490c      	ldr	r1, [pc, #48]	; (80038f4 <HAL_RCC_ClockConfig+0x26c>)
 80038c4:	5ccb      	ldrb	r3, [r1, r3]
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	fa22 f303 	lsr.w	r3, r2, r3
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <HAL_RCC_ClockConfig+0x270>)
 80038d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <HAL_RCC_ClockConfig+0x274>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd f9b4 	bl	8000c44 <HAL_InitTick>
 80038dc:	4603      	mov	r3, r0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40022000 	.word	0x40022000
 80038ec:	40021000 	.word	0x40021000
 80038f0:	04c4b400 	.word	0x04c4b400
 80038f4:	08007da0 	.word	0x08007da0
 80038f8:	20000000 	.word	0x20000000
 80038fc:	20000090 	.word	0x20000090

08003900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003906:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b04      	cmp	r3, #4
 8003910:	d102      	bne.n	8003918 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003912:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	e047      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003918:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b08      	cmp	r3, #8
 8003922:	d102      	bne.n	800392a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003924:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	e03e      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800392a:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d136      	bne.n	80039a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003936:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003940:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	3301      	adds	r3, #1
 800394c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d10c      	bne.n	800396e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003954:	4a1a      	ldr	r2, [pc, #104]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800395e:	68d2      	ldr	r2, [r2, #12]
 8003960:	0a12      	lsrs	r2, r2, #8
 8003962:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	617b      	str	r3, [r7, #20]
      break;
 800396c:	e00c      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800396e:	4a13      	ldr	r2, [pc, #76]	; (80039bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	4a10      	ldr	r2, [pc, #64]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003978:	68d2      	ldr	r2, [r2, #12]
 800397a:	0a12      	lsrs	r2, r2, #8
 800397c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003980:	fb02 f303 	mul.w	r3, r2, r3
 8003984:	617b      	str	r3, [r7, #20]
      break;
 8003986:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	0e5b      	lsrs	r3, r3, #25
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	3301      	adds	r3, #1
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	e001      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039a8:	693b      	ldr	r3, [r7, #16]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
 80039bc:	00f42400 	.word	0x00f42400
 80039c0:	016e3600 	.word	0x016e3600

080039c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	20000000 	.word	0x20000000

080039dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039e0:	f7ff fff0 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4904      	ldr	r1, [pc, #16]	; (8003a04 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	08007db0 	.word	0x08007db0

08003a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a0c:	f7ff ffda 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	0adb      	lsrs	r3, r3, #11
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4904      	ldr	r1, [pc, #16]	; (8003a30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	08007db0 	.word	0x08007db0

08003a34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	220f      	movs	r2, #15
 8003a42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a44:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_RCC_GetClockConfig+0x5c>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0203 	and.w	r2, r3, #3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a50:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <HAL_RCC_GetClockConfig+0x5c>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_RCC_GetClockConfig+0x5c>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCC_GetClockConfig+0x5c>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	08db      	lsrs	r3, r3, #3
 8003a6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <HAL_RCC_GetClockConfig+0x60>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 020f 	and.w	r2, r3, #15
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	601a      	str	r2, [r3, #0]
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40022000 	.word	0x40022000

08003a98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aa8:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d10c      	bne.n	8003ad6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003abc:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	4a14      	ldr	r2, [pc, #80]	; (8003b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ac6:	68d2      	ldr	r2, [r2, #12]
 8003ac8:	0a12      	lsrs	r2, r2, #8
 8003aca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	617b      	str	r3, [r7, #20]
    break;
 8003ad4:	e00c      	b.n	8003af0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	4a0e      	ldr	r2, [pc, #56]	; (8003b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ae0:	68d2      	ldr	r2, [r2, #12]
 8003ae2:	0a12      	lsrs	r2, r2, #8
 8003ae4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ae8:	fb02 f303 	mul.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
    break;
 8003aee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003af0:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	0e5b      	lsrs	r3, r3, #25
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	3301      	adds	r3, #1
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b0a:	687b      	ldr	r3, [r7, #4]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	016e3600 	.word	0x016e3600
 8003b20:	00f42400 	.word	0x00f42400

08003b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b30:	2300      	movs	r3, #0
 8003b32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8098 	beq.w	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b42:	2300      	movs	r3, #0
 8003b44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b46:	4b43      	ldr	r3, [pc, #268]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b52:	4b40      	ldr	r3, [pc, #256]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b56:	4a3f      	ldr	r2, [pc, #252]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b5e:	4b3d      	ldr	r3, [pc, #244]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b6e:	4b3a      	ldr	r3, [pc, #232]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a39      	ldr	r2, [pc, #228]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b7a:	f7fd fd23 	bl	80015c4 <HAL_GetTick>
 8003b7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b80:	e009      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b82:	f7fd fd1f 	bl	80015c4 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d902      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	74fb      	strb	r3, [r7, #19]
        break;
 8003b94:	e005      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b96:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ef      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ba2:	7cfb      	ldrb	r3, [r7, #19]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d159      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ba8:	4b2a      	ldr	r3, [pc, #168]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01e      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d019      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bc4:	4b23      	ldr	r3, [pc, #140]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bd0:	4b20      	ldr	r3, [pc, #128]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	4a1f      	ldr	r2, [pc, #124]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003be0:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	4a1b      	ldr	r2, [pc, #108]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bf0:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c02:	f7fd fcdf 	bl	80015c4 <HAL_GetTick>
 8003c06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c08:	e00b      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7fd fcdb 	bl	80015c4 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d902      	bls.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	74fb      	strb	r3, [r7, #19]
            break;
 8003c20:	e006      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c22:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ec      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c30:	7cfb      	ldrb	r3, [r7, #19]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c44:	4903      	ldr	r1, [pc, #12]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c4c:	e008      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	74bb      	strb	r3, [r7, #18]
 8003c52:	e005      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c60:	7c7b      	ldrb	r3, [r7, #17]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d105      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c66:	4ba7      	ldr	r3, [pc, #668]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	4aa6      	ldr	r2, [pc, #664]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c7e:	4ba1      	ldr	r3, [pc, #644]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f023 0203 	bic.w	r2, r3, #3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	499d      	ldr	r1, [pc, #628]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ca0:	4b98      	ldr	r3, [pc, #608]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f023 020c 	bic.w	r2, r3, #12
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	4995      	ldr	r1, [pc, #596]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cc2:	4b90      	ldr	r3, [pc, #576]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	498c      	ldr	r1, [pc, #560]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ce4:	4b87      	ldr	r3, [pc, #540]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	4984      	ldr	r1, [pc, #528]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d06:	4b7f      	ldr	r3, [pc, #508]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	497b      	ldr	r1, [pc, #492]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d28:	4b76      	ldr	r3, [pc, #472]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	4973      	ldr	r1, [pc, #460]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d4a:	4b6e      	ldr	r3, [pc, #440]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	496a      	ldr	r1, [pc, #424]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d6c:	4b65      	ldr	r3, [pc, #404]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	4962      	ldr	r1, [pc, #392]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d8e:	4b5d      	ldr	r3, [pc, #372]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	4959      	ldr	r1, [pc, #356]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003db0:	4b54      	ldr	r3, [pc, #336]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003db6:	f023 0203 	bic.w	r2, r3, #3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	4951      	ldr	r1, [pc, #324]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dd2:	4b4c      	ldr	r3, [pc, #304]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4948      	ldr	r1, [pc, #288]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d015      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df4:	4b43      	ldr	r3, [pc, #268]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	4940      	ldr	r1, [pc, #256]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e12:	d105      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e14:	4b3b      	ldr	r3, [pc, #236]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4a3a      	ldr	r2, [pc, #232]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d015      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e2c:	4b35      	ldr	r3, [pc, #212]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	4932      	ldr	r1, [pc, #200]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e4c:	4b2d      	ldr	r3, [pc, #180]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4a2c      	ldr	r2, [pc, #176]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e56:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d015      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e64:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	4924      	ldr	r1, [pc, #144]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e82:	d105      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e84:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e8e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d015      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e9c:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	4916      	ldr	r1, [pc, #88]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eba:	d105      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ebc:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a10      	ldr	r2, [pc, #64]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d019      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	4908      	ldr	r1, [pc, #32]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef2:	d109      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef4:	4b03      	ldr	r3, [pc, #12]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4a02      	ldr	r2, [pc, #8]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003efe:	60d3      	str	r3, [r2, #12]
 8003f00:	e002      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d015      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f14:	4b29      	ldr	r3, [pc, #164]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	4926      	ldr	r1, [pc, #152]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f32:	d105      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f34:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a20      	ldr	r2, [pc, #128]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d015      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5a:	4918      	ldr	r1, [pc, #96]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f6c:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f76:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d015      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f84:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	490a      	ldr	r1, [pc, #40]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa2:	d105      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4a04      	ldr	r2, [pc, #16]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003fb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000

08003fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e049      	b.n	8004066 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fd f818 	bl	800101c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4610      	mov	r0, r2
 8004000:	f000 fdf4 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d001      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e054      	b.n	8004132 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a26      	ldr	r2, [pc, #152]	; (8004140 <HAL_TIM_Base_Start_IT+0xd0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d022      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0x80>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b2:	d01d      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0x80>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a22      	ldr	r2, [pc, #136]	; (8004144 <HAL_TIM_Base_Start_IT+0xd4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d018      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0x80>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a21      	ldr	r2, [pc, #132]	; (8004148 <HAL_TIM_Base_Start_IT+0xd8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d013      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0x80>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1f      	ldr	r2, [pc, #124]	; (800414c <HAL_TIM_Base_Start_IT+0xdc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00e      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0x80>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <HAL_TIM_Base_Start_IT+0xe0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d009      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0x80>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1c      	ldr	r2, [pc, #112]	; (8004154 <HAL_TIM_Base_Start_IT+0xe4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d004      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0x80>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1b      	ldr	r2, [pc, #108]	; (8004158 <HAL_TIM_Base_Start_IT+0xe8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d115      	bne.n	800411c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	4b19      	ldr	r3, [pc, #100]	; (800415c <HAL_TIM_Base_Start_IT+0xec>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d015      	beq.n	800412e <HAL_TIM_Base_Start_IT+0xbe>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004108:	d011      	beq.n	800412e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411a:	e008      	b.n	800412e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0201 	orr.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	e000      	b.n	8004130 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	40000c00 	.word	0x40000c00
 8004150:	40013400 	.word	0x40013400
 8004154:	40014000 	.word	0x40014000
 8004158:	40015000 	.word	0x40015000
 800415c:	00010007 	.word	0x00010007

08004160 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e049      	b.n	8004206 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f841 	bl	800420e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f000 fd24 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <HAL_TIM_PWM_Start+0x24>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	e03c      	b.n	80042c2 <HAL_TIM_PWM_Start+0x9e>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2b04      	cmp	r3, #4
 800424c:	d109      	bne.n	8004262 <HAL_TIM_PWM_Start+0x3e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b01      	cmp	r3, #1
 8004258:	bf14      	ite	ne
 800425a:	2301      	movne	r3, #1
 800425c:	2300      	moveq	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e02f      	b.n	80042c2 <HAL_TIM_PWM_Start+0x9e>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d109      	bne.n	800427c <HAL_TIM_PWM_Start+0x58>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	e022      	b.n	80042c2 <HAL_TIM_PWM_Start+0x9e>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d109      	bne.n	8004296 <HAL_TIM_PWM_Start+0x72>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b01      	cmp	r3, #1
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	e015      	b.n	80042c2 <HAL_TIM_PWM_Start+0x9e>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b10      	cmp	r3, #16
 800429a:	d109      	bne.n	80042b0 <HAL_TIM_PWM_Start+0x8c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	e008      	b.n	80042c2 <HAL_TIM_PWM_Start+0x9e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e0a6      	b.n	8004418 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <HAL_TIM_PWM_Start+0xb6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d8:	e023      	b.n	8004322 <HAL_TIM_PWM_Start+0xfe>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d104      	bne.n	80042ea <HAL_TIM_PWM_Start+0xc6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e8:	e01b      	b.n	8004322 <HAL_TIM_PWM_Start+0xfe>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d104      	bne.n	80042fa <HAL_TIM_PWM_Start+0xd6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f8:	e013      	b.n	8004322 <HAL_TIM_PWM_Start+0xfe>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b0c      	cmp	r3, #12
 80042fe:	d104      	bne.n	800430a <HAL_TIM_PWM_Start+0xe6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004308:	e00b      	b.n	8004322 <HAL_TIM_PWM_Start+0xfe>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b10      	cmp	r3, #16
 800430e:	d104      	bne.n	800431a <HAL_TIM_PWM_Start+0xf6>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004318:	e003      	b.n	8004322 <HAL_TIM_PWM_Start+0xfe>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2201      	movs	r2, #1
 8004328:	6839      	ldr	r1, [r7, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f001 f940 	bl	80055b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a3a      	ldr	r2, [pc, #232]	; (8004420 <HAL_TIM_PWM_Start+0x1fc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d018      	beq.n	800436c <HAL_TIM_PWM_Start+0x148>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a39      	ldr	r2, [pc, #228]	; (8004424 <HAL_TIM_PWM_Start+0x200>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <HAL_TIM_PWM_Start+0x148>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a37      	ldr	r2, [pc, #220]	; (8004428 <HAL_TIM_PWM_Start+0x204>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00e      	beq.n	800436c <HAL_TIM_PWM_Start+0x148>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a36      	ldr	r2, [pc, #216]	; (800442c <HAL_TIM_PWM_Start+0x208>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d009      	beq.n	800436c <HAL_TIM_PWM_Start+0x148>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a34      	ldr	r2, [pc, #208]	; (8004430 <HAL_TIM_PWM_Start+0x20c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <HAL_TIM_PWM_Start+0x148>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a33      	ldr	r2, [pc, #204]	; (8004434 <HAL_TIM_PWM_Start+0x210>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d101      	bne.n	8004370 <HAL_TIM_PWM_Start+0x14c>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <HAL_TIM_PWM_Start+0x14e>
 8004370:	2300      	movs	r3, #0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004384:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a25      	ldr	r2, [pc, #148]	; (8004420 <HAL_TIM_PWM_Start+0x1fc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d022      	beq.n	80043d6 <HAL_TIM_PWM_Start+0x1b2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004398:	d01d      	beq.n	80043d6 <HAL_TIM_PWM_Start+0x1b2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a26      	ldr	r2, [pc, #152]	; (8004438 <HAL_TIM_PWM_Start+0x214>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d018      	beq.n	80043d6 <HAL_TIM_PWM_Start+0x1b2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a24      	ldr	r2, [pc, #144]	; (800443c <HAL_TIM_PWM_Start+0x218>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d013      	beq.n	80043d6 <HAL_TIM_PWM_Start+0x1b2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a23      	ldr	r2, [pc, #140]	; (8004440 <HAL_TIM_PWM_Start+0x21c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00e      	beq.n	80043d6 <HAL_TIM_PWM_Start+0x1b2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a19      	ldr	r2, [pc, #100]	; (8004424 <HAL_TIM_PWM_Start+0x200>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d009      	beq.n	80043d6 <HAL_TIM_PWM_Start+0x1b2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a18      	ldr	r2, [pc, #96]	; (8004428 <HAL_TIM_PWM_Start+0x204>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d004      	beq.n	80043d6 <HAL_TIM_PWM_Start+0x1b2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a18      	ldr	r2, [pc, #96]	; (8004434 <HAL_TIM_PWM_Start+0x210>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d115      	bne.n	8004402 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	4b19      	ldr	r3, [pc, #100]	; (8004444 <HAL_TIM_PWM_Start+0x220>)
 80043de:	4013      	ands	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b06      	cmp	r3, #6
 80043e6:	d015      	beq.n	8004414 <HAL_TIM_PWM_Start+0x1f0>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ee:	d011      	beq.n	8004414 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004400:	e008      	b.n	8004414 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0201 	orr.w	r2, r2, #1
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e000      	b.n	8004416 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004414:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40013400 	.word	0x40013400
 8004428:	40014000 	.word	0x40014000
 800442c:	40014400 	.word	0x40014400
 8004430:	40014800 	.word	0x40014800
 8004434:	40015000 	.word	0x40015000
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	00010007 	.word	0x00010007

08004448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b02      	cmp	r3, #2
 800445c:	d122      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b02      	cmp	r3, #2
 800446a:	d11b      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0202 	mvn.w	r2, #2
 8004474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fb90 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 8004490:	e005      	b.n	800449e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fb82 	bl	8004b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fb93 	bl	8004bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d122      	bne.n	80044f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d11b      	bne.n	80044f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0204 	mvn.w	r2, #4
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fb66 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fb58 	bl	8004b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fb69 	bl	8004bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b08      	cmp	r3, #8
 8004504:	d122      	bne.n	800454c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b08      	cmp	r3, #8
 8004512:	d11b      	bne.n	800454c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0208 	mvn.w	r2, #8
 800451c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2204      	movs	r2, #4
 8004522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fb3c 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fb2e 	bl	8004b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fb3f 	bl	8004bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b10      	cmp	r3, #16
 8004558:	d122      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b10      	cmp	r3, #16
 8004566:	d11b      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0210 	mvn.w	r2, #16
 8004570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2208      	movs	r2, #8
 8004576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fb12 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 800458c:	e005      	b.n	800459a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fb04 	bl	8004b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fb15 	bl	8004bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d10e      	bne.n	80045cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d107      	bne.n	80045cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0201 	mvn.w	r2, #1
 80045c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fc fb00 	bl	8000bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d6:	2b80      	cmp	r3, #128	; 0x80
 80045d8:	d10e      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e4:	2b80      	cmp	r3, #128	; 0x80
 80045e6:	d107      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f001 fac4 	bl	8005b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004606:	d10e      	bne.n	8004626 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004612:	2b80      	cmp	r3, #128	; 0x80
 8004614:	d107      	bne.n	8004626 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800461e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f001 fab7 	bl	8005b94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d10e      	bne.n	8004652 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	d107      	bne.n	8004652 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800464a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fac3 	bl	8004bd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b20      	cmp	r3, #32
 800465e:	d10e      	bne.n	800467e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b20      	cmp	r3, #32
 800466c:	d107      	bne.n	800467e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f06f 0220 	mvn.w	r2, #32
 8004676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f001 fa77 	bl	8005b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800468c:	d10f      	bne.n	80046ae <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469c:	d107      	bne.n	80046ae <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80046a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f001 fa7d 	bl	8005ba8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046bc:	d10f      	bne.n	80046de <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046cc:	d107      	bne.n	80046de <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80046d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f001 fa6f 	bl	8005bbc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ec:	d10f      	bne.n	800470e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046fc:	d107      	bne.n	800470e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f001 fa61 	bl	8005bd0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004718:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800471c:	d10f      	bne.n	800473e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004728:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800472c:	d107      	bne.n	800473e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f001 fa53 	bl	8005be4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004762:	2302      	movs	r3, #2
 8004764:	e0ff      	b.n	8004966 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b14      	cmp	r3, #20
 8004772:	f200 80f0 	bhi.w	8004956 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	080047d1 	.word	0x080047d1
 8004780:	08004957 	.word	0x08004957
 8004784:	08004957 	.word	0x08004957
 8004788:	08004957 	.word	0x08004957
 800478c:	08004811 	.word	0x08004811
 8004790:	08004957 	.word	0x08004957
 8004794:	08004957 	.word	0x08004957
 8004798:	08004957 	.word	0x08004957
 800479c:	08004853 	.word	0x08004853
 80047a0:	08004957 	.word	0x08004957
 80047a4:	08004957 	.word	0x08004957
 80047a8:	08004957 	.word	0x08004957
 80047ac:	08004893 	.word	0x08004893
 80047b0:	08004957 	.word	0x08004957
 80047b4:	08004957 	.word	0x08004957
 80047b8:	08004957 	.word	0x08004957
 80047bc:	080048d5 	.word	0x080048d5
 80047c0:	08004957 	.word	0x08004957
 80047c4:	08004957 	.word	0x08004957
 80047c8:	08004957 	.word	0x08004957
 80047cc:	08004915 	.word	0x08004915
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fab0 	bl	8004d3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0208 	orr.w	r2, r2, #8
 80047ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0204 	bic.w	r2, r2, #4
 80047fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6999      	ldr	r1, [r3, #24]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	619a      	str	r2, [r3, #24]
      break;
 800480e:	e0a5      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fb2a 	bl	8004e70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800482a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6999      	ldr	r1, [r3, #24]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	021a      	lsls	r2, r3, #8
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	619a      	str	r2, [r3, #24]
      break;
 8004850:	e084      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fb9d 	bl	8004f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0208 	orr.w	r2, r2, #8
 800486c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0204 	bic.w	r2, r2, #4
 800487c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69d9      	ldr	r1, [r3, #28]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	61da      	str	r2, [r3, #28]
      break;
 8004890:	e064      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fc0f 	bl	80050bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69d9      	ldr	r1, [r3, #28]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	021a      	lsls	r2, r3, #8
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	61da      	str	r2, [r3, #28]
      break;
 80048d2:	e043      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fc82 	bl	80051e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0208 	orr.w	r2, r2, #8
 80048ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0204 	bic.w	r2, r2, #4
 80048fe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004912:	e023      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fccc 	bl	80052b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800492e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	021a      	lsls	r2, r3, #8
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004954:	e002      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
      break;
 800495a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004964:	7dfb      	ldrb	r3, [r7, #23]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop

08004970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_TIM_ConfigClockSource+0x1c>
 8004988:	2302      	movs	r3, #2
 800498a:	e0f6      	b.n	8004b7a <HAL_TIM_ConfigClockSource+0x20a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80049aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a6f      	ldr	r2, [pc, #444]	; (8004b84 <HAL_TIM_ConfigClockSource+0x214>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	f000 80c1 	beq.w	8004b4e <HAL_TIM_ConfigClockSource+0x1de>
 80049cc:	4a6d      	ldr	r2, [pc, #436]	; (8004b84 <HAL_TIM_ConfigClockSource+0x214>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	f200 80c6 	bhi.w	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 80049d4:	4a6c      	ldr	r2, [pc, #432]	; (8004b88 <HAL_TIM_ConfigClockSource+0x218>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	f000 80b9 	beq.w	8004b4e <HAL_TIM_ConfigClockSource+0x1de>
 80049dc:	4a6a      	ldr	r2, [pc, #424]	; (8004b88 <HAL_TIM_ConfigClockSource+0x218>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	f200 80be 	bhi.w	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 80049e4:	4a69      	ldr	r2, [pc, #420]	; (8004b8c <HAL_TIM_ConfigClockSource+0x21c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	f000 80b1 	beq.w	8004b4e <HAL_TIM_ConfigClockSource+0x1de>
 80049ec:	4a67      	ldr	r2, [pc, #412]	; (8004b8c <HAL_TIM_ConfigClockSource+0x21c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	f200 80b6 	bhi.w	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 80049f4:	4a66      	ldr	r2, [pc, #408]	; (8004b90 <HAL_TIM_ConfigClockSource+0x220>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	f000 80a9 	beq.w	8004b4e <HAL_TIM_ConfigClockSource+0x1de>
 80049fc:	4a64      	ldr	r2, [pc, #400]	; (8004b90 <HAL_TIM_ConfigClockSource+0x220>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	f200 80ae 	bhi.w	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a04:	4a63      	ldr	r2, [pc, #396]	; (8004b94 <HAL_TIM_ConfigClockSource+0x224>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	f000 80a1 	beq.w	8004b4e <HAL_TIM_ConfigClockSource+0x1de>
 8004a0c:	4a61      	ldr	r2, [pc, #388]	; (8004b94 <HAL_TIM_ConfigClockSource+0x224>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	f200 80a6 	bhi.w	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a14:	4a60      	ldr	r2, [pc, #384]	; (8004b98 <HAL_TIM_ConfigClockSource+0x228>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	f000 8099 	beq.w	8004b4e <HAL_TIM_ConfigClockSource+0x1de>
 8004a1c:	4a5e      	ldr	r2, [pc, #376]	; (8004b98 <HAL_TIM_ConfigClockSource+0x228>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	f200 809e 	bhi.w	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004a28:	f000 8091 	beq.w	8004b4e <HAL_TIM_ConfigClockSource+0x1de>
 8004a2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004a30:	f200 8096 	bhi.w	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a38:	f000 8089 	beq.w	8004b4e <HAL_TIM_ConfigClockSource+0x1de>
 8004a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a40:	f200 808e 	bhi.w	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a48:	d03e      	beq.n	8004ac8 <HAL_TIM_ConfigClockSource+0x158>
 8004a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4e:	f200 8087 	bhi.w	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	f000 8086 	beq.w	8004b66 <HAL_TIM_ConfigClockSource+0x1f6>
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5e:	d87f      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a60:	2b70      	cmp	r3, #112	; 0x70
 8004a62:	d01a      	beq.n	8004a9a <HAL_TIM_ConfigClockSource+0x12a>
 8004a64:	2b70      	cmp	r3, #112	; 0x70
 8004a66:	d87b      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a68:	2b60      	cmp	r3, #96	; 0x60
 8004a6a:	d050      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x19e>
 8004a6c:	2b60      	cmp	r3, #96	; 0x60
 8004a6e:	d877      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a70:	2b50      	cmp	r3, #80	; 0x50
 8004a72:	d03c      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x17e>
 8004a74:	2b50      	cmp	r3, #80	; 0x50
 8004a76:	d873      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d058      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x1be>
 8004a7c:	2b40      	cmp	r3, #64	; 0x40
 8004a7e:	d86f      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a80:	2b30      	cmp	r3, #48	; 0x30
 8004a82:	d064      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x1de>
 8004a84:	2b30      	cmp	r3, #48	; 0x30
 8004a86:	d86b      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d060      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x1de>
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d867      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d05c      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x1de>
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d05a      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x1de>
 8004a98:	e062      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6899      	ldr	r1, [r3, #8]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f000 fd61 	bl	8005570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004abc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	609a      	str	r2, [r3, #8]
      break;
 8004ac6:	e04f      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	6899      	ldr	r1, [r3, #8]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f000 fd4a 	bl	8005570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aea:	609a      	str	r2, [r3, #8]
      break;
 8004aec:	e03c      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f000 fcbc 	bl	8005478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2150      	movs	r1, #80	; 0x50
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fd15 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8004b0c:	e02c      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6859      	ldr	r1, [r3, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f000 fcdb 	bl	80054d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2160      	movs	r1, #96	; 0x60
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fd05 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8004b2c:	e01c      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6859      	ldr	r1, [r3, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f000 fc9c 	bl	8005478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2140      	movs	r1, #64	; 0x40
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fcf5 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8004b4c:	e00c      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f000 fcec 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8004b5e:	e003      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
      break;
 8004b64:	e000      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004b66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	00100070 	.word	0x00100070
 8004b88:	00100060 	.word	0x00100060
 8004b8c:	00100050 	.word	0x00100050
 8004b90:	00100040 	.word	0x00100040
 8004b94:	00100030 	.word	0x00100030
 8004b98:	00100020 	.word	0x00100020

08004b9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a46      	ldr	r2, [pc, #280]	; (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d017      	beq.n	8004c34 <TIM_Base_SetConfig+0x48>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0a:	d013      	beq.n	8004c34 <TIM_Base_SetConfig+0x48>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a43      	ldr	r2, [pc, #268]	; (8004d1c <TIM_Base_SetConfig+0x130>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00f      	beq.n	8004c34 <TIM_Base_SetConfig+0x48>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a42      	ldr	r2, [pc, #264]	; (8004d20 <TIM_Base_SetConfig+0x134>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00b      	beq.n	8004c34 <TIM_Base_SetConfig+0x48>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a41      	ldr	r2, [pc, #260]	; (8004d24 <TIM_Base_SetConfig+0x138>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d007      	beq.n	8004c34 <TIM_Base_SetConfig+0x48>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a40      	ldr	r2, [pc, #256]	; (8004d28 <TIM_Base_SetConfig+0x13c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d003      	beq.n	8004c34 <TIM_Base_SetConfig+0x48>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a3f      	ldr	r2, [pc, #252]	; (8004d2c <TIM_Base_SetConfig+0x140>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d108      	bne.n	8004c46 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a33      	ldr	r2, [pc, #204]	; (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d023      	beq.n	8004c96 <TIM_Base_SetConfig+0xaa>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c54:	d01f      	beq.n	8004c96 <TIM_Base_SetConfig+0xaa>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a30      	ldr	r2, [pc, #192]	; (8004d1c <TIM_Base_SetConfig+0x130>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d01b      	beq.n	8004c96 <TIM_Base_SetConfig+0xaa>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2f      	ldr	r2, [pc, #188]	; (8004d20 <TIM_Base_SetConfig+0x134>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d017      	beq.n	8004c96 <TIM_Base_SetConfig+0xaa>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2e      	ldr	r2, [pc, #184]	; (8004d24 <TIM_Base_SetConfig+0x138>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <TIM_Base_SetConfig+0xaa>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a2d      	ldr	r2, [pc, #180]	; (8004d28 <TIM_Base_SetConfig+0x13c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00f      	beq.n	8004c96 <TIM_Base_SetConfig+0xaa>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a2d      	ldr	r2, [pc, #180]	; (8004d30 <TIM_Base_SetConfig+0x144>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00b      	beq.n	8004c96 <TIM_Base_SetConfig+0xaa>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2c      	ldr	r2, [pc, #176]	; (8004d34 <TIM_Base_SetConfig+0x148>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d007      	beq.n	8004c96 <TIM_Base_SetConfig+0xaa>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a2b      	ldr	r2, [pc, #172]	; (8004d38 <TIM_Base_SetConfig+0x14c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d003      	beq.n	8004c96 <TIM_Base_SetConfig+0xaa>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a26      	ldr	r2, [pc, #152]	; (8004d2c <TIM_Base_SetConfig+0x140>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d108      	bne.n	8004ca8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <TIM_Base_SetConfig+0x110>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <TIM_Base_SetConfig+0x13c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00f      	beq.n	8004cfc <TIM_Base_SetConfig+0x110>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <TIM_Base_SetConfig+0x144>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00b      	beq.n	8004cfc <TIM_Base_SetConfig+0x110>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <TIM_Base_SetConfig+0x148>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d007      	beq.n	8004cfc <TIM_Base_SetConfig+0x110>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <TIM_Base_SetConfig+0x14c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_Base_SetConfig+0x110>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a0d      	ldr	r2, [pc, #52]	; (8004d2c <TIM_Base_SetConfig+0x140>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d103      	bne.n	8004d04 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	615a      	str	r2, [r3, #20]
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40000c00 	.word	0x40000c00
 8004d28:	40013400 	.word	0x40013400
 8004d2c:	40015000 	.word	0x40015000
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800

08004d3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0303 	bic.w	r3, r3, #3
 8004d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f023 0302 	bic.w	r3, r3, #2
 8004d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a30      	ldr	r2, [pc, #192]	; (8004e58 <TIM_OC1_SetConfig+0x11c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d013      	beq.n	8004dc4 <TIM_OC1_SetConfig+0x88>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a2f      	ldr	r2, [pc, #188]	; (8004e5c <TIM_OC1_SetConfig+0x120>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00f      	beq.n	8004dc4 <TIM_OC1_SetConfig+0x88>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a2e      	ldr	r2, [pc, #184]	; (8004e60 <TIM_OC1_SetConfig+0x124>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00b      	beq.n	8004dc4 <TIM_OC1_SetConfig+0x88>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <TIM_OC1_SetConfig+0x128>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d007      	beq.n	8004dc4 <TIM_OC1_SetConfig+0x88>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a2c      	ldr	r2, [pc, #176]	; (8004e68 <TIM_OC1_SetConfig+0x12c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_OC1_SetConfig+0x88>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a2b      	ldr	r2, [pc, #172]	; (8004e6c <TIM_OC1_SetConfig+0x130>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10c      	bne.n	8004dde <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0308 	bic.w	r3, r3, #8
 8004dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <TIM_OC1_SetConfig+0x11c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <TIM_OC1_SetConfig+0xd2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <TIM_OC1_SetConfig+0x120>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00f      	beq.n	8004e0e <TIM_OC1_SetConfig+0xd2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a1b      	ldr	r2, [pc, #108]	; (8004e60 <TIM_OC1_SetConfig+0x124>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00b      	beq.n	8004e0e <TIM_OC1_SetConfig+0xd2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <TIM_OC1_SetConfig+0x128>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d007      	beq.n	8004e0e <TIM_OC1_SetConfig+0xd2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a19      	ldr	r2, [pc, #100]	; (8004e68 <TIM_OC1_SetConfig+0x12c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <TIM_OC1_SetConfig+0xd2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <TIM_OC1_SetConfig+0x130>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d111      	bne.n	8004e32 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	621a      	str	r2, [r3, #32]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40013400 	.word	0x40013400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800
 8004e6c:	40015000 	.word	0x40015000

08004e70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f023 0210 	bic.w	r2, r3, #16
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f023 0320 	bic.w	r3, r3, #32
 8004ebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a2c      	ldr	r2, [pc, #176]	; (8004f80 <TIM_OC2_SetConfig+0x110>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d007      	beq.n	8004ee4 <TIM_OC2_SetConfig+0x74>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a2b      	ldr	r2, [pc, #172]	; (8004f84 <TIM_OC2_SetConfig+0x114>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_OC2_SetConfig+0x74>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a2a      	ldr	r2, [pc, #168]	; (8004f88 <TIM_OC2_SetConfig+0x118>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d10d      	bne.n	8004f00 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004efe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a1f      	ldr	r2, [pc, #124]	; (8004f80 <TIM_OC2_SetConfig+0x110>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <TIM_OC2_SetConfig+0xc0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	; (8004f84 <TIM_OC2_SetConfig+0x114>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00f      	beq.n	8004f30 <TIM_OC2_SetConfig+0xc0>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a1e      	ldr	r2, [pc, #120]	; (8004f8c <TIM_OC2_SetConfig+0x11c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00b      	beq.n	8004f30 <TIM_OC2_SetConfig+0xc0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <TIM_OC2_SetConfig+0x120>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d007      	beq.n	8004f30 <TIM_OC2_SetConfig+0xc0>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a1c      	ldr	r2, [pc, #112]	; (8004f94 <TIM_OC2_SetConfig+0x124>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_OC2_SetConfig+0xc0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <TIM_OC2_SetConfig+0x118>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d113      	bne.n	8004f58 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40013400 	.word	0x40013400
 8004f88:	40015000 	.word	0x40015000
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40014400 	.word	0x40014400
 8004f94:	40014800 	.word	0x40014800

08004f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2b      	ldr	r2, [pc, #172]	; (80050a4 <TIM_OC3_SetConfig+0x10c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d007      	beq.n	800500a <TIM_OC3_SetConfig+0x72>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <TIM_OC3_SetConfig+0x110>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d003      	beq.n	800500a <TIM_OC3_SetConfig+0x72>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a29      	ldr	r2, [pc, #164]	; (80050ac <TIM_OC3_SetConfig+0x114>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d10d      	bne.n	8005026 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005010:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a1e      	ldr	r2, [pc, #120]	; (80050a4 <TIM_OC3_SetConfig+0x10c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <TIM_OC3_SetConfig+0xbe>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a1d      	ldr	r2, [pc, #116]	; (80050a8 <TIM_OC3_SetConfig+0x110>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00f      	beq.n	8005056 <TIM_OC3_SetConfig+0xbe>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <TIM_OC3_SetConfig+0x118>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_OC3_SetConfig+0xbe>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1c      	ldr	r2, [pc, #112]	; (80050b4 <TIM_OC3_SetConfig+0x11c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_OC3_SetConfig+0xbe>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <TIM_OC3_SetConfig+0x120>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_OC3_SetConfig+0xbe>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a16      	ldr	r2, [pc, #88]	; (80050ac <TIM_OC3_SetConfig+0x114>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d113      	bne.n	800507e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800505c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	621a      	str	r2, [r3, #32]
}
 8005098:	bf00      	nop
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40013400 	.word	0x40013400
 80050ac:	40015000 	.word	0x40015000
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40014400 	.word	0x40014400
 80050b8:	40014800 	.word	0x40014800

080050bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800510a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	031b      	lsls	r3, r3, #12
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a2c      	ldr	r2, [pc, #176]	; (80051cc <TIM_OC4_SetConfig+0x110>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_OC4_SetConfig+0x74>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a2b      	ldr	r2, [pc, #172]	; (80051d0 <TIM_OC4_SetConfig+0x114>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_OC4_SetConfig+0x74>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a2a      	ldr	r2, [pc, #168]	; (80051d4 <TIM_OC4_SetConfig+0x118>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10d      	bne.n	800514c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	031b      	lsls	r3, r3, #12
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800514a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <TIM_OC4_SetConfig+0x110>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <TIM_OC4_SetConfig+0xc0>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <TIM_OC4_SetConfig+0x114>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00f      	beq.n	800517c <TIM_OC4_SetConfig+0xc0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a1e      	ldr	r2, [pc, #120]	; (80051d8 <TIM_OC4_SetConfig+0x11c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00b      	beq.n	800517c <TIM_OC4_SetConfig+0xc0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a1d      	ldr	r2, [pc, #116]	; (80051dc <TIM_OC4_SetConfig+0x120>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d007      	beq.n	800517c <TIM_OC4_SetConfig+0xc0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a1c      	ldr	r2, [pc, #112]	; (80051e0 <TIM_OC4_SetConfig+0x124>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_OC4_SetConfig+0xc0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a17      	ldr	r2, [pc, #92]	; (80051d4 <TIM_OC4_SetConfig+0x118>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d113      	bne.n	80051a4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005182:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800518a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	019b      	lsls	r3, r3, #6
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	019b      	lsls	r3, r3, #6
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	621a      	str	r2, [r3, #32]
}
 80051be:	bf00      	nop
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40012c00 	.word	0x40012c00
 80051d0:	40013400 	.word	0x40013400
 80051d4:	40015000 	.word	0x40015000
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40014400 	.word	0x40014400
 80051e0:	40014800 	.word	0x40014800

080051e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005228:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <TIM_OC5_SetConfig+0xbc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <TIM_OC5_SetConfig+0x82>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <TIM_OC5_SetConfig+0xc0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00f      	beq.n	8005266 <TIM_OC5_SetConfig+0x82>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <TIM_OC5_SetConfig+0xc4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00b      	beq.n	8005266 <TIM_OC5_SetConfig+0x82>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a16      	ldr	r2, [pc, #88]	; (80052ac <TIM_OC5_SetConfig+0xc8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d007      	beq.n	8005266 <TIM_OC5_SetConfig+0x82>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a15      	ldr	r2, [pc, #84]	; (80052b0 <TIM_OC5_SetConfig+0xcc>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_OC5_SetConfig+0x82>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <TIM_OC5_SetConfig+0xd0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d109      	bne.n	800527a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800526c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40013400 	.word	0x40013400
 80052a8:	40014000 	.word	0x40014000
 80052ac:	40014400 	.word	0x40014400
 80052b0:	40014800 	.word	0x40014800
 80052b4:	40015000 	.word	0x40015000

080052b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	051b      	lsls	r3, r3, #20
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a1a      	ldr	r2, [pc, #104]	; (8005378 <TIM_OC6_SetConfig+0xc0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <TIM_OC6_SetConfig+0x84>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a19      	ldr	r2, [pc, #100]	; (800537c <TIM_OC6_SetConfig+0xc4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00f      	beq.n	800533c <TIM_OC6_SetConfig+0x84>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a18      	ldr	r2, [pc, #96]	; (8005380 <TIM_OC6_SetConfig+0xc8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00b      	beq.n	800533c <TIM_OC6_SetConfig+0x84>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a17      	ldr	r2, [pc, #92]	; (8005384 <TIM_OC6_SetConfig+0xcc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_OC6_SetConfig+0x84>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a16      	ldr	r2, [pc, #88]	; (8005388 <TIM_OC6_SetConfig+0xd0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_OC6_SetConfig+0x84>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a15      	ldr	r2, [pc, #84]	; (800538c <TIM_OC6_SetConfig+0xd4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d109      	bne.n	8005350 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005342:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	029b      	lsls	r3, r3, #10
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40012c00 	.word	0x40012c00
 800537c:	40013400 	.word	0x40013400
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800
 800538c:	40015000 	.word	0x40015000

08005390 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f023 0201 	bic.w	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4a28      	ldr	r2, [pc, #160]	; (800545c <TIM_TI1_SetConfig+0xcc>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01b      	beq.n	80053f6 <TIM_TI1_SetConfig+0x66>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c4:	d017      	beq.n	80053f6 <TIM_TI1_SetConfig+0x66>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a25      	ldr	r2, [pc, #148]	; (8005460 <TIM_TI1_SetConfig+0xd0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <TIM_TI1_SetConfig+0x66>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a24      	ldr	r2, [pc, #144]	; (8005464 <TIM_TI1_SetConfig+0xd4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00f      	beq.n	80053f6 <TIM_TI1_SetConfig+0x66>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4a23      	ldr	r2, [pc, #140]	; (8005468 <TIM_TI1_SetConfig+0xd8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <TIM_TI1_SetConfig+0x66>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4a22      	ldr	r2, [pc, #136]	; (800546c <TIM_TI1_SetConfig+0xdc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d007      	beq.n	80053f6 <TIM_TI1_SetConfig+0x66>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4a21      	ldr	r2, [pc, #132]	; (8005470 <TIM_TI1_SetConfig+0xe0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_TI1_SetConfig+0x66>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4a20      	ldr	r2, [pc, #128]	; (8005474 <TIM_TI1_SetConfig+0xe4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d101      	bne.n	80053fa <TIM_TI1_SetConfig+0x6a>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <TIM_TI1_SetConfig+0x6c>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	e003      	b.n	800541a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	b2db      	uxtb	r3, r3
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f023 030a 	bic.w	r3, r3, #10
 8005434:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f003 030a 	and.w	r3, r3, #10
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40013400 	.word	0x40013400
 8005470:	40014000 	.word	0x40014000
 8005474:	40015000 	.word	0x40015000

08005478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f023 0201 	bic.w	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f023 030a 	bic.w	r3, r3, #10
 80054b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b087      	sub	sp, #28
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f023 0210 	bic.w	r2, r3, #16
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	031b      	lsls	r3, r3, #12
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005512:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800554c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	f043 0307 	orr.w	r3, r3, #7
 800555c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	609a      	str	r2, [r3, #8]
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800558a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	021a      	lsls	r2, r3, #8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	431a      	orrs	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4313      	orrs	r3, r2
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	609a      	str	r2, [r3, #8]
}
 80055a4:	bf00      	nop
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	2201      	movs	r2, #1
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a1a      	ldr	r2, [r3, #32]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	43db      	mvns	r3, r3
 80055d2:	401a      	ands	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1a      	ldr	r2, [r3, #32]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	fa01 f303 	lsl.w	r3, r1, r3
 80055e8:	431a      	orrs	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	621a      	str	r2, [r3, #32]
}
 80055ee:	bf00      	nop
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b08a      	sub	sp, #40	; 0x28
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e0a0      	b.n	8005750 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fb fd1a 	bl	800105c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3304      	adds	r3, #4
 8005638:	4619      	mov	r1, r3
 800563a:	4610      	mov	r0, r2
 800563c:	f7ff fad6 	bl	8004bec <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	6819      	ldr	r1, [r3, #0]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2203      	movs	r2, #3
 800564e:	f7ff fe9f 	bl	8005390 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 020c 	bic.w	r2, r2, #12
 8005660:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6999      	ldr	r1, [r3, #24]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005682:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005696:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056a6:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b6:	f023 0307 	bic.w	r3, r3, #7
 80056ba:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0204 	orr.w	r2, r2, #4
 80056ca:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80056d0:	2300      	movs	r3, #0
 80056d2:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80056d4:	2370      	movs	r3, #112	; 0x70
 80056d6:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056d8:	2300      	movs	r3, #0
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80056dc:	2300      	movs	r3, #0
 80056de:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f107 020c 	add.w	r2, r7, #12
 80056f2:	4611      	mov	r1, r2
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fbbb 	bl	8004e70 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800571c:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3728      	adds	r7, #40	; 0x28
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d109      	bne.n	800577c <HAL_TIMEx_PWMN_Start+0x24>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b01      	cmp	r3, #1
 8005772:	bf14      	ite	ne
 8005774:	2301      	movne	r3, #1
 8005776:	2300      	moveq	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	e022      	b.n	80057c2 <HAL_TIMEx_PWMN_Start+0x6a>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b04      	cmp	r3, #4
 8005780:	d109      	bne.n	8005796 <HAL_TIMEx_PWMN_Start+0x3e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b01      	cmp	r3, #1
 800578c:	bf14      	ite	ne
 800578e:	2301      	movne	r3, #1
 8005790:	2300      	moveq	r3, #0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	e015      	b.n	80057c2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d109      	bne.n	80057b0 <HAL_TIMEx_PWMN_Start+0x58>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	bf14      	ite	ne
 80057a8:	2301      	movne	r3, #1
 80057aa:	2300      	moveq	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	e008      	b.n	80057c2 <HAL_TIMEx_PWMN_Start+0x6a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	bf14      	ite	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	2300      	moveq	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e073      	b.n	80058b2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d104      	bne.n	80057da <HAL_TIMEx_PWMN_Start+0x82>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d8:	e013      	b.n	8005802 <HAL_TIMEx_PWMN_Start+0xaa>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d104      	bne.n	80057ea <HAL_TIMEx_PWMN_Start+0x92>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e8:	e00b      	b.n	8005802 <HAL_TIMEx_PWMN_Start+0xaa>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d104      	bne.n	80057fa <HAL_TIMEx_PWMN_Start+0xa2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057f8:	e003      	b.n	8005802 <HAL_TIMEx_PWMN_Start+0xaa>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2204      	movs	r2, #4
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f000 f9f4 	bl	8005bf8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800581e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a25      	ldr	r2, [pc, #148]	; (80058bc <HAL_TIMEx_PWMN_Start+0x164>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d022      	beq.n	8005870 <HAL_TIMEx_PWMN_Start+0x118>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005832:	d01d      	beq.n	8005870 <HAL_TIMEx_PWMN_Start+0x118>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a21      	ldr	r2, [pc, #132]	; (80058c0 <HAL_TIMEx_PWMN_Start+0x168>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d018      	beq.n	8005870 <HAL_TIMEx_PWMN_Start+0x118>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a20      	ldr	r2, [pc, #128]	; (80058c4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d013      	beq.n	8005870 <HAL_TIMEx_PWMN_Start+0x118>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1e      	ldr	r2, [pc, #120]	; (80058c8 <HAL_TIMEx_PWMN_Start+0x170>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00e      	beq.n	8005870 <HAL_TIMEx_PWMN_Start+0x118>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a1d      	ldr	r2, [pc, #116]	; (80058cc <HAL_TIMEx_PWMN_Start+0x174>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d009      	beq.n	8005870 <HAL_TIMEx_PWMN_Start+0x118>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1b      	ldr	r2, [pc, #108]	; (80058d0 <HAL_TIMEx_PWMN_Start+0x178>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <HAL_TIMEx_PWMN_Start+0x118>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1a      	ldr	r2, [pc, #104]	; (80058d4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d115      	bne.n	800589c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	4b18      	ldr	r3, [pc, #96]	; (80058d8 <HAL_TIMEx_PWMN_Start+0x180>)
 8005878:	4013      	ands	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b06      	cmp	r3, #6
 8005880:	d015      	beq.n	80058ae <HAL_TIMEx_PWMN_Start+0x156>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005888:	d011      	beq.n	80058ae <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0201 	orr.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589a:	e008      	b.n	80058ae <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	e000      	b.n	80058b0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40012c00 	.word	0x40012c00
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40000c00 	.word	0x40000c00
 80058cc:	40013400 	.word	0x40013400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40015000 	.word	0x40015000
 80058d8:	00010007 	.word	0x00010007

080058dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e074      	b.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a34      	ldr	r2, [pc, #208]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d009      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a33      	ldr	r2, [pc, #204]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d004      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a31      	ldr	r2, [pc, #196]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d108      	bne.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005938:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a21      	ldr	r2, [pc, #132]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d022      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005974:	d01d      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d018      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a15      	ldr	r2, [pc, #84]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d009      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a11      	ldr	r2, [pc, #68]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d10c      	bne.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40013400 	.word	0x40013400
 80059f4:	40015000 	.word	0x40015000
 80059f8:	40000400 	.word	0x40000400
 80059fc:	40000800 	.word	0x40000800
 8005a00:	40000c00 	.word	0x40000c00
 8005a04:	40014000 	.word	0x40014000

08005a08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e096      	b.n	8005b52 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	041b      	lsls	r3, r3, #16
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2f      	ldr	r2, [pc, #188]	; (8005b60 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d009      	beq.n	8005abc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a2d      	ldr	r2, [pc, #180]	; (8005b64 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d004      	beq.n	8005abc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a2c      	ldr	r2, [pc, #176]	; (8005b68 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d106      	bne.n	8005aca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a24      	ldr	r2, [pc, #144]	; (8005b60 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d009      	beq.n	8005ae8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a22      	ldr	r2, [pc, #136]	; (8005b64 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a21      	ldr	r2, [pc, #132]	; (8005b68 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d12b      	bne.n	8005b40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af2:	051b      	lsls	r3, r3, #20
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a11      	ldr	r2, [pc, #68]	; (8005b60 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d009      	beq.n	8005b32 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a10      	ldr	r2, [pc, #64]	; (8005b64 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d004      	beq.n	8005b32 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a0e      	ldr	r2, [pc, #56]	; (8005b68 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d106      	bne.n	8005b40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40012c00 	.word	0x40012c00
 8005b64:	40013400 	.word	0x40013400
 8005b68:	40015000 	.word	0x40015000

08005b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f003 031f 	and.w	r3, r3, #31
 8005c0a:	2204      	movs	r2, #4
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a1a      	ldr	r2, [r3, #32]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	401a      	ands	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a1a      	ldr	r2, [r3, #32]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c30:	431a      	orrs	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e042      	b.n	8005cda <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fb fb5a 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	; 0x24
 8005c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fc51 	bl	800652c <UART_SetConfig>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e022      	b.n	8005cda <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 ff41 	bl	8006b24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0201 	orr.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 ffc8 	bl	8006c68 <UART_CheckIdleState>
 8005cd8:	4603      	mov	r3, r0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b08a      	sub	sp, #40	; 0x28
 8005ce6:	af02      	add	r7, sp, #8
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	603b      	str	r3, [r7, #0]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	f040 8083 	bne.w	8005e04 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_UART_Transmit+0x28>
 8005d04:	88fb      	ldrh	r3, [r7, #6]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e07b      	b.n	8005e06 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_UART_Transmit+0x3a>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e074      	b.n	8005e06 <HAL_UART_Transmit+0x124>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2221      	movs	r2, #33	; 0x21
 8005d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d34:	f7fb fc46 	bl	80015c4 <HAL_GetTick>
 8005d38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	88fa      	ldrh	r2, [r7, #6]
 8005d3e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	88fa      	ldrh	r2, [r7, #6]
 8005d46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d52:	d108      	bne.n	8005d66 <HAL_UART_Transmit+0x84>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d104      	bne.n	8005d66 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	e003      	b.n	8005d6e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005d76:	e02c      	b.n	8005dd2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2180      	movs	r1, #128	; 0x80
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 ffbb 	bl	8006cfe <UART_WaitOnFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e039      	b.n	8005e06 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	3302      	adds	r3, #2
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	e007      	b.n	8005dc0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	781a      	ldrb	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1cc      	bne.n	8005d78 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2200      	movs	r2, #0
 8005de6:	2140      	movs	r1, #64	; 0x40
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 ff88 	bl	8006cfe <UART_WaitOnFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e006      	b.n	8005e06 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e000      	b.n	8005e06 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
  }
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08a      	sub	sp, #40	; 0x28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d142      	bne.n	8005eae <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <HAL_UART_Receive_IT+0x24>
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e03b      	b.n	8005eb0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_UART_Receive_IT+0x36>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e034      	b.n	8005eb0 <HAL_UART_Receive_IT+0xa0>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <HAL_UART_Receive_IT+0xa8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d01f      	beq.n	8005e9e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d018      	beq.n	8005e9e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	613b      	str	r3, [r7, #16]
   return(result);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	623b      	str	r3, [r7, #32]
 8005e8c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8e:	69f9      	ldr	r1, [r7, #28]
 8005e90:	6a3a      	ldr	r2, [r7, #32]
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e6      	bne.n	8005e6c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 fff3 	bl	8006e90 <UART_Start_Receive_IT>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	e000      	b.n	8005eb0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005eae:	2302      	movs	r3, #2
  }
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3728      	adds	r7, #40	; 0x28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40008000 	.word	0x40008000

08005ebc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b0ba      	sub	sp, #232	; 0xe8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ee2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ee6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005eea:	4013      	ands	r3, r2
 8005eec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d11b      	bne.n	8005f30 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d015      	beq.n	8005f30 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f08:	f003 0320 	and.w	r3, r3, #32
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 82d6 	beq.w	80064d2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	4798      	blx	r3
      }
      return;
 8005f2e:	e2d0      	b.n	80064d2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 811f 	beq.w	8006178 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f3e:	4b8b      	ldr	r3, [pc, #556]	; (800616c <HAL_UART_IRQHandler+0x2b0>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d106      	bne.n	8005f54 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f4a:	4b89      	ldr	r3, [pc, #548]	; (8006170 <HAL_UART_IRQHandler+0x2b4>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8112 	beq.w	8006178 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d011      	beq.n	8005f84 <HAL_UART_IRQHandler+0xc8>
 8005f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2201      	movs	r2, #1
 8005f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f7a:	f043 0201 	orr.w	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d011      	beq.n	8005fb4 <HAL_UART_IRQHandler+0xf8>
 8005f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00b      	beq.n	8005fb4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005faa:	f043 0204 	orr.w	r2, r3, #4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d011      	beq.n	8005fe4 <HAL_UART_IRQHandler+0x128>
 8005fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00b      	beq.n	8005fe4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2204      	movs	r2, #4
 8005fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fda:	f043 0202 	orr.w	r2, r3, #2
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d017      	beq.n	8006020 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005ffc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006000:	4b5a      	ldr	r3, [pc, #360]	; (800616c <HAL_UART_IRQHandler+0x2b0>)
 8006002:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00b      	beq.n	8006020 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2208      	movs	r2, #8
 800600e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006016:	f043 0208 	orr.w	r2, r3, #8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006028:	2b00      	cmp	r3, #0
 800602a:	d012      	beq.n	8006052 <HAL_UART_IRQHandler+0x196>
 800602c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006030:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00c      	beq.n	8006052 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006040:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006048:	f043 0220 	orr.w	r2, r3, #32
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 823c 	beq.w	80064d6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800605e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d013      	beq.n	8006092 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800606a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d105      	bne.n	8006082 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800607a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d007      	beq.n	8006092 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006098:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a6:	2b40      	cmp	r3, #64	; 0x40
 80060a8:	d005      	beq.n	80060b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d04f      	beq.n	8006156 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 f814 	bl	80070e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d141      	bne.n	800614e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3308      	adds	r3, #8
 80060d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80060e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3308      	adds	r3, #8
 80060f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800610e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1d9      	bne.n	80060ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d013      	beq.n	8006146 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006122:	4a14      	ldr	r2, [pc, #80]	; (8006174 <HAL_UART_IRQHandler+0x2b8>)
 8006124:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800612a:	4618      	mov	r0, r3
 800612c:	f7fc fcbb 	bl	8002aa6 <HAL_DMA_Abort_IT>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d017      	beq.n	8006166 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006140:	4610      	mov	r0, r2
 8006142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006144:	e00f      	b.n	8006166 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f9da 	bl	8006500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800614c:	e00b      	b.n	8006166 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f9d6 	bl	8006500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006154:	e007      	b.n	8006166 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f9d2 	bl	8006500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006164:	e1b7      	b.n	80064d6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006166:	bf00      	nop
    return;
 8006168:	e1b5      	b.n	80064d6 <HAL_UART_IRQHandler+0x61a>
 800616a:	bf00      	nop
 800616c:	10000001 	.word	0x10000001
 8006170:	04000120 	.word	0x04000120
 8006174:	080071b1 	.word	0x080071b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617c:	2b01      	cmp	r3, #1
 800617e:	f040 814a 	bne.w	8006416 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006186:	f003 0310 	and.w	r3, r3, #16
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 8143 	beq.w	8006416 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 813c 	beq.w	8006416 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2210      	movs	r2, #16
 80061a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	2b40      	cmp	r3, #64	; 0x40
 80061b2:	f040 80b5 	bne.w	8006320 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 8187 	beq.w	80064da <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061d6:	429a      	cmp	r2, r3
 80061d8:	f080 817f 	bcs.w	80064da <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f040 8086 	bne.w	8006304 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800620c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006226:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800622e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800623a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1da      	bne.n	80061f8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3308      	adds	r3, #8
 8006248:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006254:	f023 0301 	bic.w	r3, r3, #1
 8006258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006266:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800626a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800626e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e1      	bne.n	8006242 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3308      	adds	r3, #8
 8006284:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006288:	e853 3f00 	ldrex	r3, [r3]
 800628c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800628e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3308      	adds	r3, #8
 800629e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062aa:	e841 2300 	strex	r3, r2, [r1]
 80062ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1e3      	bne.n	800627e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062cc:	e853 3f00 	ldrex	r3, [r3]
 80062d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d4:	f023 0310 	bic.w	r3, r3, #16
 80062d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80062e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e4      	bne.n	80062c4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fc fb78 	bl	80029f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006310:	b29b      	uxth	r3, r3
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	b29b      	uxth	r3, r3
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f8fb 	bl	8006514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800631e:	e0dc      	b.n	80064da <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800632c:	b29b      	uxth	r3, r3
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800633a:	b29b      	uxth	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 80ce 	beq.w	80064de <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006342:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 80c9 	beq.w	80064de <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800635a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006360:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	461a      	mov	r2, r3
 800636a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800636e:	647b      	str	r3, [r7, #68]	; 0x44
 8006370:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006374:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800637c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e4      	bne.n	800634c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3308      	adds	r3, #8
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	623b      	str	r3, [r7, #32]
   return(result);
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006398:	f023 0301 	bic.w	r3, r3, #1
 800639c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3308      	adds	r3, #8
 80063a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063aa:	633a      	str	r2, [r7, #48]	; 0x30
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e1      	bne.n	8006382 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	60fb      	str	r3, [r7, #12]
   return(result);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0310 	bic.w	r3, r3, #16
 80063e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	69b9      	ldr	r1, [r7, #24]
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	617b      	str	r3, [r7, #20]
   return(result);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e4      	bne.n	80063d2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f880 	bl	8006514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006414:	e063      	b.n	80064de <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00e      	beq.n	8006440 <HAL_UART_IRQHandler+0x584>
 8006422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d008      	beq.n	8006440 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006436:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 fb57 	bl	8007aec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800643e:	e051      	b.n	80064e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006448:	2b00      	cmp	r3, #0
 800644a:	d014      	beq.n	8006476 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800644c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006454:	2b00      	cmp	r3, #0
 8006456:	d105      	bne.n	8006464 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800645c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d008      	beq.n	8006476 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006468:	2b00      	cmp	r3, #0
 800646a:	d03a      	beq.n	80064e2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	4798      	blx	r3
    }
    return;
 8006474:	e035      	b.n	80064e2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d009      	beq.n	8006496 <HAL_UART_IRQHandler+0x5da>
 8006482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fea4 	bl	80071dc <UART_EndTransmit_IT>
    return;
 8006494:	e026      	b.n	80064e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <HAL_UART_IRQHandler+0x5fa>
 80064a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 fb30 	bl	8007b14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064b4:	e016      	b.n	80064e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80064b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d010      	beq.n	80064e4 <HAL_UART_IRQHandler+0x628>
 80064c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da0c      	bge.n	80064e4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 fb18 	bl	8007b00 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064d0:	e008      	b.n	80064e4 <HAL_UART_IRQHandler+0x628>
      return;
 80064d2:	bf00      	nop
 80064d4:	e006      	b.n	80064e4 <HAL_UART_IRQHandler+0x628>
    return;
 80064d6:	bf00      	nop
 80064d8:	e004      	b.n	80064e4 <HAL_UART_IRQHandler+0x628>
      return;
 80064da:	bf00      	nop
 80064dc:	e002      	b.n	80064e4 <HAL_UART_IRQHandler+0x628>
      return;
 80064de:	bf00      	nop
 80064e0:	e000      	b.n	80064e4 <HAL_UART_IRQHandler+0x628>
    return;
 80064e2:	bf00      	nop
  }
}
 80064e4:	37e8      	adds	r7, #232	; 0xe8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop

080064ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	460b      	mov	r3, r1
 800651e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800652c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006530:	b08c      	sub	sp, #48	; 0x30
 8006532:	af00      	add	r7, sp, #0
 8006534:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	431a      	orrs	r2, r3
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	431a      	orrs	r2, r3
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	4313      	orrs	r3, r2
 8006552:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4baa      	ldr	r3, [pc, #680]	; (8006804 <UART_SetConfig+0x2d8>)
 800655c:	4013      	ands	r3, r2
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	6812      	ldr	r2, [r2, #0]
 8006562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006564:	430b      	orrs	r3, r1
 8006566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a9f      	ldr	r2, [pc, #636]	; (8006808 <UART_SetConfig+0x2dc>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d004      	beq.n	8006598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006594:	4313      	orrs	r3, r2
 8006596:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80065a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	6812      	ldr	r2, [r2, #0]
 80065aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b6:	f023 010f 	bic.w	r1, r3, #15
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a90      	ldr	r2, [pc, #576]	; (800680c <UART_SetConfig+0x2e0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d125      	bne.n	800661c <UART_SetConfig+0xf0>
 80065d0:	4b8f      	ldr	r3, [pc, #572]	; (8006810 <UART_SetConfig+0x2e4>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d81a      	bhi.n	8006614 <UART_SetConfig+0xe8>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <UART_SetConfig+0xb8>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	080065f5 	.word	0x080065f5
 80065e8:	08006605 	.word	0x08006605
 80065ec:	080065fd 	.word	0x080065fd
 80065f0:	0800660d 	.word	0x0800660d
 80065f4:	2301      	movs	r3, #1
 80065f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065fa:	e116      	b.n	800682a <UART_SetConfig+0x2fe>
 80065fc:	2302      	movs	r3, #2
 80065fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006602:	e112      	b.n	800682a <UART_SetConfig+0x2fe>
 8006604:	2304      	movs	r3, #4
 8006606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800660a:	e10e      	b.n	800682a <UART_SetConfig+0x2fe>
 800660c:	2308      	movs	r3, #8
 800660e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006612:	e10a      	b.n	800682a <UART_SetConfig+0x2fe>
 8006614:	2310      	movs	r3, #16
 8006616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661a:	e106      	b.n	800682a <UART_SetConfig+0x2fe>
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a7c      	ldr	r2, [pc, #496]	; (8006814 <UART_SetConfig+0x2e8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d138      	bne.n	8006698 <UART_SetConfig+0x16c>
 8006626:	4b7a      	ldr	r3, [pc, #488]	; (8006810 <UART_SetConfig+0x2e4>)
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662c:	f003 030c 	and.w	r3, r3, #12
 8006630:	2b0c      	cmp	r3, #12
 8006632:	d82d      	bhi.n	8006690 <UART_SetConfig+0x164>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <UART_SetConfig+0x110>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	08006671 	.word	0x08006671
 8006640:	08006691 	.word	0x08006691
 8006644:	08006691 	.word	0x08006691
 8006648:	08006691 	.word	0x08006691
 800664c:	08006681 	.word	0x08006681
 8006650:	08006691 	.word	0x08006691
 8006654:	08006691 	.word	0x08006691
 8006658:	08006691 	.word	0x08006691
 800665c:	08006679 	.word	0x08006679
 8006660:	08006691 	.word	0x08006691
 8006664:	08006691 	.word	0x08006691
 8006668:	08006691 	.word	0x08006691
 800666c:	08006689 	.word	0x08006689
 8006670:	2300      	movs	r3, #0
 8006672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006676:	e0d8      	b.n	800682a <UART_SetConfig+0x2fe>
 8006678:	2302      	movs	r3, #2
 800667a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800667e:	e0d4      	b.n	800682a <UART_SetConfig+0x2fe>
 8006680:	2304      	movs	r3, #4
 8006682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006686:	e0d0      	b.n	800682a <UART_SetConfig+0x2fe>
 8006688:	2308      	movs	r3, #8
 800668a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668e:	e0cc      	b.n	800682a <UART_SetConfig+0x2fe>
 8006690:	2310      	movs	r3, #16
 8006692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006696:	e0c8      	b.n	800682a <UART_SetConfig+0x2fe>
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a5e      	ldr	r2, [pc, #376]	; (8006818 <UART_SetConfig+0x2ec>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d125      	bne.n	80066ee <UART_SetConfig+0x1c2>
 80066a2:	4b5b      	ldr	r3, [pc, #364]	; (8006810 <UART_SetConfig+0x2e4>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066ac:	2b30      	cmp	r3, #48	; 0x30
 80066ae:	d016      	beq.n	80066de <UART_SetConfig+0x1b2>
 80066b0:	2b30      	cmp	r3, #48	; 0x30
 80066b2:	d818      	bhi.n	80066e6 <UART_SetConfig+0x1ba>
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d00a      	beq.n	80066ce <UART_SetConfig+0x1a2>
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d814      	bhi.n	80066e6 <UART_SetConfig+0x1ba>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <UART_SetConfig+0x19a>
 80066c0:	2b10      	cmp	r3, #16
 80066c2:	d008      	beq.n	80066d6 <UART_SetConfig+0x1aa>
 80066c4:	e00f      	b.n	80066e6 <UART_SetConfig+0x1ba>
 80066c6:	2300      	movs	r3, #0
 80066c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066cc:	e0ad      	b.n	800682a <UART_SetConfig+0x2fe>
 80066ce:	2302      	movs	r3, #2
 80066d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d4:	e0a9      	b.n	800682a <UART_SetConfig+0x2fe>
 80066d6:	2304      	movs	r3, #4
 80066d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066dc:	e0a5      	b.n	800682a <UART_SetConfig+0x2fe>
 80066de:	2308      	movs	r3, #8
 80066e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e4:	e0a1      	b.n	800682a <UART_SetConfig+0x2fe>
 80066e6:	2310      	movs	r3, #16
 80066e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ec:	e09d      	b.n	800682a <UART_SetConfig+0x2fe>
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a4a      	ldr	r2, [pc, #296]	; (800681c <UART_SetConfig+0x2f0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d125      	bne.n	8006744 <UART_SetConfig+0x218>
 80066f8:	4b45      	ldr	r3, [pc, #276]	; (8006810 <UART_SetConfig+0x2e4>)
 80066fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006702:	2bc0      	cmp	r3, #192	; 0xc0
 8006704:	d016      	beq.n	8006734 <UART_SetConfig+0x208>
 8006706:	2bc0      	cmp	r3, #192	; 0xc0
 8006708:	d818      	bhi.n	800673c <UART_SetConfig+0x210>
 800670a:	2b80      	cmp	r3, #128	; 0x80
 800670c:	d00a      	beq.n	8006724 <UART_SetConfig+0x1f8>
 800670e:	2b80      	cmp	r3, #128	; 0x80
 8006710:	d814      	bhi.n	800673c <UART_SetConfig+0x210>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <UART_SetConfig+0x1f0>
 8006716:	2b40      	cmp	r3, #64	; 0x40
 8006718:	d008      	beq.n	800672c <UART_SetConfig+0x200>
 800671a:	e00f      	b.n	800673c <UART_SetConfig+0x210>
 800671c:	2300      	movs	r3, #0
 800671e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006722:	e082      	b.n	800682a <UART_SetConfig+0x2fe>
 8006724:	2302      	movs	r3, #2
 8006726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800672a:	e07e      	b.n	800682a <UART_SetConfig+0x2fe>
 800672c:	2304      	movs	r3, #4
 800672e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006732:	e07a      	b.n	800682a <UART_SetConfig+0x2fe>
 8006734:	2308      	movs	r3, #8
 8006736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800673a:	e076      	b.n	800682a <UART_SetConfig+0x2fe>
 800673c:	2310      	movs	r3, #16
 800673e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006742:	e072      	b.n	800682a <UART_SetConfig+0x2fe>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a35      	ldr	r2, [pc, #212]	; (8006820 <UART_SetConfig+0x2f4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d12a      	bne.n	80067a4 <UART_SetConfig+0x278>
 800674e:	4b30      	ldr	r3, [pc, #192]	; (8006810 <UART_SetConfig+0x2e4>)
 8006750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800675c:	d01a      	beq.n	8006794 <UART_SetConfig+0x268>
 800675e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006762:	d81b      	bhi.n	800679c <UART_SetConfig+0x270>
 8006764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006768:	d00c      	beq.n	8006784 <UART_SetConfig+0x258>
 800676a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800676e:	d815      	bhi.n	800679c <UART_SetConfig+0x270>
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <UART_SetConfig+0x250>
 8006774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006778:	d008      	beq.n	800678c <UART_SetConfig+0x260>
 800677a:	e00f      	b.n	800679c <UART_SetConfig+0x270>
 800677c:	2300      	movs	r3, #0
 800677e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006782:	e052      	b.n	800682a <UART_SetConfig+0x2fe>
 8006784:	2302      	movs	r3, #2
 8006786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678a:	e04e      	b.n	800682a <UART_SetConfig+0x2fe>
 800678c:	2304      	movs	r3, #4
 800678e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006792:	e04a      	b.n	800682a <UART_SetConfig+0x2fe>
 8006794:	2308      	movs	r3, #8
 8006796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679a:	e046      	b.n	800682a <UART_SetConfig+0x2fe>
 800679c:	2310      	movs	r3, #16
 800679e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067a2:	e042      	b.n	800682a <UART_SetConfig+0x2fe>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a17      	ldr	r2, [pc, #92]	; (8006808 <UART_SetConfig+0x2dc>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d13a      	bne.n	8006824 <UART_SetConfig+0x2f8>
 80067ae:	4b18      	ldr	r3, [pc, #96]	; (8006810 <UART_SetConfig+0x2e4>)
 80067b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067bc:	d01a      	beq.n	80067f4 <UART_SetConfig+0x2c8>
 80067be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067c2:	d81b      	bhi.n	80067fc <UART_SetConfig+0x2d0>
 80067c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c8:	d00c      	beq.n	80067e4 <UART_SetConfig+0x2b8>
 80067ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ce:	d815      	bhi.n	80067fc <UART_SetConfig+0x2d0>
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <UART_SetConfig+0x2b0>
 80067d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d8:	d008      	beq.n	80067ec <UART_SetConfig+0x2c0>
 80067da:	e00f      	b.n	80067fc <UART_SetConfig+0x2d0>
 80067dc:	2300      	movs	r3, #0
 80067de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067e2:	e022      	b.n	800682a <UART_SetConfig+0x2fe>
 80067e4:	2302      	movs	r3, #2
 80067e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ea:	e01e      	b.n	800682a <UART_SetConfig+0x2fe>
 80067ec:	2304      	movs	r3, #4
 80067ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f2:	e01a      	b.n	800682a <UART_SetConfig+0x2fe>
 80067f4:	2308      	movs	r3, #8
 80067f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067fa:	e016      	b.n	800682a <UART_SetConfig+0x2fe>
 80067fc:	2310      	movs	r3, #16
 80067fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006802:	e012      	b.n	800682a <UART_SetConfig+0x2fe>
 8006804:	cfff69f3 	.word	0xcfff69f3
 8006808:	40008000 	.word	0x40008000
 800680c:	40013800 	.word	0x40013800
 8006810:	40021000 	.word	0x40021000
 8006814:	40004400 	.word	0x40004400
 8006818:	40004800 	.word	0x40004800
 800681c:	40004c00 	.word	0x40004c00
 8006820:	40005000 	.word	0x40005000
 8006824:	2310      	movs	r3, #16
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4aae      	ldr	r2, [pc, #696]	; (8006ae8 <UART_SetConfig+0x5bc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	f040 8097 	bne.w	8006964 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006836:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800683a:	2b08      	cmp	r3, #8
 800683c:	d823      	bhi.n	8006886 <UART_SetConfig+0x35a>
 800683e:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <UART_SetConfig+0x318>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	08006869 	.word	0x08006869
 8006848:	08006887 	.word	0x08006887
 800684c:	08006871 	.word	0x08006871
 8006850:	08006887 	.word	0x08006887
 8006854:	08006877 	.word	0x08006877
 8006858:	08006887 	.word	0x08006887
 800685c:	08006887 	.word	0x08006887
 8006860:	08006887 	.word	0x08006887
 8006864:	0800687f 	.word	0x0800687f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006868:	f7fd f8b8 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 800686c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800686e:	e010      	b.n	8006892 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006870:	4b9e      	ldr	r3, [pc, #632]	; (8006aec <UART_SetConfig+0x5c0>)
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006874:	e00d      	b.n	8006892 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006876:	f7fd f843 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 800687a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800687c:	e009      	b.n	8006892 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800687e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006884:	e005      	b.n	8006892 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006890:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 8130 	beq.w	8006afa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	4a94      	ldr	r2, [pc, #592]	; (8006af0 <UART_SetConfig+0x5c4>)
 80068a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068a4:	461a      	mov	r2, r3
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80068ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	4613      	mov	r3, r2
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	4413      	add	r3, r2
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d305      	bcc.n	80068ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d903      	bls.n	80068d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068d0:	e113      	b.n	8006afa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	2200      	movs	r2, #0
 80068d6:	60bb      	str	r3, [r7, #8]
 80068d8:	60fa      	str	r2, [r7, #12]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	4a84      	ldr	r2, [pc, #528]	; (8006af0 <UART_SetConfig+0x5c4>)
 80068e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2200      	movs	r2, #0
 80068e8:	603b      	str	r3, [r7, #0]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068f4:	f7f9 fc98 	bl	8000228 <__aeabi_uldivmod>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4610      	mov	r0, r2
 80068fe:	4619      	mov	r1, r3
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	020b      	lsls	r3, r1, #8
 800690a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800690e:	0202      	lsls	r2, r0, #8
 8006910:	6979      	ldr	r1, [r7, #20]
 8006912:	6849      	ldr	r1, [r1, #4]
 8006914:	0849      	lsrs	r1, r1, #1
 8006916:	2000      	movs	r0, #0
 8006918:	460c      	mov	r4, r1
 800691a:	4605      	mov	r5, r0
 800691c:	eb12 0804 	adds.w	r8, r2, r4
 8006920:	eb43 0905 	adc.w	r9, r3, r5
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	469a      	mov	sl, r3
 800692c:	4693      	mov	fp, r2
 800692e:	4652      	mov	r2, sl
 8006930:	465b      	mov	r3, fp
 8006932:	4640      	mov	r0, r8
 8006934:	4649      	mov	r1, r9
 8006936:	f7f9 fc77 	bl	8000228 <__aeabi_uldivmod>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4613      	mov	r3, r2
 8006940:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006948:	d308      	bcc.n	800695c <UART_SetConfig+0x430>
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006950:	d204      	bcs.n	800695c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6a3a      	ldr	r2, [r7, #32]
 8006958:	60da      	str	r2, [r3, #12]
 800695a:	e0ce      	b.n	8006afa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006962:	e0ca      	b.n	8006afa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696c:	d166      	bne.n	8006a3c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800696e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006972:	2b08      	cmp	r3, #8
 8006974:	d827      	bhi.n	80069c6 <UART_SetConfig+0x49a>
 8006976:	a201      	add	r2, pc, #4	; (adr r2, 800697c <UART_SetConfig+0x450>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	080069a1 	.word	0x080069a1
 8006980:	080069a9 	.word	0x080069a9
 8006984:	080069b1 	.word	0x080069b1
 8006988:	080069c7 	.word	0x080069c7
 800698c:	080069b7 	.word	0x080069b7
 8006990:	080069c7 	.word	0x080069c7
 8006994:	080069c7 	.word	0x080069c7
 8006998:	080069c7 	.word	0x080069c7
 800699c:	080069bf 	.word	0x080069bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a0:	f7fd f81c 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 80069a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069a6:	e014      	b.n	80069d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069a8:	f7fd f82e 	bl	8003a08 <HAL_RCC_GetPCLK2Freq>
 80069ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069ae:	e010      	b.n	80069d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b0:	4b4e      	ldr	r3, [pc, #312]	; (8006aec <UART_SetConfig+0x5c0>)
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069b4:	e00d      	b.n	80069d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069b6:	f7fc ffa3 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 80069ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069bc:	e009      	b.n	80069d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069c4:	e005      	b.n	80069d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8090 	beq.w	8006afa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	4a44      	ldr	r2, [pc, #272]	; (8006af0 <UART_SetConfig+0x5c4>)
 80069e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069e4:	461a      	mov	r2, r3
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ec:	005a      	lsls	r2, r3, #1
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	085b      	lsrs	r3, r3, #1
 80069f4:	441a      	add	r2, r3
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	2b0f      	cmp	r3, #15
 8006a04:	d916      	bls.n	8006a34 <UART_SetConfig+0x508>
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a0c:	d212      	bcs.n	8006a34 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f023 030f 	bic.w	r3, r3, #15
 8006a16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	8bfb      	ldrh	r3, [r7, #30]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	8bfa      	ldrh	r2, [r7, #30]
 8006a30:	60da      	str	r2, [r3, #12]
 8006a32:	e062      	b.n	8006afa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a3a:	e05e      	b.n	8006afa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d828      	bhi.n	8006a96 <UART_SetConfig+0x56a>
 8006a44:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <UART_SetConfig+0x520>)
 8006a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4a:	bf00      	nop
 8006a4c:	08006a71 	.word	0x08006a71
 8006a50:	08006a79 	.word	0x08006a79
 8006a54:	08006a81 	.word	0x08006a81
 8006a58:	08006a97 	.word	0x08006a97
 8006a5c:	08006a87 	.word	0x08006a87
 8006a60:	08006a97 	.word	0x08006a97
 8006a64:	08006a97 	.word	0x08006a97
 8006a68:	08006a97 	.word	0x08006a97
 8006a6c:	08006a8f 	.word	0x08006a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a70:	f7fc ffb4 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 8006a74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a76:	e014      	b.n	8006aa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a78:	f7fc ffc6 	bl	8003a08 <HAL_RCC_GetPCLK2Freq>
 8006a7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a7e:	e010      	b.n	8006aa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a80:	4b1a      	ldr	r3, [pc, #104]	; (8006aec <UART_SetConfig+0x5c0>)
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a84:	e00d      	b.n	8006aa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a86:	f7fc ff3b 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 8006a8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a8c:	e009      	b.n	8006aa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a94:	e005      	b.n	8006aa2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006aa0:	bf00      	nop
    }

    if (pclk != 0U)
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d028      	beq.n	8006afa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	4a10      	ldr	r2, [pc, #64]	; (8006af0 <UART_SetConfig+0x5c4>)
 8006aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	085b      	lsrs	r3, r3, #1
 8006ac0:	441a      	add	r2, r3
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	2b0f      	cmp	r3, #15
 8006ad0:	d910      	bls.n	8006af4 <UART_SetConfig+0x5c8>
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad8:	d20c      	bcs.n	8006af4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60da      	str	r2, [r3, #12]
 8006ae4:	e009      	b.n	8006afa <UART_SetConfig+0x5ce>
 8006ae6:	bf00      	nop
 8006ae8:	40008000 	.word	0x40008000
 8006aec:	00f42400 	.word	0x00f42400
 8006af0:	08007db8 	.word	0x08007db8
      }
      else
      {
        ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2200      	movs	r2, #0
 8006b14:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006b16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3730      	adds	r7, #48	; 0x30
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00a      	beq.n	8006b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	f003 0310 	and.w	r3, r3, #16
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00a      	beq.n	8006bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01a      	beq.n	8006c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c22:	d10a      	bne.n	8006c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	605a      	str	r2, [r3, #4]
  }
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c78:	f7fa fca4 	bl	80015c4 <HAL_GetTick>
 8006c7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0308 	and.w	r3, r3, #8
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d10e      	bne.n	8006caa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f82f 	bl	8006cfe <UART_WaitOnFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e025      	b.n	8006cf6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d10e      	bne.n	8006cd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f819 	bl	8006cfe <UART_WaitOnFlagUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e00f      	b.n	8006cf6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b09c      	sub	sp, #112	; 0x70
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	603b      	str	r3, [r7, #0]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0e:	e0a9      	b.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d16:	f000 80a5 	beq.w	8006e64 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1a:	f7fa fc53 	bl	80015c4 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d302      	bcc.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d140      	bne.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d44:	667b      	str	r3, [r7, #100]	; 0x64
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e6      	bne.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3308      	adds	r3, #8
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	f023 0301 	bic.w	r3, r3, #1
 8006d78:	663b      	str	r3, [r7, #96]	; 0x60
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	3308      	adds	r3, #8
 8006d80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d82:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e5      	bne.n	8006d62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e069      	b.n	8006e86 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d051      	beq.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dce:	d149      	bne.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	e853 3f00 	ldrex	r3, [r3]
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e6      	bne.n	8006dda <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3308      	adds	r3, #8
 8006e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e2c:	623a      	str	r2, [r7, #32]
 8006e2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	69f9      	ldr	r1, [r7, #28]
 8006e32:	6a3a      	ldr	r2, [r7, #32]
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e5      	bne.n	8006e0c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e010      	b.n	8006e86 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69da      	ldr	r2, [r3, #28]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	bf0c      	ite	eq
 8006e74:	2301      	moveq	r3, #1
 8006e76:	2300      	movne	r3, #0
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	f43f af46 	beq.w	8006d10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3770      	adds	r7, #112	; 0x70
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b0a3      	sub	sp, #140	; 0x8c
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	88fa      	ldrh	r2, [r7, #6]
 8006ea8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	88fa      	ldrh	r2, [r7, #6]
 8006eb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec2:	d10e      	bne.n	8006ee2 <UART_Start_Receive_IT+0x52>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d105      	bne.n	8006ed8 <UART_Start_Receive_IT+0x48>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ed2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ed6:	e02d      	b.n	8006f34 <UART_Start_Receive_IT+0xa4>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	22ff      	movs	r2, #255	; 0xff
 8006edc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ee0:	e028      	b.n	8006f34 <UART_Start_Receive_IT+0xa4>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10d      	bne.n	8006f06 <UART_Start_Receive_IT+0x76>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <UART_Start_Receive_IT+0x6c>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	22ff      	movs	r2, #255	; 0xff
 8006ef6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006efa:	e01b      	b.n	8006f34 <UART_Start_Receive_IT+0xa4>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	227f      	movs	r2, #127	; 0x7f
 8006f00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f04:	e016      	b.n	8006f34 <UART_Start_Receive_IT+0xa4>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f0e:	d10d      	bne.n	8006f2c <UART_Start_Receive_IT+0x9c>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <UART_Start_Receive_IT+0x92>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	227f      	movs	r2, #127	; 0x7f
 8006f1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f20:	e008      	b.n	8006f34 <UART_Start_Receive_IT+0xa4>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	223f      	movs	r2, #63	; 0x3f
 8006f26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f2a:	e003      	b.n	8006f34 <UART_Start_Receive_IT+0xa4>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2222      	movs	r2, #34	; 0x22
 8006f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3308      	adds	r3, #8
 8006f4a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006f54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f56:	f043 0301 	orr.w	r3, r3, #1
 8006f5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3308      	adds	r3, #8
 8006f64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006f68:	673a      	str	r2, [r7, #112]	; 0x70
 8006f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006f6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006f76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e3      	bne.n	8006f44 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f84:	d153      	bne.n	800702e <UART_Start_Receive_IT+0x19e>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f8c:	88fa      	ldrh	r2, [r7, #6]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d34d      	bcc.n	800702e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f9a:	d107      	bne.n	8006fac <UART_Start_Receive_IT+0x11c>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d103      	bne.n	8006fac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4a4b      	ldr	r2, [pc, #300]	; (80070d4 <UART_Start_Receive_IT+0x244>)
 8006fa8:	671a      	str	r2, [r3, #112]	; 0x70
 8006faa:	e002      	b.n	8006fb2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a4a      	ldr	r2, [pc, #296]	; (80070d8 <UART_Start_Receive_IT+0x248>)
 8006fb0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01a      	beq.n	8006ff8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fe6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fec:	e841 2300 	strex	r3, r2, [r1]
 8006ff0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e4      	bne.n	8006fc2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3308      	adds	r3, #8
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007002:	e853 3f00 	ldrex	r3, [r3]
 8007006:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800700e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3308      	adds	r3, #8
 8007016:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007018:	64ba      	str	r2, [r7, #72]	; 0x48
 800701a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800701e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007020:	e841 2300 	strex	r3, r2, [r1]
 8007024:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e5      	bne.n	8006ff8 <UART_Start_Receive_IT+0x168>
 800702c:	e04a      	b.n	80070c4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007036:	d107      	bne.n	8007048 <UART_Start_Receive_IT+0x1b8>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d103      	bne.n	8007048 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a26      	ldr	r2, [pc, #152]	; (80070dc <UART_Start_Receive_IT+0x24c>)
 8007044:	671a      	str	r2, [r3, #112]	; 0x70
 8007046:	e002      	b.n	800704e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4a25      	ldr	r2, [pc, #148]	; (80070e0 <UART_Start_Receive_IT+0x250>)
 800704c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d019      	beq.n	8007092 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007072:	677b      	str	r3, [r7, #116]	; 0x74
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
 800707e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800708a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e6      	bne.n	800705e <UART_Start_Receive_IT+0x1ce>
 8007090:	e018      	b.n	80070c4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	613b      	str	r3, [r7, #16]
   return(result);
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f043 0320 	orr.w	r3, r3, #32
 80070a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b0:	623b      	str	r3, [r7, #32]
 80070b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	69f9      	ldr	r1, [r7, #28]
 80070b6:	6a3a      	ldr	r2, [r7, #32]
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e6      	bne.n	8007092 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	378c      	adds	r7, #140	; 0x8c
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	080077ed 	.word	0x080077ed
 80070d8:	080074f5 	.word	0x080074f5
 80070dc:	08007393 	.word	0x08007393
 80070e0:	08007233 	.word	0x08007233

080070e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b095      	sub	sp, #84	; 0x54
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007100:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800710a:	643b      	str	r3, [r7, #64]	; 0x40
 800710c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007110:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e6      	bne.n	80070ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3308      	adds	r3, #8
 8007124:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	61fb      	str	r3, [r7, #28]
   return(result);
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007134:	f023 0301 	bic.w	r3, r3, #1
 8007138:	64bb      	str	r3, [r7, #72]	; 0x48
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3308      	adds	r3, #8
 8007140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007144:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e3      	bne.n	800711e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800715a:	2b01      	cmp	r3, #1
 800715c:	d118      	bne.n	8007190 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	e853 3f00 	ldrex	r3, [r3]
 800716a:	60bb      	str	r3, [r7, #8]
   return(result);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f023 0310 	bic.w	r3, r3, #16
 8007172:	647b      	str	r3, [r7, #68]	; 0x44
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800717c:	61bb      	str	r3, [r7, #24]
 800717e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007180:	6979      	ldr	r1, [r7, #20]
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	e841 2300 	strex	r3, r2, [r1]
 8007188:	613b      	str	r3, [r7, #16]
   return(result);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1e6      	bne.n	800715e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2220      	movs	r2, #32
 8007194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80071a4:	bf00      	nop
 80071a6:	3754      	adds	r7, #84	; 0x54
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff f996 	bl	8006500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071d4:	bf00      	nop
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f8:	61fb      	str	r3, [r7, #28]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	6979      	ldr	r1, [r7, #20]
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	613b      	str	r3, [r7, #16]
   return(result);
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e6      	bne.n	80071e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff f961 	bl	80064ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800722a:	bf00      	nop
 800722c:	3720      	adds	r7, #32
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b096      	sub	sp, #88	; 0x58
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007240:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800724a:	2b22      	cmp	r3, #34	; 0x22
 800724c:	f040 8095 	bne.w	800737a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800725a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800725e:	b2d9      	uxtb	r1, r3
 8007260:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007264:	b2da      	uxtb	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726a:	400a      	ands	r2, r1
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007280:	b29b      	uxth	r3, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d178      	bne.n	800738a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072ac:	653b      	str	r3, [r7, #80]	; 0x50
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072b6:	647b      	str	r3, [r7, #68]	; 0x44
 80072b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e6      	bne.n	8007298 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3308      	adds	r3, #8
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	623b      	str	r3, [r7, #32]
   return(result);
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	f023 0301 	bic.w	r3, r3, #1
 80072e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3308      	adds	r3, #8
 80072e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072ea:	633a      	str	r2, [r7, #48]	; 0x30
 80072ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072f2:	e841 2300 	strex	r3, r2, [r1]
 80072f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1e5      	bne.n	80072ca <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2220      	movs	r2, #32
 8007302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007310:	2b01      	cmp	r3, #1
 8007312:	d12e      	bne.n	8007372 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	60fb      	str	r3, [r7, #12]
   return(result);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0310 	bic.w	r3, r3, #16
 800732e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	69b9      	ldr	r1, [r7, #24]
 800733e:	69fa      	ldr	r2, [r7, #28]
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	617b      	str	r3, [r7, #20]
   return(result);
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e6      	bne.n	800731a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b10      	cmp	r3, #16
 8007358:	d103      	bne.n	8007362 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2210      	movs	r2, #16
 8007360:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff f8d2 	bl	8006514 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007370:	e00b      	b.n	800738a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fa f8bc 	bl	80014f0 <HAL_UART_RxCpltCallback>
}
 8007378:	e007      	b.n	800738a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699a      	ldr	r2, [r3, #24]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f042 0208 	orr.w	r2, r2, #8
 8007388:	619a      	str	r2, [r3, #24]
}
 800738a:	bf00      	nop
 800738c:	3758      	adds	r7, #88	; 0x58
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b096      	sub	sp, #88	; 0x58
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073aa:	2b22      	cmp	r3, #34	; 0x22
 80073ac:	f040 8095 	bne.w	80074da <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073be:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80073c0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80073c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073c8:	4013      	ands	r3, r2
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d4:	1c9a      	adds	r2, r3, #2
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d178      	bne.n	80074ea <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800740c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007416:	643b      	str	r3, [r7, #64]	; 0x40
 8007418:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800741c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e6      	bne.n	80073f8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3308      	adds	r3, #8
 8007430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	61fb      	str	r3, [r7, #28]
   return(result);
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	64bb      	str	r3, [r7, #72]	; 0x48
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3308      	adds	r3, #8
 8007448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800744a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e5      	bne.n	800742a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2220      	movs	r2, #32
 8007462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007470:	2b01      	cmp	r3, #1
 8007472:	d12e      	bne.n	80074d2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	e853 3f00 	ldrex	r3, [r3]
 8007486:	60bb      	str	r3, [r7, #8]
   return(result);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f023 0310 	bic.w	r3, r3, #16
 800748e:	647b      	str	r3, [r7, #68]	; 0x44
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	461a      	mov	r2, r3
 8007496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007498:	61bb      	str	r3, [r7, #24]
 800749a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749c:	6979      	ldr	r1, [r7, #20]
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	e841 2300 	strex	r3, r2, [r1]
 80074a4:	613b      	str	r3, [r7, #16]
   return(result);
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e6      	bne.n	800747a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	f003 0310 	and.w	r3, r3, #16
 80074b6:	2b10      	cmp	r3, #16
 80074b8:	d103      	bne.n	80074c2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2210      	movs	r2, #16
 80074c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff f822 	bl	8006514 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074d0:	e00b      	b.n	80074ea <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7fa f80c 	bl	80014f0 <HAL_UART_RxCpltCallback>
}
 80074d8:	e007      	b.n	80074ea <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699a      	ldr	r2, [r3, #24]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f042 0208 	orr.w	r2, r2, #8
 80074e8:	619a      	str	r2, [r3, #24]
}
 80074ea:	bf00      	nop
 80074ec:	3758      	adds	r7, #88	; 0x58
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b0a6      	sub	sp, #152	; 0x98
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007502:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752a:	2b22      	cmp	r3, #34	; 0x22
 800752c:	f040 814f 	bne.w	80077ce <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007536:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800753a:	e0f6      	b.n	800772a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007546:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800754a:	b2d9      	uxtb	r1, r3
 800754c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007550:	b2da      	uxtb	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007556:	400a      	ands	r2, r1
 8007558:	b2d2      	uxtb	r2, r2
 800755a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007582:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	2b00      	cmp	r3, #0
 800758c:	d053      	beq.n	8007636 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800758e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d011      	beq.n	80075be <UART_RxISR_8BIT_FIFOEN+0xca>
 800759a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800759e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00b      	beq.n	80075be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2201      	movs	r2, #1
 80075ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075b4:	f043 0201 	orr.w	r2, r3, #1
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d011      	beq.n	80075ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 80075ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00b      	beq.n	80075ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2202      	movs	r2, #2
 80075dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e4:	f043 0204 	orr.w	r2, r3, #4
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d011      	beq.n	800761e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80075fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00b      	beq.n	800761e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2204      	movs	r2, #4
 800760c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007614:	f043 0202 	orr.w	r2, r3, #2
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d006      	beq.n	8007636 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7fe ff69 	bl	8006500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d173      	bne.n	800772a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007656:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007664:	66bb      	str	r3, [r7, #104]	; 0x68
 8007666:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800766a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e4      	bne.n	8007642 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3308      	adds	r3, #8
 800767e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800768a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800768e:	f023 0301 	bic.w	r3, r3, #1
 8007692:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3308      	adds	r3, #8
 800769a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800769c:	657a      	str	r2, [r7, #84]	; 0x54
 800769e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e3      	bne.n	8007678 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d12e      	bne.n	8007724 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	f023 0310 	bic.w	r3, r3, #16
 80076e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ea:	643b      	str	r3, [r7, #64]	; 0x40
 80076ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e6      	bne.n	80076cc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	f003 0310 	and.w	r3, r3, #16
 8007708:	2b10      	cmp	r3, #16
 800770a:	d103      	bne.n	8007714 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2210      	movs	r2, #16
 8007712:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7fe fef9 	bl	8006514 <HAL_UARTEx_RxEventCallback>
 8007722:	e002      	b.n	800772a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7f9 fee3 	bl	80014f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800772a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800772e:	2b00      	cmp	r3, #0
 8007730:	d006      	beq.n	8007740 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007732:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	f47f aefe 	bne.w	800753c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007746:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800774a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800774e:	2b00      	cmp	r3, #0
 8007750:	d045      	beq.n	80077de <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007758:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800775c:	429a      	cmp	r2, r3
 800775e:	d23e      	bcs.n	80077de <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007776:	673b      	str	r3, [r7, #112]	; 0x70
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3308      	adds	r3, #8
 800777e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007780:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e5      	bne.n	8007760 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a14      	ldr	r2, [pc, #80]	; (80077e8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007798:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f043 0320 	orr.w	r3, r3, #32
 80077ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b8:	61bb      	str	r3, [r7, #24]
 80077ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6979      	ldr	r1, [r7, #20]
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	613b      	str	r3, [r7, #16]
   return(result);
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e6      	bne.n	800779a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077cc:	e007      	b.n	80077de <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	699a      	ldr	r2, [r3, #24]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f042 0208 	orr.w	r2, r2, #8
 80077dc:	619a      	str	r2, [r3, #24]
}
 80077de:	bf00      	nop
 80077e0:	3798      	adds	r7, #152	; 0x98
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	08007233 	.word	0x08007233

080077ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b0a8      	sub	sp, #160	; 0xa0
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077fa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007822:	2b22      	cmp	r3, #34	; 0x22
 8007824:	f040 8153 	bne.w	8007ace <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800782e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007832:	e0fa      	b.n	8007a2a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007846:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800784a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800784e:	4013      	ands	r3, r2
 8007850:	b29a      	uxth	r2, r3
 8007852:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007856:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785c:	1c9a      	adds	r2, r3, #2
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007868:	b29b      	uxth	r3, r3
 800786a:	3b01      	subs	r3, #1
 800786c:	b29a      	uxth	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800787e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007882:	f003 0307 	and.w	r3, r3, #7
 8007886:	2b00      	cmp	r3, #0
 8007888:	d053      	beq.n	8007932 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800788a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d011      	beq.n	80078ba <UART_RxISR_16BIT_FIFOEN+0xce>
 8007896:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800789a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00b      	beq.n	80078ba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2201      	movs	r2, #1
 80078a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b0:	f043 0201 	orr.w	r2, r3, #1
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d011      	beq.n	80078ea <UART_RxISR_16BIT_FIFOEN+0xfe>
 80078c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00b      	beq.n	80078ea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2202      	movs	r2, #2
 80078d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e0:	f043 0204 	orr.w	r2, r3, #4
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d011      	beq.n	800791a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80078f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2204      	movs	r2, #4
 8007908:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007910:	f043 0202 	orr.w	r2, r3, #2
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007920:	2b00      	cmp	r3, #0
 8007922:	d006      	beq.n	8007932 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fe fdeb 	bl	8006500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d175      	bne.n	8007a2a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800794c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800794e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007960:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007962:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007966:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800796e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e4      	bne.n	800793e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3308      	adds	r3, #8
 800797a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800798a:	f023 0301 	bic.w	r3, r3, #1
 800798e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3308      	adds	r3, #8
 8007998:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800799c:	65ba      	str	r2, [r7, #88]	; 0x58
 800799e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e1      	bne.n	8007974 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d12e      	bne.n	8007a24 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079dc:	f023 0310 	bic.w	r3, r3, #16
 80079e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079ea:	647b      	str	r3, [r7, #68]	; 0x44
 80079ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e6      	bne.n	80079cc <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	f003 0310 	and.w	r3, r3, #16
 8007a08:	2b10      	cmp	r3, #16
 8007a0a:	d103      	bne.n	8007a14 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2210      	movs	r2, #16
 8007a12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7fe fd79 	bl	8006514 <HAL_UARTEx_RxEventCallback>
 8007a22:	e002      	b.n	8007a2a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7f9 fd63 	bl	80014f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a2a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d006      	beq.n	8007a40 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007a32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f47f aefa 	bne.w	8007834 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a46:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a4a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d045      	beq.n	8007ade <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a58:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d23e      	bcs.n	8007ade <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3308      	adds	r3, #8
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	623b      	str	r3, [r7, #32]
   return(result);
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a76:	677b      	str	r3, [r7, #116]	; 0x74
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007a80:	633a      	str	r2, [r7, #48]	; 0x30
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e5      	bne.n	8007a60 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a14      	ldr	r2, [pc, #80]	; (8007ae8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007a98:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f043 0320 	orr.w	r3, r3, #32
 8007aae:	673b      	str	r3, [r7, #112]	; 0x70
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ab8:	61fb      	str	r3, [r7, #28]
 8007aba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	69b9      	ldr	r1, [r7, #24]
 8007abe:	69fa      	ldr	r2, [r7, #28]
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e6      	bne.n	8007a9a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007acc:	e007      	b.n	8007ade <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	699a      	ldr	r2, [r3, #24]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0208 	orr.w	r2, r2, #8
 8007adc:	619a      	str	r2, [r3, #24]
}
 8007ade:	bf00      	nop
 8007ae0:	37a0      	adds	r7, #160	; 0xa0
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	08007393 	.word	0x08007393

08007aec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_UARTEx_DisableFifoMode+0x16>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e027      	b.n	8007b8e <HAL_UARTEx_DisableFifoMode+0x66>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2224      	movs	r2, #36	; 0x24
 8007b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0201 	bic.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d101      	bne.n	8007bb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bae:	2302      	movs	r3, #2
 8007bb0:	e02d      	b.n	8007c0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2224      	movs	r2, #36	; 0x24
 8007bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0201 	bic.w	r2, r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f850 	bl	8007c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d101      	bne.n	8007c2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	e02d      	b.n	8007c8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2224      	movs	r2, #36	; 0x24
 8007c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0201 	bic.w	r2, r2, #1
 8007c54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f812 	bl	8007c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d108      	bne.n	8007cb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cb4:	e031      	b.n	8007d1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cba:	2308      	movs	r3, #8
 8007cbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	0e5b      	lsrs	r3, r3, #25
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	0f5b      	lsrs	r3, r3, #29
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	7b3a      	ldrb	r2, [r7, #12]
 8007ce2:	4911      	ldr	r1, [pc, #68]	; (8007d28 <UARTEx_SetNbDataToProcess+0x94>)
 8007ce4:	5c8a      	ldrb	r2, [r1, r2]
 8007ce6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cea:	7b3a      	ldrb	r2, [r7, #12]
 8007cec:	490f      	ldr	r1, [pc, #60]	; (8007d2c <UARTEx_SetNbDataToProcess+0x98>)
 8007cee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	7b7a      	ldrb	r2, [r7, #13]
 8007d00:	4909      	ldr	r1, [pc, #36]	; (8007d28 <UARTEx_SetNbDataToProcess+0x94>)
 8007d02:	5c8a      	ldrb	r2, [r1, r2]
 8007d04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d08:	7b7a      	ldrb	r2, [r7, #13]
 8007d0a:	4908      	ldr	r1, [pc, #32]	; (8007d2c <UARTEx_SetNbDataToProcess+0x98>)
 8007d0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	08007dd0 	.word	0x08007dd0
 8007d2c:	08007dd8 	.word	0x08007dd8

08007d30 <memset>:
 8007d30:	4402      	add	r2, r0
 8007d32:	4603      	mov	r3, r0
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d100      	bne.n	8007d3a <memset+0xa>
 8007d38:	4770      	bx	lr
 8007d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d3e:	e7f9      	b.n	8007d34 <memset+0x4>

08007d40 <__libc_init_array>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	4d0d      	ldr	r5, [pc, #52]	; (8007d78 <__libc_init_array+0x38>)
 8007d44:	4c0d      	ldr	r4, [pc, #52]	; (8007d7c <__libc_init_array+0x3c>)
 8007d46:	1b64      	subs	r4, r4, r5
 8007d48:	10a4      	asrs	r4, r4, #2
 8007d4a:	2600      	movs	r6, #0
 8007d4c:	42a6      	cmp	r6, r4
 8007d4e:	d109      	bne.n	8007d64 <__libc_init_array+0x24>
 8007d50:	4d0b      	ldr	r5, [pc, #44]	; (8007d80 <__libc_init_array+0x40>)
 8007d52:	4c0c      	ldr	r4, [pc, #48]	; (8007d84 <__libc_init_array+0x44>)
 8007d54:	f000 f818 	bl	8007d88 <_init>
 8007d58:	1b64      	subs	r4, r4, r5
 8007d5a:	10a4      	asrs	r4, r4, #2
 8007d5c:	2600      	movs	r6, #0
 8007d5e:	42a6      	cmp	r6, r4
 8007d60:	d105      	bne.n	8007d6e <__libc_init_array+0x2e>
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d68:	4798      	blx	r3
 8007d6a:	3601      	adds	r6, #1
 8007d6c:	e7ee      	b.n	8007d4c <__libc_init_array+0xc>
 8007d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d72:	4798      	blx	r3
 8007d74:	3601      	adds	r6, #1
 8007d76:	e7f2      	b.n	8007d5e <__libc_init_array+0x1e>
 8007d78:	08007de8 	.word	0x08007de8
 8007d7c:	08007de8 	.word	0x08007de8
 8007d80:	08007de8 	.word	0x08007de8
 8007d84:	08007dec 	.word	0x08007dec

08007d88 <_init>:
 8007d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8a:	bf00      	nop
 8007d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8e:	bc08      	pop	{r3}
 8007d90:	469e      	mov	lr, r3
 8007d92:	4770      	bx	lr

08007d94 <_fini>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	bf00      	nop
 8007d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9a:	bc08      	pop	{r3}
 8007d9c:	469e      	mov	lr, r3
 8007d9e:	4770      	bx	lr
